cscope 15 $HOME/Desktop/test/kexec/kexec-tools-2.0.7 -q 0000005146 0000720378
	@include/boot/beoboot.h

3 
	sbeoboŸ_hódî
 {

4 
	mmagic
[4];

5 
uöt8_t
 
	m¨ch
;

6 
uöt8_t
 
	mÊags
;

7 
uöt16_t
 
	mcmdlöe_size
;

13 #ifde‡
__Æpha__


14 
	mkî√l_size
;

15 
	möôrd_size
;

17 
uöt32_t
 
	mkî√l_size
;

18 
uöt32_t
 
	möôrd_size
;

21 
	#BEOBOOT_MAGIC
 "BeoB"

	)

22 
	#BEOBOOT_ARCH_I386
 1

	)

23 
	#BEOBOOT_ARCH_ALPHA
 2

	)

24 
	#BEOBOOT_ARCH_PPC
 3

	)

25 
	#BEOBOOT_ARCH_PPC64
 4

	)

26 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

27 
	#BEOBOOT_ARCH
 
BEOBOOT_ARCH_I386


	)

28 #ñi‡
deföed
(
__Æpha__
)

29 
	#BEOBOOT_ARCH
 
BEOBOOT_ARCH_ALPHA


	)

30 #ñi‡
deföed
(
powîpc
)

31 
	#BEOBOOT_ARCH
 
BEOBOOT_ARCH_PPC


	)

32 #ñi‡
deföed
(
__powîpc64__
)

33 
	#BEOBOOT_ARCH
 
BEOBOOT_ARCH_PPC64


	)

35 #îr‹ 
Unsuµ‹ãd
 
¨chôe˘uª
.

37 
	#BEOBOOT_INITRD_PRESENT
 1

	)

	@include/boot/elf_boot.h

1 #i‚de‡
ELF_BOOT_H


2 
	#ELF_BOOT_H


	)

18 
	#ELF_BOOT_MAGIC
 0x0E1FB007

	)

20 #i‚de‡
ASSEMBLY


21 
	~<°döt.h
>

22 
uöt16_t
 
	tElf_HÆf
;

23 
uöt32_t
 
	tElf_W‹d
;

24 
uöt64_t
 
	tElf_Xw‹d
;

30 
	sElf_Bhdr


32 
Elf_W‹d
 
	mb_sig«tuª
;

33 
Elf_W‹d
 
	mb_size
;

34 
Elf_HÆf
 
	mb_checksum
;

35 
Elf_HÆf
 
	mb_ªc‹ds
;

36 } 
	tElf_Bhdr
;

42 
	sElf_Nhdr


44 
Elf_W‹d
 
	mn_«mesz
;

45 
Elf_W‹d
 
	mn_descsz
;

46 
Elf_W‹d
 
	mn_ty≥
;

47 } 
	tElf_Nhdr
;

53 
	#ELF_NOTE_BOOT
 "ELFBoŸ"

	)

55 
	#EIN_PROGRAM_NAME
 0x00000001

	)

57 
	#EIN_PROGRAM_VERSION
 0x00000002

	)

59 
	#EIN_PROGRAM_CHECKSUM
 0x00000003

	)

66 
	#LIN_COMMAND_LINE_PTR
 0x00000006

	)

68 
	#LIN_INITRD_START_PTR
 0x00000007

	)

70 
	#LIN_INITRD_SIZE_PTR
 0x00000008

	)

72 
	#LIN_VID_MODE_PTR
 0x00000009

	)

77 
	#EB_PARAM_NOTE
 "EthîboŸ"

	)

78 
	#EB_IA64_SYSTAB
 0x00000001

	)

79 
	#EB_IA64_MEMMAP
 0x00000002

	)

80 
	#EB_IA64_FPSWA
 0x00000003

	)

81 
	#EB_IA64_CONINFO
 0x00000004

	)

82 
	#EB_BOOTP_DATA
 0x00000005

	)

83 
	#EB_HEADER
 0x00000006

	)

84 
	#EB_IA64_IMAGE_HANDLE
 0x00000007

	)

85 
	#EB_I386_MEMMAP
 0x00000008

	)

91 
	#EBN_FIRMWARE_TYPE
 0x00000001

	)

95 
	#EBN_BOOTLOADER_NAME
 0x00000002

	)

97 
	#EBN_BOOTLOADER_VERSION
 0x00000003

	)

99 
	#EBN_COMMAND_LINE
 0x00000004

	)

	@include/boot/linuxbios_tables.h

1 #i‚de‡
LINUXBIOS_TABLES_H


2 
	#LINUXBIOS_TABLES_H


	)

4 
	~<°döt.h
>

35 
	slb_hódî


37 
uöt8_t
 
	msig«tuª
[4];

38 
uöt32_t
 
	mhódî_byãs
;

39 
uöt32_t
 
	mhódî_checksum
;

40 
uöt32_t
 
	mèbÀ_byãs
;

41 
uöt32_t
 
	mèbÀ_checksum
;

42 
uöt32_t
 
	mèbÀ_íåõs
;

51 
	slb_ªc‹d
 {

52 
uöt32_t
 
	mèg
;

53 
uöt32_t
 
	msize
;

56 
	#LB_TAG_UNUSED
 0x0000

	)

58 
	#LB_TAG_MEMORY
 0x0001

	)

60 
	slb_mem‹y_ønge
 {

61 
uöt64_t
 
	m°¨t
;

62 
uöt64_t
 
	msize
;

63 
uöt32_t
 
	mty≥
;

64 
	#LB_MEM_RAM
 1

	)

65 
	#LB_MEM_RESERVED
 2

	)

69 
	slb_mem‹y
 {

70 
uöt32_t
 
	mèg
;

71 
uöt32_t
 
	msize
;

72 
lb_mem‹y_ønge
 
	mm≠
[0];

75 
	#LB_TAG_HWRPB
 0x0002

	)

76 
	slb_hwΩb
 {

77 
uöt32_t
 
	mèg
;

78 
uöt32_t
 
	msize
;

79 
uöt64_t
 
	mhwΩb
;

	@include/config.h

8 
	#HAVE_INTTYPES_H
 1

	)

17 
	#HAVE_LIBZ
 1

	)

20 
	#HAVE_MEMORY_H
 1

	)

23 
	#HAVE_STDINT_H
 1

	)

26 
	#HAVE_STDLIB_H
 1

	)

29 
	#HAVE_STRINGS_H
 1

	)

32 
	#HAVE_STRING_H
 1

	)

35 
	#HAVE_SYS_STAT_H
 1

	)

38 
	#HAVE_SYS_TYPES_H
 1

	)

41 
	#HAVE_UNISTD_H
 1

	)

44 
	#PACKAGE_BUGREPORT
 ""

	)

47 
	#PACKAGE_DATE
 "09 Ju√ 2014"

	)

50 
	#PACKAGE_NAME
 "kexec-toﬁs"

	)

53 
	#PACKAGE_STRING
 "kexec-toﬁ†2.0.7"

	)

56 
	#PACKAGE_TARNAME
 "kexec-toﬁs"

	)

59 
	#PACKAGE_URL
 ""

	)

62 
	#PACKAGE_VERSION
 "2.0.7"

	)

65 
	#STDC_HEADERS
 1

	)

	@include/elf.h

27 #i‚de‡
ELF_H


28 
	#ELF_H


	)

32 
	~<°döt.h
>

33 
	~<°ddef.h
>

36 
uöt16_t
 
	tElf32_HÆf
;

37 
uöt16_t
 
	tElf64_HÆf
;

40 
uöt32_t
 
	tElf32_W‹d
;

41 
öt32_t
 
	tElf32_Sw‹d
;

42 
uöt32_t
 
	tElf64_W‹d
;

43 
öt32_t
 
	tElf64_Sw‹d
;

46 
uöt64_t
 
	tElf32_Xw‹d
;

47 
öt64_t
 
	tElf32_Sxw‹d
;

48 
uöt64_t
 
	tElf64_Xw‹d
;

49 
öt64_t
 
	tElf64_Sxw‹d
;

52 
uöt32_t
 
	tElf32_Addr
;

53 
uöt64_t
 
	tElf64_Addr
;

56 
uöt32_t
 
	tElf32_Off
;

57 
uöt64_t
 
	tElf64_Off
;

60 
uöt16_t
 
	tElf32_Se˘i⁄
;

61 
uöt16_t
 
	tElf64_Se˘i⁄
;

64 
uöt32_t
 
	tElf32_Symndx
;

65 
uöt64_t
 
	tElf64_Symndx
;

68 
Elf32_HÆf
 
	tElf32_Vîsym
;

69 
Elf64_HÆf
 
	tElf64_Vîsym
;

73 
	#EI_NIDENT
 (16)

	)

77 
	me_idít
[
EI_NIDENT
];

78 
Elf32_HÆf
 
	me_ty≥
;

79 
Elf32_HÆf
 
	me_machöe
;

80 
Elf32_W‹d
 
	me_vîsi⁄
;

81 
Elf32_Addr
 
	me_íåy
;

82 
Elf32_Off
 
	me_phoff
;

83 
Elf32_Off
 
	me_shoff
;

84 
Elf32_W‹d
 
	me_Êags
;

85 
Elf32_HÆf
 
	me_ehsize
;

86 
Elf32_HÆf
 
	me_phítsize
;

87 
Elf32_HÆf
 
	me_phnum
;

88 
Elf32_HÆf
 
	me_shítsize
;

89 
Elf32_HÆf
 
	me_shnum
;

90 
Elf32_HÆf
 
	me_sh°∫dx
;

91 } 
	tElf32_Ehdr
;

95 
	me_idít
[
EI_NIDENT
];

96 
Elf64_HÆf
 
	me_ty≥
;

97 
Elf64_HÆf
 
	me_machöe
;

98 
Elf64_W‹d
 
	me_vîsi⁄
;

99 
Elf64_Addr
 
	me_íåy
;

100 
Elf64_Off
 
	me_phoff
;

101 
Elf64_Off
 
	me_shoff
;

102 
Elf64_W‹d
 
	me_Êags
;

103 
Elf64_HÆf
 
	me_ehsize
;

104 
Elf64_HÆf
 
	me_phítsize
;

105 
Elf64_HÆf
 
	me_phnum
;

106 
Elf64_HÆf
 
	me_shítsize
;

107 
Elf64_HÆf
 
	me_shnum
;

108 
Elf64_HÆf
 
	me_sh°∫dx
;

109 } 
	tElf64_Ehdr
;

115 
	#EI_MAG0
 0

	)

116 
	#ELFMAG0
 0x7‡

	)

118 
	#EI_MAG1
 1

	)

119 
	#ELFMAG1
 'E'

	)

121 
	#EI_MAG2
 2

	)

122 
	#ELFMAG2
 'L'

	)

124 
	#EI_MAG3
 3

	)

125 
	#ELFMAG3
 'F'

	)

128 
	#ELFMAG
 "\177ELF"

	)

129 
	#SELFMAG
 4

	)

131 
	#EI_CLASS
 4

	)

132 
	#ELFCLASSNONE
 0

	)

133 
	#ELFCLASS32
 1

	)

134 
	#ELFCLASS64
 2

	)

135 
	#ELFCLASSNUM
 3

	)

137 
	#EI_DATA
 5

	)

138 
	#ELFDATANONE
 0

	)

139 
	#ELFDATA2LSB
 1

	)

140 
	#ELFDATA2MSB
 2

	)

141 
	#ELFDATANUM
 3

	)

143 
	#EI_VERSION
 6

	)

146 
	#EI_OSABI
 7

	)

147 
	#ELFOSABI_NONE
 0

	)

148 
	#ELFOSABI_SYSV
 0

	)

149 
	#ELFOSABI_HPUX
 1

	)

150 
	#ELFOSABI_NETBSD
 2

	)

151 
	#ELFOSABI_LINUX
 3

	)

152 
	#ELFOSABI_SOLARIS
 6

	)

153 
	#ELFOSABI_AIX
 7

	)

154 
	#ELFOSABI_IRIX
 8

	)

155 
	#ELFOSABI_FREEBSD
 9

	)

156 
	#ELFOSABI_TRU64
 10

	)

157 
	#ELFOSABI_MODESTO
 11

	)

158 
	#ELFOSABI_OPENBSD
 12

	)

159 
	#ELFOSABI_ARM
 97

	)

160 
	#ELFOSABI_STANDALONE
 255

	)

162 
	#EI_ABIVERSION
 8

	)

164 
	#EI_PAD
 9

	)

168 
	#ET_NONE
 0

	)

169 
	#ET_REL
 1

	)

170 
	#ET_EXEC
 2

	)

171 
	#ET_DYN
 3

	)

172 
	#ET_CORE
 4

	)

173 
	#ET_NUM
 5

	)

174 
	#ET_LOOS
 0x„00

	)

175 
	#ET_HIOS
 0x„f‡

	)

176 
	#ET_LOPROC
 0xff00

	)

177 
	#ET_HIPROC
 0xfff‡

	)

181 
	#EM_NONE
 0

	)

182 
	#EM_M32
 1

	)

183 
	#EM_SPARC
 2

	)

184 
	#EM_386
 3

	)

185 
	#EM_68K
 4

	)

186 
	#EM_88K
 5

	)

187 
	#EM_486
 6

	)

188 
	#EM_860
 7

	)

189 
	#EM_MIPS
 8

	)

190 
	#EM_S370
 9

	)

191 
	#EM_MIPS_RS4_BE
 10

	)

192 
	#EM_RS6000
 11

	)

194 
	#EM_PARISC
 15

	)

195 
	#EM_nCUBE
 16

	)

196 
	#EM_VPP500
 17

	)

197 
	#EM_SPARC32PLUS
 18

	)

198 
	#EM_960
 19

	)

199 
	#EM_PPC
 20

	)

200 
	#EM_PPC64
 21

	)

201 
	#EM_S390
 22

	)

203 
	#EM_V800
 36

	)

204 
	#EM_FR20
 37

	)

205 
	#EM_RH32
 38

	)

206 
	#EM_RCE
 39

	)

207 
	#EM_ARM
 40

	)

208 
	#EM_FAKE_ALPHA
 41

	)

209 
	#EM_SH
 42

	)

210 
	#EM_SPARCV9
 43

	)

211 
	#EM_TRICORE
 44

	)

212 
	#EM_ARC
 45

	)

213 
	#EM_H8_300
 46

	)

214 
	#EM_H8_300H
 47

	)

215 
	#EM_H8S
 48

	)

216 
	#EM_H8_500
 49

	)

217 
	#EM_IA_64
 50

	)

218 
	#EM_MIPS_X
 51

	)

219 
	#EM_COLDFIRE
 52

	)

220 
	#EM_68HC12
 53

	)

221 
	#EM_MMA
 54

	)

222 
	#EM_PCP
 55

	)

223 
	#EM_NCPU
 56

	)

224 
	#EM_NDR1
 57

	)

225 
	#EM_STARCORE
 58

	)

226 
	#EM_ME16
 59

	)

227 
	#EM_ST100
 60

	)

228 
	#EM_TINYJ
 61

	)

229 
	#EM_X86_64
 62

	)

230 
	#EM_PDSP
 63

	)

232 
	#EM_FX66
 66

	)

233 
	#EM_ST9PLUS
 67

	)

234 
	#EM_ST7
 68

	)

235 
	#EM_68HC16
 69

	)

236 
	#EM_68HC11
 70

	)

237 
	#EM_68HC08
 71

	)

238 
	#EM_68HC05
 72

	)

239 
	#EM_SVX
 73

	)

240 
	#EM_ST19
 74

	)

241 
	#EM_VAX
 75

	)

242 
	#EM_CRIS
 76

	)

243 
	#EM_JAVELIN
 77

	)

244 
	#EM_FIREPATH
 78

	)

245 
	#EM_ZSP
 79

	)

246 
	#EM_MMIX
 80

	)

247 
	#EM_HUANY
 81

	)

248 
	#EM_PRISM
 82

	)

249 
	#EM_AVR
 83

	)

250 
	#EM_FR30
 84

	)

251 
	#EM_D10V
 85

	)

252 
	#EM_D30V
 86

	)

253 
	#EM_V850
 87

	)

254 
	#EM_M32R
 88

	)

255 
	#EM_MN10300
 89

	)

256 
	#EM_MN10200
 90

	)

257 
	#EM_PJ
 91

	)

258 
	#EM_OPENRISC
 92

	)

259 
	#EM_ARC_A5
 93

	)

260 
	#EM_XTENSA
 94

	)

261 
	#EM_NUM
 95

	)

267 
	#EM_ALPHA
 0x9026

	)

271 
	#EV_NONE
 0

	)

272 
	#EV_CURRENT
 1

	)

273 
	#EV_NUM
 2

	)

279 
Elf32_W‹d
 
	msh_«me
;

280 
Elf32_W‹d
 
	msh_ty≥
;

281 
Elf32_W‹d
 
	msh_Êags
;

282 
Elf32_Addr
 
	msh_addr
;

283 
Elf32_Off
 
	msh_off£t
;

284 
Elf32_W‹d
 
	msh_size
;

285 
Elf32_W‹d
 
	msh_lök
;

286 
Elf32_W‹d
 
	msh_öfo
;

287 
Elf32_W‹d
 
	msh_addølign
;

288 
Elf32_W‹d
 
	msh_ítsize
;

289 } 
	tElf32_Shdr
;

293 
Elf64_W‹d
 
	msh_«me
;

294 
Elf64_W‹d
 
	msh_ty≥
;

295 
Elf64_Xw‹d
 
	msh_Êags
;

296 
Elf64_Addr
 
	msh_addr
;

297 
Elf64_Off
 
	msh_off£t
;

298 
Elf64_Xw‹d
 
	msh_size
;

299 
Elf64_W‹d
 
	msh_lök
;

300 
Elf64_W‹d
 
	msh_öfo
;

301 
Elf64_Xw‹d
 
	msh_addølign
;

302 
Elf64_Xw‹d
 
	msh_ítsize
;

303 } 
	tElf64_Shdr
;

307 
	#SHN_UNDEF
 0

	)

308 
	#SHN_LORESERVE
 0xff00

	)

309 
	#SHN_LOPROC
 0xff00

	)

310 
	#SHN_HIPROC
 0xff1‡

	)

311 
	#SHN_LOOS
 0xff20

	)

312 
	#SHN_HIOS
 0xff3‡

	)

313 
	#SHN_ABS
 0xfff1

	)

314 
	#SHN_COMMON
 0xfff2

	)

315 
	#SHN_XINDEX
 0xfff‡

	)

316 
	#SHN_HIRESERVE
 0xfff‡

	)

320 
	#SHT_NULL
 0

	)

321 
	#SHT_PROGBITS
 1

	)

322 
	#SHT_SYMTAB
 2

	)

323 
	#SHT_STRTAB
 3

	)

324 
	#SHT_RELA
 4

	)

325 
	#SHT_HASH
 5

	)

326 
	#SHT_DYNAMIC
 6

	)

327 
	#SHT_NOTE
 7

	)

328 
	#SHT_NOBITS
 8

	)

329 
	#SHT_REL
 9

	)

330 
	#SHT_SHLIB
 10

	)

331 
	#SHT_DYNSYM
 11

	)

332 
	#SHT_INIT_ARRAY
 14

	)

333 
	#SHT_FINI_ARRAY
 15

	)

334 
	#SHT_PREINIT_ARRAY
 16

	)

335 
	#SHT_GROUP
 17

	)

336 
	#SHT_SYMTAB_SHNDX
 18

	)

337 
	#SHT_NUM
 19

	)

338 
	#SHT_LOOS
 0x60000000

	)

339 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

340 
	#SHT_CHECKSUM
 0x6ffffff8

	)

341 
	#SHT_LOSUNW
 0x6fffffÁ

	)

342 
	#SHT_SUNW_move
 0x6fffffÁ

	)

343 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

344 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

345 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

346 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

347 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

348 
	#SHT_HISUNW
 0x6ffffff‡

	)

349 
	#SHT_HIOS
 0x6ffffff‡

	)

350 
	#SHT_LOPROC
 0x70000000

	)

351 
	#SHT_HIPROC
 0x7ffffff‡

	)

352 
	#SHT_LOUSER
 0x80000000

	)

353 
	#SHT_HIUSER
 0x8ffffff‡

	)

357 
	#SHF_WRITE
 (1 << 0Ë

	)

358 
	#SHF_ALLOC
 (1 << 1Ë

	)

359 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

360 
	#SHF_MERGE
 (1 << 4Ë

	)

361 
	#SHF_STRINGS
 (1 << 5Ë

	)

362 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

363 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

364 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

366 
	#SHF_GROUP
 (1 << 9Ë

	)

367 
	#SHF_TLS
 (1 << 10Ë

	)

368 
	#SHF_MASKOS
 0x0ff00000

	)

369 
	#SHF_MASKPROC
 0xf0000000

	)

372 
	#GRP_COMDAT
 0x1

	)

378 
Elf32_W‹d
 
	m°_«me
;

379 
Elf32_Addr
 
	m°_vÆue
;

380 
Elf32_W‹d
 
	m°_size
;

381 
	m°_öfo
;

382 
	m°_Ÿhî
;

383 
Elf32_Se˘i⁄
 
	m°_shndx
;

384 } 
	tElf32_Sym
;

388 
Elf64_W‹d
 
	m°_«me
;

389 
	m°_öfo
;

390 
	m°_Ÿhî
;

391 
Elf64_Se˘i⁄
 
	m°_shndx
;

392 
Elf64_Addr
 
	m°_vÆue
;

393 
Elf64_Xw‹d
 
	m°_size
;

394 } 
	tElf64_Sym
;

401 
Elf32_HÆf
 
	msi_boundto
;

402 
Elf32_HÆf
 
	msi_Êags
;

403 } 
	tElf32_Symöfo
;

407 
Elf64_HÆf
 
	msi_boundto
;

408 
Elf64_HÆf
 
	msi_Êags
;

409 } 
	tElf64_Symöfo
;

412 
	#SYMINFO_BT_SELF
 0xfff‡

	)

413 
	#SYMINFO_BT_PARENT
 0xff„

	)

414 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

417 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

418 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

419 
	#SYMINFO_FLG_COPY
 0x0004

	)

420 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

423 
	#SYMINFO_NONE
 0

	)

424 
	#SYMINFO_CURRENT
 1

	)

425 
	#SYMINFO_NUM
 2

	)

430 
	#SHN_UNDEF
 0

	)

434 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

435 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

436 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

439 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

440 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

441 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

445 
	#STB_LOCAL
 0

	)

446 
	#STB_GLOBAL
 1

	)

447 
	#STB_WEAK
 2

	)

448 
	#STB_NUM
 3

	)

449 
	#STB_LOOS
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_HIOS
 12

	)

466 
	#STT_LOPROC
 13

	)

467 
	#STT_HIPROC
 15

	)

474 
	#STN_UNDEF
 0

	)

479 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

482 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

485 
	#STV_DEFAULT
 0

	)

486 
	#STV_INTERNAL
 1

	)

487 
	#STV_HIDDEN
 2

	)

488 
	#STV_PROTECTED
 3

	)

495 
Elf32_Addr
 
	mr_off£t
;

496 
Elf32_W‹d
 
	mr_öfo
;

497 } 
	tElf32_Rñ
;

506 
Elf64_Addr
 
	mr_off£t
;

507 
Elf64_Xw‹d
 
	mr_öfo
;

508 } 
	tElf64_Rñ
;

514 
Elf32_Addr
 
	mr_off£t
;

515 
Elf32_W‹d
 
	mr_öfo
;

516 
Elf32_Sw‹d
 
	mr_addíd
;

517 } 
	tElf32_Rña
;

521 
Elf64_Addr
 
	mr_off£t
;

522 
Elf64_Xw‹d
 
	mr_öfo
;

523 
Elf64_Sxw‹d
 
	mr_addíd
;

524 } 
	tElf64_Rña
;

528 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

529 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

530 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

532 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

533 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

534 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

540 
Elf32_W‹d
 
	mp_ty≥
;

541 
Elf32_Off
 
	mp_off£t
;

542 
Elf32_Addr
 
	mp_vaddr
;

543 
Elf32_Addr
 
	mp_∑ddr
;

544 
Elf32_W‹d
 
	mp_fûesz
;

545 
Elf32_W‹d
 
	mp_memsz
;

546 
Elf32_W‹d
 
	mp_Êags
;

547 
Elf32_W‹d
 
	mp_Æign
;

548 } 
	tElf32_Phdr
;

552 
Elf64_W‹d
 
	mp_ty≥
;

553 
Elf64_W‹d
 
	mp_Êags
;

554 
Elf64_Off
 
	mp_off£t
;

555 
Elf64_Addr
 
	mp_vaddr
;

556 
Elf64_Addr
 
	mp_∑ddr
;

557 
Elf64_Xw‹d
 
	mp_fûesz
;

558 
Elf64_Xw‹d
 
	mp_memsz
;

559 
Elf64_Xw‹d
 
	mp_Æign
;

560 } 
	tElf64_Phdr
;

564 
	#PT_NULL
 0

	)

565 
	#PT_LOAD
 1

	)

566 
	#PT_DYNAMIC
 2

	)

567 
	#PT_INTERP
 3

	)

568 
	#PT_NOTE
 4

	)

569 
	#PT_SHLIB
 5

	)

570 
	#PT_PHDR
 6

	)

571 
	#PT_TLS
 7

	)

572 
	#PT_NUM
 8

	)

573 
	#PT_LOOS
 0x60000000

	)

574 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

575 
	#PT_GNU_STACK
 0x6474e551

	)

576 
	#PT_LOSUNW
 0x6fffffÁ

	)

577 
	#PT_SUNWBSS
 0x6fffffÁ

	)

578 
	#PT_SUNWSTACK
 0x6ffffffb

	)

579 
	#PT_HISUNW
 0x6fffffff

	)

580 
	#PT_HIOS
 0x6ffffff‡

	)

581 
	#PT_LOPROC
 0x70000000

	)

582 
	#PT_HIPROC
 0x7ffffff‡

	)

586 
	#PF_X
 (1 << 0Ë

	)

587 
	#PF_W
 (1 << 1Ë

	)

588 
	#PF_R
 (1 << 2Ë

	)

589 
	#PF_MASKOS
 0x0ff00000

	)

590 
	#PF_MASKPROC
 0xf0000000

	)

594 
	#NT_PRSTATUS
 1

	)

595 
	#NT_FPREGSET
 2

	)

596 
	#NT_PRPSINFO
 3

	)

597 
	#NT_PRXREG
 4

	)

598 
	#NT_TASKSTRUCT
 4

	)

599 
	#NT_PLATFORM
 5

	)

600 
	#NT_AUXV
 6

	)

601 
	#NT_GWINDOWS
 7

	)

602 
	#NT_ASRS
 8

	)

603 
	#NT_PSTATUS
 10

	)

604 
	#NT_PSINFO
 13

	)

605 
	#NT_PRCRED
 14

	)

606 
	#NT_UTSNAME
 15

	)

607 
	#NT_LWPSTATUS
 16

	)

608 
	#NT_LWPSINFO
 17

	)

609 
	#NT_PRFPXREG
 20

	)

613 
	#NT_VERSION
 1

	)

620 
Elf32_Sw‹d
 
	md_èg
;

623 
Elf32_W‹d
 
	md_vÆ
;

624 
Elf32_Addr
 
	md_±r
;

625 } 
	md_un
;

626 } 
	tElf32_Dyn
;

630 
Elf64_Sxw‹d
 
	md_èg
;

633 
Elf64_Xw‹d
 
	md_vÆ
;

634 
Elf64_Addr
 
	md_±r
;

635 } 
	md_un
;

636 } 
	tElf64_Dyn
;

640 
	#DT_NULL
 0

	)

641 
	#DT_NEEDED
 1

	)

642 
	#DT_PLTRELSZ
 2

	)

643 
	#DT_PLTGOT
 3

	)

644 
	#DT_HASH
 4

	)

645 
	#DT_STRTAB
 5

	)

646 
	#DT_SYMTAB
 6

	)

647 
	#DT_RELA
 7

	)

648 
	#DT_RELASZ
 8

	)

649 
	#DT_RELAENT
 9

	)

650 
	#DT_STRSZ
 10

	)

651 
	#DT_SYMENT
 11

	)

652 
	#DT_INIT
 12

	)

653 
	#DT_FINI
 13

	)

654 
	#DT_SONAME
 14

	)

655 
	#DT_RPATH
 15

	)

656 
	#DT_SYMBOLIC
 16

	)

657 
	#DT_REL
 17

	)

658 
	#DT_RELSZ
 18

	)

659 
	#DT_RELENT
 19

	)

660 
	#DT_PLTREL
 20

	)

661 
	#DT_DEBUG
 21

	)

662 
	#DT_TEXTREL
 22

	)

663 
	#DT_JMPREL
 23

	)

664 
	#DT_BIND_NOW
 24

	)

665 
	#DT_INIT_ARRAY
 25

	)

666 
	#DT_FINI_ARRAY
 26

	)

667 
	#DT_INIT_ARRAYSZ
 27

	)

668 
	#DT_FINI_ARRAYSZ
 28

	)

669 
	#DT_RUNPATH
 29

	)

670 
	#DT_FLAGS
 30

	)

671 
	#DT_ENCODING
 32

	)

672 
	#DT_PREINIT_ARRAY
 32

	)

673 
	#DT_PREINIT_ARRAYSZ
 33

	)

674 
	#DT_NUM
 34

	)

675 
	#DT_LOOS
 0x60000000

	)

676 
	#DT_HIOS
 0x6ffffff‡

	)

677 
	#DT_LOPROC
 0x70000000

	)

678 
	#DT_HIPROC
 0x7ffffff‡

	)

679 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

684 
	#DT_VALRNGLO
 0x6ffffd00

	)

685 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

686 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

687 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

688 
	#DT_CHECKSUM
 0x6ffffdf8

	)

689 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

690 
	#DT_MOVEENT
 0x6ffffdÁ

	)

691 
	#DT_MOVESZ
 0x6ffffdfb

	)

692 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

693 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

695 
	#DT_SYMINSZ
 0x6ffffd„

	)

696 
	#DT_SYMINENT
 0x6ffffdf‡

	)

697 
	#DT_VALRNGHI
 0x6ffffdff

	)

698 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

699 
	#DT_VALNUM
 12

	)

706 
	#DT_ADDRRNGLO
 0x6fff„00

	)

707 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

708 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

709 
	#DT_CONFIG
 0x6fff„Á

	)

710 
	#DT_DEPAUDIT
 0x6fff„fb

	)

711 
	#DT_AUDIT
 0x6fff„f¯

	)

712 
	#DT_PLTPAD
 0x6fff„fd

	)

713 
	#DT_MOVETAB
 0x6fff„„

	)

714 
	#DT_SYMINFO
 0x6fff„f‡

	)

715 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

716 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

717 
	#DT_ADDRNUM
 10

	)

721 
	#DT_VERSYM
 0x6ffffff0

	)

723 
	#DT_RELACOUNT
 0x6ffffff9

	)

724 
	#DT_RELCOUNT
 0x6fffffÁ

	)

727 
	#DT_FLAGS_1
 0x6ffffffb

	)

728 
	#DT_VERDEF
 0x6ffffff¯

	)

730 
	#DT_VERDEFNUM
 0x6ffffffd

	)

731 
	#DT_VERNEED
 0x6fffff„

	)

733 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

734 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

735 
	#DT_VERSIONTAGNUM
 16

	)

739 
	#DT_AUXILIARY
 0x7ffffffd

	)

740 
	#DT_FILTER
 0x7ffffff‡

	)

741 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

742 
	#DT_EXTRANUM
 3

	)

745 
	#DF_ORIGIN
 0x00000001

	)

746 
	#DF_SYMBOLIC
 0x00000002

	)

747 
	#DF_TEXTREL
 0x00000004

	)

748 
	#DF_BIND_NOW
 0x00000008

	)

749 
	#DF_STATIC_TLS
 0x00000010

	)

753 
	#DF_1_NOW
 0x00000001

	)

754 
	#DF_1_GLOBAL
 0x00000002

	)

755 
	#DF_1_GROUP
 0x00000004

	)

756 
	#DF_1_NODELETE
 0x00000008

	)

757 
	#DF_1_LOADFLTR
 0x00000010

	)

758 
	#DF_1_INITFIRST
 0x00000020

	)

759 
	#DF_1_NOOPEN
 0x00000040

	)

760 
	#DF_1_ORIGIN
 0x00000080

	)

761 
	#DF_1_DIRECT
 0x00000100

	)

762 
	#DF_1_TRANS
 0x00000200

	)

763 
	#DF_1_INTERPOSE
 0x00000400

	)

764 
	#DF_1_NODEFLIB
 0x00000800

	)

765 
	#DF_1_NODUMP
 0x00001000

	)

766 
	#DF_1_CONFALT
 0x00002000

	)

767 
	#DF_1_ENDFILTEE
 0x00004000

	)

768 
	#DF_1_DISPRELDNE
 0x00008000

	)

769 
	#DF_1_DISPRELPND
 0x00010000

	)

772 
	#DTF_1_PARINIT
 0x00000001

	)

773 
	#DTF_1_CONFEXP
 0x00000002

	)

776 
	#DF_P1_LAZYLOAD
 0x00000001

	)

777 
	#DF_P1_GROUPPERM
 0x00000002

	)

784 
Elf32_HÆf
 
	mvd_vîsi⁄
;

785 
Elf32_HÆf
 
	mvd_Êags
;

786 
Elf32_HÆf
 
	mvd_ndx
;

787 
Elf32_HÆf
 
	mvd_˙t
;

788 
Elf32_W‹d
 
	mvd_hash
;

789 
Elf32_W‹d
 
	mvd_aux
;

790 
Elf32_W‹d
 
	mvd_√xt
;

792 } 
	tElf32_Vîdef
;

796 
Elf64_HÆf
 
	mvd_vîsi⁄
;

797 
Elf64_HÆf
 
	mvd_Êags
;

798 
Elf64_HÆf
 
	mvd_ndx
;

799 
Elf64_HÆf
 
	mvd_˙t
;

800 
Elf64_W‹d
 
	mvd_hash
;

801 
Elf64_W‹d
 
	mvd_aux
;

802 
Elf64_W‹d
 
	mvd_√xt
;

804 } 
	tElf64_Vîdef
;

808 
	#VER_DEF_NONE
 0

	)

809 
	#VER_DEF_CURRENT
 1

	)

810 
	#VER_DEF_NUM
 2

	)

813 
	#VER_FLG_BASE
 0x1

	)

814 
	#VER_FLG_WEAK
 0x2

	)

817 
	#VER_NDX_LOCAL
 0

	)

818 
	#VER_NDX_GLOBAL
 1

	)

819 
	#VER_NDX_LORESERVE
 0xff00

	)

820 
	#VER_NDX_ELIMINATE
 0xff01

	)

826 
Elf32_W‹d
 
	mvda_«me
;

827 
Elf32_W‹d
 
	mvda_√xt
;

829 } 
	tElf32_Vîdaux
;

833 
Elf64_W‹d
 
	mvda_«me
;

834 
Elf64_W‹d
 
	mvda_√xt
;

836 } 
	tElf64_Vîdaux
;

843 
Elf32_HÆf
 
	mvn_vîsi⁄
;

844 
Elf32_HÆf
 
	mvn_˙t
;

845 
Elf32_W‹d
 
	mvn_fûe
;

847 
Elf32_W‹d
 
	mvn_aux
;

848 
Elf32_W‹d
 
	mvn_√xt
;

850 } 
	tElf32_Vî√ed
;

854 
Elf64_HÆf
 
	mvn_vîsi⁄
;

855 
Elf64_HÆf
 
	mvn_˙t
;

856 
Elf64_W‹d
 
	mvn_fûe
;

858 
Elf64_W‹d
 
	mvn_aux
;

859 
Elf64_W‹d
 
	mvn_√xt
;

861 } 
	tElf64_Vî√ed
;

865 
	#VER_NEED_NONE
 0

	)

866 
	#VER_NEED_CURRENT
 1

	)

867 
	#VER_NEED_NUM
 2

	)

873 
Elf32_W‹d
 
	mv«_hash
;

874 
Elf32_HÆf
 
	mv«_Êags
;

875 
Elf32_HÆf
 
	mv«_Ÿhî
;

876 
Elf32_W‹d
 
	mv«_«me
;

877 
Elf32_W‹d
 
	mv«_√xt
;

879 } 
	tElf32_Vî«ux
;

883 
Elf64_W‹d
 
	mv«_hash
;

884 
Elf64_HÆf
 
	mv«_Êags
;

885 
Elf64_HÆf
 
	mv«_Ÿhî
;

886 
Elf64_W‹d
 
	mv«_«me
;

887 
Elf64_W‹d
 
	mv«_√xt
;

889 } 
	tElf64_Vî«ux
;

893 
	#VER_FLG_WEAK
 0x2

	)

907 
	ma_ty≥
;

910 
	ma_vÆ
;

911 *
	ma_±r
;

912 (*
	ma_f˙
) ();

913 } 
	ma_un
;

914 } 
	tElf32_auxv_t
;

918 
	ma_ty≥
;

921 
	ma_vÆ
;

922 *
	ma_±r
;

923 (*
	ma_f˙
) ();

924 } 
	ma_un
;

925 } 
	tElf64_auxv_t
;

929 
	#AT_NULL
 0

	)

930 
	#AT_IGNORE
 1

	)

931 
	#AT_EXECFD
 2

	)

932 
	#AT_PHDR
 3

	)

933 
	#AT_PHENT
 4

	)

934 
	#AT_PHNUM
 5

	)

935 
	#AT_PAGESZ
 6

	)

936 
	#AT_BASE
 7

	)

937 
	#AT_FLAGS
 8

	)

938 
	#AT_ENTRY
 9

	)

939 
	#AT_NOTELF
 10

	)

940 
	#AT_UID
 11

	)

941 
	#AT_EUID
 12

	)

942 
	#AT_GID
 13

	)

943 
	#AT_EGID
 14

	)

944 
	#AT_CLKTCK
 17

	)

947 
	#AT_PLATFORM
 15

	)

948 
	#AT_HWCAP
 16

	)

953 
	#AT_FPUCW
 18

	)

956 
	#AT_DCACHEBSIZE
 19

	)

957 
	#AT_ICACHEBSIZE
 20

	)

958 
	#AT_UCACHEBSIZE
 21

	)

962 
	#AT_IGNOREPPC
 22

	)

964 
	#AT_SECURE
 23

	)

968 
	#AT_SYSINFO
 32

	)

969 
	#AT_SYSINFO_EHDR
 33

	)

977 
Elf32_W‹d
 
	mn_«mesz
;

978 
Elf32_W‹d
 
	mn_descsz
;

979 
Elf32_W‹d
 
	mn_ty≥
;

980 } 
	tElf32_Nhdr
;

984 
Elf64_W‹d
 
	mn_«mesz
;

985 
Elf64_W‹d
 
	mn_descsz
;

986 
Elf64_W‹d
 
	mn_ty≥
;

987 } 
	tElf64_Nhdr
;

992 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

995 
	#ELF_NOTE_GNU
 "GNU"

	)

1001 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1012 
	#ELF_NOTE_ABI
 1

	)

1016 
	#ELF_NOTE_OS_LINUX
 0

	)

1017 
	#ELF_NOTE_OS_GNU
 1

	)

1018 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1019 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1025 
Elf32_Xw‹d
 
	mm_vÆue
;

1026 
Elf32_W‹d
 
	mm_öfo
;

1027 
Elf32_W‹d
 
	mm_poff£t
;

1028 
Elf32_HÆf
 
	mm_ª≥©
;

1029 
Elf32_HÆf
 
	mm_°ride
;

1030 } 
	tElf32_Move
;

1034 
Elf64_Xw‹d
 
	mm_vÆue
;

1035 
Elf64_Xw‹d
 
	mm_öfo
;

1036 
Elf64_Xw‹d
 
	mm_poff£t
;

1037 
Elf64_HÆf
 
	mm_ª≥©
;

1038 
Elf64_HÆf
 
	mm_°ride
;

1039 } 
	tElf64_Move
;

1042 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1043 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1044 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1046 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1047 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1048 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1054 
	#EF_CPU32
 0x00810000

	)

1058 
	#R_68K_NONE
 0

	)

1059 
	#R_68K_32
 1

	)

1060 
	#R_68K_16
 2

	)

1061 
	#R_68K_8
 3

	)

1062 
	#R_68K_PC32
 4

	)

1063 
	#R_68K_PC16
 5

	)

1064 
	#R_68K_PC8
 6

	)

1065 
	#R_68K_GOT32
 7

	)

1066 
	#R_68K_GOT16
 8

	)

1067 
	#R_68K_GOT8
 9

	)

1068 
	#R_68K_GOT32O
 10

	)

1069 
	#R_68K_GOT16O
 11

	)

1070 
	#R_68K_GOT8O
 12

	)

1071 
	#R_68K_PLT32
 13

	)

1072 
	#R_68K_PLT16
 14

	)

1073 
	#R_68K_PLT8
 15

	)

1074 
	#R_68K_PLT32O
 16

	)

1075 
	#R_68K_PLT16O
 17

	)

1076 
	#R_68K_PLT8O
 18

	)

1077 
	#R_68K_COPY
 19

	)

1078 
	#R_68K_GLOB_DAT
 20

	)

1079 
	#R_68K_JMP_SLOT
 21

	)

1080 
	#R_68K_RELATIVE
 22

	)

1082 
	#R_68K_NUM
 23

	)

1088 
	#R_386_NONE
 0

	)

1089 
	#R_386_32
 1

	)

1090 
	#R_386_PC32
 2

	)

1091 
	#R_386_GOT32
 3

	)

1092 
	#R_386_PLT32
 4

	)

1093 
	#R_386_COPY
 5

	)

1094 
	#R_386_GLOB_DAT
 6

	)

1095 
	#R_386_JMP_SLOT
 7

	)

1096 
	#R_386_RELATIVE
 8

	)

1097 
	#R_386_GOTOFF
 9

	)

1098 
	#R_386_GOTPC
 10

	)

1099 
	#R_386_32PLT
 11

	)

1100 
	#R_386_TLS_TPOFF
 14

	)

1101 
	#R_386_TLS_IE
 15

	)

1103 
	#R_386_TLS_GOTIE
 16

	)

1105 
	#R_386_TLS_LE
 17

	)

1107 
	#R_386_TLS_GD
 18

	)

1109 
	#R_386_TLS_LDM
 19

	)

1112 
	#R_386_16
 20

	)

1113 
	#R_386_PC16
 21

	)

1114 
	#R_386_8
 22

	)

1115 
	#R_386_PC8
 23

	)

1116 
	#R_386_TLS_GD_32
 24

	)

1118 
	#R_386_TLS_GD_PUSH
 25

	)

1119 
	#R_386_TLS_GD_CALL
 26

	)

1121 
	#R_386_TLS_GD_POP
 27

	)

1122 
	#R_386_TLS_LDM_32
 28

	)

1124 
	#R_386_TLS_LDM_PUSH
 29

	)

1125 
	#R_386_TLS_LDM_CALL
 30

	)

1127 
	#R_386_TLS_LDM_POP
 31

	)

1128 
	#R_386_TLS_LDO_32
 32

	)

1129 
	#R_386_TLS_IE_32
 33

	)

1131 
	#R_386_TLS_LE_32
 34

	)

1133 
	#R_386_TLS_DTPMOD32
 35

	)

1134 
	#R_386_TLS_DTPOFF32
 36

	)

1135 
	#R_386_TLS_TPOFF32
 37

	)

1137 
	#R_386_NUM
 38

	)

1143 
	#STT_REGISTER
 13

	)

1147 
	#EF_SPARCV9_MM
 3

	)

1148 
	#EF_SPARCV9_TSO
 0

	)

1149 
	#EF_SPARCV9_PSO
 1

	)

1150 
	#EF_SPARCV9_RMO
 2

	)

1151 
	#EF_SPARC_LEDATA
 0x800000

	)

1152 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1153 
	#EF_SPARC_32PLUS
 0x000100

	)

1154 
	#EF_SPARC_SUN_US1
 0x000200

	)

1155 
	#EF_SPARC_HAL_R1
 0x000400

	)

1156 
	#EF_SPARC_SUN_US3
 0x000800

	)

1160 
	#R_SPARC_NONE
 0

	)

1161 
	#R_SPARC_8
 1

	)

1162 
	#R_SPARC_16
 2

	)

1163 
	#R_SPARC_32
 3

	)

1164 
	#R_SPARC_DISP8
 4

	)

1165 
	#R_SPARC_DISP16
 5

	)

1166 
	#R_SPARC_DISP32
 6

	)

1167 
	#R_SPARC_WDISP30
 7

	)

1168 
	#R_SPARC_WDISP22
 8

	)

1169 
	#R_SPARC_HI22
 9

	)

1170 
	#R_SPARC_22
 10

	)

1171 
	#R_SPARC_13
 11

	)

1172 
	#R_SPARC_LO10
 12

	)

1173 
	#R_SPARC_GOT10
 13

	)

1174 
	#R_SPARC_GOT13
 14

	)

1175 
	#R_SPARC_GOT22
 15

	)

1176 
	#R_SPARC_PC10
 16

	)

1177 
	#R_SPARC_PC22
 17

	)

1178 
	#R_SPARC_WPLT30
 18

	)

1179 
	#R_SPARC_COPY
 19

	)

1180 
	#R_SPARC_GLOB_DAT
 20

	)

1181 
	#R_SPARC_JMP_SLOT
 21

	)

1182 
	#R_SPARC_RELATIVE
 22

	)

1183 
	#R_SPARC_UA32
 23

	)

1187 
	#R_SPARC_PLT32
 24

	)

1188 
	#R_SPARC_HIPLT22
 25

	)

1189 
	#R_SPARC_LOPLT10
 26

	)

1190 
	#R_SPARC_PCPLT32
 27

	)

1191 
	#R_SPARC_PCPLT22
 28

	)

1192 
	#R_SPARC_PCPLT10
 29

	)

1193 
	#R_SPARC_10
 30

	)

1194 
	#R_SPARC_11
 31

	)

1195 
	#R_SPARC_64
 32

	)

1196 
	#R_SPARC_OLO10
 33

	)

1197 
	#R_SPARC_HH22
 34

	)

1198 
	#R_SPARC_HM10
 35

	)

1199 
	#R_SPARC_LM22
 36

	)

1200 
	#R_SPARC_PC_HH22
 37

	)

1201 
	#R_SPARC_PC_HM10
 38

	)

1202 
	#R_SPARC_PC_LM22
 39

	)

1203 
	#R_SPARC_WDISP16
 40

	)

1204 
	#R_SPARC_WDISP19
 41

	)

1205 
	#R_SPARC_7
 43

	)

1206 
	#R_SPARC_5
 44

	)

1207 
	#R_SPARC_6
 45

	)

1208 
	#R_SPARC_DISP64
 46

	)

1209 
	#R_SPARC_PLT64
 47

	)

1210 
	#R_SPARC_HIX22
 48

	)

1211 
	#R_SPARC_LOX10
 49

	)

1212 
	#R_SPARC_H44
 50

	)

1213 
	#R_SPARC_M44
 51

	)

1214 
	#R_SPARC_L44
 52

	)

1215 
	#R_SPARC_REGISTER
 53

	)

1216 
	#R_SPARC_UA64
 54

	)

1217 
	#R_SPARC_UA16
 55

	)

1218 
	#R_SPARC_TLS_GD_HI22
 56

	)

1219 
	#R_SPARC_TLS_GD_LO10
 57

	)

1220 
	#R_SPARC_TLS_GD_ADD
 58

	)

1221 
	#R_SPARC_TLS_GD_CALL
 59

	)

1222 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1223 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1224 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1225 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1226 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1227 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1228 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1229 
	#R_SPARC_TLS_IE_HI22
 67

	)

1230 
	#R_SPARC_TLS_IE_LO10
 68

	)

1231 
	#R_SPARC_TLS_IE_LD
 69

	)

1232 
	#R_SPARC_TLS_IE_LDX
 70

	)

1233 
	#R_SPARC_TLS_IE_ADD
 71

	)

1234 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1235 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1236 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1237 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1238 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1239 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1240 
	#R_SPARC_TLS_TPOFF32
 78

	)

1241 
	#R_SPARC_TLS_TPOFF64
 79

	)

1243 
	#R_SPARC_NUM
 80

	)

1247 
	#DT_SPARC_REGISTER
 0x70000001

	)

1248 
	#DT_SPARC_NUM
 2

	)

1252 
	#HWCAP_SPARC_FLUSH
 1

	)

1253 
	#HWCAP_SPARC_STBAR
 2

	)

1254 
	#HWCAP_SPARC_SWAP
 4

	)

1255 
	#HWCAP_SPARC_MULDIV
 8

	)

1256 
	#HWCAP_SPARC_V9
 16

	)

1257 
	#HWCAP_SPARC_ULTRA3
 32

	)

1263 
	#EF_MIPS_NOREORDER
 1

	)

1264 
	#EF_MIPS_PIC
 2

	)

1265 
	#EF_MIPS_CPIC
 4

	)

1266 
	#EF_MIPS_XGOT
 8

	)

1267 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1268 
	#EF_MIPS_ABI2
 32

	)

1269 
	#EF_MIPS_ABI_ON32
 64

	)

1270 
	#EF_MIPS_ARCH
 0xf0000000

	)

1274 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1275 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1276 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1277 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1278 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1279 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1280 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1284 
	#E_MIPS_ARCH_1
 0x00000000

	)

1285 
	#E_MIPS_ARCH_2
 0x10000000

	)

1286 
	#E_MIPS_ARCH_3
 0x20000000

	)

1287 
	#E_MIPS_ARCH_4
 0x30000000

	)

1288 
	#E_MIPS_ARCH_5
 0x40000000

	)

1289 
	#E_MIPS_ARCH_32
 0x60000000

	)

1290 
	#E_MIPS_ARCH_64
 0x70000000

	)

1294 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1295 
	#SHN_MIPS_TEXT
 0xff01

	)

1296 
	#SHN_MIPS_DATA
 0xff02

	)

1297 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1298 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1302 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1303 
	#SHT_MIPS_MSYM
 0x70000001

	)

1304 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1305 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1306 
	#SHT_MIPS_UCODE
 0x70000004

	)

1307 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1308 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1309 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1310 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1311 
	#SHT_MIPS_RELD
 0x70000009

	)

1312 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1313 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1314 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1315 
	#SHT_MIPS_SHDR
 0x70000010

	)

1316 
	#SHT_MIPS_FDESC
 0x70000011

	)

1317 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1318 
	#SHT_MIPS_DENSE
 0x70000013

	)

1319 
	#SHT_MIPS_PDESC
 0x70000014

	)

1320 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1321 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1322 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1323 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1324 
	#SHT_MIPS_LINE
 0x70000019

	)

1325 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1326 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1327 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1328 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1329 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1330 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1331 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1332 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1333 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1334 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1335 
	#SHT_MIPS_XLATE
 0x70000024

	)

1336 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1337 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1338 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1339 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1340 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1344 
	#SHF_MIPS_GPREL
 0x10000000

	)

1345 
	#SHF_MIPS_MERGE
 0x20000000

	)

1346 
	#SHF_MIPS_ADDR
 0x40000000

	)

1347 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1348 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1349 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1350 
	#SHF_MIPS_NAMES
 0x02000000

	)

1351 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1357 
	#STO_MIPS_DEFAULT
 0x0

	)

1358 
	#STO_MIPS_INTERNAL
 0x1

	)

1359 
	#STO_MIPS_HIDDEN
 0x2

	)

1360 
	#STO_MIPS_PROTECTED
 0x3

	)

1361 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1364 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1372 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1373 
Elf32_W‹d
 
	mgt_unu£d
;

1374 } 
	mgt_hódî
;

1377 
Elf32_W‹d
 
	mgt_g_vÆue
;

1378 
Elf32_W‹d
 
	mgt_byãs
;

1379 } 
	mgt_íåy
;

1380 } 
	tElf32_g±ab
;

1386 
Elf32_W‹d
 
	mri_g¥mask
;

1387 
Elf32_W‹d
 
	mri_˝rmask
[4];

1388 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1389 } 
	tElf32_RegInfo
;

1395 
	mköd
;

1397 
	msize
;

1398 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1400 
Elf32_W‹d
 
	möfo
;

1401 } 
	tElf_O±i⁄s
;

1405 
	#ODK_NULL
 0

	)

1406 
	#ODK_REGINFO
 1

	)

1407 
	#ODK_EXCEPTIONS
 2

	)

1408 
	#ODK_PAD
 3

	)

1409 
	#ODK_HWPATCH
 4

	)

1410 
	#ODK_FILL
 5

	)

1411 
	#ODK_TAGS
 6

	)

1412 
	#ODK_HWAND
 7

	)

1413 
	#ODK_HWOR
 8

	)

1417 
	#OEX_FPU_MIN
 0x1‡

	)

1418 
	#OEX_FPU_MAX
 0x1f00

	)

1419 
	#OEX_PAGE0
 0x10000

	)

1420 
	#OEX_SMM
 0x20000

	)

1421 
	#OEX_FPDBUG
 0x40000

	)

1422 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1423 
	#OEX_DISMISS
 0x80000

	)

1425 
	#OEX_FPU_INVAL
 0x10

	)

1426 
	#OEX_FPU_DIV0
 0x08

	)

1427 
	#OEX_FPU_OFLO
 0x04

	)

1428 
	#OEX_FPU_UFLO
 0x02

	)

1429 
	#OEX_FPU_INEX
 0x01

	)

1433 
	#OHW_R4KEOP
 0x1

	)

1434 
	#OHW_R8KPFETCH
 0x2

	)

1435 
	#OHW_R5KEOP
 0x4

	)

1436 
	#OHW_R5KCVTL
 0x8

	)

1438 
	#OPAD_PREFIX
 0x1

	)

1439 
	#OPAD_POSTFIX
 0x2

	)

1440 
	#OPAD_SYMBOL
 0x4

	)

1446 
Elf32_W‹d
 
	mhwp_Êags1
;

1447 
Elf32_W‹d
 
	mhwp_Êags2
;

1448 } 
	tElf_O±i⁄s_Hw
;

1452 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1453 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1457 
	#R_MIPS_NONE
 0

	)

1458 
	#R_MIPS_16
 1

	)

1459 
	#R_MIPS_32
 2

	)

1460 
	#R_MIPS_REL32
 3

	)

1461 
	#R_MIPS_26
 4

	)

1462 
	#R_MIPS_HI16
 5

	)

1463 
	#R_MIPS_LO16
 6

	)

1464 
	#R_MIPS_GPREL16
 7

	)

1465 
	#R_MIPS_LITERAL
 8

	)

1466 
	#R_MIPS_GOT16
 9

	)

1467 
	#R_MIPS_PC16
 10

	)

1468 
	#R_MIPS_CALL16
 11

	)

1469 
	#R_MIPS_GPREL32
 12

	)

1471 
	#R_MIPS_SHIFT5
 16

	)

1472 
	#R_MIPS_SHIFT6
 17

	)

1473 
	#R_MIPS_64
 18

	)

1474 
	#R_MIPS_GOT_DISP
 19

	)

1475 
	#R_MIPS_GOT_PAGE
 20

	)

1476 
	#R_MIPS_GOT_OFST
 21

	)

1477 
	#R_MIPS_GOT_HI16
 22

	)

1478 
	#R_MIPS_GOT_LO16
 23

	)

1479 
	#R_MIPS_SUB
 24

	)

1480 
	#R_MIPS_INSERT_A
 25

	)

1481 
	#R_MIPS_INSERT_B
 26

	)

1482 
	#R_MIPS_DELETE
 27

	)

1483 
	#R_MIPS_HIGHER
 28

	)

1484 
	#R_MIPS_HIGHEST
 29

	)

1485 
	#R_MIPS_CALL_HI16
 30

	)

1486 
	#R_MIPS_CALL_LO16
 31

	)

1487 
	#R_MIPS_SCN_DISP
 32

	)

1488 
	#R_MIPS_REL16
 33

	)

1489 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1490 
	#R_MIPS_PJUMP
 35

	)

1491 
	#R_MIPS_RELGOT
 36

	)

1492 
	#R_MIPS_JALR
 37

	)

1494 
	#R_MIPS_NUM
 38

	)

1498 
	#PT_MIPS_REGINFO
 0x70000000

	)

1499 
	#PT_MIPS_RTPROC
 0x70000001

	)

1500 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1504 
	#PF_MIPS_LOCAL
 0x10000000

	)

1508 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1509 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1510 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1511 
	#DT_MIPS_IVERSION
 0x70000004

	)

1512 
	#DT_MIPS_FLAGS
 0x70000005

	)

1513 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1514 
	#DT_MIPS_MSYM
 0x70000007

	)

1515 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1516 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1517 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1518 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1519 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1520 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1521 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1522 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1523 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1524 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1525 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1526 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1528 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1529 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1531 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1532 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1534 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1536 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1538 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1540 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1542 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1543 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1544 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1545 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1546 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1547 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1548 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1549 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1550 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1551 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1552 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1553 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1555 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1557 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1558 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1559 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1560 
	#DT_MIPS_NUM
 0x32

	)

1564 
	#RHF_NONE
 0

	)

1565 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1566 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1567 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1568 
	#RHF_NO_MOVE
 (1 << 3)

	)

1569 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1570 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1571 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1572 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1573 
	#RHF_PIXIE
 (1 << 8)

	)

1574 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1575 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1576 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1577 
	#RHF_CORD
 (1 << 12)

	)

1578 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1579 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1585 
Elf32_W‹d
 
	ml_«me
;

1586 
Elf32_W‹d
 
	ml_time_°amp
;

1587 
Elf32_W‹d
 
	ml_checksum
;

1588 
Elf32_W‹d
 
	ml_vîsi⁄
;

1589 
Elf32_W‹d
 
	ml_Êags
;

1590 } 
	tElf32_Lib
;

1594 
Elf64_W‹d
 
	ml_«me
;

1595 
Elf64_W‹d
 
	ml_time_°amp
;

1596 
Elf64_W‹d
 
	ml_checksum
;

1597 
Elf64_W‹d
 
	ml_vîsi⁄
;

1598 
Elf64_W‹d
 
	ml_Êags
;

1599 } 
	tElf64_Lib
;

1604 
	#LL_NONE
 0

	)

1605 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1606 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1607 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1608 
	#LL_EXPORTS
 (1 << 3)

	)

1609 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1610 
	#LL_DELTA
 (1 << 5)

	)

1614 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1621 
	#EF_PARISC_TRAPNL
 1

	)

1622 
	#EF_PARISC_EXT
 2

	)

1623 
	#EF_PARISC_ARCH
 0xffff0000

	)

1633 
	#SHT_PARISC_GOT
 0x70000000

	)

1634 
	#SHT_PARISC_ARCH
 0x70000001

	)

1635 
	#SHT_PARISC_GLOBAL
 0x70000002

	)

1636 
	#SHT_PARISC_MILLI
 0x70000003

	)

1637 
	#SHT_PARISC_UNWIND
 0x70000004

	)

1638 
	#SHT_PARISC_PLT
 0x70000005

	)

1639 
	#SHT_PARISC_SDATA
 0x70000006

	)

1640 
	#SHT_PARISC_SBSS
 0x70000007

	)

1641 
	#SHT_PARISC_SYMEXTN
 0x70000008

	)

1642 
	#SHT_PARISC_STUBS
 0x70000009

	)

1646 
	#SHF_PARISC_GLOBAL
 0x10000000

	)

1647 
	#SHF_PARISC_SHORT
 0x20000000

	)

1648 
	#SHF_PARISC_HUGE
 0x40000000

	)

1649 
	#SHF_PARISC_SBP
 0x80000000

	)

1653 
	#STT_PARISC_MILLICODE
 13

	)

1655 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1656 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1660 
	#R_PARISC_NONE
 0

	)

1661 
	#R_PARISC_DIR32
 1

	)

1662 
	#R_PARISC_DIR21L
 2

	)

1663 
	#R_PARISC_DIR17R
 3

	)

1664 
	#R_PARISC_DIR14R
 4

	)

1665 
	#R_PARISC_PCREL21L
 5

	)

1666 
	#R_PARISC_PCREL14R
 6

	)

1667 
	#R_PARISC_PCREL17C
 7

	)

1669 
	#R_PARISC_PCREL17F
 8

	)

1671 
	#R_PARISC_DPREL21L
 9

	)

1672 
	#R_PARISC_DPREL14R
 10

	)

1673 
	#R_PARISC_DPREL14F
 11

	)

1674 
	#R_PARISC_DLTREL21L
 12

	)

1675 
	#R_PARISC_DLTREL14R
 13

	)

1676 
	#R_PARISC_DLTREL14F
 14

	)

1677 
	#R_PARISC_DLTIND21L
 15

	)

1679 
	#R_PARISC_DLTIND14R
 16

	)

1681 
	#R_PARISC_DLTIND14F
 17

	)

1683 
	#R_PARISC_PLABEL32
 18

	)

1689 
	#EF_ALPHA_32BIT
 1

	)

1690 
	#EF_ALPHA_CANRELAX
 2

	)

1695 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1696 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1700 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1703 
	#STO_ALPHA_NOPV
 0x80

	)

1704 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1708 
	#R_ALPHA_NONE
 0

	)

1709 
	#R_ALPHA_REFLONG
 1

	)

1710 
	#R_ALPHA_REFQUAD
 2

	)

1711 
	#R_ALPHA_GPREL32
 3

	)

1712 
	#R_ALPHA_LITERAL
 4

	)

1713 
	#R_ALPHA_LITUSE
 5

	)

1714 
	#R_ALPHA_GPDISP
 6

	)

1715 
	#R_ALPHA_BRADDR
 7

	)

1716 
	#R_ALPHA_HINT
 8

	)

1717 
	#R_ALPHA_SREL16
 9

	)

1718 
	#R_ALPHA_SREL32
 10

	)

1719 
	#R_ALPHA_SREL64
 11

	)

1720 
	#R_ALPHA_OP_PUSH
 12

	)

1721 
	#R_ALPHA_OP_STORE
 13

	)

1722 
	#R_ALPHA_OP_PSUB
 14

	)

1723 
	#R_ALPHA_OP_PRSHIFT
 15

	)

1724 
	#R_ALPHA_GPVALUE
 16

	)

1725 
	#R_ALPHA_GPRELHIGH
 17

	)

1726 
	#R_ALPHA_GPRELLOW
 18

	)

1727 
	#R_ALPHA_IMMED_GP_16
 19

	)

1728 
	#R_ALPHA_IMMED_GP_HI32
 20

	)

1729 
	#R_ALPHA_IMMED_SCN_HI32
 21

	)

1730 
	#R_ALPHA_IMMED_BR_HI32
 22

	)

1731 
	#R_ALPHA_IMMED_LO32
 23

	)

1732 
	#R_ALPHA_COPY
 24

	)

1733 
	#R_ALPHA_GLOB_DAT
 25

	)

1734 
	#R_ALPHA_JMP_SLOT
 26

	)

1735 
	#R_ALPHA_RELATIVE
 27

	)

1736 
	#R_ALPHA_TLS_GD_HI
 28

	)

1737 
	#R_ALPHA_TLSGD
 29

	)

1738 
	#R_ALPHA_TLS_LDM
 30

	)

1739 
	#R_ALPHA_DTPMOD64
 31

	)

1740 
	#R_ALPHA_GOTDTPREL
 32

	)

1741 
	#R_ALPHA_DTPREL64
 33

	)

1742 
	#R_ALPHA_DTPRELHI
 34

	)

1743 
	#R_ALPHA_DTPRELLO
 35

	)

1744 
	#R_ALPHA_DTPREL16
 36

	)

1745 
	#R_ALPHA_GOTTPREL
 37

	)

1746 
	#R_ALPHA_TPREL64
 38

	)

1747 
	#R_ALPHA_TPRELHI
 39

	)

1748 
	#R_ALPHA_TPRELLO
 40

	)

1749 
	#R_ALPHA_TPREL16
 41

	)

1751 
	#R_ALPHA_NUM
 46

	)

1754 
	#LITUSE_ALPHA_ADDR
 0

	)

1755 
	#LITUSE_ALPHA_BASE
 1

	)

1756 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1757 
	#LITUSE_ALPHA_JSR
 3

	)

1758 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1759 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1765 
	#EF_PPC_EMB
 0x80000000

	)

1768 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1769 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1773 
	#R_PPC_NONE
 0

	)

1774 
	#R_PPC_ADDR32
 1

	)

1775 
	#R_PPC_ADDR24
 2

	)

1776 
	#R_PPC_ADDR16
 3

	)

1777 
	#R_PPC_ADDR16_LO
 4

	)

1778 
	#R_PPC_ADDR16_HI
 5

	)

1779 
	#R_PPC_ADDR16_HA
 6

	)

1780 
	#R_PPC_ADDR14
 7

	)

1781 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1782 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1783 
	#R_PPC_REL24
 10

	)

1784 
	#R_PPC_REL14
 11

	)

1785 
	#R_PPC_REL14_BRTAKEN
 12

	)

1786 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1787 
	#R_PPC_GOT16
 14

	)

1788 
	#R_PPC_GOT16_LO
 15

	)

1789 
	#R_PPC_GOT16_HI
 16

	)

1790 
	#R_PPC_GOT16_HA
 17

	)

1791 
	#R_PPC_PLTREL24
 18

	)

1792 
	#R_PPC_COPY
 19

	)

1793 
	#R_PPC_GLOB_DAT
 20

	)

1794 
	#R_PPC_JMP_SLOT
 21

	)

1795 
	#R_PPC_RELATIVE
 22

	)

1796 
	#R_PPC_LOCAL24PC
 23

	)

1797 
	#R_PPC_UADDR32
 24

	)

1798 
	#R_PPC_UADDR16
 25

	)

1799 
	#R_PPC_REL32
 26

	)

1800 
	#R_PPC_PLT32
 27

	)

1801 
	#R_PPC_PLTREL32
 28

	)

1802 
	#R_PPC_PLT16_LO
 29

	)

1803 
	#R_PPC_PLT16_HI
 30

	)

1804 
	#R_PPC_PLT16_HA
 31

	)

1805 
	#R_PPC_SDAREL16
 32

	)

1806 
	#R_PPC_SECTOFF
 33

	)

1807 
	#R_PPC_SECTOFF_LO
 34

	)

1808 
	#R_PPC_SECTOFF_HI
 35

	)

1809 
	#R_PPC_SECTOFF_HA
 36

	)

1812 
	#R_PPC_TLS
 67

	)

1813 
	#R_PPC_DTPMOD32
 68

	)

1814 
	#R_PPC_TPREL16
 69

	)

1815 
	#R_PPC_TPREL16_LO
 70

	)

1816 
	#R_PPC_TPREL16_HI
 71

	)

1817 
	#R_PPC_TPREL16_HA
 72

	)

1818 
	#R_PPC_TPREL32
 73

	)

1819 
	#R_PPC_DTPREL16
 74

	)

1820 
	#R_PPC_DTPREL16_LO
 75

	)

1821 
	#R_PPC_DTPREL16_HI
 76

	)

1822 
	#R_PPC_DTPREL16_HA
 77

	)

1823 
	#R_PPC_DTPREL32
 78

	)

1824 
	#R_PPC_GOT_TLSGD16
 79

	)

1825 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1826 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1827 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1828 
	#R_PPC_GOT_TLSLD16
 83

	)

1829 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1830 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1831 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1832 
	#R_PPC_GOT_TPREL16
 87

	)

1833 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1834 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1835 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1836 
	#R_PPC_GOT_DTPREL16
 91

	)

1837 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

1838 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

1839 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

1842 
	#R_PPC_NUM
 95

	)

1846 
	#R_PPC_EMB_NADDR32
 101

	)

1847 
	#R_PPC_EMB_NADDR16
 102

	)

1848 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1849 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1850 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1851 
	#R_PPC_EMB_SDAI16
 106

	)

1852 
	#R_PPC_EMB_SDA2I16
 107

	)

1853 
	#R_PPC_EMB_SDA2REL
 108

	)

1854 
	#R_PPC_EMB_SDA21
 109

	)

1855 
	#R_PPC_EMB_MRKREF
 110

	)

1856 
	#R_PPC_EMB_RELSEC16
 111

	)

1857 
	#R_PPC_EMB_RELST_LO
 112

	)

1858 
	#R_PPC_EMB_RELST_HI
 113

	)

1859 
	#R_PPC_EMB_RELST_HA
 114

	)

1860 
	#R_PPC_EMB_BIT_FLD
 115

	)

1861 
	#R_PPC_EMB_RELSDA
 116

	)

1864 
	#R_PPC_DIAB_SDA21_LO
 180

	)

1865 
	#R_PPC_DIAB_SDA21_HI
 181

	)

1866 
	#R_PPC_DIAB_SDA21_HA
 182

	)

1867 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

1868 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

1869 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

1873 
	#R_PPC_TOC16
 255

	)

1877 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

1878 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

1879 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

1880 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

1881 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

1882 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

1883 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

1884 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

1885 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

1886 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

1887 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

1888 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

1889 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

1890 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

1891 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

1892 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

1893 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

1894 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

1896 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

1897 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

1898 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

1899 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

1901 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

1902 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

1903 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

1904 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

1905 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

1906 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

1907 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

1908 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

1910 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

1911 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

1912 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

1913 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

1914 
	#R_PPC64_ADDR30
 37

	)

1915 
	#R_PPC64_ADDR64
 38

	)

1916 
	#R_PPC64_ADDR16_HIGHER
 39

	)

1917 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

1918 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

1919 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

1920 
	#R_PPC64_UADDR64
 43

	)

1921 
	#R_PPC64_REL64
 44

	)

1922 
	#R_PPC64_PLT64
 45

	)

1923 
	#R_PPC64_PLTREL64
 46

	)

1924 
	#R_PPC64_TOC16
 47

	)

1925 
	#R_PPC64_TOC16_LO
 48

	)

1926 
	#R_PPC64_TOC16_HI
 49

	)

1927 
	#R_PPC64_TOC16_HA
 50

	)

1928 
	#R_PPC64_TOC
 51

	)

1929 
	#R_PPC64_PLTGOT16
 52

	)

1930 
	#R_PPC64_PLTGOT16_LO
 53

	)

1931 
	#R_PPC64_PLTGOT16_HI
 54

	)

1932 
	#R_PPC64_PLTGOT16_HA
 55

	)

1934 
	#R_PPC64_ADDR16_DS
 56

	)

1935 
	#R_PPC64_ADDR16_LO_DS
 57

	)

1936 
	#R_PPC64_GOT16_DS
 58

	)

1937 
	#R_PPC64_GOT16_LO_DS
 59

	)

1938 
	#R_PPC64_PLT16_LO_DS
 60

	)

1939 
	#R_PPC64_SECTOFF_DS
 61

	)

1940 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

1941 
	#R_PPC64_TOC16_DS
 63

	)

1942 
	#R_PPC64_TOC16_LO_DS
 64

	)

1943 
	#R_PPC64_PLTGOT16_DS
 65

	)

1944 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

1947 
	#R_PPC64_TLS
 67

	)

1948 
	#R_PPC64_DTPMOD64
 68

	)

1949 
	#R_PPC64_TPREL16
 69

	)

1950 
	#R_PPC64_TPREL16_LO
 70

	)

1951 
	#R_PPC64_TPREL16_HI
 71

	)

1952 
	#R_PPC64_TPREL16_HA
 72

	)

1953 
	#R_PPC64_TPREL64
 73

	)

1954 
	#R_PPC64_DTPREL16
 74

	)

1955 
	#R_PPC64_DTPREL16_LO
 75

	)

1956 
	#R_PPC64_DTPREL16_HI
 76

	)

1957 
	#R_PPC64_DTPREL16_HA
 77

	)

1958 
	#R_PPC64_DTPREL64
 78

	)

1959 
	#R_PPC64_GOT_TLSGD16
 79

	)

1960 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

1961 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

1962 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

1963 
	#R_PPC64_GOT_TLSLD16
 83

	)

1964 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

1965 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

1966 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

1967 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

1968 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

1969 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

1970 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

1971 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

1972 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

1973 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

1974 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

1975 
	#R_PPC64_TPREL16_DS
 95

	)

1976 
	#R_PPC64_TPREL16_LO_DS
 96

	)

1977 
	#R_PPC64_TPREL16_HIGHER
 97

	)

1978 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

1979 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

1980 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

1981 
	#R_PPC64_DTPREL16_DS
 101

	)

1982 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

1983 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

1984 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

1985 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

1986 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

1987 
	#R_PPC64_REL16
 249

	)

1988 
	#R_PPC64_REL16_LO
 250

	)

1989 
	#R_PPC64_REL16_HI
 251

	)

1990 
	#R_PPC64_REL16_HA
 252

	)

1993 
	#R_PPC64_NUM
 107

	)

1996 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

1997 
	#DT_PPC64_NUM
 1

	)

2003 
	#EF_ARM_RELEXEC
 0x01

	)

2004 
	#EF_ARM_HASENTRY
 0x02

	)

2005 
	#EF_ARM_INTERWORK
 0x04

	)

2006 
	#EF_ARM_APCS_26
 0x08

	)

2007 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2008 
	#EF_ARM_PIC
 0x20

	)

2009 
	#EF_ARM_ALIGN8
 0x40

	)

2010 
	#EF_ARM_NEW_ABI
 0x80

	)

2011 
	#EF_ARM_OLD_ABI
 0x100

	)

2015 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2016 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2017 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2018 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2020 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2021 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2022 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2023 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2026 
	#STT_ARM_TFUNC
 0xd

	)

2029 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2030 
	#SHF_ARM_COMDEF
 0x80000000

	)

2034 
	#PF_ARM_SB
 0x10000000

	)

2038 
	#R_ARM_NONE
 0

	)

2039 
	#R_ARM_PC24
 1

	)

2040 
	#R_ARM_ABS32
 2

	)

2041 
	#R_ARM_REL32
 3

	)

2042 
	#R_ARM_PC13
 4

	)

2043 
	#R_ARM_ABS16
 5

	)

2044 
	#R_ARM_ABS12
 6

	)

2045 
	#R_ARM_THM_ABS5
 7

	)

2046 
	#R_ARM_ABS8
 8

	)

2047 
	#R_ARM_SBREL32
 9

	)

2048 
	#R_ARM_THM_PC22
 10

	)

2049 
	#R_ARM_THM_PC8
 11

	)

2050 
	#R_ARM_AMP_VCALL9
 12

	)

2051 
	#R_ARM_SWI24
 13

	)

2052 
	#R_ARM_THM_SWI8
 14

	)

2053 
	#R_ARM_XPC25
 15

	)

2054 
	#R_ARM_THM_XPC22
 16

	)

2055 
	#R_ARM_COPY
 20

	)

2056 
	#R_ARM_GLOB_DAT
 21

	)

2057 
	#R_ARM_JUMP_SLOT
 22

	)

2058 
	#R_ARM_RELATIVE
 23

	)

2059 
	#R_ARM_GOTOFF
 24

	)

2060 
	#R_ARM_GOTPC
 25

	)

2061 
	#R_ARM_GOT32
 26

	)

2062 
	#R_ARM_PLT32
 27

	)

2063 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2064 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2065 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2066 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2067 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2068 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2069 
	#R_ARM_GNU_VTENTRY
 100

	)

2070 
	#R_ARM_GNU_VTINHERIT
 101

	)

2071 
	#R_ARM_THM_PC11
 102

	)

2072 
	#R_ARM_THM_PC9
 103

	)

2073 
	#R_ARM_RXPC25
 249

	)

2074 
	#R_ARM_RSBREL32
 250

	)

2075 
	#R_ARM_THM_RPC22
 251

	)

2076 
	#R_ARM_RREL32
 252

	)

2077 
	#R_ARM_RABS22
 253

	)

2078 
	#R_ARM_RPC24
 254

	)

2079 
	#R_ARM_RBASE
 255

	)

2081 
	#R_ARM_NUM
 256

	)

2086 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2087 
	#EF_IA_64_ABI64
 0x00000010

	)

2088 
	#EF_IA_64_ARCH
 0xff000000

	)

2091 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2092 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2095 
	#PF_IA_64_NORECOV
 0x80000000

	)

2098 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2099 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2102 
	#SHF_IA_64_SHORT
 0x10000000

	)

2103 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2106 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_IA_64_NUM
 1

	)

2110 
	#R_IA64_NONE
 0x00

	)

2111 
	#R_IA64_IMM14
 0x21

	)

2112 
	#R_IA64_IMM22
 0x22

	)

2113 
	#R_IA64_IMM64
 0x23

	)

2114 
	#R_IA64_DIR32MSB
 0x24

	)

2115 
	#R_IA64_DIR32LSB
 0x25

	)

2116 
	#R_IA64_DIR64MSB
 0x26

	)

2117 
	#R_IA64_DIR64LSB
 0x27

	)

2118 
	#R_IA64_GPREL22
 0x2®

	)

2119 
	#R_IA64_GPREL64I
 0x2b

	)

2120 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2121 
	#R_IA64_GPREL32LSB
 0x2d

	)

2122 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2123 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2124 
	#R_IA64_LTOFF22
 0x32

	)

2125 
	#R_IA64_LTOFF64I
 0x33

	)

2126 
	#R_IA64_PLTOFF22
 0x3®

	)

2127 
	#R_IA64_PLTOFF64I
 0x3b

	)

2128 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2129 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2130 
	#R_IA64_FPTR64I
 0x43

	)

2131 
	#R_IA64_FPTR32MSB
 0x44

	)

2132 
	#R_IA64_FPTR32LSB
 0x45

	)

2133 
	#R_IA64_FPTR64MSB
 0x46

	)

2134 
	#R_IA64_FPTR64LSB
 0x47

	)

2135 
	#R_IA64_PCREL60B
 0x48

	)

2136 
	#R_IA64_PCREL21B
 0x49

	)

2137 
	#R_IA64_PCREL21M
 0x4®

	)

2138 
	#R_IA64_PCREL21F
 0x4b

	)

2139 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2140 
	#R_IA64_PCREL32LSB
 0x4d

	)

2141 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2142 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2143 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2144 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2145 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2146 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2147 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2148 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2149 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2150 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2151 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2152 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2153 
	#R_IA64_SECREL32MSB
 0x64

	)

2154 
	#R_IA64_SECREL32LSB
 0x65

	)

2155 
	#R_IA64_SECREL64MSB
 0x66

	)

2156 
	#R_IA64_SECREL64LSB
 0x67

	)

2157 
	#R_IA64_REL32MSB
 0x6¯

	)

2158 
	#R_IA64_REL32LSB
 0x6d

	)

2159 
	#R_IA64_REL64MSB
 0x6ê

	)

2160 
	#R_IA64_REL64LSB
 0x6‡

	)

2161 
	#R_IA64_LTV32MSB
 0x74

	)

2162 
	#R_IA64_LTV32LSB
 0x75

	)

2163 
	#R_IA64_LTV64MSB
 0x76

	)

2164 
	#R_IA64_LTV64LSB
 0x77

	)

2165 
	#R_IA64_PCREL21BI
 0x79

	)

2166 
	#R_IA64_PCREL22
 0x7®

	)

2167 
	#R_IA64_PCREL64I
 0x7b

	)

2168 
	#R_IA64_IPLTMSB
 0x80

	)

2169 
	#R_IA64_IPLTLSB
 0x81

	)

2170 
	#R_IA64_COPY
 0x84

	)

2171 
	#R_IA64_SUB
 0x85

	)

2172 
	#R_IA64_LTOFF22X
 0x86

	)

2173 
	#R_IA64_LDXMOV
 0x87

	)

2174 
	#R_IA64_TPREL14
 0x91

	)

2175 
	#R_IA64_TPREL22
 0x92

	)

2176 
	#R_IA64_TPREL64I
 0x93

	)

2177 
	#R_IA64_TPREL64MSB
 0x96

	)

2178 
	#R_IA64_TPREL64LSB
 0x97

	)

2179 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2180 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2181 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2182 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2183 
	#R_IA64_DTPREL14
 0xb1

	)

2184 
	#R_IA64_DTPREL22
 0xb2

	)

2185 
	#R_IA64_DTPREL64I
 0xb3

	)

2186 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2187 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2188 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2189 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2190 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2195 
	#R_SH_NONE
 0

	)

2196 
	#R_SH_DIR32
 1

	)

2197 
	#R_SH_REL32
 2

	)

2198 
	#R_SH_DIR8WPN
 3

	)

2199 
	#R_SH_IND12W
 4

	)

2200 
	#R_SH_DIR8WPL
 5

	)

2201 
	#R_SH_DIR8WPZ
 6

	)

2202 
	#R_SH_DIR8BP
 7

	)

2203 
	#R_SH_DIR8W
 8

	)

2204 
	#R_SH_DIR8L
 9

	)

2205 
	#R_SH_SWITCH16
 25

	)

2206 
	#R_SH_SWITCH32
 26

	)

2207 
	#R_SH_USES
 27

	)

2208 
	#R_SH_COUNT
 28

	)

2209 
	#R_SH_ALIGN
 29

	)

2210 
	#R_SH_CODE
 30

	)

2211 
	#R_SH_DATA
 31

	)

2212 
	#R_SH_LABEL
 32

	)

2213 
	#R_SH_SWITCH8
 33

	)

2214 
	#R_SH_GNU_VTINHERIT
 34

	)

2215 
	#R_SH_GNU_VTENTRY
 35

	)

2216 
	#R_SH_TLS_GD_32
 144

	)

2217 
	#R_SH_TLS_LD_32
 145

	)

2218 
	#R_SH_TLS_LDO_32
 146

	)

2219 
	#R_SH_TLS_IE_32
 147

	)

2220 
	#R_SH_TLS_LE_32
 148

	)

2221 
	#R_SH_TLS_DTPMOD32
 149

	)

2222 
	#R_SH_TLS_DTPOFF32
 150

	)

2223 
	#R_SH_TLS_TPOFF32
 151

	)

2224 
	#R_SH_GOT32
 160

	)

2225 
	#R_SH_PLT32
 161

	)

2226 
	#R_SH_COPY
 162

	)

2227 
	#R_SH_GLOB_DAT
 163

	)

2228 
	#R_SH_JMP_SLOT
 164

	)

2229 
	#R_SH_RELATIVE
 165

	)

2230 
	#R_SH_GOTOFF
 166

	)

2231 
	#R_SH_GOTPC
 167

	)

2233 
	#R_SH_NUM
 256

	)

2237 
	#R_390_NONE
 0

	)

2238 
	#R_390_8
 1

	)

2239 
	#R_390_12
 2

	)

2240 
	#R_390_16
 3

	)

2241 
	#R_390_32
 4

	)

2242 
	#R_390_PC32
 5

	)

2243 
	#R_390_GOT12
 6

	)

2244 
	#R_390_GOT32
 7

	)

2245 
	#R_390_PLT32
 8

	)

2246 
	#R_390_COPY
 9

	)

2247 
	#R_390_GLOB_DAT
 10

	)

2248 
	#R_390_JMP_SLOT
 11

	)

2249 
	#R_390_RELATIVE
 12

	)

2250 
	#R_390_GOTOFF32
 13

	)

2251 
	#R_390_GOTPC
 14

	)

2252 
	#R_390_GOT16
 15

	)

2253 
	#R_390_PC16
 16

	)

2254 
	#R_390_PC16DBL
 17

	)

2255 
	#R_390_PLT16DBL
 18

	)

2256 
	#R_390_PC32DBL
 19

	)

2257 
	#R_390_PLT32DBL
 20

	)

2258 
	#R_390_GOTPCDBL
 21

	)

2259 
	#R_390_64
 22

	)

2260 
	#R_390_PC64
 23

	)

2261 
	#R_390_GOT64
 24

	)

2262 
	#R_390_PLT64
 25

	)

2263 
	#R_390_GOTENT
 26

	)

2264 
	#R_390_GOTOFF16
 27

	)

2265 
	#R_390_GOTOFF64
 28

	)

2266 
	#R_390_GOTPLT12
 29

	)

2267 
	#R_390_GOTPLT16
 30

	)

2268 
	#R_390_GOTPLT32
 31

	)

2269 
	#R_390_GOTPLT64
 32

	)

2270 
	#R_390_GOTPLTENT
 33

	)

2271 
	#R_390_PLTOFF16
 34

	)

2272 
	#R_390_PLTOFF32
 35

	)

2273 
	#R_390_PLTOFF64
 36

	)

2274 
	#R_390_TLS_LOAD
 37

	)

2275 
	#R_390_TLS_GDCALL
 38

	)

2277 
	#R_390_TLS_LDCALL
 39

	)

2279 
	#R_390_TLS_GD32
 40

	)

2281 
	#R_390_TLS_GD64
 41

	)

2283 
	#R_390_TLS_GOTIE12
 42

	)

2285 
	#R_390_TLS_GOTIE32
 43

	)

2287 
	#R_390_TLS_GOTIE64
 44

	)

2289 
	#R_390_TLS_LDM32
 45

	)

2291 
	#R_390_TLS_LDM64
 46

	)

2293 
	#R_390_TLS_IE32
 47

	)

2295 
	#R_390_TLS_IE64
 48

	)

2297 
	#R_390_TLS_IEENT
 49

	)

2299 
	#R_390_TLS_LE32
 50

	)

2301 
	#R_390_TLS_LE64
 51

	)

2303 
	#R_390_TLS_LDO32
 52

	)

2305 
	#R_390_TLS_LDO64
 53

	)

2307 
	#R_390_TLS_DTPMOD
 54

	)

2308 
	#R_390_TLS_DTPOFF
 55

	)

2309 
	#R_390_TLS_TPOFF
 56

	)

2311 
	#R_390_20
 57

	)

2312 
	#R_390_GOT20
 58

	)

2313 
	#R_390_GOTPLT20
 59

	)

2314 
	#R_390_TLS_GOTIE20
 60

	)

2317 
	#R_390_NUM
 61

	)

2320 
	#R_CRIS_NONE
 0

	)

2321 
	#R_CRIS_8
 1

	)

2322 
	#R_CRIS_16
 2

	)

2323 
	#R_CRIS_32
 3

	)

2324 
	#R_CRIS_8_PCREL
 4

	)

2325 
	#R_CRIS_16_PCREL
 5

	)

2326 
	#R_CRIS_32_PCREL
 6

	)

2327 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2328 
	#R_CRIS_GNU_VTENTRY
 8

	)

2329 
	#R_CRIS_COPY
 9

	)

2330 
	#R_CRIS_GLOB_DAT
 10

	)

2331 
	#R_CRIS_JUMP_SLOT
 11

	)

2332 
	#R_CRIS_RELATIVE
 12

	)

2333 
	#R_CRIS_16_GOT
 13

	)

2334 
	#R_CRIS_32_GOT
 14

	)

2335 
	#R_CRIS_16_GOTPLT
 15

	)

2336 
	#R_CRIS_32_GOTPLT
 16

	)

2337 
	#R_CRIS_32_GOTREL
 17

	)

2338 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2339 
	#R_CRIS_32_PLT_PCREL
 19

	)

2341 
	#R_CRIS_NUM
 20

	)

2344 
	#R_X86_64_NONE
 0

	)

2345 
	#R_X86_64_64
 1

	)

2346 
	#R_X86_64_PC32
 2

	)

2347 
	#R_X86_64_GOT32
 3

	)

2348 
	#R_X86_64_PLT32
 4

	)

2349 
	#R_X86_64_COPY
 5

	)

2350 
	#R_X86_64_GLOB_DAT
 6

	)

2351 
	#R_X86_64_JUMP_SLOT
 7

	)

2352 
	#R_X86_64_RELATIVE
 8

	)

2353 
	#R_X86_64_GOTPCREL
 9

	)

2355 
	#R_X86_64_32
 10

	)

2356 
	#R_X86_64_32S
 11

	)

2357 
	#R_X86_64_16
 12

	)

2358 
	#R_X86_64_PC16
 13

	)

2359 
	#R_X86_64_8
 14

	)

2360 
	#R_X86_64_PC8
 15

	)

2361 
	#R_X86_64_DTPMOD64
 16

	)

2362 
	#R_X86_64_DTPOFF64
 17

	)

2363 
	#R_X86_64_TPOFF64
 18

	)

2364 
	#R_X86_64_TLSGD
 19

	)

2366 
	#R_X86_64_TLSLD
 20

	)

2368 
	#R_X86_64_DTPOFF32
 21

	)

2369 
	#R_X86_64_GOTTPOFF
 22

	)

2371 
	#R_X86_64_TPOFF32
 23

	)

2373 
	#R_X86_64_NUM
 24

	)

	@include/image.h

31 #i‚de‡
__IMAGE_H__


32 
	#__IMAGE_H__


	)

37 
	#IH_OS_INVALID
 0

	)

38 
	#IH_OS_OPENBSD
 1

	)

39 
	#IH_OS_NETBSD
 2

	)

40 
	#IH_OS_FREEBSD
 3

	)

41 
	#IH_OS_4_4BSD
 4

	)

42 
	#IH_OS_LINUX
 5

	)

43 
	#IH_OS_SVR4
 6

	)

44 
	#IH_OS_ESIX
 7

	)

45 
	#IH_OS_SOLARIS
 8

	)

46 
	#IH_OS_IRIX
 9

	)

47 
	#IH_OS_SCO
 10

	)

48 
	#IH_OS_DELL
 11

	)

49 
	#IH_OS_NCR
 12

	)

50 
	#IH_OS_LYNXOS
 13

	)

51 
	#IH_OS_VXWORKS
 14

	)

52 
	#IH_OS_PSOS
 15

	)

53 
	#IH_OS_QNX
 16

	)

54 
	#IH_OS_U_BOOT
 17

	)

55 
	#IH_OS_RTEMS
 18

	)

56 
	#IH_OS_ARTOS
 19

	)

57 
	#IH_OS_UNITY
 20

	)

58 
	#IH_OS_INTEGRITY
 21

	)

63 
	#IH_ARCH_INVALID
 0

	)

64 
	#IH_ARCH_ALPHA
 1

	)

65 
	#IH_ARCH_ARM
 2

	)

66 
	#IH_ARCH_I386
 3

	)

67 
	#IH_ARCH_IA64
 4

	)

68 
	#IH_ARCH_MIPS
 5

	)

69 
	#IH_ARCH_MIPS64
 6

	)

70 
	#IH_ARCH_PPC
 7

	)

71 
	#IH_ARCH_S390
 8

	)

72 
	#IH_ARCH_SH
 9

	)

73 
	#IH_ARCH_SPARC
 10

	)

74 
	#IH_ARCH_SPARC64
 11

	)

75 
	#IH_ARCH_M68K
 12

	)

76 
	#IH_ARCH_NIOS
 13

	)

77 
	#IH_ARCH_MICROBLAZE
 14

	)

78 
	#IH_ARCH_NIOS2
 15

	)

79 
	#IH_ARCH_BLACKFIN
 16

	)

80 
	#IH_ARCH_AVR32
 17

	)

81 
	#IH_ARCH_ST200
 18

	)

122 
	#IH_TYPE_INVALID
 0

	)

123 
	#IH_TYPE_STANDALONE
 1

	)

124 
	#IH_TYPE_KERNEL
 2

	)

125 
	#IH_TYPE_RAMDISK
 3

	)

126 
	#IH_TYPE_MULTI
 4

	)

127 
	#IH_TYPE_FIRMWARE
 5

	)

128 
	#IH_TYPE_SCRIPT
 6

	)

129 
	#IH_TYPE_FILESYSTEM
 7

	)

130 
	#IH_TYPE_FLATDT
 8

	)

131 
	#IH_TYPE_KWBIMAGE
 9

	)

132 
	#IH_TYPE_KERNEL_NOLOAD
 14

	)

138 
	#IH_COMP_NONE
 0

	)

139 
	#IH_COMP_GZIP
 1

	)

140 
	#IH_COMP_BZIP2
 2

	)

141 
	#IH_COMP_LZMA
 3

	)

142 
	#IH_COMP_LZO
 4

	)

144 
	#IH_MAGIC
 0x27051956

	)

145 
	#IH_NMLEN
 32

	)

151 
	simage_hódî
 {

152 
uöt32_t
 
	mih_magic
;

153 
uöt32_t
 
	mih_h¸c
;

154 
uöt32_t
 
	mih_time
;

155 
uöt32_t
 
	mih_size
;

156 
uöt32_t
 
	mih_lﬂd
;

157 
uöt32_t
 
	mih_ï
;

158 
uöt32_t
 
	mih_d¸c
;

159 
uöt8_t
 
	mih_os
;

160 
uöt8_t
 
	mih_¨ch
;

161 
uöt8_t
 
	mih_ty≥
;

162 
uöt8_t
 
	mih_comp
;

163 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

164 } 
	timage_hódî_t
;

	@include/kexec-uImage.h

1 #i‚de‡
__KEXEC_UIMAGE_H__


2 
	#__KEXEC_UIMAGE_H__


	)

4 
	sImage_öfo
 {

5 c⁄° *
	mbuf
;

6 
off_t
 
	mÀn
;

7 
	mba£
;

8 
	mï
;

11 
uImage_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
, 
¨ch
);

12 
uImage_¥obe_kî√l
(c⁄° *
buf
, 
off_t
 
Àn
, 
¨ch
);

13 
uImage_¥obe_ømdisk
(c⁄° *
buf
, 
off_t
 
Àn
, 
¨ch
);

14 
uImage_lﬂd
(c⁄° *
buf
, 
off_t
 
Àn
, 
Image_öfo
 *
öfo
);

	@include/unused.h

1 #i‚de‡
UNUSED_H


2 
	#UNUSED_H


	)

6 #ifde‡
UNUSED


7 #ñi‡
deföed
(
__GNUC__
)

8 
	#UNUSED
(
x
Ë
UNUSED_
 ## x 
	`__©åibuã__
((
unu£d
))

	)

9 #ñi‡
deföed
(
__LCLINT__
)

10 
	#UNUSED
(
x
Ë 
	)
x

12 
	#UNUSED
(
x
Ë
	)
x

	@include/x86/mb_header.h

24 
	smu…iboŸ_hódî


27 
uöt32_t
 
	mmagic
;

30 
uöt32_t
 
	mÊags
;

37 
uöt32_t
 
	mchecksum
;

40 
uöt32_t
 
	mhódî_addr
;

41 
uöt32_t
 
	mlﬂd_addr
;

42 
uöt32_t
 
	mlﬂd_íd_addr
;

43 
uöt32_t
 
	mbss_íd_addr
;

44 
uöt32_t
 
	míåy_addr
;

47 
uöt32_t
 
	mmode_ty≥
;

48 
uöt32_t
 
	mwidth
;

49 
uöt32_t
 
	mheight
;

50 
uöt32_t
 
	mdïth
;

57 
	#MULTIBOOT_SEARCH
 8192

	)

58 
	#MULTIBOOT_FOUND
(
addr
, 
Àn
) \

59 (! ((
addr
) & 0x3) \

60 && (
Àn
) >= 12 \

61 && *((*Ë(
addr
)Ë=
MULTIBOOT_MAGIC
 \

62 && ! (*((
uöt32_t
 *Ë(
addr
)) + *((uint32_t *) (addr + 4)) \

63 + *((
uöt32_t
 *Ë(
addr
 + 8))) \

64 && (! (
MULTIBOOT_AOUT_KLUDGE
 & *((*Ë(
addr
 + 4))Ë|| (
Àn
) >= 32) \

65 && (! (
MULTIBOOT_VIDEO_MODE
 & *((*Ë(
addr
 + 4))Ë|| (
Àn
Ë>48))

	)

68 
	#MULTIBOOT_MAGIC
 0x1BADB002

	)

75 
	#MULTIBOOT_MUSTKNOW
 0x0000FFFF

	)

78 
	#MULTIBOOT_UNSUPPORTED
 0x0000FFF8

	)

81 
	#MULTIBOOT_PAGE_ALIGN
 0x00000001

	)

84 
	#MULTIBOOT_MEMORY_INFO
 0x00000002

	)

87 
	#MULTIBOOT_VIDEO_MODE
 0x00000004

	)

90 
	#MULTIBOOT_AOUT_KLUDGE
 0x00010000

	)

	@include/x86/mb_info.h

24 
	smod_li°


27 
uöt32_t
 
	mmod_°¨t
;

28 
uöt32_t
 
	mmod_íd
;

31 
uöt32_t
 
	mcmdlöe
;

34 
uöt32_t
 
	m∑d
;

45 
	sAddrR™geDesc


47 
uöt32_t
 
	msize
;

48 
uöt32_t
 
	mba£_addr_low
;

49 
uöt32_t
 
	mba£_addr_high
;

50 
uöt32_t
 
	mÀngth_low
;

51 
uöt32_t
 
	mÀngth_high
;

52 
uöt32_t
 
	mTy≥
;

58 
	#MB_ARD_MEMORY
 1

	)

62 
	sdrive_öfo


65 
uöt32_t
 
	msize
;

68 
uöt8_t
 
	mdrive_numbî
;

71 
uöt8_t
 
	mdrive_mode
;

74 
uöt16_t
 
	mdrive_cylödîs
;

75 
uöt8_t
 
	mdrive_hóds
;

76 
uöt8_t
 
	mdrive_£˘‹s
;

79 
uöt16_t
 
	mdrive_p‹ts
[0];

83 
	#MB_DI_CHS_MODE
 0

	)

84 
	#MB_DI_LBA_MODE
 1

	)

88 
	s≠m_öfo


90 
uöt16_t
 
	mvîsi⁄
;

91 
uöt16_t
 
	mc£g
;

92 
uöt32_t
 
	moff£t
;

93 
uöt32_t
 
	mc£g_16
;

94 
uöt32_t
 
	md£g_16
;

95 
uöt32_t
 
	mc£g_Àn
;

96 
uöt32_t
 
	mc£g_16_Àn
;

97 
uöt32_t
 
	md£g_16_Àn
;

108 
	smu…iboŸ_öfo


111 
uöt32_t
 
	mÊags
;

114 
uöt32_t
 
	mmem_lowî
;

115 
uöt32_t
 
	mmem_uµî
;

118 
uöt32_t
 
	mboŸ_devi˚
;

121 
uöt32_t
 
	mcmdlöe
;

124 
uöt32_t
 
	mmods_cou¡
;

125 
uöt32_t
 
	mmods_addr
;

132 
uöt32_t
 
	mèbsize
;

133 
uöt32_t
 
	m°rsize
;

134 
uöt32_t
 
	maddr
;

135 
uöt32_t
 
	m∑d
;

137 
	ma
;

142 
uöt32_t
 
	mnum
;

143 
uöt32_t
 
	msize
;

144 
uöt32_t
 
	maddr
;

145 
uöt32_t
 
	mshndx
;

147 
	me
;

149 
	msyms
;

152 
uöt32_t
 
	mmm≠_Àngth
;

153 
uöt32_t
 
	mmm≠_addr
;

156 
uöt32_t
 
	mdrives_Àngth
;

157 
uöt32_t
 
	mdrives_addr
;

160 
uöt32_t
 
	mc⁄fig_èbÀ
;

163 
uöt32_t
 
	mboŸ_lﬂdî_«me
;

166 
uöt32_t
 
	m≠m_èbÀ
;

169 
uöt32_t
 
	mvbe_c⁄åﬁ_öfo
;

170 
uöt32_t
 
	mvbe_mode_öfo
;

171 
uöt16_t
 
	mvbe_mode
;

172 
uöt16_t
 
	mvbe_öãrÁ˚_£g
;

173 
uöt16_t
 
	mvbe_öãrÁ˚_off
;

174 
uöt16_t
 
	mvbe_öãrÁ˚_Àn
;

182 
	#MB_INFO_MEMORY
 0x00000001

	)

184 
	#MB_INFO_BOOTDEV
 0x00000002

	)

186 
	#MB_INFO_CMDLINE
 0x00000004

	)

188 
	#MB_INFO_MODS
 0x00000008

	)

193 
	#MB_INFO_AOUT_SYMS
 0x00000010

	)

195 
	#MB_INFO_ELF_SHDR
 0x00000020

	)

198 
	#MB_INFO_MEM_MAP
 0x00000040

	)

201 
	#MB_INFO_DRIVE_INFO
 0x00000080

	)

204 
	#MB_INFO_CONFIG_TABLE
 0x00000100

	)

207 
	#MB_INFO_BOOT_LOADER_NAME
 0x00000200

	)

210 
	#MB_INFO_APM_TABLE
 0x00000400

	)

213 
	#MB_INFO_VIDEO_INFO
 0x00000800

	)

219 
	#MULTIBOOT_VALID
 0x2BADB002

	)

	@include/x86/x86-linux.h

1 #i‚de‡
X86_LINUX_H


2 
	#X86_LINUX_H


	)

4 
	#TENATIVE
 0

	)

6 
	#E820MAP
 0x2d0

	)

7 
	#E820NR
 0x1e8

	)

9 #i‚de‡
E820MAX


10 
	#E820MAX
 128

	)

13 #i‚de‡
ASSEMBLY


15 #i‚de‡
E820_RAM


16 
	se820íåy
 {

17 
uöt64_t
 
	maddr
;

18 
uöt64_t
 
	msize
;

19 
uöt32_t
 
	mty≥
;

20 
	#E820_RAM
 1

	)

21 
	#E820_RESERVED
 2

	)

22 
	#E820_ACPI
 3

	)

23 
	#E820_NVS
 4

	)

24 } 
__©åibuã__
((
∑cked
));

28 
	sdrive_öfo_°ru˘
 {

29 
uöt8_t
 
	mdummy
[32];

31 
	ssys_desc_èbÀ
 {

32 
uöt16_t
 
	mÀngth
;

33 
uöt8_t
 
	mèbÀ
[30];

36 
	s≠m_bios_öfo
 {

37 
uöt16_t
 
	mvîsi⁄
;

38 
uöt16_t
 
	mc£g
;

39 
uöt32_t
 
	moff£t
;

40 
uöt16_t
 
	mc£g_16
;

41 
uöt16_t
 
	md£g
;

42 
uöt16_t
 
	mÊags
;

43 
uöt16_t
 
	mc£g_Àn
;

44 
uöt16_t
 
	mc£g_16_Àn
;

45 
uöt16_t
 
	md£g_Àn
;

46 
uöt8_t
 
	mª£rved
[44];

53 
	#EDD_MBR_SIG_MAX
 16

	)

54 
	#EDDMAXNR
 6

	)

56 
	#EDD_EXT_FIXED_DISK_ACCESS
 (1 << 0)

	)

57 
	#EDD_EXT_DEVICE_LOCKING_AND_EJECTING
 (1 << 1)

	)

58 
	#EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT
 (1 << 2)

	)

59 
	#EDD_EXT_64BIT_EXTENSIONS
 (1 << 3)

	)

61 
	#EDD_DEVICE_PARAM_SIZE
 74

	)

63 
	sedd_öfo
 {

64 
uöt8_t
 
	mdevi˚
;

65 
uöt8_t
 
	mvîsi⁄
;

66 
uöt16_t
 
	möãrÁ˚_suµ‹t
;

67 
uöt16_t
 
	mÀgacy_max_cylödî
;

68 
uöt8_t
 
	mÀgacy_max_hód
;

69 
uöt8_t
 
	mÀgacy_£˘‹s_≥r_åack
;

70 
uöt8_t
 
	medd_devi˚_∑øms
[
EDD_DEVICE_PARAM_SIZE
];

71 } 
__©åibuã__
 ((
∑cked
));

73 
	sx86_löux_∑øm_hódî
 {

74 
uöt8_t
 
	m‹ig_x
;

75 
uöt8_t
 
	m‹ig_y
;

76 
uöt16_t
 
	mext_mem_k
;

77 
uöt16_t
 
	m‹ig_video_∑ge
;

78 
uöt8_t
 
	m‹ig_video_mode
;

79 
uöt8_t
 
	m‹ig_video_cﬁs
;

80 
uöt16_t
 
	munu£d2
;

81 
uöt16_t
 
	m‹ig_video_ega_bx
;

82 
uöt16_t
 
	munu£d3
;

83 
uöt8_t
 
	m‹ig_video_löes
;

84 
uöt8_t
 
	m‹ig_video_isVGA
;

85 
uöt16_t
 
	m‹ig_video_poöts
;

88 
uöt16_t
 
	mlfb_width
;

89 
uöt16_t
 
	mlfb_height
;

90 
uöt16_t
 
	mlfb_dïth
;

91 
uöt32_t
 
	mlfb_ba£
;

92 
uöt32_t
 
	mlfb_size
;

93 
uöt16_t
 
	m˛_magic
;

94 
	#CL_MAGIC_VALUE
 0xA33F

	)

95 
uöt16_t
 
	m˛_off£t
;

96 
uöt16_t
 
	mlfb_löñígth
;

97 
uöt8_t
 
	mªd_size
;

98 
uöt8_t
 
	mªd_pos
;

99 
uöt8_t
 
	mgªí_size
;

100 
uöt8_t
 
	mgªí_pos
;

101 
uöt8_t
 
	mblue_size
;

102 
uöt8_t
 
	mblue_pos
;

103 
uöt8_t
 
	mrsvd_size
;

104 
uöt8_t
 
	mrsvd_pos
;

105 
uöt16_t
 
	mveßpm_£g
;

106 
uöt16_t
 
	mveßpm_off
;

107 
uöt16_t
 
	m∑ges
;

108 
uöt8_t
 
	mª£rved4
[12];

110 
≠m_bios_öfo
 
	m≠m_bios_öfo
;

111 
drive_öfo_°ru˘
 
	mdrive_öfo
;

112 
sys_desc_èbÀ
 
	msys_desc_èbÀ
;

113 
uöt32_t
 
	mext_ømdisk_image
;

114 
uöt32_t
 
	mext_ømdisk_size
;

115 
uöt32_t
 
	mext_cmd_löe_±r
;

116 
uöt8_t
 
	mª£rved4_1
[0x1c0 - 0xcc];

117 
uöt8_t
 
	mefi_öfo
[32];

118 
uöt32_t
 
	mÆt_mem_k
;

119 
uöt8_t
 
	mª£rved5
[4];

120 
uöt8_t
 
	me820_m≠_ƒ
;

121 
uöt8_t
 
	meddbuf_íåõs
;

122 
uöt8_t
 
	medd_mbr_sig_buf_íåõs
;

123 
uöt8_t
 
	mª£rved6
[6];

124 
uöt8_t
 
	m£tup_£˘s
;

125 
uöt16_t
 
	mmou¡_roŸ_rd⁄ly
;

126 
uöt16_t
 
	msyssize
;

127 
uöt16_t
 
	msw≠dev
;

128 
uöt16_t
 
	mømdisk_Êags
;

129 
	#RAMDISK_IMAGE_START_MASK
 0x07FF

	)

130 
	#RAMDISK_PROMPT_FLAG
 0x8000

	)

131 
	#RAMDISK_LOAD_FLAG
 0x4000

	)

132 
uöt16_t
 
	mvid_mode
;

133 
uöt16_t
 
	mroŸ_dev
;

134 
uöt8_t
 
	mª£rved9
[1];

135 
uöt8_t
 
	maux_devi˚_öfo
;

137 
uöt8_t
 
	mª£rved10
[2];

138 
uöt8_t
 
	mhódî_magic
[4];

139 
uöt16_t
 
	m¥Ÿocﬁ_vîsi⁄
;

140 
uöt16_t
 
	mrmode_swôch_ù
;

141 
uöt16_t
 
	mrmode_swôch_cs
;

142 
uöt8_t
 
	mª£rved11
[4];

143 
uöt8_t
 
	mlﬂdî_ty≥
;

144 
	#LOADER_TYPE_LOADLIN
 1

	)

145 
	#LOADER_TYPE_BOOTSECT_LOADER
 2

	)

146 
	#LOADER_TYPE_SYSLINUX
 3

	)

147 
	#LOADER_TYPE_ETHERBOOT
 4

	)

148 
	#LOADER_TYPE_KEXEC
 0x0D

	)

149 
	#LOADER_TYPE_UNKNOWN
 0xFF

	)

150 
uöt8_t
 
	mlﬂdî_Êags
;

151 
uöt8_t
 
	mª£rved12
[2];

152 
uöt32_t
 
	mkî√l_°¨t
;

153 
uöt32_t
 
	möôrd_°¨t
;

154 
uöt32_t
 
	möôrd_size
;

155 
uöt8_t
 
	mª£rved13
[4];

157 
uöt16_t
 
	mhóp_íd_±r
;

158 
uöt8_t
 
	mª£rved14
[2];

160 
uöt32_t
 
	mcmd_löe_±r
;

162 
uöt32_t
 
	möôrd_addr_max
;

163 #i‡
TENATIVE


165 
uöt16_t
 
	míåy32_off
;

166 
uöt16_t
 
	möã∫Æ_cmdlöe_off
;

167 
uöt32_t
 
	mlow_ba£
;

168 
uöt32_t
 
	mlow_memsz
;

169 
uöt32_t
 
	mlow_fûesz
;

170 
uöt32_t
 
	mªÆ_ba£
;

171 
uöt32_t
 
	mªÆ_memsz
;

172 
uöt32_t
 
	mªÆ_fûesz
;

173 
uöt32_t
 
	mhigh_ba£
;

174 
uöt32_t
 
	mhigh_memsz
;

175 
uöt32_t
 
	mhigh_fûesz
;

176 
uöt8_t
 
	mª£rved15
[0x2d0 - 0x258];

179 
uöt32_t
 
	mkî√l_Æignmít
;

180 
uöt8_t
 
	mªloˇèbÀ_kî√l
;

181 
uöt8_t
 
	mmö_Æignmít
;

182 
uöt16_t
 
	mxlﬂdÊags
;

183 
uöt32_t
 
	mcmdlöe_size
;

184 
uöt32_t
 
	mh¨dw¨e_sub¨ch
;

185 
uöt64_t
 
	mh¨dw¨e_sub¨ch_d©a
;

186 
uöt32_t
 
	m∑ylﬂd_off£t
;

187 
uöt32_t
 
	m∑ylﬂd_Àngth
;

188 
uöt64_t
 
	m£tup_d©a
;

189 
uöt64_t
 
	m¥ef_addªss
;

190 
uöt32_t
 
	möô_size
;

191 
uöt32_t
 
	mh™dovî_off£t
;

192 
uöt8_t
 
	mª£rved16
[0x290 - 0x268];

193 
uöt32_t
 
	medd_mbr_sig_buf„r
[
EDD_MBR_SIG_MAX
];

195 
e820íåy
 
	me820_m≠
[
E820MAX
];

196 
uöt8_t
 
	m_∑d8
[48];

197 
edd_öfo
 
	meddbuf
[
EDDMAXNR
];

199 
	#COMMAND_LINE_SIZE
 2048

	)

202 
	sx86_löux_Áked_∑øm_hódî
 {

203 
x86_löux_∑øm_hódî
 
	mhdr
;

204 
uöt8_t
 
	mcomm™d_löe
[
COMMAND_LINE_SIZE
];

208 
	sx86_löux_hódî
 {

209 
uöt8_t
 
	mª£rved1
[0xc0];

210 
uöt32_t
 
	mext_ømdisk_image
;

211 
uöt32_t
 
	mext_ømdisk_size
;

212 
uöt32_t
 
	mext_cmd_löe_±r
;

213 
uöt8_t
 
	mª£rved1_1
[0x1f1-0xcc];

214 
uöt8_t
 
	m£tup_£˘s
;

215 
uöt16_t
 
	mroŸ_Êags
;

216 
uöt32_t
 
	msyssize
;

217 
uöt16_t
 
	møm_size
;

218 
uöt16_t
 
	mvid_mode
;

219 
uöt16_t
 
	mroŸ_dev
;

220 
uöt16_t
 
	mboŸ_£˘‹_magic
;

222 
uöt16_t
 
	mjump
;

223 
uöt8_t
 
	mhódî_magic
[4];

224 
uöt16_t
 
	m¥Ÿocﬁ_vîsi⁄
;

225 
uöt32_t
 
	mªÆmode_swtch
;

226 
uöt16_t
 
	m°¨t_sys
;

227 
uöt16_t
 
	mkvî_addr
;

228 
uöt8_t
 
	mty≥_of_lﬂdî
;

229 
uöt8_t
 
	mlﬂdÊags
;

230 
uöt16_t
 
	m£tup_move_size
;

231 
uöt32_t
 
	mcode32_°¨t
;

232 
uöt32_t
 
	mømdisk_image
;

233 
uöt32_t
 
	mømdisk_size
;

234 
uöt32_t
 
	mboŸ£˘_kludge
;

236 
uöt16_t
 
	mhóp_íd_±r
;

237 
uöt8_t
 
	mext_lﬂdî_vî
;

238 
uöt8_t
 
	mext_lﬂdî_ty≥
;

240 
uöt32_t
 
	mcmd_löe_±r
;

242 
uöt32_t
 
	möôrd_addr_max
;

244 
uöt32_t
 
	mkî√l_Æignmít
;

245 
uöt8_t
 
	mªloˇèbÀ_kî√l
;

246 
uöt8_t
 
	mmö_Æignmít
;

247 
uöt16_t
 
	mxlﬂdÊags
;

248 
uöt32_t
 
	mcmdlöe_size
;

249 
uöt32_t
 
	mh¨dw¨e_sub¨ch
;

250 
uöt64_t
 
	mh¨dw¨e_sub¨ch_d©a
;

251 
uöt32_t
 
	m∑ylﬂd_off£t
;

252 
uöt32_t
 
	m∑ylﬂd_size
;

253 
uöt64_t
 
	m£tup_d©a
;

254 
uöt64_t
 
	m¥ef_addªss
;

255 
uöt32_t
 
	möô_size
;

256 
uöt32_t
 
	mh™dovî_off£t
;

257 } 
__©åibuã__
((
∑cked
));

261 
	#DEFAULT_INITRD_ADDR_MAX
 0x37FFFFFF

	)

262 
	#DEFAULT_BZIMAGE_ADDR_MAX
 0x37FFFFFF

	)

	@kdump/kdump.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<î∫o.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	~<f˙é.h
>

10 
	~<ídün.h
>

11 
	~<ñf.h
>

13 #i‡!
deföed
(
__BYTE_ORDER
Ë|| !deföed(
__LITTLE_ENDIAN
Ë|| !deföed(
__BIG_ENDIAN
)

14 #îr‹ 
Endün
 
deföes
 
missög


17 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


18 
	#ELFDATALOCAL
 
ELFDATA2LSB


	)

19 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


20 
	#ELFDATALOCAL
 
ELFDATA2MSB


	)

22 #îr‹ 
Unknown
 
byã
 
‹dî


25 
	#MAP_WINDOW_SIZE
 (64*1024*1024)

	)

26 
	#DEV_MEM
 "/dev/mem"

	)

28 *
	$m≠_addr
(
fd
, 
size
, 
off_t
 
off£t
)

30 *
ªsu…
;

31 
ªsu…
 = 
	`mm≠
(0, 
size
, 
PROT_READ
, 
MAP_SHARED
, 
fd
, 
off£t
);

32 i‡(
ªsu…
 =
MAP_FAILED
) {

33 
	`Ârötf
(
°dîr
, "C™nŸ mm≠ " 
DEV_MEM
 " offset: %llu size: %lu: %s\n",

34 ()
off£t
, 
size
, 
	`°ªº‹
(
î∫o
));

35 
	`exô
(5);

37  
ªsu…
;

38 
	}
}

40 
	$unm≠_addr
(*
addr
, 
size
)

42 
ªt
;

43 
ªt
 = 
	`munm≠
(
addr
, 
size
);

44 i‡(
ªt
 < 0) {

45 
	`Ârötf
(
°dîr
, "munmap failed: %s\n",

46 
	`°ªº‹
(
î∫o
));

47 
	`exô
(6);

49 
	}
}

51 *
	$xmÆloc
(
size_t
 
size
)

53 *
ªsu…
;

54 
ªsu…
 = 
	`mÆloc
(
size
);

55 i‡(
ªsu…
 =
NULL
) {

56 
	`Ârötf
(
°dîr
, "malloc of %u bytes failed: %s\n",

57 ()
size
, 
	`°ªº‹
(
î∫o
));

58 
	`exô
(7);

60  
ªsu…
;

61 
	}
}

63 *
	$cﬁÀ˘_nŸes
(

64 
fd
, 
Elf64_Ehdr
 *
ehdr
, 
Elf64_Phdr
 *
phdr
, 
size_t
 *
nŸe_byãs
)

66 
i
;

67 
size_t
 
byãs
, 
ªsu…_byãs
;

68 *
nŸes
;

70 
ªsu…_byãs
 = 0;

72 
byãs
 = 0;

73 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

74 i‡(
phdr
[
i
].
p_ty≥
 =
PT_NOTE
) {

75 
byãs
 +
phdr
[
i
].
p_fûesz
;

80 
nŸes
 = 
	`xmÆloc
(
byãs
);

83 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

84 
Elf64_Nhdr
 *
hdr
, *
lhdr
, *
nhdr
;

85 *
≤Ÿes
;

86 i‡(
phdr
[
i
].
p_ty≥
 !
PT_NOTE
) {

90 
≤Ÿes
 = 
	`m≠_addr
(
fd
, 
phdr
[
i
].
p_fûesz
,Öhdr[i].
p_off£t
);

91 
	`mem˝y
(
nŸes
 + 
ªsu…_byãs
, 
≤Ÿes
, 
phdr
[
i
].
p_fûesz
);

92 
	`unm≠_addr
(
≤Ÿes
, 
phdr
[
i
].
p_fûesz
);

95 
hdr
 = (
Elf64_Nhdr
 *)(
nŸes
 + 
ªsu…_byãs
);

96 
lhdr
 = (
Elf64_Nhdr
 *)(
nŸes
 + 
ªsu…_byãs
 + 
phdr
[
i
].
p_fûesz
);

97 ; 
hdr
 < 
lhdr
; hd∏
nhdr
) {

98 
size_t
 
hdr_size
;

102 i‡(
hdr
->
n_«mesz
 == 0) {

105 
hdr_size
 =

106 (*
hdr
) +

107 ((
hdr
->
n_«mesz
 + 3) & ~3) +

108 ((
hdr
->
n_descsz
 + 3) & ~3);

110 
nhdr
 = (
Elf64_Nhdr
 *)(((*)
hdr
Ë+ 
hdr_size
);

112 i‡(
nhdr
 > 
lhdr
) {

116 
ªsu…_byãs
 = ((*)
hdr
Ë- 
nŸes
;

119 *
nŸe_byãs
 = 
ªsu…_byãs
;

120  
nŸes
;

121 
	}
}

123 *
	$gíî©e_√w_hódîs
(

124 
Elf64_Ehdr
 *
ehdr
, 
Elf64_Phdr
 *
phdr
, 
size_t
 
nŸe_byãs
, size_à*
hódî_byãs
)

126 
phnum
;

127 
size_t
 
byãs
;

128 *
hódîs
;

129 
Elf64_Ehdr
 *
√hdr
;

130 
Elf64_Phdr
 *
≈hdr
;

131 
off£t
;

132 
i
;

136 
phnum
 = 1;

137 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

138 i‡(
phdr
[
i
].
p_ty≥
 =
PT_NOTE
) {

141 
phnum
++;

145 
byãs
 = (*
ehdr
Ë+ (*
phdr
)*
phnum
;

148 
hódîs
 = 
	`xmÆloc
(
byãs
);

151 
√hdr
 = (
Elf64_Ehdr
 *)
hódîs
;

152 
≈hdr
 = (
Elf64_Phdr
 *)(
hódîs
 + (*
√hdr
));

155 
	`mem˝y
(
√hdr
, 
ehdr
, (*nehdr));

156 
√hdr
->
e_phoff
 = (*nehdr);

157 
√hdr
->
e_phnum
 = 
phnum
;

158 
√hdr
->
e_shoff
 = 0;

159 
√hdr
->
e_shítsize
 = 0;

160 
√hdr
->
e_shnum
 = 0;

161 
√hdr
->
e_sh°∫dx
 = 0;

164 
≈hdr
->
p_ty≥
 = 
PT_NOTE
;

165 
≈hdr
->
p_off£t
 = 
byãs
;

166 
≈hdr
->
p_vaddr
 = 0;

167 
≈hdr
->
p_∑ddr
 = 0;

168 
≈hdr
->
p_fûesz
 = 
nŸe_byãs
;

169 
≈hdr
->
p_memsz
 = 
nŸe_byãs
;

170 
≈hdr
->
p_Êags
 = 0;

171 
≈hdr
->
p_Æign
 = 0;

172 
≈hdr
++;

175 
off£t
 = 
byãs
 + 
nŸe_byãs
;

176 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

177 i‡(
phdr
[
i
].
p_ty≥
 =
PT_NOTE
) {

180 
	`mem˝y
(
≈hdr
, &
phdr
[
i
], (*nphdr));

181 
≈hdr
->
p_off£t
 = 
off£t
;

182 
off£t
 +
phdr
[
i
].
p_fûesz
;

185 *
hódî_byãs
 = 
byãs
;

186  
hódîs
;

187 
	}
}

189 
	$wrôe_Æl
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

191 
ssize_t
 
ªsu…
;

192 
size_t
 
wrôãn
 = 0;

193 c⁄° *
±r
;

194 
size_t
 
À·
;

195 
±r
 = 
buf
;

196 
À·
 = 
cou¡
;

198 
ªsu…
 = 
	`wrôe
(
fd
, 
±r
, 
À·
);

199 i‡(
ªsu…
 >= 0) {

200 
wrôãn
 +
ªsu…
;

201 
±r
 +
ªsu…
;

202 
À·
 -
ªsu…
;

204 i‡((
î∫o
 !
EAGAIN
Ë&& (î∫ÿ!
EINTR
)) {

205 
	`Ârötf
(
°dîr
, "write failed: %s\n",

206 
	`°ªº‹
(
î∫o
));

207 
	`exô
(8);

209 } 
wrôãn
 < 
cou¡
);

210 
	}
}

212 
	$maö
(
¨gc
, **
¨gv
)

214 *
°¨t_addr_°r
, *
íd
;

215 
°¨t_addr
;

216 
Elf64_Ehdr
 *
ehdr
;

217 
Elf64_Phdr
 *
phdr
;

218 *
nŸes
, *
hódîs
;

219 
size_t
 
nŸe_byãs
, 
hódî_byãs
;

220 
fd
;

221 
i
;

222 
°¨t_addr_°r
 = 0;

223 i‡(
¨gc
 > 2) {

224 
	`Ârötf
(
°dîr
, "Invalidárgument count\n");

225 
	`exô
(9);

227 i‡(
¨gc
 == 2) {

228 
°¨t_addr_°r
 = 
¨gv
[1];

230 i‡(!
°¨t_addr_°r
) {

231 
°¨t_addr_°r
 = 
	`gëív
("elfcorehdr");

233 i‡(!
°¨t_addr_°r
) {

234 
	`Ârötf
(
°dîr
, "Cannot findÅhe start ofÅhe core dump\n");

235 
	`exô
(1);

237 
°¨t_addr
 = 
	`°πouŒ
(
°¨t_addr_°r
, &
íd
, 0);

238 i‡((
°¨t_addr_°r
 =
íd
) || (*end != '\0')) {

239 
	`Ârötf
(
°dîr
, "Bad core dump startáddres: %s\n",

240 
°¨t_addr_°r
);

241 
	`exô
(2);

244 
fd
 = 
	`›í
(
DEV_MEM
, 
O_RDONLY
);

245 i‡(
fd
 < 0) {

246 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿" 
DEV_MEM
 ": %s\n",

247 
	`°ªº‹
(
î∫o
));

248 
	`exô
(3);

252 
ehdr
 = 
	`m≠_addr
(
fd
, (*ehdr), 
°¨t_addr
);

255 i‡–(
ehdr
->
e_idít
[
EI_MAG0
] !
ELFMAG0
) ||

256 (
ehdr
->
e_idít
[
EI_MAG1
] !
ELFMAG1
) ||

257 (
ehdr
->
e_idít
[
EI_MAG2
] !
ELFMAG2
) ||

258 (
ehdr
->
e_idít
[
EI_MAG3
] !
ELFMAG3
) ||

259 (
ehdr
->
e_idít
[
EI_CLASS
] !
ELFCLASS64
) ||

260 (
ehdr
->
e_idít
[
EI_DATA
] !
ELFDATALOCAL
) ||

261 (
ehdr
->
e_idít
[
EI_VERSION
] !
EV_CURRENT
) ||

262 (
ehdr
->
e_ty≥
 !
ET_CORE
) ||

263 (
ehdr
->
e_vîsi⁄
 !
EV_CURRENT
) ||

264 (
ehdr
->
e_ehsize
 !(
Elf64_Ehdr
)) ||

265 (
ehdr
->
e_phítsize
 !(
Elf64_Phdr
)) ||

266 (
ehdr
->
e_phnum
 == 0))

268 
	`Ârötf
(
°dîr
, "Invalid Elf header\n");

269 
	`exô
(4);

273 
phdr
 = 
	`m≠_addr
(
fd
, (*phdr)*(
ehdr
->
e_phnum
),Éhdr->
e_phoff
);

276 
nŸe_byãs
 = 0;

277 
nŸes
 = 
	`cﬁÀ˘_nŸes
(
fd
, 
ehdr
, 
phdr
, &
nŸe_byãs
);

280 
hódî_byãs
 = 0;

281 
hódîs
 = 
	`gíî©e_√w_hódîs
(
ehdr
, 
phdr
, 
nŸe_byãs
, &
hódî_byãs
);

284 
	`wrôe_Æl
(
STDOUT_FILENO
, 
hódîs
, 
hódî_byãs
);

285 
	`wrôe_Æl
(
STDOUT_FILENO
, 
nŸes
, 
nŸe_byãs
);

286 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

287 
off£t
, 
size
;

288 
size_t
 
wsize
;

289 i‡(
phdr
[
i
].
p_ty≥
 !
PT_NOTE
) {

292 
off£t
 = 
phdr
[
i
].
p_off£t
;

293 
size
 = 
phdr
[
i
].
p_fûesz
;

294 
wsize
 = 
MAP_WINDOW_SIZE
;

295 i‡(
wsize
 > 
size
) {

296 
wsize
 = 
size
;

298 ;
size
 > 0; sizê-
wsize
, 
off£t
 += wsize) {

299 *
buf
;

300 
wsize
 = 
MAP_WINDOW_SIZE
;

301 i‡(
wsize
 > 
size
) {

302 
wsize
 = 
size
;

304 
buf
 = 
	`m≠_addr
(
fd
, 
wsize
, 
off£t
);

305 
	`wrôe_Æl
(
STDOUT_FILENO
, 
buf
, 
wsize
);

306 
	`unm≠_addr
(
buf
, 
wsize
);

309 
	`‰ì
(
nŸes
);

310 
	`˛o£
(
fd
);

312 
	}
}

	@kexec/add_buffer.c

1 
	~"kexec.h
"

3 
	$add_buf„r
(
kexec_öfo
 *
öfo
,

4 c⁄° *
buf
,

5 
bufsz
,

6 
memsz
,

7 
buf_Æign
,

8 
buf_mö
,

9 
buf_max
,

10 
buf_íd
)

12  
	`add_buf„r_vút
(
öfo
, 
buf
, 
bufsz
, 
memsz
, 
buf_Æign
,

13 
buf_mö
, 
buf_max
, 
buf_íd
);

14 
	}
}

	@kexec/add_segment.c

1 
	~"kexec.h
"

3 
	$add_£gmít
(
kexec_öfo
 *
öfo
,

4 c⁄° *
buf
, 
size_t
 
bufsz
,

5 
ba£
, 
size_t
 
memsz
)

7  
	`add_£gmít_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
ba£
, 
memsz
, 0);

8 
	}
}

	@kexec/arch/alpha/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_ALPHA_OPTIONS_H


2 
	#KEXEC_ARCH_ALPHA_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

9 
	#KEXEC_ARCH_OPTIONS
 \

10 
KEXEC_OPTIONS
 \

11 

	)

12 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

17 
	#KEXEC_ALL_OPTIONS
 
KEXEC_ARCH_OPTIONS


	)

18 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/arm/crashdump-arm.c

23 
	~<limôs.h
>

24 
	~<ñf.h
>

25 
	~<î∫o.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<uni°d.h
>

30 
	~"../../kexec.h
"

31 
	~"../../kexec-ñf.h
"

32 
	~"../../¸ashdump.h
"

33 
	~"¸ashdump-¨m.h
"

35 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


36 
	#ELFDATANATIVE
 
ELFDATA2LSB


	)

37 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


38 
	#ELFDATANATIVE
 
ELFDATA2MSB


	)

47 
mem‹y_ønge
 
	g¸ash_mem‹y_ønges
[
CRASH_MAX_MEMORY_RANGES
];

48 
mem‹y_ønges
 
	gußbÀmem_rgns
 = {

49 .
size
 = 0,

50 .
	gønges
 = 
¸ash_mem‹y_ønges
,

54 
mem‹y_ønge
 
	g¸ash_ª£rved_mem
;

56 
¸ash_ñf_öfo
 
	gñf_öfo
 = {

57 .
˛ass
 = 
ELFCLASS32
,

58 .
	gd©a
 = 
ELFDATANATIVE
,

59 .
	gmachöe
 = 
EM_ARM
,

60 .
	g∑ge_off£t
 = 
DEFAULT_PAGE_OFFSET
,

63 
	gphys_off£t
;

64 
u£r_∑ge_off£t
;

67 
	$gë_kî√l_°ext_sym
()

69 c⁄° *
kÆlsyms
 = "/proc/kallsyms";

70 c⁄° *
°ext
 = "_stext";

71 
sym
[128];

72 
löe
[128];

73 
FILE
 *
Â
;

74 
vaddr
;

75 
ty≥
;

77 
Â
 = 
	`f›í
(
kÆlsyms
, "r"); if (!fp) {

78 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿%s\n", 
kÆlsyms
);

82 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
) {

83 i‡(
	`ssˇnf
(
löe
, "%Lx %¯%s", &
vaddr
, &
ty≥
, 
sym
) != 3)

85 i‡(
	`°rcmp
(
sym
, 
°ext
) == 0) {

86 
	`dbg¥ötf
("kî√»symbﬁ %†vadd∏%16Œx\n", 
°ext
, 
vaddr
);

87  
vaddr
;

91 
	`Ârötf
(
°dîr
, "C™nŸ gë kî√»%†symbﬁáddªss\n", 
°ext
);

93 
	}
}

95 
	$gë_kî√l_∑ge_off£t
(
kexec_öfo
 *
öfo
,

96 
¸ash_ñf_öfo
 *
ñf_öfo
)

98 
°ext_sym_addr
 = 
	`gë_kî√l_°ext_sym
();

99 i‡(
°ext_sym_addr
 == 0) {

100 i‡(
u£r_∑ge_off£t
 != (-1ULL)) {

101 
ñf_öfo
->
∑ge_off£t
 = 
u£r_∑ge_off£t
;

102 
	`dbg¥ötf
("UnableÅo get _stext symbol from /proc/kallsyms, "

104 
ñf_öfo
->
∑ge_off£t
);

107 
ñf_öfo
->
∑ge_off£t
 = ()
DEFAULT_PAGE_OFFSET
;

108 
	`dbg¥ötf
("UnableÅo get _stext symbol from /proc/kallsyms, "

110 
ñf_öfo
->
∑ge_off£t
);

112 } i‡((
u£r_∑ge_off£t
 != (-1ULL)) &&

113 (
u£r_∑ge_off£t
 !
°ext_sym_addr
)) {

114 
	`Ârötf
(
°dîr
, "PAGE_OFFSET is setÅo %llx "

116 
°ext_sym_addr
 & (~
KVBASE_MASK
),

117 
u£r_∑ge_off£t
);

119 
ñf_öfo
->
∑ge_off£t
 = 
°ext_sym_addr
 & (~
KVBASE_MASK
);

120 
	`dbg¥ötf
("∑ge_off£ài†£àtÿ%Œx\n", 
ñf_öfo
->
∑ge_off£t
);

122 
	}
}

137 
¸ash_ønge_ˇŒback
(*
UNUSED
(
d©a
), UNUSED(
ƒ
),

138 *
°r
, 
ba£
,

139 
Àngth
)

141 
mem‹y_ønge
 *
	gønge
;

143 i‡(
	gußbÀmem_rgns
.
	gsize
 >
CRASH_MAX_MEMORY_RANGES
)

146 
	gønge
 = 
ußbÀmem_rgns
.
ønges
 + ußbÀmem_rgns.
size
;

148 i‡(
°∫cmp
(
°r
, "System RAM\n", 11) == 0) {

149 
ønge
->
°¨t
 = 
ba£
;

150 
	gønge
->
	gíd
 = 
ba£
 + 
Àngth
 - 1;

151 
	gønge
->
	gty≥
 = 
RANGE_RAM
;

152 
	gußbÀmem_rgns
.
	gsize
++;

153 } i‡(
°∫cmp
(
°r
, "Crash kernel\n", 13) == 0) {

154 
¸ash_ª£rved_mem
.
°¨t
 = 
ba£
;

155 
	g¸ash_ª£rved_mem
.
	gíd
 = 
ba£
 + 
Àngth
 - 1;

156 
	g¸ash_ª£rved_mem
.
	gty≥
 = 
RANGE_RAM
;

168 
	$¸ash_ex˛ude_ønge
()

170 c⁄° 
mem‹y_ønge
 *
ønge
 = &
¸ash_ª£rved_mem
;

171 
i
;

173 
i
 = 0; i < 
ußbÀmem_rgns
.
size
; i++) {

174 
mem‹y_ønge
 *
r
 = 
ußbÀmem_rgns
.
ønges
 + 
i
;

180 i‡(
r
->
°¨t
 <
ønge
->°¨à&&Ñ->
íd
 >=Ñange->end) {

181 
mem‹y_ønge
 *
√w
;

187 
√w
 = 
ußbÀmem_rgns
.
ønges
 + ußbÀmem_rgns.
size
;

188 
√w
->
°¨t
 = 
ønge
->
íd
 + 1;

189 
√w
->
íd
 = 
r
->end;

190 
ußbÀmem_rgns
.
size
++;

194 
r
->
íd
 = 
ønge
->
°¨t
 - 1;

198 
	}
}

200 
	$ønge_cmp
(c⁄° *
a1
, c⁄° *
a2
)

202 c⁄° 
mem‹y_ønge
 *
r1
 = 
a1
;

203 c⁄° 
mem‹y_ønge
 *
r2
 = 
a2
;

205 i‡(
r1
->
°¨t
 > 
r2
->start)

207 i‡(
r1
->
°¨t
 < 
r2
->start)

211 
	}
}

222 
	$¸ash_gë_mem‹y_ønges
()

228 
	`kexec_iomem_f‹_óch_löe
(
NULL
, 
¸ash_ønge_ˇŒback
, NULL);

230 i‡(
ußbÀmem_rgns
.
size
 < 1) {

231 
î∫o
 = 
EINVAL
;

239 
	`¸ash_ex˛ude_ønge
();

244 
	`qs‹t
(
ußbÀmem_rgns
.
ønges
, ußbÀmem_rgns.
size
,

245 (*
ußbÀmem_rgns
.
ønges
), 
ønge_cmp
);

248 
	}
}

259 
	$cmdlöe_add_ñfc‹ehdr
(*
cmdlöe
, 
ñfc‹ehdr
)

261 
buf
[
COMMAND_LINE_SIZE
];

262 
buÊí
;

264 
buÊí
 = 
	`¢¥ötf
(
buf
, (buf), "%sÉlfcorehdr=%#lx",

265 
cmdlöe
, 
ñfc‹ehdr
);

266 i‡(
buÊí
 < 0)

267 
	`dõ
("FailedÅo constructÉlfcorehdr= commandÜineÖarameter\n");

268 i‡(
buÊí
 >(
buf
))

269 
	`dõ
("CommandÜine overflow\n");

271 (Ë
	`°∫˝y
(
cmdlöe
, 
buf
, 
COMMAND_LINE_SIZE
);

272 
cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

273 
	}
}

284 
	$cmdlöe_add_mem
(*
cmdlöe
, 
size
)

286 
buf
[
COMMAND_LINE_SIZE
];

287 
buÊí
;

289 
buÊí
 = 
	`¢¥ötf
(
buf
, (buf), "%†mem=%ldK", 
cmdlöe
, 
size
 >> 10);

290 i‡(
buÊí
 < 0)

291 
	`dõ
("FailedÅo construct mem= commandÜineÖarameter\n");

292 i‡(
buÊí
 >(
buf
))

293 
	`dõ
("CommandÜine overflow\n");

295 (Ë
	`°∫˝y
(
cmdlöe
, 
buf
, 
COMMAND_LINE_SIZE
);

296 
cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

297 
	}
}

299 
	$ønge_size
(c⁄° 
mem‹y_ønge
 *
r
)

301  
r
->
íd
 -Ñ->
°¨t
 + 1;

302 
	}
}

304 
	$dump_mem‹y_ønges
()

306 
i
;

308 i‡(!
kexec_debug
)

311 
	`dbg¥ötf
("crashkernel: [%#llx - %#llx] (%ldM)\n",

312 
¸ash_ª£rved_mem
.
°¨t
, cøsh_ª£rved_mem.
íd
,

313 ()
	`ønge_size
(&
¸ash_ª£rved_mem
) >> 20);

315 
i
 = 0; i < 
ußbÀmem_rgns
.
size
; i++) {

316 
mem‹y_ønge
 *
r
 = 
ußbÀmem_rgns
.
ønges
 + 
i
;

317 
	`dbg¥ötf
("memoryÑange: [%#llx - %#llx] (%ldM)\n",

318 
r
->
°¨t
,Ñ->
íd
, ()
	`ønge_size
(r) >> 20);

320 
	}
}

333 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, *
mod_cmdlöe
)

335 
ñfc‹ehdr
;

336 
bufsz
;

337 *
buf
;

338 
îr
;

339 
œ°_ønges
;

345 
îr
 = 
	`¸ash_gë_mem‹y_ønges
();

346 i‡(
îr
)

347  
îr
;

353 
phys_off£t
 = 
ußbÀmem_rgns
.
ønges
->
°¨t
;

354 
	`dbg¥ötf
("phys_off£t: %#lx\n", 
phys_off£t
);

356 i‡(
	`gë_kî√l_∑ge_off£t
(
öfo
, &
ñf_öfo
))

359 
œ°_ønges
 = 
ußbÀmem_rgns
.
size
 - 1;

360 i‡(
œ°_ønges
 < 0)

361 
œ°_ønges
 = 0;

363 i‡(
¸ash_mem‹y_ønges
[
œ°_ønges
].
íd
 > 
ULONG_MAX
) {

366 
ñf_öfo
.
˛ass
 = 
ELFCLASS64
;

368 
îr
 = 
	`¸ash_¸óã_ñf64_hódîs
(
öfo
, &
ñf_öfo
,

369 
ußbÀmem_rgns
.
ønges
,

370 
ußbÀmem_rgns
.
size
, &
buf
, &
bufsz
,

371 
ELF_CORE_HEADER_ALIGN
);

373 
îr
 = 
	`¸ash_¸óã_ñf32_hódîs
(
öfo
, &
ñf_öfo
,

374 
ußbÀmem_rgns
.
ønges
,

375 
ußbÀmem_rgns
.
size
, &
buf
, &
bufsz
,

376 
ELF_CORE_HEADER_ALIGN
);

378 i‡(
îr
)

379  
îr
;

388 
ñfc‹ehdr
 = 
	`add_buf„r_phys_vút
(
öfo
, 
buf
, 
bufsz
, bufsz, 1 << 20,

389 
¸ash_ª£rved_mem
.
°¨t
,

390 
¸ash_ª£rved_mem
.
íd
, -1, 0);

392 
	`dbg¥ötf
("ñfc‹ehdr: %#lx\n", 
ñfc‹ehdr
);

393 
	`cmdlöe_add_ñfc‹ehdr
(
mod_cmdlöe
, 
ñfc‹ehdr
);

400 
	`cmdlöe_add_mem
(
mod_cmdlöe
, 
ñfc‹ehdr
 - 
¸ash_ª£rved_mem
.
°¨t
);

402 
	`dump_mem‹y_ønges
();

403 
	`dbg¥ötf
("kî√»comm™dÜöe: \"%s\"\n", 
mod_cmdlöe
);

406 
	}
}

408 
	$is_¸ashkî√l_mem_ª£rved
()

410 
uöt64_t
 
°¨t
, 
íd
;

412 i‡(
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
) == 0)

413  
°¨t
 !
íd
;

416 
	}
}

	@kexec/arch/arm/crashdump-arm.h

1 #i‚de‡
CRASHDUMP_ARM_H


2 
	#CRASHDUMP_ARM_H


	)

4 #ifde‡
__˝lu•lus


8 
	#COMMAND_LINE_SIZE
 1024

	)

9 
	#DEFAULT_PAGE_OFFSET
 (0xc0000000)

	)

10 
	#KVBASE_MASK
 (0x1ffffff)

	)

11 
	#CRASH_MAX_MEMORY_RANGES
 32

	)

14 
mem‹y_ønges
 
ußbÀmem_rgns
;

16 
	gkexec_öfo
;

18 
phys_off£t
;

19 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *, *);

21 #ifde‡
__˝lu•lus


	@kexec/arch/arm/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_ARM_OPTIONS_H


2 
	#KEXEC_ARCH_ARM_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

6 
	#OPT_APPEND
 'a'

	)

7 
	#OPT_RAMDISK
 'r'

	)

8 
	#OPT_DTB
 (
OPT_ARCH_MAX
+0)

	)

9 
	#OPT_ATAGS
 (
OPT_ARCH_MAX
+1)

	)

10 
	#OPT_IMAGE_SIZE
 (
OPT_ARCH_MAX
+2)

	)

11 
	#OPT_PAGE_OFFSET
 (
OPT_ARCH_MAX
+3)

	)

16 
	#KEXEC_ARCH_OPTIONS
 \

17 
KEXEC_OPTIONS
 \

18 

	)

19 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

35 
	#KEXEC_ALL_OPTIONS
 \

36 
KEXEC_ARCH_OPTIONS
 \

37 { "comm™d-löe", 1, 0, 
OPT_APPEND
 }, \

38 { "≠≥nd", 1, 0, 
OPT_APPEND
 }, \

39 { "öôrd", 1, 0, 
OPT_RAMDISK
 }, \

40 { "ømdisk", 1, 0, 
OPT_RAMDISK
 }, \

41 { "dtb", 1, 0, 
OPT_DTB
 }, \

42 { "©ags", 0, 0, 
OPT_ATAGS
 }, \

43 { "image-size", 1, 0, 
OPT_IMAGE_SIZE
 }, \

44 { "∑ge-off£t", 1, 0, 
OPT_PAGE_OFFSET
 },

	)

46 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR
 "a:r:s:"

	)

48 
kexec_¨m_image_size
;

	@kexec/arch/arm/kexec-arm.c

8 
	#_GNU_SOURCE


	)

9 
	~<°ddef.h
>

10 
	~<°dio.h
>

11 
	~<î∫o.h
>

12 
	~<°döt.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

15 
	~"../../kexec.h
"

16 
	~"../../kexec-sysˇŒ.h
"

17 
	~"kexec-¨m.h
"

18 
	~<¨ch/›ti⁄s.h
>

20 
	#MAX_MEMORY_RANGES
 64

	)

21 
	#MAX_LINE
 160

	)

22 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

25 
gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

26 
	$UNUSED
(
kexec_Êags
))

28 c⁄° *
iomem
 = 
	`¥oc_iomem
();

29 
mem‹y_ønges
 = 0;

30 
löe
[
MAX_LINE
];

31 
FILE
 *
Â
;

32 
Â
 = 
	`f›í
(
iomem
, "r");

33 i‡(!
Â
) {

34 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

35 
iomem
, 
	`°ªº‹
(
î∫o
));

39 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

40 
°¨t
, 
íd
;

41 *
°r
;

42 
ty≥
;

43 
c⁄sumed
;

44 
cou¡
;

45 i‡(
mem‹y_ønges
 >
MAX_MEMORY_RANGES
)

47 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx-%Lx : %n",

48 &
°¨t
, &
íd
, &
c⁄sumed
);

49 i‡(
cou¡
 != 2)

51 
°r
 = 
löe
 + 
c⁄sumed
;

52 
íd
 =Énd + 1;

54 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

55 
ty≥
 = 
RANGE_RAM
;

57 i‡(
	`memcmp
(
°r
, "reserved\n", 9) == 0) {

58 
ty≥
 = 
RANGE_RESERVED
;

64 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

65 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

66 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

67 
mem‹y_ønges
++;

69 
	`f˛o£
(
Â
);

70 *
ønge
 = 
mem‹y_ønge
;

71 *
ønges
 = 
mem‹y_ønges
;

73 
	}
}

76 
fûe_ty≥
 
	gfûe_ty≥
[] = {

79 {"uImage", 
uImage_¨m_¥obe
, 
uImage_¨m_lﬂd
, 
zImage_¨m_ußge
},

80 {"zImage", 
zImage_¨m_¥obe
, 
zImage_¨m_lﬂd
, 
zImage_¨m_ußge
},

82 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

84 
	$¨ch_ußge
()

86 
	`¥ötf
(" --image-size=<size>\n"

93 
	}
}

95 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

98 
	}
}

100 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

101 { "¨m", 
KEXEC_ARCH_ARM
 },

102 { 
NULL
, 0 },

105 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

108 
	}
}

110 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

112 
	}
}

	@kexec/arch/arm/kexec-arm.h

1 #i‚de‡
KEXEC_ARM_H


2 
	#KEXEC_ARM_H


	)

4 
	~<sys/ty≥s.h
>

6 
	#BOOT_BLOCK_VERSION
 17

	)

7 
	#BOOT_BLOCK_LAST_COMP_VERSION
 16

	)

9 
off_t
 
öôrd_ba£
, 
öôrd_size
;

11 
zImage_¨m_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

12 
zImage_¨m_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

13 
kexec_öfo
 *
öfo
);

14 
zImage_¨m_ußge
();

16 
uImage_¨m_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

17 
uImage_¨m_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

18 
kexec_öfo
 *
öfo
);

	@kexec/arch/arm/kexec-elf-rel-arm.c

1 
	~<°dio.h
>

2 
	~<ñf.h
>

3 
	~"../../kexec.h
"

4 
	~"../../kexec-ñf.h
"

6 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

8 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2MSB
) {

11 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
) {

14 i‡(
ehdr
->
e_machöe
 !
EM_ARM
)

19 
	}
}

21 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

22 *
loˇti⁄
, 
addªss
, 
vÆue
)

24 
	gr_ty≥
) {

25 
	gR_ARM_ABS32
:

26 *((
uöt32_t
 *)
loˇti⁄
Ë+
vÆue
;

28 
	gR_ARM_REL32
:

29 *((
uöt32_t
 *)
loˇti⁄
Ë+
vÆue
 - 
addªss
;

32 
dõ
("Unknow¿ª»ªloˇti⁄: %lu\n", 
r_ty≥
);

	@kexec/arch/arm/kexec-uImage-arm.c

4 
	~<°döt.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<image.h
>

8 
	~<kexec-uImage.h
>

9 
	~"../../kexec.h
"

10 
	~"kexec-¨m.h
"

12 
	$uImage_¨m_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

14  
	`uImage_¥obe_kî√l
(
buf
, 
Àn
, 
IH_ARCH_ARM
);

15 
	}
}

17 
	$uImage_¨m_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

18 
kexec_öfo
 *
öfo
)

20  
	`zImage_¨m_lﬂd
(
¨gc
, 
¨gv
, 
buf
 + (
image_hódî
),

21 
Àn
 - (
image_hódî
), 
öfo
);

22 
	}
}

	@kexec/arch/arm/kexec-zImage-arm.c

5 
	#_GNU_SOURCE


	)

6 
	#_XOPEN_SOURCE


	)

7 
	~<°dio.h
>

8 
	~<°rög.h
>

9 
	~<°dlib.h
>

10 
	~<î∫o.h
>

11 
	~<limôs.h
>

12 
	~<°döt.h
>

13 
	~<uni°d.h
>

14 
	~<gë›t.h
>

15 
	~<uni°d.h
>

16 
	~<libfdt.h
>

17 
	~<¨ch/›ti⁄s.h
>

18 
	~"../../kexec.h
"

19 
	~"../../kexec-sysˇŒ.h
"

20 
	~"kexec-¨m.h
"

21 
	~"../../fs2dt.h
"

22 
	~"¸ashdump-¨m.h
"

24 
	#BOOT_PARAMS_SIZE
 1536

	)

26 
off_t
 
	göôrd_ba£
 = 0, 
	göôrd_size
 = 0;

27 
	gkexec_¨m_image_size
 = 0;

28 
	gu£r_∑ge_off£t
 = (-1ULL);

30 
	sèg_hódî
 {

31 
uöt32_t
 
	msize
;

32 
uöt32_t
 
	mèg
;

36 
	#ATAG_CORE
 0x54410001

	)

38 
	sèg_c‹e
 {

39 
uöt32_t
 
	mÊags
;

40 
uöt32_t
 
	m∑gesize
;

41 
uöt32_t
 
	mroŸdev
;

45 
	#ATAG_MEM
 0x54410002

	)

47 
	sèg_mem32
 {

48 
uöt32_t
 
	msize
;

49 
uöt32_t
 
	m°¨t
;

57 
	#ATAG_INITRD
 0x54410005

	)

60 
	#ATAG_INITRD2
 0x54420005

	)

62 
	sèg_öôrd
 {

63 
uöt32_t
 
	m°¨t
;

64 
uöt32_t
 
	msize
;

68 
	#ATAG_CMDLINE
 0x54410009

	)

70 
	sèg_cmdlöe
 {

71 
	mcmdlöe
[1];

75 
	#ATAG_NONE
 0x00000000

	)

77 
	sèg
 {

78 
èg_hódî
 
	mhdr
;

80 
èg_c‹e
 
	mc‹e
;

81 
èg_mem32
 
	mmem
;

82 
èg_öôrd
 
	möôrd
;

83 
èg_cmdlöe
 
	mcmdlöe
;

84 } 
	mu
;

87 
	#èg_√xt
(
t
Ë((
èg
 *)((
uöt32_t
 *)—Ë+ (t)->
hdr
.
size
))

	)

88 
	#byã_size
(
t
Ë(—)->
hdr
.
size
 << 2)

	)

89 
	#èg_size
(
ty≥
Ë(((
èg_hódî
Ë+ (ty≥Ë+ 3Ë>> 2)

	)

91 
zImage_¨m_¥obe
(c⁄° *
UNUSED
(
buf
), 
off_t
 
	$UNUSED
(
Àn
))

98 
	}
}

100 
	$zImage_¨m_ußge
()

102 
	`¥ötf
( " --command-line=STRING SetÅhe kernel commandÜineÅo STRING.\n"

111 
	}
}

114 
èg
 * 
	$©ag_ªad_ègs
()

116 
buf
[
BOOT_PARAMS_SIZE
];

117 c⁄° 
‚
[]= "/proc/atags";

118 
FILE
 *
Â
;

119 
Â
 = 
	`f›í
(
‚
, "r");

120 i‡(!
Â
) {

121 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

122 
‚
, 
	`°ªº‹
(
î∫o
));

123  
NULL
;

126 i‡(!
	`‰ód
(
buf
, (buf[1]), 
BOOT_PARAMS_SIZE
, 
Â
)) {

127 
	`f˛o£
(
Â
);

128  
NULL
;

131 i‡(
	`„º‹
(
Â
)) {

132 
	`Ârötf
(
°dîr
, "CannotÑead %s: %s\n",

133 
‚
, 
	`°ªº‹
(
î∫o
));

134 
	`f˛o£
(
Â
);

135  
NULL
;

138 
	`f˛o£
(
Â
);

139  (
èg
 *Ë
buf
;

140 
	}
}

144 
	$©ag_¨m_lﬂd
(
kexec_öfo
 *
öfo
, 
ba£
,

145 c⁄° *
comm™d_löe
, 
off_t
 
comm™d_löe_Àn
,

146 c⁄° *
öôrd
, 
off_t
 
öôrd_Àn
, off_à
öôrd_off
)

148 
èg
 *
ßved_ègs
 = 
	`©ag_ªad_ègs
();

149 *
buf
;

150 
off_t
 
Àn
;

151 
èg
 *
∑øms
;

152 
uöt32_t
 *
öôrd_°¨t
 = 
NULL
;

154 
buf
 = 
	`xmÆloc
(
	`gë∑gesize
());

155 i‡(!
buf
) {

156 
	`Ârötf
(
°dîr
, "Compiling ATAGs: out of memory\n");

160 
	`mem£t
(
buf
, 0xff, 
	`gë∑gesize
());

161 
∑øms
 = (
èg
 *)
buf
;

163 i‡(
ßved_ègs
) {

165 
ßved_ègs
 = (
èg
 *) saved_tags;

166 
	`byã_size
(
ßved_ègs
)) {

167 
ßved_ègs
->
hdr
.
èg
) {

168 
ATAG_INITRD
:

169 
ATAG_INITRD2
:

170 
ATAG_CMDLINE
:

171 
ATAG_NONE
:

176 
	`mem˝y
(
∑øms
, 
ßved_ègs
, 
	`byã_size
(saved_tags));

177 
∑øms
 = 
	`èg_√xt
(params);

179 
ßved_ègs
 = 
	`èg_√xt
(saved_tags);

182 
∑øms
->
hdr
.
size
 = 2;

183 
∑øms
->
hdr
.
èg
 = 
ATAG_CORE
;

184 
∑øms
 = 
	`èg_√xt
(params);

187 i‡(
öôrd
) {

188 
∑øms
->
hdr
.
size
 = 
	`èg_size
(
èg_öôrd
);

189 
∑øms
->
hdr
.
èg
 = 
ATAG_INITRD2
;

190 
öôrd_°¨t
 = &
∑øms
->
u
.
öôrd
.
°¨t
;

191 
∑øms
->
u
.
öôrd
.
size
 = 
öôrd_Àn
;

192 
∑øms
 = 
	`èg_√xt
(params);

195 i‡(
comm™d_löe
) {

196 
∑øms
->
hdr
.
size
 = ((
èg_hódî
Ë+ 
comm™d_löe_Àn
 + 3) >> 2;

197 
∑øms
->
hdr
.
èg
 = 
ATAG_CMDLINE
;

198 
	`mem˝y
(
∑øms
->
u
.
cmdlöe
.cmdlöe, 
comm™d_löe
,

199 
comm™d_löe_Àn
);

200 
∑øms
->
u
.
cmdlöe
.cmdlöe[
comm™d_löe_Àn
 - 1] = '\0';

201 
∑øms
 = 
	`èg_√xt
(params);

204 
∑øms
->
hdr
.
size
 = 0;

205 
∑øms
->
hdr
.
èg
 = 
ATAG_NONE
;

207 
Àn
 = ((*)
∑øms
 - 
buf
Ë+ (
èg_hódî
);

209 
	`add_£gmít
(
öfo
, 
buf
, 
Àn
, 
ba£
,Üen);

211 i‡(
öôrd
) {

212 *
öôrd_°¨t
 = 
	`loˇã_hﬁe
(
öfo
, 
öôrd_Àn
, 
	`gë∑gesize
(),

213 
öôrd_off
, 
ULONG_MAX
, 
INT_MAX
);

214 i‡(*
öôrd_°¨t
 =
ULONG_MAX
)

216 
	`add_£gmít
(
öfo
, 
öôrd
, 
öôrd_Àn
, *
öôrd_°¨t
, initrd_len);

220 
	}
}

222 
	$£tup_dtb_¥›
(**
buÂ
, 
off_t
 *
sizï
, c⁄° *
node_«me
,

223 c⁄° *
¥›_«me
, c⁄° *
vÆ
, 
Àn
)

225 *
dtb_buf
;

226 
off_t
 
dtb_size
;

227 
off
;

228 
¥›_Àn
 = 0;

229 c⁄° 
fdt_¥›îty
 *
¥›
;

231 i‡((
buÂ
 =
NULL
Ë|| (
sizï
 == NULL) || (*bufp == NULL))

232 
	`dõ
("InternalÉrror\n");

234 
dtb_buf
 = *
buÂ
;

235 
dtb_size
 = *
sizï
;

238 
off
 = 
	`fdt_∑th_off£t
(
dtb_buf
, 
node_«me
);

239 i‡(
off
 =-
FDT_ERR_NOTFOUND
) {

240 
dtb_size
 +
	`fdt_node_Àn
(
node_«me
);

241 
	`fdt_£t_tŸÆsize
(
dtb_buf
, 
dtb_size
);

242 
dtb_buf
 = 
	`xªÆloc
(dtb_buf, 
dtb_size
);

243 i‡(
dtb_buf
 =
NULL
)

244 
	`dõ
("xrealloc failed\n");

245 
off
 = 
	`fdt_add_subnode
(
dtb_buf
, off, 
node_«me
);

248 i‡(
off
 < 0) {

249 
	`Ârötf
(
°dîr
, "FDT: Eº‹áddög %†node.\n", 
node_«me
);

253 
¥›
 = 
	`fdt_gë_¥›îty
(
dtb_buf
, 
off
, 
¥›_«me
, &
¥›_Àn
);

254 i‡((
¥›
 =
NULL
Ë&& (
¥›_Àn
 !-
FDT_ERR_NOTFOUND
)) {

255 
	`dõ
("FDT: fdt_get_property");

256 } i‡(
¥›
 =
NULL
) {

259 
dtb_size
 +
	`fdt_¥›_Àn
(
¥›_«me
, 
Àn
);

261 i‡(
¥›_Àn
 < 
Àn
)

262 
dtb_size
 +
Àn
 - 
¥›_Àn
;

265 i‡(
	`fdt_tŸÆsize
(
dtb_buf
Ë< 
dtb_size
) {

266 
	`fdt_£t_tŸÆsize
(
dtb_buf
, 
dtb_size
);

267 
dtb_buf
 = 
	`xªÆloc
(dtb_buf, 
dtb_size
);

268 i‡(
dtb_buf
 =
NULL
)

269 
	`dõ
("xrealloc failed\n");

272 i‡(
	`fdt_£çr›
(
dtb_buf
, 
off
, 
¥›_«me
,

273 
vÆ
, 
Àn
) != 0) {

274 
	`Ârötf
(
°dîr
, "FDT: Error setting %s/%sÖroperty.\n",

275 
node_«me
, 
¥›_«me
);

278 *
buÂ
 = 
dtb_buf
;

279 *
sizï
 = 
dtb_size
;

281 
	}
}

283 
	$zImage_¨m_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

284 
kexec_öfo
 *
öfo
)

286 
ba£
;

287 
©ag_off£t
 = 0x1000;

288 
exåa_size
 = 0x8000;

289 c⁄° *
comm™d_löe
;

290 *
modifõd_cmdlöe
 = 
NULL
;

291 
off_t
 
comm™d_löe_Àn
;

292 c⁄° *
ømdisk
;

293 *
ømdisk_buf
;

294 
›t
;

295 
u£_©ags
;

296 *
dtb_buf
;

297 
off_t
 
dtb_Àngth
;

298 *
dtb_fûe
;

299 
off_t
 
dtb_off£t
;

300 *
íd
;

303 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

304 
KEXEC_ARCH_OPTIONS


305 { "comm™d-löe", 1, 0, 
OPT_APPEND
 },

306 { "≠≥nd", 1, 0, 
OPT_APPEND
 },

307 { "öôrd", 1, 0, 
OPT_RAMDISK
 },

308 { "ømdisk", 1, 0, 
OPT_RAMDISK
 },

309 { "dtb", 1, 0, 
OPT_DTB
 },

310 { "©ags", 0, 0, 
OPT_ATAGS
 },

311 { "image-size", 1, 0, 
OPT_IMAGE_SIZE
 },

312 { "∑ge-off£t", 1, 0, 
OPT_PAGE_OFFSET
 },

315 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "a:r:";

320 
comm™d_löe
 = 0;

321 
comm™d_löe_Àn
 = 0;

322 
ømdisk
 = 0;

323 
ømdisk_buf
 = 0;

324 
öôrd_size
 = 0;

325 
u£_©ags
 = 0;

326 
dtb_fûe
 = 
NULL
;

327 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

328 
›t
) {

331 i‡(
›t
 < 
OPT_ARCH_MAX
) {

334 
OPT_APPEND
:

335 
comm™d_löe
 = 
›èrg
;

337 
OPT_RAMDISK
:

338 
ømdisk
 = 
›èrg
;

340 
OPT_DTB
:

341 
dtb_fûe
 = 
›èrg
;

343 
OPT_ATAGS
:

344 
u£_©ags
 = 1;

346 
OPT_IMAGE_SIZE
:

347 
kexec_¨m_image_size
 = 
	`°πoul
(
›èrg
, &
íd
, 0);

349 
OPT_PAGE_OFFSET
:

350 
u£r_∑ge_off£t
 = 
	`°πouŒ
(
›èrg
, &
íd
, 0);

355 i‡(
u£_©ags
 && 
dtb_fûe
) {

356 
	`Ârötf
(
°dîr
, "You can only use ATAGs if you don't specifyá "

361 i‡(
comm™d_löe
) {

362 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

363 i‡(
comm™d_löe_Àn
 > 
COMMAND_LINE_SIZE
)

364 
comm™d_löe_Àn
 = 
COMMAND_LINE_SIZE
;

366 i‡(
ømdisk
)

367 
ømdisk_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
öôrd_size
);

369 i‡(
dtb_fûe
)

370 
dtb_buf
 = 
	`¶uΩ_fûe
(
dtb_fûe
, &
dtb_Àngth
);

376 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

377 
uöt64_t
 
°¨t
, 
íd
;

379 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

380 i‡(!
modifõd_cmdlöe
)

383 
	`mem£t
(
modifõd_cmdlöe
, '\0', 
COMMAND_LINE_SIZE
);

385 i‡(
comm™d_löe
) {

386 (Ë
	`°∫˝y
(
modifõd_cmdlöe
, 
comm™d_löe
,

387 
COMMAND_LINE_SIZE
);

388 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

391 i‡(
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
) < 0) {

392 
	`‰ì
(
modifõd_cmdlöe
);

396 
comm™d_löe
 = 
modifõd_cmdlöe
;

397 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

403 i‡(
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
)) {

410 
ba£
 = 
°¨t
;

412 
ba£
 = 
	`loˇã_hﬁe
(
öfo
, 
Àn
 + 
exåa_size
, 0, 0,

413 
ULONG_MAX
, 
INT_MAX
);

416 i‡(
ba£
 =
ULONG_MAX
)

419 i‡(
kexec_¨m_image_size
) {

423 
öôrd_ba£
 = 
ba£
 + 
	`_ALIGN
(
kexec_¨m_image_size
, 
	`gë∑gesize
());

427 
öôrd_ba£
 = 
ba£
 + 
	`_ALIGN
(
Àn
 * 4, 
	`gë∑gesize
());

430 i‡(
u£_©ags
) {

434 i‡(
	`©ag_¨m_lﬂd
(
öfo
, 
ba£
 + 
©ag_off£t
,

435 
comm™d_löe
, 
comm™d_löe_Àn
,

436 
ømdisk_buf
, 
öôrd_size
, 
öôrd_ba£
) == -1)

442 i‡(
dtb_fûe
) {

443 i‡(
	`fdt_check_hódî
(
dtb_buf
) != 0) {

444 
	`Ârötf
(
°dîr
, "Invalid FDT buffer.\n");

448 i‡(
comm™d_löe
) {

453 i‡(
	`£tup_dtb_¥›
(&
dtb_buf
, &
dtb_Àngth
, "/chosen",

454 "boŸ¨gs", 
comm™d_löe
,

455 
	`°æí
(
comm™d_löe
) + 1))

462 
	`¸óã_Ê©ãn_åì
(&
dtb_buf
, &
dtb_Àngth
, 
comm™d_löe
);

474 i‡((
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) == 0) {

475 
∑ge_size
 = 
	`gë∑gesize
();

481 
hﬁe_size
 = 
	`_ALIGN_UP
(
öôrd_size
, 
∑ge_size
) +

482 
	`_ALIGN
(
dtb_Àngth
 + 
∑ge_size
,Öage_size);

483 
öôrd_ba£_√w
 = 
	`loˇã_hﬁe
(
öfo
,

484 
hﬁe_size
, 
∑ge_size
,

485 
öôrd_ba£
, 
ULONG_MAX
, 
INT_MAX
);

486 i‡(
ba£
 =
ULONG_MAX
)

488 
öôrd_ba£
 = 
öôrd_ba£_√w
;

491 i‡(
ømdisk
) {

492 
	`add_£gmít
(
öfo
, 
ømdisk_buf
, 
öôrd_size
,

493 
öôrd_ba£
, 
öôrd_size
);

495 
°¨t
, 
íd
;

496 
°¨t
 = 
	`˝u_to_be32
(()(
öôrd_ba£
));

497 
íd
 = 
	`˝u_to_be32
(()(
öôrd_ba£
 + 
öôrd_size
));

499 i‡(
	`£tup_dtb_¥›
(&
dtb_buf
, &
dtb_Àngth
, "/chosen",

500 "löux,öôrd-°¨t", &
°¨t
,

501 (
°¨t
)))

503 i‡(
	`£tup_dtb_¥›
(&
dtb_buf
, &
dtb_Àngth
, "/chosen",

504 "löux,öôrd-íd", &
íd
,

505 (
íd
)))

512 
dtb_off£t
 = 
öôrd_ba£
 + 
öôrd_size
 + 
	`gë∑gesize
();

513 
dtb_off£t
 = 
	`_ALIGN_DOWN
(dtb_off£t, 
	`gë∑gesize
());

515 
	`add_£gmít
(
öfo
, 
dtb_buf
, 
dtb_Àngth
,

516 
dtb_off£t
, 
dtb_Àngth
);

519 
	`add_£gmít
(
öfo
, 
buf
, 
Àn
, 
ba£
 + 
exåa_size
,Üen);

521 
öfo
->
íåy
 = (*)
ba£
 + 
exåa_size
;

524 
	}
}

	@kexec/arch/arm/phys_to_virt.c

1 
	~"../../kexec.h
"

2 
	~"../../¸ashdump.h
"

3 
	~"¸ashdump-¨m.h
"

17 
	$phys_to_vút
(
¸ash_ñf_öfo
 *
ñf_öfo
, 
∑ddr
)

19  
∑ddr
 + 
ñf_öfo
->
∑ge_off£t
 - 
phys_off£t
;

20 
	}
}

	@kexec/arch/cris/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_CRIS_OPTIONS_H


2 
	#KEXEC_ARCH_CRIS_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

5 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

10 
	#KEXEC_ARCH_OPTIONS
 \

11 
KEXEC_OPTIONS
 \

12 

	)

13 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

29 
	#KEXEC_ALL_OPTIONS
 \

30 
KEXEC_ARCH_OPTIONS
 \

31 {"≠≥nd", 1, 0, 
OPT_APPEND
},

	)

33 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/cris/kexec-cris.c

10 
	~<°ddef.h
>

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	~<°döt.h
>

14 
	~<°rög.h
>

15 
	~<gë›t.h
>

16 
	~"../../kexec.h
"

17 
	~"../../kexec-sysˇŒ.h
"

18 
	~"kexec-¸is.h
"

19 
	~<¨ch/›ti⁄s.h
>

21 
	#MAX_MEMORY_RANGES
 64

	)

22 
	#MAX_LINE
 160

	)

23 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

26 
gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

27 
	$UNUSED
(
kexec_Êags
))

29 
mem‹y_ønges
 = 0;

31 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 0x40000000;

32 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 = 0x41000000;

33 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

34 
mem‹y_ønges
++;

36 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 0xc0000000;

37 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 = 0xc1000000;

38 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

39 
mem‹y_ønges
++;

41 *
ønge
 = 
mem‹y_ønge
;

42 *
ønges
 = 
mem‹y_ønges
;

44 
	}
}

46 
fûe_ty≥
 
	gfûe_ty≥
[] = {

47 {"ñf-¸is", 
ñf_¸is_¥obe
, 
ñf_¸is_lﬂd
, 
ñf_¸is_ußge
},

49 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

51 
	$¨ch_ußge
()

53 
	}
}

55 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

58 
	}
}

60 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

61 { "¸is", 
KEXEC_ARCH_CRIS
 },

62 { "¸isv32", 
KEXEC_ARCH_CRIS
 },

66 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

69 
	}
}

71 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

73 
	}
}

75 
	$is_¸ashkî√l_mem_ª£rved
()

78 
	}
}

80 
	$vút_to_phys
(
addr
)

82  (
addr
) & 0x7fffffff;

83 
	}
}

88 
	$add_£gmít
(
kexec_öfo
 *
öfo
, c⁄° *
buf
, 
size_t
 
bufsz
,

89 
ba£
, 
size_t
 
memsz
)

91 
	`add_£gmít_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
ba£
, 
memsz
, 1);

92 
	}
}

97 
	$add_buf„r
(
kexec_öfo
 *
öfo
, c⁄° *
buf
,

98 
bufsz
, 
memsz
,

99 
buf_Æign
, 
buf_mö
,

100 
buf_max
, 
buf_íd
)

102  
	`add_buf„r_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
memsz
, 
buf_Æign
,

103 
buf_mö
, 
buf_max
, 
buf_íd
, 1);

104 
	}
}

	@kexec/arch/cris/kexec-cris.h

1 #i‚de‡
KEXEC_CRIS_H


2 
	#KEXEC_CRIS_H


	)

4 
ñf_¸is_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

5 
ñf_¸is_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

6 
kexec_öfo
 *
öfo
);

7 
ñf_¸is_ußge
();

	@kexec/arch/cris/kexec-elf-cris.c

24 
	#_GNU_SOURCE


	)

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<°dlib.h
>

28 
	~<î∫o.h
>

29 
	~<limôs.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<f˙é.h
>

33 
	~<uni°d.h
>

34 
	~<gë›t.h
>

35 
	~<ñf.h
>

36 
	~"../../kexec.h
"

37 
	~"../../kexec-sysˇŒ.h
"

38 
	~"../../kexec-ñf.h
"

39 
	~"../../kexec-ñf-boŸ.h
"

40 
	~<¨ch/›ti⁄s.h
>

41 
	~"kexec-¸is.h
"

43 
	$ñf_¸is_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

45 
mem_ehdr
 
ehdr
;

46 
ªsu…
;

47 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

48 i‡(
ªsu…
 < 0)

49 
out
;

52 i‡(
ehdr
.
e_machöe
 !
EM_CRIS
) {

53 
ªsu…
 = -1;

54 
out
;

57 
ªsu…
 = 0;

58 
out
:

59 
	`‰ì_ñf_öfo
(&
ehdr
);

60  
ªsu…
;

61 
	}
}

63 
	$ñf_¸is_ußge
()

65 
	`¥ötf
(" --append=STRING SetÅhe kernel commandÜineÅo STRING\n"

67 
	}
}

69 
	#CRAMFS_MAGIC
 0x28cd3d45

	)

70 
	#JHEAD_MAGIC
 0x1FF528A6

	)

71 
	#JHEAD_SIZE
 8

	)

72 
	#RAM_INIT_MAGIC
 0x56902387

	)

73 
	#COMMAND_LINE_MAGIC
 0x87109563

	)

74 
	#NAND_BOOT_MAGIC
 0x9a9db001

	)

76 
	$ñf_¸is_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

77 
kexec_öfo
 *
öfo
)

79 
mem_ehdr
 
ehdr
;

80 *
comm™d_löe
;

81 *
åampﬁöe_buf
;

82 
åampﬁöe_ba£
;

83 
›t
;

84 
	`¸is_åampﬁöe
();

85 
¸is_åampﬁöe_size
;

86 
	sªg‰ame_t
 {

87 
ªgs
[16];

88 } 
¸is_ªg‰ame
;

91 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

92 
KEXEC_ARCH_OPTIONS


93 {"≠≥nd", 1, 0, 
OPT_APPEND
},

97 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_OPT_STR
 "";

102 
comm™d_löe
 = 0;

103 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

104 
›t
) {

107 i‡(
›t
 < 
OPT_ARCH_MAX
) {

110 
OPT_APPEND
:

111 
comm™d_löe
 = 
›èrg
;

117 
	`ñf_exec_buûd_lﬂd
(
öfo
, &
ehdr
, 
buf
, 
Àn
, 0);

119 
¸is_ªg‰ame
.
ªgs
[0] = 
	`vút_to_phys
(
ehdr
.
e_íåy
);

120 
¸is_ªg‰ame
.
ªgs
[8] = 
RAM_INIT_MAGIC
;

121 
¸is_ªg‰ame
.
ªgs
[12] = 
NAND_BOOT_MAGIC
;

123 
åampﬁöe_buf
 = 
	`xmÆloc
(
¸is_åampﬁöe_size
);

124 
åampﬁöe_ba£
 = 
	`add_buf„r_vút
(
öfo
,

125 
åampﬁöe_buf
,

126 
¸is_åampﬁöe_size
,

127 
¸is_åampﬁöe_size
,

128 4, 0, 
	`ñf_max_addr
(&
ehdr
), 1);

129 
	`mem˝y
(
åampﬁöe_buf
,

130 
¸is_åampﬁöe
, 
¸is_åampﬁöe_size
);

131 
öfo
->
íåy
 = (*)
åampﬁöe_ba£
;

133 
	}
}

	@kexec/arch/cris/kexec-elf-rel-cris.c

13 
	~<°dio.h
>

14 
	~<ñf.h
>

15 
	~"../../kexec.h
"

16 
	~"../../kexec-ñf.h
"

18 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

20 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2MSB
) {

23 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
) {

26 i‡(
ehdr
->
e_machöe
 !
EM_CRIS
) {

30 
	}
}

32 
	$machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
ehdr
, 
r_ty≥
,

33 *
loˇti⁄
, 
addªss
, 
vÆue
)

35 
r_ty≥
) {

38 
	`dõ
("Unknow¿ªœÑñoˇti⁄: %lu\n", 
r_ty≥
);

42 
	}
}

	@kexec/arch/i386/crashdump-x86.c

22 
	#_XOPEN_SOURCE
 600

	)

23 
	#_BSD_SOURCE


	)

25 
	~<f˙é.h
>

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

29 
	~<î∫o.h
>

30 
	~<limôs.h
>

31 
	~<ñf.h
>

32 
	~<sys/io˘l.h
>

33 
	~<sys/mm™.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<uni°d.h
>

37 
	~<dúít.h
>

38 
	~"../../kexec.h
"

39 
	~"../../kexec-ñf.h
"

40 
	~"../../kexec-sysˇŒ.h
"

41 
	~"../../fúmw¨e_memm≠.h
"

42 
	~"../../¸ashdump.h
"

43 
	~"kexec-x86.h
"

44 
	~"¸ashdump-x86.h
"

46 #ifde‡
HAVE_LIBXENCTRL


47 
	~<xí˘æ.h
>

50 
	~"x86-löux-£tup.h
"

52 
	~<x86/x86-löux.h
>

54 
¨ch_›ti⁄s_t
 
¨ch_›ti⁄s
;

56 
gë_kî√l_∑ge_off£t
(
kexec_öfo
 *
UNUSED
(
öfo
),

57 
¸ash_ñf_öfo
 *
ñf_öfo
)

59 
	gkv
;

61 i‡(
	gñf_öfo
->
	gmachöe
 =
EM_X86_64
) {

62 
kv
 = 
kî√l_vîsi⁄
();

63 i‡(
	gkv
 < 0)

66 i‡(
	gkv
 < 
KERNEL_VERSION
(2, 6, 27))

67 
	gñf_öfo
->
	g∑ge_off£t
 = 
X86_64_PAGE_OFFSET_PRE_2_6_27
;

69 
	gñf_öfo
->
	g∑ge_off£t
 = 
X86_64_PAGE_OFFSET
;

71 i‡(
	gñf_öfo
->
	gmachöe
 =
EM_386
) {

72 
ñf_öfo
->
∑ge_off£t
 = 
X86_PAGE_OFFSET
;

78 
	#X86_64_KERN_VADDR_ALIGN
 0x100000

	)

82 
gë_kî√l_∑ddr
(
kexec_öfo
 *
UNUSED
(
öfo
),

83 
¸ash_ñf_öfo
 *
ñf_öfo
)

85 
uöt64_t
 
	g°¨t
;

87 i‡(
	gñf_öfo
->
	gmachöe
 !
EM_X86_64
)

90 i‡(
xí_¥e£¡
())

93 i‡(
∑r£_iomem_sögÀ
("Kî√»code\n", &
°¨t
, 
NULL
) == 0) {

94 
ñf_öfo
->
kîn_∑ddr_°¨t
 = 
°¨t
;

95 
dbg¥ötf
("kernelÜoadÖhysicaláddr start = 0x%016Lx\n",

96 ()
°¨t
);

100 
Ârötf
(
°dîr
, "Cannot determine kernelÖhysicalÜoadáddr\n");

105 
	$gë_kî√l_°ext_sym
()

107 c⁄° *
kÆlsyms
 = "/proc/kallsyms";

108 c⁄° *
°ext
 = "_stext";

109 
sym
[128];

110 
löe
[128];

111 
FILE
 *
Â
;

112 
vaddr
;

113 
ty≥
;

115 
Â
 = 
	`f›í
(
kÆlsyms
, "r");

116 i‡(!
Â
) {

117 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿%s\n", 
kÆlsyms
);

121 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
) {

122 i‡(
	`ssˇnf
(
löe
, "%Lx %¯%s", &
vaddr
, &
ty≥
, 
sym
) != 3)

124 i‡(
	`°rcmp
(
sym
, 
°ext
) == 0) {

125 
	`dbg¥ötf
("kî√»symbﬁ %†vadd∏%16Œx\n", 
°ext
, 
vaddr
);

126  
vaddr
;

130 
	`Ârötf
(
°dîr
, "C™nŸ gë kî√»%†symbﬁáddªss\n", 
°ext
);

132 
	}
}

141 
gë_kî√l_vaddr_™d_size
(
kexec_öfo
 *
UNUSED
(
öfo
),

142 
¸ash_ñf_öfo
 *
ñf_öfo
)

144 
	gªsu…
;

145 c⁄° 
	gkc‹e
[] = "/proc/kcore";

146 *
	gbuf
;

147 
mem_ehdr
 
	gehdr
;

148 
mem_phdr
 *
	gphdr
, *
	gíd_phdr
;

149 
	gÆign
;

150 
off_t
 
	gsize
;

151 
uöt32_t
 
	gñf_Êags
 = 0;

152 
uöt64_t
 
	g°ext_sym
;

154 i‡(
	gñf_öfo
->
	gmachöe
 !
EM_X86_64
)

157 i‡(
xí_¥e£¡
())

160 
	gÆign
 = 
gë∑gesize
();

161 
	gbuf
 = 
¶uΩ_fûe_Àn
(
kc‹e
, 
KCORE_ELF_HEADERS_SIZE
, &
size
);

162 i‡(!
	gbuf
) {

163 
Ârötf
(
°dîr
, "C™nŸÑód %s: %s\n", 
kc‹e
, 
°ªº‹
(
î∫o
));

172 
	gñf_Êags
 |
ELF_SKIP_FILESZ_CHECK
;

173 
	gªsu…
 = 
buûd_ñf_c‹e_öfo
(
buf
, 
size
, &
ehdr
, 
ñf_Êags
);

174 i‡(
	gªsu…
 < 0) {

176 
Ârötf
(
°dîr
, "ELF core (kcore)Öarse failed\n");

180 
	gíd_phdr
 = &
ehdr
.
e_phdr
[ehdr.
e_phnum
];

184 
	g°ext_sym
 = 
gë_kî√l_°ext_sym
();

185 
	gphdr
 = 
ehdr
.
e_phdr
; 
	g°ext_sym
 &&Öhd∏!
íd_phdr
;Öhdr++) {

186 i‡(
	gphdr
->
	gp_ty≥
 =
PT_LOAD
) {

187 
ßddr
 = 
phdr
->
p_vaddr
;

188 
	góddr
 = 
phdr
->
p_vaddr
 +Öhdr->
p_memsz
;

189 
	gsize
;

192 i‡(
	gßddr
 < 
	g°ext_sym
 && 
	góddr
 > stext_sym) {

193 
	gßddr
 = 
_ALIGN_DOWN
(
ßddr
, 
X86_64_KERN_VADDR_ALIGN
);

194 
	gñf_öfo
->
	gkîn_vaddr_°¨t
 = 
ßddr
;

195 
	gsize
 = 
óddr
 - 
ßddr
;

197 
	gsize
 = 
_ALIGN
(
size
, 
Æign
);

198 
	gñf_öfo
->
	gkîn_size
 = 
size
;

199 
dbg¥ötf
("kernel vaddr = 0x%llx size = 0x%llx\n",

200 
ßddr
, 
size
);

210 
	gphdr
 = 
ehdr
.
e_phdr
;Öhd∏!
íd_phdr
;Öhdr++) {

211 i‡(
	gphdr
->
	gp_ty≥
 =
PT_LOAD
) {

212 
ßddr
 = 
phdr
->
p_vaddr
;

213 
	góddr
 = 
phdr
->
p_vaddr
 +Öhdr->
p_memsz
;

214 
	gsize
;

217 i‡((
	gßddr
 >
X86_64__START_KERNEL_m≠
) &&

218 (
óddr
 <
X86_64__START_KERNEL_m≠
 + 
X86_64_KERNEL_TEXT_SIZE
)) {

219 
ßddr
 = 
_ALIGN_DOWN
(ßddr, 
X86_64_KERN_VADDR_ALIGN
);

220 
	gñf_öfo
->
	gkîn_vaddr_°¨t
 = 
ßddr
;

221 
	gsize
 = 
óddr
 - 
ßddr
;

223 
	gsize
 = 
_ALIGN
(
size
, 
Æign
);

224 
	gñf_öfo
->
	gkîn_size
 = 
size
;

225 
dbg¥ötf
("kernel vaddr = 0x%llx size = 0x%llx\n",

226 
ßddr
, 
size
);

232 
Ârötf
(
°dîr
, "Can't find kernelÅext mapárea from kcore\n");

237 
£gªg©e_lowmem_ªgi⁄
(*
ƒ_ønges
, 
lowmem_limô
);

238 
ex˛ude_ªgi⁄
(*
ƒ_ønges
, 
uöt64_t
 
°¨t
, uöt64_à
íd
);

242 
mem‹y_ønge
 
	g¸ash_mem‹y_ønge
[
CRASH_MAX_MEMORY_RANGES
];

245 
	#CRASH_RESERVED_MEM_NR
 8

	)

246 
mem‹y_ønge
 
	g¸ash_ª£rved_mem
[
CRASH_RESERVED_MEM_NR
];

247 
	g¸ash_ª£rved_mem_ƒ
;

260 
	$gë_¸ash_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

261 
kexec_Êags
, 
lowmem_limô
)

263 c⁄° *
iomem
 = 
	`¥oc_iomem
();

264 
mem‹y_ønges
 = 0, 
g¨t
 = 0, 
i
;

265 
löe
[
MAX_LINE
];

266 
FILE
 *
Â
;

267 
°¨t
, 
íd
;

268 
uöt64_t
 
g¨t_°¨t
 = 0, 
g¨t_íd
 = 0;

270 
Â
 = 
	`f›í
(
iomem
, "r");

271 i‡(!
Â
) {

272 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

273 
iomem
, 
	`°ªº‹
(
î∫o
));

277 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

278 *
°r
;

279 
ty≥
, 
c⁄sumed
, 
cou¡
;

281 i‡(
mem‹y_ønges
 >
CRASH_MAX_MEMORY_RANGES
)

283 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx-%Lx : %n",

284 &
°¨t
, &
íd
, &
c⁄sumed
);

285 i‡(
cou¡
 != 2)

287 
°r
 = 
löe
 + 
c⁄sumed
;

288 
	`dbg¥ötf
("%016Lx-%016Lx : %s",

289 
°¨t
, 
íd
, 
°r
);

291 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

292 
ty≥
 = 
RANGE_RAM
;

293 } i‡(
	`memcmp
(
°r
, "ACPI Tables\n", 12) == 0) {

301 
ty≥
 = 
RANGE_ACPI
;

302 } if(
	`memcmp
(
°r
,"ACPI Non-volatile Storage\n",26) == 0 ) {

303 
ty≥
 = 
RANGE_ACPI_NVS
;

304 } if(
	`memcmp
(
°r
,"reserved\n",9) == 0 ) {

305 
ty≥
 = 
RANGE_RESERVED
;

306 } i‡(
	`memcmp
(
°r
, "GART\n", 5) == 0) {

307 
g¨t_°¨t
 = 
°¨t
;

308 
g¨t_íd
 = 
íd
;

309 
g¨t
 = 1;

315 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

316 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

317 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

319 
	`£gªg©e_lowmem_ªgi⁄
(&
mem‹y_ønges
, 
lowmem_limô
);

321 
mem‹y_ønges
++;

323 
	`f˛o£
(
Â
);

324 i‡(
kexec_Êags
 & 
KEXEC_PRESERVE_CONTEXT
) {

325 
i
 = 0; i < 
mem‹y_ønges
; i++) {

326 i‡(
¸ash_mem‹y_ønge
[
i
].
íd
 > 0x0009ffff) {

327 
¸ash_ª£rved_mem
[0].
°¨t
 = \

328 
¸ash_mem‹y_ønge
[
i
].
°¨t
;

332 i‡(
¸ash_ª£rved_mem
[0].
°¨t
 >
mem_max
) {

333 
	`Ârötf
(
°dîr
, "Too small mem_max: 0x%llx.\n",

334 
mem_max
);

337 
¸ash_ª£rved_mem
[0].
íd
 = 
mem_max
;

338 
¸ash_ª£rved_mem
[0].
ty≥
 = 
RANGE_RAM
;

339 
¸ash_ª£rved_mem_ƒ
 = 1;

342 
i
 = 0; i < 
¸ash_ª£rved_mem_ƒ
; i++)

343 i‡(
	`ex˛ude_ªgi⁄
(&
mem‹y_ønges
, 
¸ash_ª£rved_mem
[
i
].
°¨t
,

344 
¸ash_ª£rved_mem
[
i
].
íd
) < 0)

347 i‡(
g¨t
) {

349 i‡(
	`ex˛ude_ªgi⁄
(&
mem‹y_ønges
, 
g¨t_°¨t
, 
g¨t_íd
) < 0)

352 *
ønge
 = 
¸ash_mem‹y_ønge
;

353 *
ønges
 = 
mem‹y_ønges
;

356 
	}
}

358 #ifde‡
HAVE_LIBXENCTRL


359 
	$gë_¸ash_mem‹y_ønges_xí
(
mem‹y_ønge
 **
ønge
,

360 *
ønges
, 
lowmem_limô
)

362 
j
, 
rc
, 
ªt
 = -1;

363 
e820íåy
 
e820íåõs
[
CRASH_MAX_MEMORY_RANGES
];

364 
i
;

365 
xc_öãrÁ˚
 *
xc
;

367 
xc
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

369 i‡(!
xc
) {

370 
	`Ârötf
(
°dîr
, "%s: FaûedÅÿ›í Xí c⁄åﬁ i¡îÁ˚\n", 
__func__
);

374 
rc
 = 
	`xc_gë_machöe_mem‹y_m≠
(
xc
, 
e820íåõs
, 
CRASH_MAX_MEMORY_RANGES
);

376 i‡(
rc
 < 0) {

377 
	`Ârötf
(
°dîr
, "%s: xc_gë_machöe_mem‹y_m≠: %s\n", 
__func__
, 
	`°ªº‹
(-
rc
));

378 
îr
;

381 
i
 = 0, 
j
 = 0; i < 
rc
 && j < 
CRASH_MAX_MEMORY_RANGES
; ++i, ++j) {

382 
¸ash_mem‹y_ønge
[
j
].
°¨t
 = 
e820íåõs
[
i
].
addr
;

383 
¸ash_mem‹y_ønge
[
j
].
íd
 = 
e820íåõs
[
i
].
addr
 +É820íåõs[i].
size
 - 1;

384 
¸ash_mem‹y_ønge
[
j
].
ty≥
 = 
	`xí_e820_to_kexec_ty≥
(
e820íåõs
[
i
].type);

385 
	`£gªg©e_lowmem_ªgi⁄
(&
j
, 
lowmem_limô
);

388 *
ønge
 = 
¸ash_mem‹y_ønge
;

389 *
ønges
 = 
j
;

391 
	`qs‹t
(*
ønge
, *
ønges
, (
mem‹y_ønge
), 
com∑ª_ønges
);

393 
i
 = 0; i < 
¸ash_ª£rved_mem_ƒ
; i++)

394 i‡(
	`ex˛ude_ªgi⁄
(
ønges
, 
¸ash_ª£rved_mem
[
i
].
°¨t
,

395 
¸ash_ª£rved_mem
[
i
].
íd
) < 0)

396 
îr
;

398 
ªt
 = 0;

400 
îr
:

401 
	`xc_öãrÁ˚_˛o£
(
xc
);

403  
ªt
;

404 
	}
}

406 
	$gë_¸ash_mem‹y_ønges_xí
(
mem‹y_ønge
 **
ønge
,

407 *
ønges
, 
lowmem_limô
)

410 
	}
}

413 
	$£gªg©e_lowmem_ªgi⁄
(*
ƒ_ønges
, 
lowmem_limô
)

415 
íd
, 
°¨t
;

416 
ty≥
;

418 
°¨t
 = 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].start;

419 
íd
 = 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].end;

420 
ty≥
 = 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].type;

422 i‡(!(
lowmem_limô
 &&Üowmem_limô > 
°¨t
 &&Üowmem_limô < 
íd
))

425 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].
íd
 = 
lowmem_limô
 - 1;

427 i‡(*
ƒ_ønges
 >
CRASH_MAX_MEMORY_RANGES
 - 1)

430 ++*
ƒ_ønges
;

432 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].
°¨t
 = 
lowmem_limô
;

433 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].
íd
 =Énd;

434 
¸ash_mem‹y_ønge
[*
ƒ_ønges
].
ty≥
 =Åype;

435 
	}
}

440 
	$ex˛ude_ªgi⁄
(*
ƒ_ønges
, 
uöt64_t
 
°¨t
, uöt64_à
íd
)

442 
i
, 
j
, 
tidx
 = -1;

443 
mem‹y_ønge
 
ãmp_ªgi⁄
 = {0, 0, 0};

446 
i
 = 0; i < (*
ƒ_ønges
); i++) {

447 
m°¨t
, 
míd
;

448 
m°¨t
 = 
¸ash_mem‹y_ønge
[
i
].
°¨t
;

449 
míd
 = 
¸ash_mem‹y_ønge
[
i
].
íd
;

450 i‡(
°¨t
 < 
míd
 && 
íd
 > 
m°¨t
) {

451 i‡(
°¨t
 !
m°¨t
 && 
íd
 !
míd
) {

453 
¸ash_mem‹y_ønge
[
i
].
íd
 = 
°¨t
 - 1;

454 
ãmp_ªgi⁄
.
°¨t
 = 
íd
 + 1;

455 
ãmp_ªgi⁄
.
íd
 = 
míd
;

456 
ãmp_ªgi⁄
.
ty≥
 = 
RANGE_RAM
;

457 
tidx
 = 
i
+1;

458 } i‡(
°¨t
 !
m°¨t
)

459 
¸ash_mem‹y_ønge
[
i
].
íd
 = 
°¨t
 - 1;

461 
¸ash_mem‹y_ønge
[
i
].
°¨t
 = 
íd
 + 1;

465 i‡(
tidx
 >= 0) {

466 i‡(*
ƒ_ønges
 =
CRASH_MAX_MEMORY_RANGES
) {

468 
	`Ârötf
(
°dîr
, "Error: Number of crash memoryÑanges"

472 
j
 = (*
ƒ_ønges
 - 1); j >
tidx
; j--)

473 
¸ash_mem‹y_ønge
[
j
+1] = crash_memory_range[j];

474 
¸ash_mem‹y_ønge
[
tidx
] = 
ãmp_ªgi⁄
;

475 (*
ƒ_ønges
)++;

478 
	}
}

482 
	$add_memm≠
(
mem‹y_ønge
 *
memm≠_p
, *
ƒ_memm≠
,

483 
addr
, 
size_t
 
size
, 
ty≥
)

485 
i
, 
j
, 
ƒ_íåõs
 = 0, 
tidx
 = 0, 
Æign
 = 1024;

486 
m°¨t
, 
míd
;

489 i‡((
ty≥
 =
RANGE_RAM
Ë&& ((
addr
%
Æign
Ë|| (
size
%align)))

493 
i
 = 0; i < 
CRASH_MAX_MEMMAP_NR
; i++) {

494 
m°¨t
 = 
memm≠_p
[
i
].
°¨t
;

495 
míd
 = 
memm≠_p
[
i
].
íd
;

496 i‡(!
m°¨t
 && !
míd
)

499 
ƒ_íåõs
++;

501 i‡(
ƒ_íåõs
 =
CRASH_MAX_MEMMAP_NR
)

504 
i
 = 0; i < 
CRASH_MAX_MEMMAP_NR
; i++) {

505 
m°¨t
 = 
memm≠_p
[
i
].
°¨t
;

506 
míd
 = 
memm≠_p
[
i
].
íd
;

507 i‡(
m°¨t
 =0 && 
míd
 == 0)

509 i‡(
m°¨t
 <(
addr
+
size
-1Ë&& 
míd
 >=addr)

512 i‡(
addr
 > 
míd
)

513 
tidx
 = 
i
+1;

516 
j
 = 
ƒ_íåõs
-1; j >
tidx
; j--)

517 
memm≠_p
[
j
+1] = memmap_p[j];

518 
memm≠_p
[
tidx
].
°¨t
 = 
addr
;

519 
memm≠_p
[
tidx
].
íd
 = 
addr
 + 
size
 - 1;

520 
memm≠_p
[
tidx
].
ty≥
 =Åype;

521 *
ƒ_memm≠
 = 
ƒ_íåõs
 + 1;

523 
	`dbg¥öt_mem_ønge
("Memm≠á·îáddög segmít", 
memm≠_p
, *
ƒ_memm≠
);

526 
	}
}

530 
	$dñëe_memm≠
(
mem‹y_ønge
 *
memm≠_p
, *
ƒ_memm≠
,

531 
addr
, 
size_t
 
size
)

533 
i
, 
j
, 
ƒ_íåõs
 = 0, 
tidx
 = -1, 
›î©i⁄
 = 0, 
Æign
 = 1024;

534 
m°¨t
, 
míd
;

535 
mem‹y_ønge
 
ãmp_ªgi⁄
;

538 i‡((
addr
%
Æign
Ë|| (
size
%align))

542 
i
 = 0; i < 
CRASH_MAX_MEMMAP_NR
; i++) {

543 
m°¨t
 = 
memm≠_p
[
i
].
°¨t
;

544 
míd
 = 
memm≠_p
[
i
].
íd
;

545 i‡(!
m°¨t
 && !
míd
)

548 
ƒ_íåõs
++;

550 i‡(
ƒ_íåõs
 =
CRASH_MAX_MEMMAP_NR
)

554 
i
 = 0; i < 
CRASH_MAX_MEMMAP_NR
; i++) {

555 
m°¨t
 = 
memm≠_p
[
i
].
°¨t
;

556 
míd
 = 
memm≠_p
[
i
].
íd
;

557 i‡(
m°¨t
 =0 && 
míd
 == 0)

560 i‡(
m°¨t
 <
addr
 && 
míd
 >◊dd∏+ 
size
 - 1)) {

561 i‡(
m°¨t
 =
addr
 && 
míd
 =◊dd∏+ 
size
 - 1)) {

563 
›î©i⁄
 = -1;

564 
tidx
 = 
i
;

567 i‡(
m°¨t
 !
addr
 && 
míd
 !◊dd∏+ 
size
 - 1)) {

569 
memm≠_p
[
i
].
íd
 = 
addr
 - 1;

570 
ãmp_ªgi⁄
.
°¨t
 = 
addr
 + 
size
;

571 
ãmp_ªgi⁄
.
íd
 = 
míd
;

572 
ãmp_ªgi⁄
.
ty≥
 = 
memm≠_p
[
i
].type;

573 
›î©i⁄
 = 1;

574 
tidx
 = 
i
;

579 i‡(
m°¨t
 !
addr
) {

580 
memm≠_p
[
i
].
íd
 = 
addr
 - 1;

583 
memm≠_p
[
i
].
°¨t
 = 
addr
 + 
size
;

588 i‡((
›î©i⁄
 =1Ë&& 
tidx
 >=0) {

590 
j
 = 
ƒ_íåõs
-1; j > 
tidx
; j--)

591 
memm≠_p
[
j
+1] = memmap_p[j];

592 
memm≠_p
[
tidx
+1] = 
ãmp_ªgi⁄
;

593 *
ƒ_memm≠
 = 
ƒ_íåõs
 + 1;

595 i‡((
›î©i⁄
 =-1Ë&& 
tidx
 >=0) {

597 
j
 = 
i
+1; j < 
CRASH_MAX_MEMMAP_NR
; j++)

598 
memm≠_p
[
j
-1] = memmap_p[j];

599 
memm≠_p
[
j
-1].
°¨t
 = memm≠_p[j-1].
íd
 = 0;

600 *
ƒ_memm≠
 = 
ƒ_íåõs
 - 1;

603 
	`dbg¥öt_mem_ønge
("Memm≠á·î dñëög segmít", 
memm≠_p
, *
ƒ_memm≠
);

606 
	}
}

609 
	$u…ﬂ
(
i
, *
°r
)

611 
j
 = 0, 
k
;

612 
tmp
;

615 
°r
[
j
++] = 
i
 % 10 + '0';

616 } (
i
 /=10) > 0);

617 
°r
[
j
] = '\0';

620 
j
 = 0, 
k
 = 
	`°æí
(
°r
) - 1; j < k; j++, k--) {

621 
tmp
 = 
°r
[
k
];

622 
°r
[
k
] = så[
j
];

623 
°r
[
j
] = 
tmp
;

625 
	}
}

627 
	$cmdlöe_add_memm≠_öã∫Æ
(*
cmdlöe
, 
°¨tk
,

628 
ídk
, 
ty≥
)

630 
cmdÀn
, 
Àn
;

631 
°r_mm≠
[256], 
°r_tmp
[20];

633 
	`°r˝y
 (
°r_mm≠
, " memmap=");

634 
	`u…ﬂ
((
ídk
-
°¨tk
), 
°r_tmp
);

635 
	`°rˇt
 (
°r_mm≠
, 
°r_tmp
);

637 i‡(
ty≥
 =
RANGE_RAM
)

638 
	`°rˇt
 (
°r_mm≠
, "K@");

639 i‡(
ty≥
 =
RANGE_RESERVED
)

640 
	`°rˇt
 (
°r_mm≠
, "K$");

641 i‡(
ty≥
 =
RANGE_ACPI
 ||Åy≥ =
RANGE_ACPI_NVS
)

642 
	`°rˇt
 (
°r_mm≠
, "K#");

644 
	`u…ﬂ
(
°¨tk
, 
°r_tmp
);

645 
	`°rˇt
 (
°r_mm≠
, 
°r_tmp
);

646 
	`°rˇt
 (
°r_mm≠
, "K");

647 
Àn
 = 
	`°æí
(
°r_mm≠
);

648 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

649 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

650 
	`dõ
("CommandÜine overflow\n");

651 
	`°rˇt
(
cmdlöe
, 
°r_mm≠
);

652 
	}
}

656 
	$cmdlöe_add_memm≠
(*
cmdlöe
, 
mem‹y_ønge
 *
memm≠_p
)

658 
i
, 
cmdÀn
, 
Àn
;

659 
mö_sizek
 = 100;

660 
°r_mm≠
[256];

663 
	`°r˝y
(
°r_mm≠
, " memmap=exactmap");

664 
Àn
 = 
	`°æí
(
°r_mm≠
);

665 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

666 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

667 
	`dõ
("CommandÜine overflow\n");

668 
	`°rˇt
(
cmdlöe
, 
°r_mm≠
);

670 
i
 = 0; i < 
CRASH_MAX_MEMMAP_NR
; i++) {

671 
°¨tk
, 
ídk
, 
ty≥
;

673 
°¨tk
 = 
memm≠_p
[
i
].
°¨t
/1024;

674 
ídk
 = (
memm≠_p
[
i
].
íd
 + 1)/1024;

675 
ty≥
 = 
memm≠_p
[
i
].type;

678 i‡(
ty≥
 !
RANGE_RAM
 &&

679 
ty≥
 !
RANGE_ACPI
 &&

680 
ty≥
 !
RANGE_ACPI_NVS
)

683 i‡(
ty≥
 =
RANGE_ACPI
 ||Åy≥ =
RANGE_ACPI_NVS
)

684 
ídk
 = 
	`_ALIGN_UP
(
memm≠_p
[
i
].
íd
 + 1, 1024)/1024;

686 i‡(!
°¨tk
 && !
ídk
)

692 i‡(
ty≥
 =
RANGE_RAM
 && (
ídk
 - 
°¨tk
Ë< 
mö_sizek
)

695 
	`cmdlöe_add_memm≠_öã∫Æ
(
cmdlöe
, 
°¨tk
, 
ídk
, 
ty≥
);

698 
	`dbg¥ötf
("CommandÜineáfterádding memmap\n");

699 
	`dbg¥ötf
("%s\n", 
cmdlöe
);

702 
	}
}

705 
	$cmdlöe_add_ñfc‹ehdr
(*
cmdlöe
, 
addr
)

707 
cmdÀn
, 
Àn
, 
Æign
 = 1024;

708 
°r
[30], *
±r
;

712 i‡(
addr
%
Æign
)

714 
addr
 =áddr/
Æign
;

715 
±r
 = 
°r
;

716 
	`°r˝y
(
°r
, "Élfcorehdr=");

717 
±r
 +
	`°æí
(
°r
);

718 
	`u…ﬂ
(
addr
, 
±r
);

719 
	`°rˇt
(
°r
, "K");

720 
Àn
 = 
	`°æí
(
°r
);

721 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

722 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

723 
	`dõ
("CommandÜine overflow\n");

724 
	`°rˇt
(
cmdlöe
, 
°r
);

726 
	`dbg¥ötf
("CommandÜineáfteráddingÉlfcorehdr\n");

727 
	`dbg¥ötf
("%s\n", 
cmdlöe
);

730 
	}
}

738 
	$gë_¸ash_nŸes
(
˝u
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
)

740 c⁄° *
¸ash_nŸes
 = "/sys/kernel/crash_notes";

741 
löe
[
MAX_LINE
];

742 
FILE
 *
Â
;

743 
vaddr
;

744 
cou¡
;

746 
Â
 = 
	`f›í
(
¸ash_nŸes
, "r");

747 i‡(
Â
) {

748 i‡(
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

749 
cou¡
 = 
	`ssˇnf
(
löe
, "%lx", &
vaddr
);

750 i‡(
cou¡
 != 1)

751 
	`dõ
("C™nŸÖ¨£ %s: %s\n", 
¸ash_nŸes
,

752 
	`°ªº‹
(
î∫o
));

755 *
addr
 = 
	`x86__∑
(
vaddr
 + (
˝u
 * 
MAX_NOTE_BYTES
));

756 *
Àn
 = 
MAX_NOTE_BYTES
;

758 
	`dbg¥ötf
("crash_notesáddr = %Lx\n",

759 ()*
addr
);

761 
	`f˛o£
(
Â
);

764  
	`gë_¸ash_nŸes_≥r_˝u
(
˝u
, 
addr
, 
Àn
);

765 
	}
}

767 
c‹ëy≥
 
	$gë_c‹e_ty≥
(
¸ash_ñf_öfo
 *
ñf_öfo
,

768 
mem‹y_ønge
 *
ønge
, 
ønges
)

770 i‡((
ñf_öfo
->
machöe
Ë=
EM_X86_64
)

771  
CORE_TYPE_ELF64
;

774 i‡(
ønges
 == 0)

775  
CORE_TYPE_ELF64
;

777 i‡(
ønge
[
ønges
 - 1].
íd
 > 0xFFFFFFFFUL)

778  
CORE_TYPE_ELF64
;

780  
CORE_TYPE_ELF32
;

782 
	}
}

784 
	$sysfs_efi_ru¡ime_m≠_exi°
()

786 
DIR
 *
dú
;

788 
dú
 = 
	`›ídú
("/sys/firmware/efi/runtime-map");

789 i‡(!
dú
)

792 
	`˛o£dú
(
dú
);

794 
	}
}

797 
	$cmdlöe_add_efi
(*
cmdlöe
)

799 
FILE
 *
Â
;

800 
cmdÀn
, 
Àn
;

801 
löe
[
MAX_LINE
], *
s
;

802 c⁄° *
a˝is
 = "ácpi_rsdp=";

804 
Â
 = 
	`f›í
("/sys/firmware/efi/systab", "r");

805 i‡(!
Â
)

808 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

810 i‡((
	`°r°r
(
löe
, "ACPI20=")) || (strstr(line, "ACPI="))) {

811 
löe
[
	`°æí
(line) - 1] = '\0';

812 
s
 = 
	`°rchr
(
löe
, '=');

813 
s
 += 1;

814 
Àn
 = 
	`°æí
(
s
Ë+ såÀn(
a˝is
);

815 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

816 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

817 
	`dõ
("CommandÜine overflow\n");

818 
	`°rˇt
(
cmdlöe
, 
a˝is
);

819 
	`°rˇt
(
cmdlöe
, 
s
);

820 
	`dbg¥ötf
("CommandÜineáfteráddingÉfi\n");

821 
	`dbg¥ötf
("%s\n", 
cmdlöe
);

827 
	`f˛o£
(
Â
);

828 
	}
}

830 
	$gë_backup_¨ó
(
kexec_öfo
 *
öfo
,

831 
mem‹y_ønge
 *
ønge
, 
ønges
)

833 
i
;

836 
i
 = 0; i < 
ønges
; ++i) {

837 i‡(
ønge
[
i
].
ty≥
 !
RANGE_RAM
 ||Ñ™ge[i].
íd
 > 0xa0000)

840 
öfo
->
backup_§c_°¨t
 = 
ønge
[
i
].
°¨t
;

841 
öfo
->
backup_§c_size
 = 
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
 + 1;

843 
	`dbg¥ötf
("%s: %016Œx-%016Œx : Sy°em RAM\n", 
__func__
,

844 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
);

850 
öfo
->
backup_§c_°¨t
 = 
BACKUP_SRC_START
;

851 
öfo
->
backup_§c_size
 = 
BACKUP_SRC_END
 - 
BACKUP_SRC_START
 + 1;

852 
	}
}

858 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, * 
mod_cmdlöe
,

859 
max_addr
, 
mö_ba£
)

861 *
tmp
;

862 
sz
, 
bufsz
, 
memsz
, 
ñfc‹ehdr
;

863 
ƒ_ønges
 = 0, 
ƒ_memm≠
 = 0, 
Æign
 = 1024, 
i
;

864 
mem‹y_ønge
 *
mem_ønge
, *
memm≠_p
;

865 
¸ash_ñf_öfo
 
ñf_öfo
;

866 
kexec_¨ch
;

868 
	`mem£t
(&
ñf_öfo
, 0x0, (elf_info));

871 
	`mem£t
(&
ñf_öfo
, 0, (elf_info));

872 
ñf_öfo
.
d©a
 = 
ELFDATA2LSB
;

875 
kexec_¨ch
 = 
öfo
->
kexec_Êags
 & 
KEXEC_ARCH_MASK
;

876 i‡(
kexec_¨ch
 =
KEXEC_ARCH_DEFAULT
)

877 
kexec_¨ch
 = 
KEXEC_ARCH_NATIVE
;

880 
kexec_¨ch
) {

881 
KEXEC_ARCH_X86_64
:

882 
ñf_öfo
.
machöe
 = 
EM_X86_64
;

884 
KEXEC_ARCH_386
:

885 
ñf_öfo
.
machöe
 = 
EM_386
;

886 
ñf_öfo
.
lowmem_limô
 = 
X86_MAXMEM
;

887 
ñf_öfo
.
gë_nŸe_öfo
 = 
gë_¸ash_nŸes
;

890 
	`Ârötf
(
°dîr
, "unsupported crashdumpárchitecture: %04x\n",

891 
kexec_¨ch
);

895 i‡(
	`xí_¥e£¡
()) {

896 i‡(
	`gë_¸ash_mem‹y_ønges_xí
(&
mem_ønge
, &
ƒ_ønges
,

897 
ñf_öfo
.
lowmem_limô
) < 0)

900 i‡(
	`gë_¸ash_mem‹y_ønges
(&
mem_ønge
, &
ƒ_ønges
,

901 
öfo
->
kexec_Êags
,

902 
ñf_öfo
.
lowmem_limô
) < 0)

905 
	`gë_backup_¨ó
(
öfo
, 
mem_ønge
, 
ƒ_ønges
);

907 
	`dbg¥öt_mem_ønge
("CRASH MEMORY RANGES", 
mem_ønge
, 
ƒ_ønges
);

913 i‡(
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =
CORE_TYPE_UNDEF
) {

914 
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =

915 
	`gë_c‹e_ty≥
(&
ñf_öfo
, 
mem_ønge
, 
ƒ_ønges
);

918 
ñf_öfo
.
˛ass
 = 
ELFCLASS32
;

919 i‡(
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =
CORE_TYPE_ELF64
) {

920 
ñf_öfo
.
˛ass
 = 
ELFCLASS64
;

923 i‡(
	`gë_kî√l_∑ge_off£t
(
öfo
, &
ñf_öfo
))

926 i‡(
	`gë_kî√l_∑ddr
(
öfo
, &
ñf_öfo
))

929 i‡(
	`gë_kî√l_vaddr_™d_size
(
öfo
, &
ñf_öfo
))

933 
sz
 = ((
mem‹y_ønge
Ë* 
CRASH_MAX_MEMMAP_NR
);

934 
memm≠_p
 = 
	`xmÆloc
(
sz
);

935 
	`mem£t
(
memm≠_p
, 0, 
sz
);

936 
	`add_memm≠
(
memm≠_p
, &
ƒ_memm≠
, 
öfo
->
backup_§c_°¨t
, info->
backup_§c_size
, 
RANGE_RAM
);

937 
i
 = 0; i < 
¸ash_ª£rved_mem_ƒ
; i++) {

938 
sz
 = 
¸ash_ª£rved_mem
[
i
].
íd
 - cøsh_ª£rved_mem[i].
°¨t
 +1;

939 i‡(
	`add_memm≠
(
memm≠_p
, &
ƒ_memm≠
, 
¸ash_ª£rved_mem
[
i
].
°¨t
, 
sz
, 
RANGE_RAM
) < 0)

940  
ENOCRASHKERNEL
;

944 i‡(!(
öfo
->
kexec_Êags
 & 
KEXEC_PRESERVE_CONTEXT
)) {

945 
sz
 = 
	`_ALIGN
(
öfo
->
backup_§c_size
, 
Æign
);

946 
tmp
 = 
	`xmÆloc
(
sz
);

947 
	`mem£t
(
tmp
, 0, 
sz
);

948 
öfo
->
backup_°¨t
 = 
	`add_buf„r
(öfo, 
tmp
, 
sz
, sz, 
Æign
,

949 0, 
max_addr
, -1);

950 
	`dbg¥ötf
("Created backup segmentát 0x%lx\n",

951 
öfo
->
backup_°¨t
);

952 i‡(
	`dñëe_memm≠
(
memm≠_p
, &
ƒ_memm≠
, 
öfo
->
backup_°¨t
, 
sz
) < 0)

953  
EFAILED
;

957 i‡(
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =
CORE_TYPE_ELF64
) {

958 i‡(
	`¸ash_¸óã_ñf64_hódîs
(
öfo
, &
ñf_öfo
, 
mem_ønge
,

959 
ƒ_ønges
, &
tmp
, &
bufsz
,

960 
ELF_CORE_HEADER_ALIGN
) < 0)

961  
EFAILED
;

964 i‡(
	`¸ash_¸óã_ñf32_hódîs
(
öfo
, &
ñf_öfo
, 
mem_ønge
,

965 
ƒ_ønges
, &
tmp
, &
bufsz
,

966 
ELF_CORE_HEADER_ALIGN
) < 0)

967  
EFAILED
;

978 i‡(
bufsz
 < (16*1024)) {

980 
memsz
 = 16*1024;

983 
memsz
 = 
bufsz
;

985 
ñfc‹ehdr
 = 
	`add_buf„r
(
öfo
, 
tmp
, 
bufsz
, 
memsz
, 
Æign
, 
mö_ba£
,

986 
max_addr
, -1);

987 
	`dbg¥ötf
("Cª©edÉl‡hódî segmíà© 0x%lx\n", 
ñfc‹ehdr
);

988 i‡(
	`dñëe_memm≠
(
memm≠_p
, &
ƒ_memm≠
, 
ñfc‹ehdr
, 
memsz
) < 0)

990 i‡(!
bzImage_suµ‹t_efi_boŸ
 || 
¨ch_›ti⁄s
.
n€fi
 ||

991 !
	`sysfs_efi_ru¡ime_m≠_exi°
())

992 
	`cmdlöe_add_efi
(
mod_cmdlöe
);

993 
	`cmdlöe_add_ñfc‹ehdr
(
mod_cmdlöe
, 
ñfc‹ehdr
);

996 
i
 = 0; i < 
CRASH_MAX_MEMORY_RANGES
; i++) {

997 
°¨t
, 
íd
, 
size
, 
ty≥
;

998 i‡–!–
mem_ønge
[
i
].
ty≥
 =
RANGE_ACPI


999 || 
mem_ønge
[
i
].
ty≥
 =
RANGE_ACPI_NVS


1000 || 
mem_ønge
[
i
].
ty≥
 =
RANGE_RESERVED
))

1002 
°¨t
 = 
mem_ønge
[
i
].start;

1003 
íd
 = 
mem_ønge
[
i
].end;

1004 
ty≥
 = 
mem_ønge
[
i
].type;

1005 
size
 = 
íd
 - 
°¨t
 + 1;

1006 
	`add_memm≠
(
memm≠_p
, &
ƒ_memm≠
, 
°¨t
, 
size
, 
ty≥
);

1009 i‡(
¨ch_›ti⁄s
.
∑ss_memm≠_cmdlöe
)

1010 
	`cmdlöe_add_memm≠
(
mod_cmdlöe
, 
memm≠_p
);

1014 
öfo
->
¸ash_ønge
 = 
memm≠_p
;

1015 
öfo
->
ƒ_¸ash_ønges
 = 
ƒ_memm≠
;

1018 
	}
}

1020 
	$gë_max_¸ash_kî√l_limô
(
uöt64_t
 *
°¨t
, uöt64_à*
íd
)

1022 
i
, 
idx
 = -1;

1023 
sz_max
 = 0, 
sz
;

1025 i‡(!
¸ash_ª£rved_mem_ƒ
)

1028 
i
 = 
¸ash_ª£rved_mem_ƒ
 - 1; i >= 0; i--) {

1029 
sz
 = 
¸ash_ª£rved_mem
[
i
].
íd
 - cøsh_ª£rved_mem[i].
°¨t
 +1;

1030 i‡(
sz
 <
sz_max
)

1032 
sz_max
 = 
sz
;

1033 
idx
 = 
i
;

1036 *
°¨t
 = 
¸ash_ª£rved_mem
[
idx
].start;

1037 *
íd
 = 
¸ash_ª£rved_mem
[
idx
].end;

1040 
	}
}

1042 
¸ashkî√l_mem_ˇŒback
(*
UNUSED
(
d©a
), 
ƒ
,

1043 *
UNUSED
(
°r
),

1044 
ba£
,

1045 
Àngth
)

1047 i‡(
	gƒ
 >
CRASH_RESERVED_MEM_NR
)

1050 
	g¸ash_ª£rved_mem
[
ƒ
].
	g°¨t
 = 
ba£
;

1051 
	g¸ash_ª£rved_mem
[
ƒ
].
	gíd
 = 
ba£
 + 
Àngth
 - 1;

1052 
	g¸ash_ª£rved_mem
[
ƒ
].
	gty≥
 = 
RANGE_RAM
;

1056 
	$is_¸ashkî√l_mem_ª£rved
()

1058 
ªt
;

1060 i‡(
	`xí_¥e£¡
()) {

1061 
uöt64_t
 
°¨t
, 
íd
;

1063 
ªt
 = 
	`xí_gë_¸ashkî√l_ªgi⁄
(&
°¨t
, &
íd
);

1064 i‡(
ªt
 < 0)

1067 
¸ash_ª£rved_mem
[0].
°¨t
 = start;

1068 
¸ash_ª£rved_mem
[0].
íd
 =Énd;

1069 
¸ash_ª£rved_mem
[0].
ty≥
 = 
RANGE_RAM
;

1070 
¸ash_ª£rved_mem_ƒ
 = 1;

1072 
ªt
 = 
	`kexec_iomem_f‹_óch_löe
("Crash kernel\n",

1073 
¸ashkî√l_mem_ˇŒback
, 
NULL
);

1074 
¸ash_ª£rved_mem_ƒ
 = 
ªt
;

1077  !!
¸ash_ª£rved_mem_ƒ
;

1078 
	}
}

	@kexec/arch/i386/crashdump-x86.h

1 #i‚de‡
CRASHDUMP_X86_H


2 
	#CRASHDUMP_X86_H


	)

4 
	gkexec_öfo
;

5 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, *
mod_cmdlöe
,

6 
max_addr
, 
mö_ba£
);

8 
	#X86_PAGE_OFFSET
 0xc0000000

	)

9 
	#x86__∑
(
x
Ë(()(x)-
X86_PAGE_OFFSET
)

	)

11 
	#X86__VMALLOC_RESERVE
 (128 << 20)

	)

12 
	#X86_MAXMEM
 (-
X86_PAGE_OFFSET
-
X86__VMALLOC_RESERVE
)

	)

14 
	#X86_64__START_KERNEL_m≠
 0xffffffff80000000ULL

	)

15 
	#X86_64_PAGE_OFFSET_PRE_2_6_27
 0xffff810000000000ULL

	)

16 
	#X86_64_PAGE_OFFSET
 0xffff880000000000ULL

	)

18 
	#X86_64_MAXMEM
 0x3fffffffffffUL

	)

21 
	#X86_64_KERNEL_TEXT_SIZE
 (512UL*1024*1024)

	)

23 
	#CRASH_MAX_MEMMAP_NR
 1024

	)

24 
	#CRASH_MAX_MEMORY_RANGES
 (
MAX_MEMORY_RANGES
 + 2)

	)

27 
	#BACKUP_SRC_START
 0x00000000

	)

28 
	#BACKUP_SRC_END
 0x0009ffff

	)

29 
	#BACKUP_SRC_SIZE
 (
BACKUP_SRC_END
 - 
BACKUP_SRC_START
 + 1)

	)

	@kexec/arch/i386/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_I386_OPTIONS_H


2 
	#KEXEC_ARCH_I386_OPTIONS_H


	)

13 
	#OPT_RESET_VGA
 (
OPT_MAX
+0)

	)

14 
	#OPT_SERIAL
 (
OPT_MAX
+1)

	)

15 
	#OPT_SERIAL_BAUD
 (
OPT_MAX
+2)

	)

16 
	#OPT_CONSOLE_VGA
 (
OPT_MAX
+3)

	)

17 
	#OPT_CONSOLE_SERIAL
 (
OPT_MAX
+4)

	)

18 
	#OPT_ELF32_CORE
 (
OPT_MAX
+5)

	)

19 
	#OPT_ELF64_CORE
 (
OPT_MAX
+6)

	)

20 
	#OPT_ARCH_MAX
 (
OPT_MAX
+7)

	)

22 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

23 
	#OPT_REUSE_CMDLINE
 (
OPT_ARCH_MAX
+1)

	)

24 
	#OPT_RAMDISK
 (
OPT_ARCH_MAX
+2)

	)

25 
	#OPT_ARGS_ELF
 (
OPT_ARCH_MAX
+3)

	)

26 
	#OPT_ARGS_LINUX
 (
OPT_ARCH_MAX
+4)

	)

27 
	#OPT_ARGS_NONE
 (
OPT_ARCH_MAX
+5)

	)

28 
	#OPT_CL
 (
OPT_ARCH_MAX
+6)

	)

29 
	#OPT_MOD
 (
OPT_ARCH_MAX
+7)

	)

30 
	#OPT_VGA
 (
OPT_ARCH_MAX
+8)

	)

31 
	#OPT_REAL_MODE
 (
OPT_ARCH_MAX
+9)

	)

32 
	#OPT_ENTRY_32BIT
 (
OPT_ARCH_MAX
+10)

	)

33 
	#OPT_PASS_MEMMAP_CMDLINE
 (
OPT_ARCH_MAX
+11)

	)

34 
	#OPT_NOEFI
 (
OPT_ARCH_MAX
+12)

	)

37 
	#KEXEC_ARCH_OPTIONS
 \

38 
KEXEC_OPTIONS
 \

39 { "ª£t-vga", 0, 0, 
OPT_RESET_VGA
 }, \

40 { "£rül", 1, 0, 
OPT_SERIAL
 }, \

41 { "£rül-baud", 1, 0, 
OPT_SERIAL_BAUD
 }, \

42 { "c⁄sﬁe-vga", 0, 0, 
OPT_CONSOLE_VGA
 }, \

43 { "c⁄sﬁe-£rül", 0, 0, 
OPT_CONSOLE_SERIAL
 }, \

44 { "ñf32-c‹e-hódîs", 0, 0, 
OPT_ELF32_CORE
 }, \

45 { "ñf64-c‹e-hódîs", 0, 0, 
OPT_ELF64_CORE
 }, \

46 { "∑ss-memm≠-cmdlöe", 0, 0, 
OPT_PASS_MEMMAP_CMDLINE
 }, \

47 { "n€fi", 0, 0, 
OPT_NOEFI
}, \

48 

	)

49 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

65 
	#KEXEC_ALL_OPTIONS
 \

66 
KEXEC_ARCH_OPTIONS
 \

67 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 }, \

68 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 }, \

69 { "ªu£-cmdlöe", 0, 
NULL
, 
OPT_REUSE_CMDLINE
 }, \

70 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 }, \

71 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 }, \

72 { "¨gs-ñf", 0, 
NULL
, 
OPT_ARGS_ELF
 }, \

73 { "¨gs-löux", 0, 
NULL
, 
OPT_ARGS_LINUX
 }, \

74 { "¨gs-n⁄e", 0, 
NULL
, 
OPT_ARGS_NONE
 }, \

75 { "moduÀ", 1, 0, 
OPT_MOD
 }, \

76 { "ªÆ-mode", 0, 
NULL
, 
OPT_REAL_MODE
 }, \

77 { "íåy-32bô", 0, 
NULL
, 
OPT_ENTRY_32BIT
 },

	)

79 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/i386/kexec-beoboot-x86.c

30 
	#_GNU_SOURCE


	)

31 
	~<°dio.h
>

32 
	~<°döt.h
>

33 
	~<°rög.h
>

34 
	~<gë›t.h
>

35 
	~<x86/x86-löux.h
>

36 
	~<boŸ/beoboŸ.h
>

37 
	~"../../kexec.h
"

38 
	~"kexec-x86.h
"

39 
	~<¨ch/›ti⁄s.h
>

41 
	$beoboŸ_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

43 
beoboŸ_hódî
 
bb_hódî
;

44 c⁄° *
cmdlöe
, *
kî√l
;

45 
ªsu…
;

46 i‡((
uötmax_t
)
Àn
 < (uötmax_t)(
bb_hódî
)) {

49 
	`mem˝y
(&
bb_hódî
, 
buf
, (bb_header));

50 i‡(
	`memcmp
(
bb_hódî
.
magic
, 
BEOBOOT_MAGIC
, 4) != 0) {

53 i‡(
bb_hódî
.
¨ch
 !
BEOBOOT_ARCH
) {

58 
cmdlöe
 = 
buf
 + (
bb_hódî
);

59 
kî√l
 = 
cmdlöe
 + 
bb_hódî
.
cmdlöe_size
;

60 
ªsu…
 = 
	`bzImage_¥obe
(
kî√l
, 
bb_hódî
.
kî√l_size
);

62  
ªsu…
;

63 
	}
}

65 
	$beoboŸ_ußge
()

67 
	`¥ötf
( " --real-mode UseÅhe kernelsÑeal modeÉntryÖoint.\n"

71 
	}
}

73 
	#SETUP_BASE
 0x90000

	)

74 
	#KERN32_BASE
 0x100000

	)

75 
	#INITRD_BASE
 0x1000000

	)

77 
beoboŸ_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
UNUSED
(
Àn
),

78 
kexec_öfo
 *
öfo
)

80 
beoboŸ_hódî
 
	gbb_hódî
;

81 c⁄° *
	gcomm™d_löe
, *
	gkî√l
, *
	göôrd
;

83 
	gªÆ_mode_íåy
;

84 
	g›t
;

85 
	gªsu…
;

88 c⁄° 
›ti⁄
 
	g›ti⁄s
[] = {

89 
KEXEC_ARCH_OPTIONS


90 { "ªÆ-mode", 0, 0, 
OPT_REAL_MODE
 },

93 c⁄° 
	gsh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "";

98 
	gªÆ_mode_íåy
 = 0;

99 (
	g›t
 = 
gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

100 
›t
) {

103 i‡(
›t
 < 
OPT_ARCH_MAX
) {

106 
	gOPT_REAL_MODE
:

107 
ªÆ_mode_íåy
 = 1;

116 
mem˝y
(&
bb_hódî
, 
buf
, (bb_header));

117 
	gcomm™d_löe
 = 
buf
 + (
bb_hódî
);

118 
	gkî√l
 = 
comm™d_löe
 + 
bb_hódî
.
cmdlöe_size
;

119 
	göôrd
 = 
NULL
;

120 i‡(
	gbb_hódî
.
	gÊags
 & 
	gBEOBOOT_INITRD_PRESENT
) {

121 
	göôrd
 = 
kî√l
 + 
bb_hódî
.
kî√l_size
;

124 
	gªsu…
 = 
do_bzImage_lﬂd
(
öfo
,

125 
kî√l
, 
bb_hódî
.
kî√l_size
,

126 
comm™d_löe
, 
bb_hódî
.
cmdlöe_size
,

127 
öôrd
, 
bb_hódî
.
öôrd_size
,

128 
ªÆ_mode_íåy
);

130  
	gªsu…
;

	@kexec/arch/i386/kexec-bzImage.c

20 
	#_GNU_SOURCE


	)

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<î∫o.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<uni°d.h
>

29 
	~<gë›t.h
>

30 
	~<ñf.h
>

31 
	~<boŸ/ñf_boŸ.h
>

32 
	~<ù_checksum.h
>

33 
	~<x86/x86-löux.h
>

34 
	~"../../kexec.h
"

35 
	~"../../kexec-ñf.h
"

36 
	~"../../kexec-sysˇŒ.h
"

37 
	~"kexec-x86.h
"

38 
	~"x86-löux-£tup.h
"

39 
	~"¸ashdump-x86.h
"

40 
	~<¨ch/›ti⁄s.h
>

42 c⁄° 
	g¥obe_debug
 = 0;

43 
	gbzImage_suµ‹t_efi_boŸ
 = 0;

45 
	$bzImage_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

47 c⁄° 
x86_löux_hódî
 *
hódî
;

48 i‡((
uötmax_t
)
Àn
 < (uintmax_t)(2 * 512)) {

49 i‡(
¥obe_debug
) {

50 
	`Ârötf
(
°dîr
, "File isÅoo shortÅo beá bzImage!\n");

54 
hódî
 = (c⁄° 
x86_löux_hódî
 *)
buf
;

55 i‡(
	`memcmp
(
hódî
->
hódî_magic
, "HdrS", 4) != 0) {

56 i‡(
¥obe_debug
) {

57 
	`Ârötf
(
°dîr
, "Notá bzImage\n");

61 i‡(
hódî
->
boŸ_£˘‹_magic
 != 0xAA55) {

62 i‡(
¥obe_debug
) {

63 
	`Ârötf
(
°dîr
, "No x86 boot sectorÖresent\n");

68 i‡(
hódî
->
¥Ÿocﬁ_vîsi⁄
 < 0x0200) {

69 i‡(
¥obe_debug
) {

70 
	`Ârötf
(
°dîr
, "Must beátÜeastÖrotocol version 2.00\n");

75 i‡((
hódî
->
lﬂdÊags
 & 1) == 0) {

76 i‡(
¥obe_debug
) {

77 
	`Ârötf
(
°dîr
, "zImageÇotá bzImage\n");

83 i‡(
¥obe_debug
) {

84 
	`Ârötf
(
°dîr
, "It'sá bzImage\n");

87 
	}
}

90 
	$bzImage_ußge
()

92 
	`¥ötf
( " --real-mode UseÅhe kernelsÑeal modeÉntryÖoint.\n"

100 
	}
}

102 
	$do_bzImage_lﬂd
(
kexec_öfo
 *
öfo
,

103 c⁄° *
kî√l
, 
off_t
 
kî√l_Àn
,

104 c⁄° *
comm™d_löe
, 
off_t
 
comm™d_löe_Àn
,

105 c⁄° *
öôrd
, 
off_t
 
öôrd_Àn
,

106 
ªÆ_mode_íåy
)

108 
x86_löux_hódî
 
£tup_hódî
;

109 
x86_löux_∑øm_hódî
 *
ªÆ_mode
;

110 
£tup_£˘s
;

111 *
kî√l_vîsi⁄
;

112 
size_t
 
size
;

113 
kîn16_size
;

114 
£tup_ba£
, 
£tup_size
;

115 
íåy32_ªgs
 
ªgs32
;

116 
íåy16_ªgs
 
ªgs16
;

117 
ªloˇèbÀ_kî√l
 = 0;

118 
kî√l32_lﬂd_addr
;

119 *
modifõd_cmdlöe
;

120 
cmdlöe_íd
;

121 
kîn16_size_√eded
;

122 
hóp_size
 = 0;

127 i‡((
uötmax_t
)
kî√l_Àn
 < (uintmax_t)(2 * 512)) {

130 
	`mem˝y
(&
£tup_hódî
, 
kî√l
, (setup_header));

131 
£tup_£˘s
 = 
£tup_hódî
.setup_sects;

132 i‡(
£tup_£˘s
 == 0) {

133 
£tup_£˘s
 = 4;

136 
kîn16_size
 = (
£tup_£˘s
 +1) *512;

137 
kî√l_vîsi⁄
 = ((*)&
£tup_hódî
Ë+ 512 + sëup_hódî.
kvî_addr
;

138 i‡(
kî√l_Àn
 < 
kîn16_size
) {

139 
	`Ârötf
(
°dîr
, "BzImageÅruncated?\n");

143 i‡(
£tup_hódî
.
¥Ÿocﬁ_vîsi⁄
 >= 0x0206) {

144 i‡((
uötmax_t
)
comm™d_löe_Àn
 >

145 (
uötmax_t
)
£tup_hódî
.
cmdlöe_size
) {

146 
	`dbg¥ötf
("Kernel commandÜineÅooÜong for kernel!\n");

150 i‡(
comm™d_löe_Àn
 > 255) {

151 
	`dbg¥ötf
("WARNING: This kernel may only support 255 byte commandÜines\n");

155 i‡(
£tup_hódî
.
¥Ÿocﬁ_vîsi⁄
 >= 0x0205) {

156 
ªloˇèbÀ_kî√l
 = 
£tup_hódî
.relocatable_kernel;

157 
	`dbg¥ötf
("bzImage isÑelocatable\n");

161 if((
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
Ë&& 
ªÆ_mode_íåy
) {

162 
	`Ârötf
(
°dîr
, "Can't use bzImage for crash dumpÖurposes"

167 if((
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
Ë&& !
ªloˇèbÀ_kî√l
) {

168 
	`Ârötf
(
°dîr
, "BzImage isÇotÑelocatable. Can't be used"

176 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
 | 
KEXEC_PRESERVE_CONTEXT
)) {

177 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

178 
	`mem£t
((*)
modifõd_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

179 i‡(
comm™d_löe
) {

180 
	`°∫˝y
(
modifõd_cmdlöe
, 
comm™d_löe
,

181 
COMMAND_LINE_SIZE
);

182 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

191 i‡(
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
, -1, 0) < 0)

195 
comm™d_löe
 = 
modifõd_cmdlöe
;

196 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) +1;

207 i‡(!
ªÆ_mode_íåy
 && 
ªloˇèbÀ_kî√l
)

208 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
,

211 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
,

213 
	`dbg¥ötf
("LﬂdedÖurg©‹yáàadd∏0x%lx\n", 
öfo
->
rhdr
.
ªl_addr
);

216 i‡(
ªÆ_mode_íåy
) {

218 i‡(
£tup_hódî
.
¥Ÿocﬁ_vîsi⁄
 >= 0x0201)

219 
kîn16_size_√eded
 = 
£tup_hódî
.
hóp_íd_±r
;

221 
kîn16_size_√eded
 = 
kîn16_size
 + 8192;

222 i‡(
kîn16_size_√eded
 < 
kîn16_size
)

223 
kîn16_size_√eded
 = 
kîn16_size
;

224 i‡(
kîn16_size_√eded
 > 0xfffc)

225 
	`dõ
("kern16_size_needed is moreÅhen 64k\n");

226 
hóp_size
 = 0xfff¯- 
kîn16_size_√eded
;

227 
hóp_size
 = 
	`_ALIGN_DOWN
(heap_size, 0x200);

228 
kîn16_size_√eded
 +
hóp_size
;

230 
kîn16_size_√eded
 = 
kîn16_size
;

232 i‡(
kîn16_size_√eded
 < 4096)

233 
kîn16_size_√eded
 = 4096;

235 
£tup_size
 = 
kîn16_size_√eded
 + 
comm™d_löe_Àn
 +

236 
PURGATORY_CMDLINE_SIZE
;

237 
ªÆ_mode
 = 
	`xmÆloc
(
£tup_size
);

238 
	`mem£t
(
ªÆ_mode
, 0, 
£tup_size
);

239 i‡(!
ªÆ_mode_íåy
) {

240 
£tup_hódî_size
 = 
kî√l
[0x201] + 0x202 - 0x1f1;

243 i‡(
£tup_hódî_size
 > 0x7f)

244 
£tup_hódî_size
 = 0x7f;

245 
	`mem˝y
((*)
ªÆ_mode
 + 0x1f1, 
kî√l
 + 0x1f1,

246 
£tup_hódî_size
);

249 
	`mem˝y
(
ªÆ_mode
, 
kî√l
, 
kîn16_size
);

252 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
 | 
KEXEC_PRESERVE_CONTEXT
)) {

257 
£tup_ba£
 = 
	`add_buf„r
(
öfo
, 
ªÆ_mode
, 
£tup_size
, setup_size,

260 i‡(
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x0200) {

262 
£tup_ba£
 = 
	`add_buf„r
(
öfo
, 
ªÆ_mode
, 
£tup_size
, setup_size,

265 
	`add_£gmít
(
öfo
, 
ªÆ_mode
, 
£tup_size
, 
SETUP_BASE
, setup_size);

266 
£tup_ba£
 = 
SETUP_BASE
;

268 
	`dbg¥ötf
("LoadedÑeal-mode codeánd commandÜineát 0x%lx\n",

269 
£tup_ba£
);

272 i‡(
öfo
->
rhdr
.
ªl_addr
 < 
£tup_ba£
) {

273 
	`dõ
("CouldÇotÖut setup codeáboveÅhe kernelÖarameters\n");

277 
size
 = 
kî√l_Àn
 - 
kîn16_size
;

279 i‡(
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >=0x0205 && 
ªloˇèbÀ_kî√l
) {

281 
kîn_Æign
 = 
ªÆ_mode
->
kî√l_Æignmít
;

282 
kî√l32_max_addr
 = 
DEFAULT_BZIMAGE_ADDR_MAX
;

284 i‡(
kî√l32_max_addr
 > 
ªÆ_mode
->
öôrd_addr_max
)

285 
kî√l32_max_addr
 = 
ªÆ_mode
->
öôrd_addr_max
;

287 
kî√l32_lﬂd_addr
 = 
	`add_buf„r
(
öfo
, 
kî√l
 + 
kîn16_size
,

288 
size
, size, 
kîn_Æign
,

289 0x100000, 
kî√l32_max_addr
,

293 
kî√l32_lﬂd_addr
 = 
KERN32_BASE
;

294 
	`add_£gmít
(
öfo
, 
kî√l
 + 
kîn16_size
, 
size
,

295 
kî√l32_lﬂd_addr
, 
size
);

298 
	`dbg¥ötf
("Lﬂded 32bô kî√»© 0x%lx\n", 
kî√l32_lﬂd_addr
);

301 
	`£tup_löux_boŸlﬂdî_∑ømëîs
(
öfo
, 
ªÆ_mode
, 
£tup_ba£
,

302 
kîn16_size_√eded
, 
comm™d_löe
, 
comm™d_löe_Àn
,

303 
öôrd
, 
öôrd_Àn
);

305 i‡(
ªÆ_mode_íåy
 && 
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x0201) {

306 
ªÆ_mode
->
lﬂdî_Êags
 |= 0x80;

307 
ªÆ_mode
->
hóp_íd_±r
 +
hóp_size
 - 0x200;

311 i‡(
ªÆ_mode_íåy
)

312 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "entry16_regs",

313 &
ªgs16
, (regs16));

318 
ªgs32
.
óx
 = 0;

319 
ªgs32
.
ebx
 = 0;

320 
ªgs32
.
ecx
 = 0;

321 
ªgs32
.
edx
 = 0;

322 
ªgs32
.
esi
 = 
£tup_ba£
;

323 
ªgs32
.
edi
 = 0;

324 
ªgs32
.
e•
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_end");

325 
ªgs32
.
ebp
 = 0;

326 
ªgs32
.
eù
 = 
kî√l32_lﬂd_addr
;

331 i‡(
ªÆ_mode_íåy
) {

332 
ªgs16
.
ds
 =Ñegs16.
es
 =Ñegs16.
fs
 =Ñegs16.
gs
 = 
£tup_ba£
 >> 4;

333 
ªgs16
.
cs
 =Ñegs16.
ds
 + 0x20;

334 
ªgs16
.
ù
 = 0;

336 
ªgs16
.
ss
 = (
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_end") - 64*1024) >> 4;

338 
ªgs16
.
e•
 = 0xFFFC;

340 
	`¥ötf
("StartingÅhe kernel inÑeal mode\n");

341 
ªgs32
.
eù
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "entry16");

342 
ªÆ_mode
->
kî√l_°¨t
 = 
kî√l32_lﬂd_addr
;

344 i‡(
ªÆ_mode_íåy
 && 
kexec_debug
) {

345 
íåy16_debug
, 
¥e32
, 
fú°32
;

346 
uöt32_t
 
ﬁd_fú°32
;

348 
íåy16_debug
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "entry16_debug");

349 
¥e32
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "entry16_debug_pre32");

350 
fú°32
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "entry16_debug_first32");

353 
ªÆ_mode
->
rmode_swôch_cs
 = 
íåy16_debug
 >> 4;

354 
ªÆ_mode
->
rmode_swôch_ù
 = 
¥e32
 - 
íåy16_debug
;

355 
ﬁd_fú°32
 = 
ªÆ_mode
->
kî√l_°¨t
;

356 
ªÆ_mode
->
kî√l_°¨t
 = 
fú°32
;

357 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "entry16_debug_old_first32",

358 &
ﬁd_fú°32
, (old_first32));

360 
ªgs32
.
eù
 = 
íåy16_debug
;

362 i‡(
ªÆ_mode_íåy
) {

363 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "entry16_regs",

364 &
ªgs16
, (regs16));

365 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "entry16_debug_regs",

366 &
ªgs16
, (regs16));

368 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs32
, (regs32));

369 
cmdlöe_íd
 = 
£tup_ba£
 + 
kîn16_size_√eded
 + 
comm™d_löe_Àn
 - 1;

370 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "cmdlöe_íd", &
cmdlöe_íd
,

374 i‡(!
ªÆ_mode_íåy
) {

375 
	`£tup_löux_sy°em_∑ømëîs
(
öfo
, 
ªÆ_mode
);

379 
	}
}

381 
	$bzImage_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

382 
kexec_öfo
 *
öfo
)

384 *
comm™d_löe
 = 
NULL
;

385 *
tmp_cmdlöe
 = 
NULL
;

386 c⁄° *
ømdisk
, *
≠≥nd
 = 
NULL
;

387 *
ømdisk_buf
;

388 
off_t
 
ømdisk_Àngth
;

389 
comm™d_löe_Àn
;

390 
ªÆ_mode_íåy
;

391 
›t
;

392 
ªsu…
;

395 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

396 
KEXEC_ARCH_OPTIONS


397 { "comm™d-löe", 1, 0, 
OPT_APPEND
 },

398 { "≠≥nd", 1, 0, 
OPT_APPEND
 },

399 { "ªu£-cmdlöe", 0, 0, 
OPT_REUSE_CMDLINE
 },

400 { "öôrd", 1, 0, 
OPT_RAMDISK
 },

401 { "ømdisk", 1, 0, 
OPT_RAMDISK
 },

402 { "ªÆ-mode", 0, 0, 
OPT_REAL_MODE
 },

405 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "d";

407 
ªÆ_mode_íåy
 = 0;

408 
ømdisk
 = 0;

409 
ømdisk_Àngth
 = 0;

410 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

411 
›t
) {

414 i‡(
›t
 < 
OPT_ARCH_MAX
) {

417 
OPT_APPEND
:

418 
≠≥nd
 = 
›èrg
;

420 
OPT_REUSE_CMDLINE
:

421 
tmp_cmdlöe
 = 
	`gë_comm™d_löe
();

423 
OPT_RAMDISK
:

424 
ømdisk
 = 
›èrg
;

426 
OPT_REAL_MODE
:

427 
ªÆ_mode_íåy
 = 1;

431 
comm™d_löe
 = 
	`c⁄ˇt_cmdlöe
(
tmp_cmdlöe
, 
≠≥nd
);

432 i‡(
tmp_cmdlöe
) {

433 
	`‰ì
(
tmp_cmdlöe
);

435 
comm™d_löe_Àn
 = 0;

436 i‡(
comm™d_löe
) {

437 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) +1;

439 
comm™d_löe
 = 
	`°rdup
("\0");

440 
comm™d_löe_Àn
 = 1;

442 
ømdisk_buf
 = 0;

443 i‡(
ømdisk
) {

444 
ømdisk_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
ømdisk_Àngth
);

446 
ªsu…
 = 
	`do_bzImage_lﬂd
(
öfo
,

447 
buf
, 
Àn
,

448 
comm™d_löe
, 
comm™d_löe_Àn
,

449 
ømdisk_buf
, 
ømdisk_Àngth
,

450 
ªÆ_mode_íåy
);

452 
	`‰ì
(
comm™d_löe
);

453  
ªsu…
;

454 
	}
}

	@kexec/arch/i386/kexec-elf-rel-x86.c

1 
	~<°dio.h
>

2 
	~<ñf.h
>

3 
	~"../../kexec.h
"

4 
	~"../../kexec-ñf.h
"

6 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

8 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2LSB
) {

11 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
) {

14 i‡((
ehdr
->
e_machöe
 !
EM_386
Ë&& (ehdr->e_machöê!
EM_486
))

19 
	}
}

21 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

22 *
loˇti⁄
, 
addªss
, 
vÆue
)

24 
	gr_ty≥
) {

25 
	gR_386_32
:

26 *((
uöt32_t
 *)
loˇti⁄
Ë+
vÆue
;

28 
	gR_386_PC32
:

29 *((
uöt32_t
 *)
loˇti⁄
Ë+
vÆue
 - 
addªss
;

32 
dõ
("Unknow¿ª»ªloˇti⁄: %lu\n", 
r_ty≥
);

	@kexec/arch/i386/kexec-elf-x86.c

20 
	#_GNU_SOURCE


	)

21 
	~<°ddef.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<limôs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

29 
	~<f˙é.h
>

30 
	~<uni°d.h
>

31 
	~<gë›t.h
>

32 
	~<ñf.h
>

33 
	~<x86/x86-löux.h
>

34 
	~"../../kexec.h
"

35 
	~"../../kexec-sysˇŒ.h
"

36 
	~"../../kexec-ñf.h
"

37 
	~"../../kexec-ñf-boŸ.h
"

38 
	~"x86-löux-£tup.h
"

39 
	~"kexec-x86.h
"

40 
	~"¸ashdump-x86.h
"

41 
	~<¨ch/›ti⁄s.h
>

43 c⁄° 
	g¥obe_debug
 = 0;

45 
	$ñf_x86_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

48 
mem_ehdr
 
ehdr
;

49 
ªsu…
;

50 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

51 i‡(
ªsu…
 < 0) {

52 i‡(
¥obe_debug
) {

53 
	`Ârötf
(
°dîr
, "Notán ELFÉxecutable\n");

55 
out
;

59 i‡((
ehdr
.
e_machöe
 !
EM_386
Ë&& (ehdr.e_machöê!
EM_486
)) {

61 i‡(
¥obe_debug
) {

62 
	`Ârötf
(
°dîr
, "Not i386 ELFÉxecutable\n");

64 
ªsu…
 = -1;

65 
out
;

67 
ªsu…
 = 0;

68 
out
:

69 
	`‰ì_ñf_öfo
(&
ehdr
);

70  
ªsu…
;

71 
	}
}

73 
	$ñf_x86_ußge
()

75 
	`¥ötf
( " --command-line=STRING SetÅhe kernel commandÜineÅo STRING\n"

85 
	}
}

87 
	$ñf_x86_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

88 
kexec_öfo
 *
öfo
)

90 
mem_ehdr
 
ehdr
;

91 *
comm™d_löe
 = 
NULL
, *
modifõd_cmdlöe
 = NULL;

92 c⁄° *
≠≥nd
 = 
NULL
;

93 *
tmp_cmdlöe
 = 
NULL
;

94 *
îr‹_msg
 = 
NULL
;

95 
ªsu…
;

96 
comm™d_löe_Àn
;

97 
modifõd_cmdlöe_Àn
;

98 c⁄° *
ømdisk
;

99 
íåy
, 
max_addr
;

100 
¨g_°yÀ
;

101 
	#ARG_STYLE_ELF
 0

	)

102 
	#ARG_STYLE_LINUX
 1

	)

103 
	#ARG_STYLE_NONE
 2

	)

104 
›t
;

107 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

108 
KEXEC_ARCH_OPTIONS


109 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 },

110 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 },

111 { "ªu£-cmdlöe", 0, 
NULL
, 
OPT_REUSE_CMDLINE
 },

112 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 },

113 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 },

114 { "¨gs-ñf", 0, 
NULL
, 
OPT_ARGS_ELF
 },

115 { "¨gs-löux", 0, 
NULL
, 
OPT_ARGS_LINUX
 },

116 { "¨gs-n⁄e", 0, 
NULL
, 
OPT_ARGS_NONE
 },

117 { 0, 0, 
NULL
, 0 },

120 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_OPT_STR
 "";

125 
¨g_°yÀ
 = 
ARG_STYLE_ELF
;

126 
modifõd_cmdlöe_Àn
 = 0;

127 
ømdisk
 = 0;

128 
ªsu…
 = 0;

129 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

130 
›t
) {

133 i‡(
›t
 < 
OPT_ARCH_MAX
) {

136 
OPT_APPEND
:

137 
≠≥nd
 = 
›èrg
;

139 
OPT_REUSE_CMDLINE
:

140 
tmp_cmdlöe
 = 
	`gë_comm™d_löe
();

142 
OPT_RAMDISK
:

143 
ømdisk
 = 
›èrg
;

145 
OPT_ARGS_ELF
:

146 
¨g_°yÀ
 = 
ARG_STYLE_ELF
;

148 
OPT_ARGS_LINUX
:

149 
¨g_°yÀ
 = 
ARG_STYLE_LINUX
;

151 
OPT_ARGS_NONE
:

152 #ifde‡
__i386__


153 
¨g_°yÀ
 = 
ARG_STYLE_NONE
;

155 
	`dõ
("--args-none only works onárch i386\n");

160 
comm™d_löe
 = 
	`c⁄ˇt_cmdlöe
(
tmp_cmdlöe
, 
≠≥nd
);

161 i‡(
tmp_cmdlöe
) {

162 
	`‰ì
(
tmp_cmdlöe
);

164 
comm™d_löe_Àn
 = 0;

165 i‡(
comm™d_löe
) {

166 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) +1;

168 
comm™d_löe
 = 
	`°rdup
("\0");

169 
comm™d_löe_Àn
 = 1;

175 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
|
KEXEC_PRESERVE_CONTEXT
)) {

176 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

177 
	`mem£t
((*)
modifõd_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

178 i‡(
comm™d_löe
) {

179 
	`°∫˝y
(
modifõd_cmdlöe
, 
comm™d_löe
,

180 
COMMAND_LINE_SIZE
);

181 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

183 
modifõd_cmdlöe_Àn
 = 
	`°æí
(
modifõd_cmdlöe
);

187 
	`ñf_exec_buûd_lﬂd
(
öfo
, &
ehdr
, 
buf
, 
Àn
, 0);

189 
íåy
 = 
ehdr
.
e_íåy
;

190 
max_addr
 = 
	`ñf_max_addr
(&
ehdr
);

193 i‡(
¨g_°yÀ
 !
ARG_STYLE_NONE
) {

195 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
,

196 0, 
ULONG_MAX
, 1, 0);

198 i‡(
¨g_°yÀ
 =
ARG_STYLE_NONE
) {

199 
öfo
->
íåy
 = (*)entry;

202 i‡(
¨g_°yÀ
 =
ARG_STYLE_ELF
) {

203 
nŸe_ba£
;

204 
íåy32_ªgs
 
ªgs
;

205 
uöt32_t
 
¨g1
, 
¨g2
;

208 
nŸe_ba£
 = 
	`ñf_boŸ_nŸes
(
öfo
, 
max_addr
,

209 
comm™d_löe
, 
comm™d_löe_Àn
);

212 
¨g2
 = 0;

213 
¨g1
 = 
nŸe_ba£
;

214 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "°ack_¨g32_1", &
¨g1
, (arg1));

215 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "°ack_¨g32_2", &
¨g2
, (arg2));

218 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs
, (regs));

219 
ªgs
.
eù
 = 
íåy
;

220 
ªgs
.
e•
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_arg32_2");

221 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs
, (regs));

223 i‡(
ømdisk
) {

224 
îr‹_msg
 = "RamdisksÇot supported with genericÉlfárguments";

225 
out
;

228 i‡(
¨g_°yÀ
 =
ARG_STYLE_LINUX
) {

229 
x86_löux_Áked_∑øm_hódî
 *
hdr
;

230 
∑øm_ba£
;

231 c⁄° *
ømdisk_buf
;

232 
off_t
 
ømdisk_Àngth
;

233 
íåy32_ªgs
 
ªgs
;

234 
rc
 = 0;

237 
hdr
 = 
	`xmÆloc
((*hdr));

247 
∑øm_ba£
 = 
	`add_buf„r
(
öfo
, 
hdr
, (*hdr), 16*1024,

248 16, 0, 
max_addr
, 1);

251 
	`mem£t
(
hdr
, 0, (*hdr));

252 
	`öô_löux_∑ømëîs
(&
hdr
->hdr);

255 
ømdisk_buf
 = 
NULL
;

256 
ømdisk_Àngth
 = 0;

257 i‡(
ømdisk
) {

258 
ømdisk_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
ømdisk_Àngth
);

263 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
|
KEXEC_PRESERVE_CONTEXT
)) {

264 
rc
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
,

265 
max_addr
, 0);

266 i‡(
rc
 < 0) {

267 
ªsu…
 = -1;

268 
out
;

271 
	`‰ì
(
comm™d_löe
);

272 
comm™d_löe
 = 
modifõd_cmdlöe
;

273 
comm™d_löe_Àn
 = 
	`°æí
(
modifõd_cmdlöe
) + 1;

274 
modifõd_cmdlöe
 = 
NULL
;

278 
	`£tup_löux_boŸlﬂdî_∑ømëîs
(
öfo
, &
hdr
->hdr, 
∑øm_ba£
,

279 
	`off£tof
(
x86_löux_Áked_∑øm_hódî
, 
comm™d_löe
),

280 
comm™d_löe
, 
comm™d_löe_Àn
,

281 
ømdisk_buf
, 
ømdisk_Àngth
);

284 
	`£tup_löux_sy°em_∑ømëîs
(
öfo
, &
hdr
->hdr);

287 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs
, (regs));

288 
ªgs
.
ebx
 = 0;

289 
ªgs
.
esi
 = 
∑øm_ba£
;

290 
ªgs
.
eù
 = 
íåy
;

291 
ªgs
.
e•
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_end");

292 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs
, (regs));

295 
îr‹_msg
 = "Unknownárgument style\n";

298 
out
:

299 
	`‰ì
(
comm™d_löe
);

300 
	`‰ì
(
modifõd_cmdlöe
);

301 i‡(
îr‹_msg
)

302 
	`dõ
(
îr‹_msg
);

303  
ªsu…
;

304 
	}
}

	@kexec/arch/i386/kexec-multiboot-x86.c

36 
	#_GNU_SOURCE


	)

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~<°dlib.h
>

40 
	~<î∫o.h
>

41 
	~<limôs.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<f˙é.h
>

45 
	~<uni°d.h
>

46 
	~<gë›t.h
>

47 
	~<ñf.h
>

48 
	~<boŸ/ñf_boŸ.h
>

49 
	~<ù_checksum.h
>

50 
	~"../../kexec.h
"

51 
	~"../../kexec-ñf.h
"

52 
	~"kexec-x86.h
"

53 
	~<¨ch/›ti⁄s.h
>

56 
	~<x86/mb_hódî.h
>

57 
	~<x86/mb_öfo.h
>

60 
	ghódîbuf
[
MULTIBOOT_SEARCH
];

61 
mu…iboŸ_hódî
 *
	gmbh
 = 
NULL
;

63 
	#MIN
(
_x
,
_y
Ë(((_x)<=(_y))?(_x):(_y))

	)

66 
	$mu…iboŸ_x86_¥obe
(c⁄° *
buf
, 
off_t
 
buf_Àn
)

69 
i
, 
Àn
;

71 i‡((
i
=
	`ñf_x86_¥obe
(
buf
, 
buf_Àn
)) < 0) {

72  
i
;

75 
Àn
 = 
MULTIBOOT_SEARCH
;

76 i‡(
Àn
 > 
buf_Àn
) {

77 
Àn
 = 
buf_Àn
;

79 
	`mem˝y
(
hódîbuf
, 
buf
, 
Àn
);

80 i‡(
Àn
 < 12) {

84 
i
 = 0; i <(
Àn
 - 12); i += 4)

87 
mbh
 = (
mu…iboŸ_hódî
 *)(
hódîbuf
 + 
i
);

88 i‡(
mbh
->
magic
 !
MULTIBOOT_MAGIC


89 || ((
mbh
->
magic
+mbh->
Êags
+mbh->
checksum
) & 0xffffffff))

94 i‡(
mbh
->
Êags
 & 
MULTIBOOT_AOUT_KLUDGE
) {

96 
	`Ârötf
(
°dîr
,

102 i‡(
mbh
->
Êags
 & 
MULTIBOOT_UNSUPPORTED
) {

104 
	`Ârötf
(
°dîr
,

110 i‡(
mbh
->
Êags
 & 
MULTIBOOT_VIDEO_MODE
) {

113 
	`Ârötf
(
°dîr
,

125 
	}
}

128 
	$mu…iboŸ_x86_ußge
()

131 
	`¥ötf
(" --command-line=STRING SetÅhe kernel commandÜineÅo STRING.\n");

132 
	`¥ötf
(" --reuse-cmdline Use kernel commandÜine fromÑunning system.\n");

133 
	`¥ötf
(" --module=\"MODárg1árg2...\" Load module MOD with command-line \"arg1...\"\n");

134 
	`¥ötf
(" (can be used multipleÅimes).\n");

135 
	}
}

137 
	$mu…iboŸ_x86_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

138 
kexec_öfo
 *
öfo
)

141 
mu…iboŸ_öfo
 *
mbi
;

142 *
mbi_buf
;

143 
mod_li°
 *
modp
;

144 
‰ì•a˚
;

145 
mem_lowî
 = 0, 
mem_uµî
 = 0;

146 
mem_ehdr
 
ehdr
;

147 
mbi_ba£
;

148 
íåy32_ªgs
 
ªgs
;

149 
size_t
 
mbi_byãs
, 
mbi_off£t
;

150 *
comm™d_löe
 = 
NULL
, *
tmp_cmdlöe
 = NULL;

151 *
imagíame
, *
˝
, *
≠≥nd
 = 
NULL
;;

152 
mem‹y_ønge
 *
ønge
;

153 
ønges
;

154 
AddrR™geDesc
 *
mm≠
;

155 
comm™d_löe_Àn
;

156 
i
, 
ªsu…
;

157 
uöt32_t
 
u
;

158 
›t
;

159 
moduÀs
, 
mod_comm™d_löe_•a˚
;

161 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

162 
KEXEC_ARCH_OPTIONS


163 { "comm™d-löe", 1, 0, 
OPT_CL
 },

164 { "≠≥nd", 1, 0, 
OPT_CL
 },

165 { "ªu£-cmdlöe", 0, 0, 
OPT_REUSE_CMDLINE
 },

166 { "moduÀ", 1, 0, 
OPT_MOD
 },

169 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "";

172 i‡(
mbh
 =
NULL
 && 
	`mu…iboŸ_x86_¥obe
(
buf
, 
Àn
) != 1)

174 
	`Ârötf
(
°dîr
, "Cannot findáÜoadable multiboot header.\n");

179 
comm™d_löe_Àn
 = 0;

180 
moduÀs
 = 0;

181 
mod_comm™d_löe_•a˚
 = 0;

182 
ªsu…
 = 0;

183 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1)

185 
›t
) {

188 i‡(
›t
 < 
OPT_ARCH_MAX
) {

191 
OPT_CL
:

192 
≠≥nd
 = 
›èrg
;

194 
OPT_REUSE_CMDLINE
:

195 
tmp_cmdlöe
 = 
	`gë_comm™d_löe
();

197 
OPT_MOD
:

198 
moduÀs
++;

199 
mod_comm™d_löe_•a˚
 +
	`°æí
(
›èrg
) + 1;

203 
imagíame
 = 
¨gv
[
›töd
];

204 
comm™d_löe
 = 
	`c⁄ˇt_cmdlöe
(
tmp_cmdlöe
, 
≠≥nd
);

205 i‡(
tmp_cmdlöe
) {

206 
	`‰ì
(
tmp_cmdlöe
);

208 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
Ë+ såÀn(
imagíame
) + 2;

211 
	`ñf_exec_buûd_lﬂd
(
öfo
, &
ehdr
, 
buf
, 
Àn
, 0);

214 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
, 0,

215 
ULONG_MAX
, 1, 0);

230 
mbi_byãs
 = 
	`_ALIGN
((*
mbi
Ë+ 
comm™d_löe_Àn


231 + 
	`°æí
 (
BOOTLOADER
 " " 
BOOTLOADER_VERSION
) + 1, 4);

232 
mbi_buf
 = 
	`xmÆloc
(
mbi_byãs
);

233 
mbi
 = 
mbi_buf
;

234 
	`mem£t
(
mbi
, 0, (*mbi));

235 
	`•rötf
(((*)
mbi
) + (*mbi), "%s %s",

236 
imagíame
, 
comm™d_löe
);

237 
	`•rötf
(((*)
mbi
Ë+ (*mbiË+ 
comm™d_löe_Àn
, "%s",

238 
BOOTLOADER
 " " 
BOOTLOADER_VERSION
);

239 
mbi
->
Êags
 = 
MB_INFO_CMDLINE
 | 
MB_INFO_BOOT_LOADER_NAME
;

243 
mbi
->
cmdlöe
 = (*mbi);

244 
mbi
->
boŸ_lﬂdî_«me
 = (*mbiË+ 
comm™d_löe_Àn
;

247 
ønge
 = 
öfo
->
mem‹y_ønge
;

248 
ønges
 = 
öfo
->
mem‹y_ønges
;

249 
mm≠
 = 
	`xmÆloc
(
ønges
 * (*mmap));

250 
i
=0; i<
ønges
; i++) {

251 
Àngth
;

252 
Àngth
 = 
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
;

254 
mm≠
[
i
].
size
 = (mmap[i]) - 4;

255 
mm≠
[
i
].
ba£_addr_low
 = 
ønge
[i].
°¨t
 & 0xffffffff;

256 
mm≠
[
i
].
ba£_addr_high
 = 
ønge
[i].
°¨t
 >> 32;

257 
mm≠
[
i
].
Àngth_low
 = 
Àngth
 & 0xffffffff;

258 
mm≠
[
i
].
Àngth_high
 = 
Àngth
 >> 32;

259 i‡(
ønge
[
i
].
ty≥
 =
RANGE_RAM
) {

260 
mm≠
[
i
].
Ty≥
 = 1;

268 i‡((
ønge
[
i
].
°¨t
 <= 64*1024)

269 && (
ønge
[
i
].
íd
 > 
mem_lowî
)) {

270 
ønge
[
i
].
°¨t
 = 0;

271 
mem_lowî
 = 
ønge
[
i
].
íd
;

274 i‡((
ønge
[
i
].
°¨t
 <= 0x100000)

275 && (
ønge
[
i
].
íd
 > 
mem_uµî
 + 0x100000))

276 
mem_uµî
 = 
ønge
[
i
].
íd
 - 0x100000;

279 
mm≠
[
i
].
Ty≥
 = 0xbad;

282 i‡(
mbh
->
Êags
 & 
MULTIBOOT_MEMORY_INFO
) {

285 
mbi
->
Êags
 |
MB_INFO_MEMORY
 | 
MB_INFO_MEM_MAP
;

287 
‰ì•a˚
 = 
	`add_buf„r
(
öfo
,

288 
mm≠
, 
ønges
 * (*mmap),Ñanges * (*mmap),

291 
mbi
->
mm≠_addr
 = 
‰ì•a˚
;

292 
mbi
->
mm≠_Àngth
 = 
ønges
 * (*
mm≠
);

296 
mbi
->
mem_lowî
 = 
	`MIN
(mem_lower>>10, 0xffffffff);

297 
mbi
->
mem_uµî
 = 
	`MIN
(mem_upper>>10, 0xffffffff);

303 i‡(
moduÀs
) {

304 *
mod_fûíame
, *
mod_comm™d_löe
, *
mod_˛p
, *
buf
;

305 
off_t
 
mod_size
;

308 
mbi
->
mods_addr
 = 
mbi_byãs
;

309 
mbi
->
mods_cou¡
 = 0;

310 
mbi
->
Êags
 |
MB_INFO_MODS
;

313 
mbi_byãs
 +((*
modp
Ë* 
moduÀs
)

314 + 
mod_comm™d_löe_•a˚
;

315 
mbi_buf
 = 
	`xªÆloc
(mbi_buf, 
mbi_byãs
);

318 
mbi
 = 
mbi_buf
;

320 
modp
 = ((*)
mbi
Ë+ mbi->
mods_addr
;

322 
mod_˛p
 = ((*)
modp
Ë+ ((*modpË* 
moduÀs
);

325 
›töd
 = 
›ãº
 = 1;

326 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
,

327 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1)

329 i‡(
›t
 !
OPT_MOD
) ;

332 
mod_comm™d_löe
 = 
mod_fûíame
 = 
›èrg
;

333 i‡((
˝
 = 
	`°rchr
(
mod_fûíame
, ' ')Ë!
NULL
) {

335 *
˝
 = '\0';

339 
buf
 = 
	`¶uΩ_decom¥ess_fûe
(
mod_fûíame
, &
mod_size
);

341 i‡(
˝
 !
NULL
) *cp = ' ';

344 
‰ì•a˚
 = 
	`add_buf„r
(
öfo
,

345 
buf
, 
mod_size
, mod_size,

346 
	`gë∑gesize
(), 0, 0xffffffffUL, 1);

349 
	`•rötf
(
mod_˛p
, "%s", 
mod_comm™d_löe
);

351 
modp
->
mod_°¨t
 = 
‰ì•a˚
;

352 
modp
->
mod_íd
 = 
‰ì•a˚
 + 
mod_size
;

353 
modp
->
cmdlöe
 = (*)
mod_˛p
 - (*)
mbi
;

354 
modp
->
∑d
 = 0;

357 
mbi
->
mods_cou¡
++;

358 
mod_˛p
 +
	`°æí
(mod_clp) + 1;

359 
modp
++;

365 i‡(
	`s‹t_£gmíts
(
öfo
) < 0) {

366 
ªsu…
 = -1;

367 
out
;

369 
mbi_ba£
 = 
	`add_buf„r
(
öfo
,

370 
mbi_buf
, 
mbi_byãs
, mbi_bytes, 4, 0, 0xFFFFFFFFUL, 1);

373 
mbi_off£t
 = 
mbi_ba£
;

374 
modp
 = ((*)
mbi
Ë+ mbi->
mods_addr
;

375 
u
 = 0; u < 
mbi
->
mods_cou¡
; u++) {

376 
modp
[
u
].
cmdlöe
 +
mbi_off£t
;

378 
mbi
->
mods_addr
 +
mbi_off£t
;

379 
mbi
->
cmdlöe
 +
mbi_off£t
;

380 
mbi
->
boŸ_lﬂdî_«me
 +
mbi_off£t
;

383 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs
, (regs));

384 
ªgs
.
óx
 = 0x2BADB002;

385 
ªgs
.
ebx
 = 
mbi_off£t
;

386 
ªgs
.
eù
 = 
ehdr
.
e_íåy
;

387 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs
, (regs));

389 
out
:

390 
	`‰ì
(
comm™d_löe
);

391  
ªsu…
;

392 
	}
}

	@kexec/arch/i386/kexec-nbi.c

19 
	#_GNU_SOURCE


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<î∫o.h
>

24 
	~<limôs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<uni°d.h
>

29 
	~<gë›t.h
>

30 
	~<ñf.h
>

31 
	~"../../kexec.h
"

32 
	~"../../kexec-ñf.h
"

33 
	~"../../kexec-ñf-boŸ.h
"

34 
	~"kexec-x86.h
"

35 
	~<¨ch/›ti⁄s.h
>

37 
	s£ghódî


39 
uöt8_t
 
	mÀngth
;

40 
uöt8_t
 
	mvíd‹èg
;

41 
uöt8_t
 
	mª£rved
;

42 
uöt8_t
 
	mÊags
;

43 
	#NBI_SEG
 0x3

	)

44 
	#NBI_SEG_ABSOLUTE
 0

	)

45 
	#NBI_SEG_APPEND
 1

	)

46 
	#NBI_SEG_NEGATIVE
 2

	)

47 
	#NBI_SEG_PREPEND
 3

	)

48 
	#NBI_LAST_SEG
 (1 << 2)

	)

49 
uöt32_t
 
	mlﬂdaddr
;

50 
uöt32_t
 
	mimgÀngth
;

51 
uöt32_t
 
	mmemÀngth
;

54 
	simghódî


56 
	#NBI_MAGIC
 "\x36\x13\x03\x1b"

	)

57 
uöt8_t
 
	mmagic
[4];

58 
	#NBI_RETURNS
 (1 << 8)

	)

59 
	#NBI_ENTRY32
 (1 << 31)

	)

60 
uöt32_t
 
	mÀngth
;

61 °ru˘ { 
uöt16_t
 
	mbx
, 
	mds
; } 
	m£goff
;

63 °ru˘ { 
uöt16_t
 
	mù
, 
	mcs
; } 
	m£goff
;

64 
uöt32_t
 
	mlöór
;

65 } 
	mexeˇddr
;

69 c⁄° 
	g¥obe_debug
 = 0;

71 
	$nbi_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

73 
imghódî
 
hdr
;

74 
£ghódî
 
£g
;

75 
off_t
 
£g_off
;

77 i‡(((
uötmax_t
)
Àn
 < (uötmax_t)(
hdr
)) || (len < 512)) {

80 
	`mem˝y
(&
hdr
, 
buf
, (hdr));

81 i‡(
	`memcmp
(
hdr
.
magic
, 
NBI_MAGIC
, (hdr.magic)) != 0) {

85 i‡(((
hdr
.
Àngth
 & 0xf)*4) != (hdr)) {

86 i‡(
¥obe_debug
) {

87 
	`Ârötf
(
°dîr
, "NBI: Bad vendor header size\n");

94 i‡((((
hdr
.
Àngth
 & 0xf0) >> 4)*4) > (512 - (hdr))) {

95 i‡(
¥obe_debug
) {

96 
	`Ârötf
(
°dîr
, "NBI: vendor headrÅooÜarge\n");

101 i‡((
hdr
.
Àngth
 & 0x7ffffe00)) {

102 i‡(
¥obe_debug
) {

103 
	`Ârötf
(
°dîr
, "NBI: Reserved header bits set\n");

108 i‡(
hdr
.
Àngth
 & (1 << 8)) {

109 i‡(
¥obe_debug
) {

110 
	`¥ötf
("NBI: image wantsÅoÑeturn\n");

115 
£g_off
 = (((
hdr
.
Àngth
 & 0xf0) >> 4) + (hdr.length & 0x0f)) << 2;

117 
	`mem˝y
(&
£g
, 
buf
 + 
£g_off
, (seg));

118 i‡((
£g
.
Àngth
 & 0xf) != 4) {

119 i‡(
¥obe_debug
) {

120 
	`Ârötf
(
°dîr
, "NBI: Invalid segmentÜength\n");

124 
£g_off
 +((
£g
.
Àngth
 & 0xf) + ((seg.length >> 4) & 0xf)) << 2;

125 i‡(
£g
.
Êags
 & 0xf8) {

126 i‡(
¥obe_debug
) {

127 
	`Ârötf
(
°dîr
, "NBI: segmentÑeserved flags set\n");

131 i‡((
£g
.
Êags
 & 
NBI_SEG
Ë=
NBI_SEG_NEGATIVE
) {

132 i‡(
¥obe_debug
) {

133 
	`Ârötf
(
°dîr
, "NBI:Çegative segmentáddressesÇot supported\n");

137 i‡(
£g_off
 > 512) {

138 i‡(
¥obe_debug
) {

139 
	`Ârötf
(
°dîr
, "NBI: segment outside 512 header\n");

143 } !(
£g
.
Êags
 & 
NBI_LAST_SEG
));

145 
	}
}

147 
	$nbi_ußge
()

149 
	`¥ötf
( "\n"

151 
	}
}

153 
nbi_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
UNUSED
(
Àn
),

154 
kexec_öfo
 *
öfo
)

156 
imghódî
 
	ghdr
;

157 
£ghódî
 
	g£g
;

158 
off_t
 
	g£g_off
;

159 
off_t
 
	gfûe_off
;

160 
uöt32_t
 
	gœ°0
, 
	gœ°1
;

161 
	g›t
;

163 c⁄° 
›ti⁄
 
	g›ti⁄s
[] = {

164 
KEXEC_ARCH_OPTIONS


165 { 0, 0, 
NULL
, 0 },

168 c⁄° 
	gsh‹t_›ti⁄s
[] = 
KEXEC_OPT_STR
 "";

173 (
	g›t
 = 
gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

174 
›t
) {

177 i‡(
›t
 < 
OPT_ARCH_MAX
) {

183 
mem˝y
(&
hdr
, 
buf
, (hdr));

186 
add_£gmít
(
öfo
, 
buf
 + 0, 512,

187 (
hdr
.
£goff
.
ds
 << 4Ë+ hdr.£goff.
bx
, 512);

190 
	gfûe_off
 = 512;

191 
	gœ°0
 = (
hdr
.
£goff
.
ds
 << 4Ë+ hdr.£goff.
bx
;

192 
	gœ°1
 = 
œ°0
 + 512;

195 
	g£g_off
 = (((
hdr
.
Àngth
 & 0xf0) >> 4) + (hdr.length & 0x0f)) << 2;

197 
uöt32_t
 
	glﬂdaddr
;

198 
mem˝y
(&
£g
, 
buf
 + 
£g_off
, (seg));

199 
	g£g_off
 +((
£g
.
Àngth
 & 0xf) + ((seg.length >> 4) & 0xf)) << 2;

200 i‡((
	g£g
.
	gÊags
 & 
	gNBI_SEG
Ë=
NBI_SEG_ABSOLUTE
) {

201 
lﬂdaddr
 = 
£g
.loadaddr;

203 i‡((
	g£g
.
	gÊags
 & 
	gNBI_SEG
Ë=
NBI_SEG_APPEND
) {

204 
lﬂdaddr
 = 
œ°1
 + 
£g
.loadaddr;

207 i‡((
	g£g
.
	gÊags
 & 
	gNBI_SEG
Ë=
NBI_SEG_NEGATIVE
) {

208 
lﬂdaddr
 = 
memsize
 - 
£g
.loadaddr;

211 i‡((
	g£g
.
	gÊags
 & 
	gNBI_SEG
Ë=
NBI_SEG_PREPEND
) {

212 
lﬂdaddr
 = 
œ°0
 - 
£g
.loadaddr;

215 
¥ötf
("warning: unhandled segment ofÅype %0x\n",

216 
£g
.
Êags
 & 
NBI_SEG
);

219 
add_£gmít
(
öfo
, 
buf
 + 
fûe_off
, 
£g
.
imgÀngth
,

220 
lﬂdaddr
, 
£g
.
memÀngth
);

221 
	gœ°0
 = 
lﬂdaddr
;

222 
	gœ°1
 = 
œ°0
 + 
£g
.
memÀngth
;

223 
	gfûe_off
 +
£g
.
imgÀngth
;

224 } !(
	g£g
.
	gÊags
 & 
	gNBI_LAST_SEG
));

226 i‡(
	ghdr
.
	gÀngth
 & 
	gNBI_ENTRY32
) {

227 
íåy32_ªgs
 
	gªgs32
;

229 
ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs32", &
ªgs32
, (regs32));

230 
	gªgs32
.
	geù
 = 
hdr
.
exeˇddr
.
löór
;

231 
ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs32", &
ªgs32
, (regs32));

234 
íåy32_ªgs
 
	gªgs32
;

235 
íåy16_ªgs
 
	gªgs16
;

238 
ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy16_ªgs", &
ªgs16
, (regs16));

239 
	gªgs16
.
	gcs
 = 
hdr
.
exeˇddr
.
£goff
.
cs
;

240 
	gªgs16
.
	gù
 = 
hdr
.
exeˇddr
.
£goff
.
ù
;

241 
ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy16_ªgs", &
ªgs16
, (regs16));

244 
ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs32
, (regs32));

245 
	gªgs32
.
	geù
 = 
ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "entry16");

246 
ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy32_ªgs", &
ªgs32
, (regs32));

	@kexec/arch/i386/kexec-x86-common.c

20 
	#_XOPEN_SOURCE
 600

	)

21 
	#_BSD_SOURCE


	)

23 
	~<f˙é.h
>

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<°döt.h
>

28 
	~<°rög.h
>

29 
	~<limôs.h
>

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

32 
	~<sys/io˘l.h
>

33 
	~<sys/mm™.h
>

34 
	~<sys/°©.h
>

35 
	~<uni°d.h
>

36 
	~"../../kexec.h
"

37 
	~"../../kexec-sysˇŒ.h
"

38 
	~"../../fúmw¨e_memm≠.h
"

39 
	~"../../¸ashdump.h
"

40 
	~"kexec-x86.h
"

42 #ifde‡
HAVE_LIBXENCTRL


43 
	~<xí˘æ.h
>

46 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

57 
	$gë_mem‹y_ønges_¥oc_iomem
(
mem‹y_ønge
 **
ønge
, *
ønges
)

59 c⁄° *
iomem

	`¥oc_iomem
();

60 
mem‹y_ønges
 = 0;

61 
löe
[
MAX_LINE
];

62 
FILE
 *
Â
;

63 
Â
 = 
	`f›í
(
iomem
, "r");

64 i‡(!
Â
) {

65 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

66 
iomem
, 
	`°ªº‹
(
î∫o
));

69 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

70 
°¨t
, 
íd
;

71 *
°r
;

72 
ty≥
;

73 
c⁄sumed
;

74 
cou¡
;

75 i‡(
mem‹y_ønges
 >
MAX_MEMORY_RANGES
)

77 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx-%Lx : %n",

78 &
°¨t
, &
íd
, &
c⁄sumed
);

79 i‡(
cou¡
 != 2)

81 
°r
 = 
löe
 + 
c⁄sumed
;

83 
	`dbg¥ötf
("%016Lx-%016Lx : %s", 
°¨t
, 
íd
, 
°r
);

85 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

86 
ty≥
 = 
RANGE_RAM
;

88 i‡(
	`memcmp
(
°r
, "reserved\n", 9) == 0) {

89 
ty≥
 = 
RANGE_RESERVED
;

91 i‡(
	`memcmp
(
°r
, "ACPI Tables\n", 12) == 0) {

92 
ty≥
 = 
RANGE_ACPI
;

94 i‡(
	`memcmp
(
°r
, "ACPI Non-volatile Storage\n", 26) == 0) {

95 
ty≥
 = 
RANGE_ACPI_NVS
;

100 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

101 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

102 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

104 
	`dbg¥ötf
("%016Lx-%016Lx : %x\n", 
°¨t
, 
íd
, 
ty≥
);

106 
mem‹y_ønges
++;

108 
	`f˛o£
(
Â
);

109 *
ønge
 = 
mem‹y_ønge
;

110 *
ønges
 = 
mem‹y_ønges
;

112 
	}
}

124 
	$gë_mem‹y_ønges_sysfs
(
mem‹y_ønge
 **
ønge
, *
ønges
)

126 
ªt
;

127 
size_t
 
ønge_numbî
 = 
MAX_MEMORY_RANGES
;

129 
ªt
 = 
	`gë_fúmw¨e_memm≠_ønges
(
mem‹y_ønge
, &
ønge_numbî
);

130 i‡(
ªt
 != 0) {

131 
	`Ârötf
(
°dîr
, "ParsingÅhe /sys/firmware memory map failed. "

133  
	`gë_mem‹y_ønges_¥oc_iomem
(
ønge
, 
ønges
);

136 *
ønge
 = 
mem‹y_ønge
;

137 *
ønges
 = 
ønge_numbî
;

140 
	}
}

142 #ifde‡
HAVE_LIBXENCTRL


143 
	$xí_e820_to_kexec_ty≥
(
uöt32_t
 
ty≥
)

145 
ty≥
) {

146 
E820_RAM
:

147  
RANGE_RAM
;

148 
E820_ACPI
:

149  
RANGE_ACPI
;

150 
E820_NVS
:

151  
RANGE_ACPI_NVS
;

152 
E820_RESERVED
:

154  
RANGE_RESERVED
;

156 
	}
}

167 
	$gë_mem‹y_ønges_xí
(
mem‹y_ønge
 **
ønge
, *
ønges
)

169 
rc
, 
ªt
 = -1;

170 
e820íåy
 
e820íåõs
[
MAX_MEMORY_RANGES
];

171 
i
;

172 
xc_öãrÁ˚
 *
xc
;

174 
xc
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

176 i‡(!
xc
) {

177 
	`Ârötf
(
°dîr
, "%s: FaûedÅÿ›í Xí c⁄åﬁ i¡îÁ˚\n", 
__func__
);

181 
rc
 = 
	`xc_gë_machöe_mem‹y_m≠
(
xc
, 
e820íåõs
, 
MAX_MEMORY_RANGES
);

183 i‡(
rc
 < 0) {

184 
	`Ârötf
(
°dîr
, "%s: xc_gë_machöe_mem‹y_m≠: %s\n", 
__func__
, 
	`°ªº‹
(
rc
));

185 
îr
;

188 
i
 = 0; i < 
rc
; ++i) {

189 
mem‹y_ønge
[
i
].
°¨t
 = 
e820íåõs
[i].
addr
;

190 
mem‹y_ønge
[
i
].
íd
 = 
e820íåõs
[i].
addr
 +É820íåõs[i].
size
 - 1;

191 
mem‹y_ønge
[
i
].
ty≥
 = 
	`xí_e820_to_kexec_ty≥
(
e820íåõs
[i].type);

194 
	`qs‹t
(
mem‹y_ønge
, 
rc
, (mem‹y_ønge), 
com∑ª_ønges
);

196 *
ønge
 = 
mem‹y_ønge
;

197 *
ønges
 = 
rc
;

199 
ªt
 = 0;

201 
îr
:

202 
	`xc_öãrÁ˚_˛o£
(
xc
);

204  
ªt
;

205 
	}
}

207 
	$gë_mem‹y_ønges_xí
(
mem‹y_ønge
 **
ønge
, *
ønges
)

210 
	}
}

213 
	$ªmove_ønge
(
mem‹y_ønge
 *
ønge
, 
ƒ_ønges
, 
ödex
)

215 
i
, 
j
;

217 
i
 = 
ödex
; i < (
ƒ_ønges
-1); i++) {

218 
j
 = 
i
+1;

219 
ønge
[
i
] =Ñ™ge[
j
];

221 
	}
}

233 
	$fixup_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
)

235 
i
;

236 
j
;

237 
ch™ge_made
;

238 
ƒ_ønges
 = *
ønges
;

239 
mem‹y_ønge
 *
Ω
 = *
ønge
;

241 
agaö
:

242 
ch™ge_made
 = 0;

243 
i
 = 0; i < (
ƒ_ønges
-1); i++) {

244 
j
 = 
i
+1;

245 i‡(
Ω
[
i
].
°¨t
 >Ñp[
j
].start) {

246 
	`Ârötf
(
°dîr
, "memory out of order!!\n");

250 i‡(
Ω
[
i
].
ty≥
 !Ω[
j
].type)

253 i‡(
Ω
[
i
].
°¨t
 =Ω[
j
].start) {

254 i‡(
Ω
[
i
].
íd
 >Ω[
j
].end) {

255 
	`ªmove_ønge
(
Ω
, 
ƒ_ønges
, 
j
);

256 
ƒ_ønges
--;

257 
ch™ge_made
++;

259 
	`ªmove_ønge
(
Ω
, 
ƒ_ønges
, 
i
);

260 
ƒ_ønges
--;

261 
ch™ge_made
++;

264 i‡(
Ω
[
i
].
íd
 >Ñp[
j
].
°¨t
) {

265 i‡(
Ω
[
i
].
íd
 <Ñp[
j
].end) {

266 
Ω
[
j
].
°¨t
 =Ñp[
i
].
íd
;

267 
ch™ge_made
++;

268 } i‡(
Ω
[
i
].
íd
 >Ω[
j
].end) {

269 
	`ªmove_ønge
(
Ω
, 
ƒ_ønges
, 
j
);

270 
ƒ_ønges
--;

271 
ch™ge_made
++;

278 i‡(
ch™ge_made
)

279 
agaö
;

281 *
ønges
 = 
ƒ_ønges
;

283 
	}
}

295 
	$efi_m≠_added
( ) {

296 
buf
[512], *
ªs
;

297 
FILE
 *
Â
 = 
	`f›í
( "/proc/cmdline", "r" );

298 if–
Â
 ) {

299 
ªs
 = 
	`fgës
–
buf
, 512, 
Â
 );

300 
	`f˛o£
–
Â
 );

301  
	`°r°r
–
buf
, "add_efi_memm≠" ) !
NULL
;

305 
	}
}

321 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

322 
kexec_Êags
)

324 
ªt
, 
i
;

326 i‡(!
	`efi_m≠_added
(Ë&& !
	`xí_¥e£¡
(Ë&& 
	`have_sys_fúmw¨e_memm≠
()) {

327 
ªt
 = 
	`gë_mem‹y_ønges_sysfs
(
ønge
, 
ønges
);

328 i‡(!
ªt
)

329 
ªt
 = 
	`fixup_mem‹y_ønges
(
ønge
, 
ønges
);

330 } i‡(
	`xí_¥e£¡
()) {

331 
ªt
 = 
	`gë_mem‹y_ønges_xí
(
ønge
, 
ønges
);

332 i‡(!
ªt
)

333 
ªt
 = 
	`fixup_mem‹y_ønges
(
ønge
, 
ønges
);

335 
ªt
 = 
	`gë_mem‹y_ønges_¥oc_iomem
(
ønge
, 
ønges
);

342 i‡(
ªt
 != 0)

343  
ªt
;

346 
i
 = 0; i < *
ønges
; i++) {

347 i‡((*
ønge
)[
i
].
ty≥
 =
RANGE_RAM
 &&

348 ((*
ønge
)[
i
].
°¨t
 < 0x100)) {

349 (*
ønge
)[
i
].
°¨t
 = 0x100;

360 i‡((
kexec_Êags
 & 
KEXEC_ON_CRASH
) &&

361 !(
kexec_Êags
 & 
KEXEC_PRESERVE_CONTEXT
)) {

362 
uöt64_t
 
°¨t
, 
íd
;

364 
ªt
 = 
	`gë_max_¸ash_kî√l_limô
(&
°¨t
, &
íd
);

365 i‡(
ªt
 != 0) {

366 
	`Ârötf
(
°dîr
, "get_max_crash_kernel_limit failed.\n");

370 i‡(
°¨t
 > 
mem_mö
)

371 
mem_mö
 = 
°¨t
;

372 i‡(
íd
 < 
mem_max
)

373 
mem_max
 = 
íd
;

376 
	`dbg¥öt_mem_ønge
("MEMORY RANGES", *
ønge
, *
ønges
);

378  
ªt
;

379 
	}
}

	@kexec/arch/i386/kexec-x86.c

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<î∫o.h
>

23 
	~<°döt.h
>

24 
	~<°rög.h
>

25 
	~<limôs.h
>

26 
	~<°dlib.h
>

27 
	~<gë›t.h
>

28 
	~"../../kexec.h
"

29 
	~"../../kexec-ñf.h
"

30 
	~"../../kexec-sysˇŒ.h
"

31 
	~"../../fúmw¨e_memm≠.h
"

32 
	~"kexec-x86.h
"

33 
	~"¸ashdump-x86.h
"

34 
	~<¨ch/›ti⁄s.h
>

36 
fûe_ty≥
 
	gfûe_ty≥
[] = {

37 { "mu…iboŸ-x86", 
mu…iboŸ_x86_¥obe
, 
mu…iboŸ_x86_lﬂd
,

38 
mu…iboŸ_x86_ußge
 },

39 { "ñf-x86", 
ñf_x86_¥obe
, 
ñf_x86_lﬂd
, 
ñf_x86_ußge
 },

40 { "bzImage", 
bzImage_¥obe
, 
bzImage_lﬂd
, 
bzImage_ußge
 },

41 { "beoboŸ-x86", 
beoboŸ_¥obe
, 
beoboŸ_lﬂd
, 
beoboŸ_ußge
 },

42 { "nbi-x86", 
nbi_¥obe
, 
nbi_lﬂd
, 
nbi_ußge
 },

44 
	gfûe_ty≥s
 = (
fûe_ty≥
)/(file_type[0]);

47 
	$¨ch_ußge
()

49 
	`¥ötf
(

60 
	}
}

62 
¨ch_›ti⁄s_t
 
	g¨ch_›ti⁄s
 = {

63 .
ª£t_vga
 = 0,

64 .
	g£rül_ba£
 = 0x3f8,

65 .
	g£rül_baud
 = 0,

66 .
	gc⁄sﬁe_vga
 = 0,

67 .
	gc⁄sﬁe_£rül
 = 0,

68 .
	gc‹e_hódî_ty≥
 = 
CORE_TYPE_UNDEF
,

69 .
	g∑ss_memm≠_cmdlöe
 = 0,

70 .
	gn€fi
 = 0,

73 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

75 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

76 
KEXEC_ALL_OPTIONS


77 { 0, 0, 
NULL
, 0 },

79 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ALL_OPT_STR
;

80 
›t
;

81 
vÆue
;

82 *
íd
;

84 
›ãº
 = 0;

85 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

86 
›t
) {

89 
OPT_RESET_VGA
:

90 
¨ch_›ti⁄s
.
ª£t_vga
 = 1;

92 
OPT_CONSOLE_VGA
:

93 
¨ch_›ti⁄s
.
c⁄sﬁe_vga
 = 1;

95 
OPT_CONSOLE_SERIAL
:

96 
¨ch_›ti⁄s
.
c⁄sﬁe_£rül
 = 1;

98 
OPT_SERIAL
:

99 
vÆue
 = 
ULONG_MAX
;

100 i‡(
	`°rcmp
(
›èrg
, "ttyS0") == 0) {

101 
vÆue
 = 0x3f8;

103 i‡(
	`°rcmp
(
›èrg
, "ttyS1") == 0) {

104 
vÆue
 = 0x2f8;

106 i‡(
	`°∫cmp
(
›èrg
, "0x", 2) == 0) {

107 
vÆue
 = 
	`°πoul
(
›èrg
 +2, &
íd
, 16);

108 i‡(*
íd
 != '\0') {

109 
vÆue
 = 
ULONG_MAX
;

112 i‡(
vÆue
 >= 65536) {

113 
	`Ârötf
(
°dîr
, "Bad serialÖort base '%s'\n",

114 
›èrg
);

115 
	`ußge
();

119 
¨ch_›ti⁄s
.
£rül_ba£
 = 
vÆue
;

121 
OPT_SERIAL_BAUD
:

122 
vÆue
 = 
	`°πoul
(
›èrg
, &
íd
, 0);

123 i‡((
vÆue
 > 115200) || ((115200 %value) != 0) ||

124 (
vÆue
 < 9600Ë|| (*
íd
))

126 
	`Ârötf
(
°dîr
, "Bad serialÖort baudÑate '%s'\n",

127 
›èrg
);

128 
	`ußge
();

132 
¨ch_›ti⁄s
.
£rül_baud
 = 
vÆue
;

134 
OPT_ELF32_CORE
:

135 
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 = 
CORE_TYPE_ELF32
;

137 
OPT_ELF64_CORE
:

138 
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 = 
CORE_TYPE_ELF64
;

140 
OPT_PASS_MEMMAP_CMDLINE
:

141 
¨ch_›ti⁄s
.
∑ss_memm≠_cmdlöe
 = 1;

143 
OPT_NOEFI
:

144 
¨ch_›ti⁄s
.
n€fi
 = 1;

149 
›ãº
 = 1;

150 
›töd
 = 1;

152 
	}
}

154 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

158 { "i386", 
KEXEC_ARCH_DEFAULT
 },

159 { "i486", 
KEXEC_ARCH_DEFAULT
 },

160 { "i586", 
KEXEC_ARCH_DEFAULT
 },

161 { "i686", 
KEXEC_ARCH_DEFAULT
 },

162 { "x86_64", 
KEXEC_ARCH_X86_64
 },

166 
	$¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
öfo
)

168 i‡((
öfo
->
kexec_Êags
 & 
KEXEC_ARCH_MASK
Ë=
KEXEC_ARCH_X86_64
)

170 i‡(!
öfo
->
rhdr
.
e_shdr
) {

171 
	`Ârötf
(
°dîr
,

175 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "compat_x86_64_entry32",

176 &
öfo
->
íåy
, (info->entry));

178 
öfo
->
íåy
 = (*)
	`ñf_ªl_gë_addr
(&öfo->
rhdr
, "compat_x86_64");

181 
	}
}

183 
	$¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
öfo
)

185 
uöt8_t
 
∑nic_kî√l
 = 0;

187 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "reset_vga",

188 &
¨ch_›ti⁄s
.
ª£t_vga
, (arch_options.reset_vga));

189 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "serial_base",

190 &
¨ch_›ti⁄s
.
£rül_ba£
, (arch_options.serial_base));

191 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "serial_baud",

192 &
¨ch_›ti⁄s
.
£rül_baud
, (arch_options.serial_baud));

193 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "console_vga",

194 &
¨ch_›ti⁄s
.
c⁄sﬁe_vga
, (arch_options.console_vga));

195 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "console_serial",

196 &
¨ch_›ti⁄s
.
c⁄sﬁe_£rül
, (arch_options.console_serial));

197 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_src_start",

198 &
öfo
->
backup_§c_°¨t
, (info->backup_src_start));

199 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_src_size",

200 &
öfo
->
backup_§c_size
, (info->backup_src_size));

201 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

202 
∑nic_kî√l
 = 1;

203 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_start",

204 &
öfo
->
backup_°¨t
, (info->backup_start));

206 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "panic_kernel",

207 &
∑nic_kî√l
, (panic_kernel));

208 
	}
}

	@kexec/arch/i386/kexec-x86.h

1 #i‚de‡
KEXEC_X86_H


2 
	#KEXEC_X86_H


	)

4 
	#MAX_MEMORY_RANGES
 1024

	)

6 
	ec‹ëy≥
 {

7 
	mCORE_TYPE_UNDEF
 = 0,

8 
	mCORE_TYPE_ELF32
 = 1,

9 
	mCORE_TYPE_ELF64
 = 2

12 
com∑t_x86_64
[];

13 
uöt32_t
 
com∑t_x86_64_size
, 
com∑t_x86_64_íåy32
;

15 
	síåy32_ªgs
 {

16 
uöt32_t
 
	móx
;

17 
uöt32_t
 
	mebx
;

18 
uöt32_t
 
	mecx
;

19 
uöt32_t
 
	medx
;

20 
uöt32_t
 
	mesi
;

21 
uöt32_t
 
	medi
;

22 
uöt32_t
 
	me•
;

23 
uöt32_t
 
	mebp
;

24 
uöt32_t
 
	meù
;

27 
	síåy16_ªgs
 {

28 
uöt32_t
 
	móx
;

29 
uöt32_t
 
	mebx
;

30 
uöt32_t
 
	mecx
;

31 
uöt32_t
 
	medx
;

32 
uöt32_t
 
	mesi
;

33 
uöt32_t
 
	medi
;

34 
uöt32_t
 
	me•
;

35 
uöt32_t
 
	mebp
;

36 
uöt16_t
 
	mds
;

37 
uöt16_t
 
	mes
;

38 
uöt16_t
 
	mss
;

39 
uöt16_t
 
	mfs
;

40 
uöt16_t
 
	mgs
;

41 
uöt16_t
 
	mù
;

42 
uöt16_t
 
	mcs
;

43 
uöt16_t
 
	m∑d
;

46 
	s¨ch_›ti⁄s_t
 {

47 
uöt8_t
 
	mª£t_vga
;

48 
uöt16_t
 
	m£rül_ba£
;

49 
uöt32_t
 
	m£rül_baud
;

50 
uöt8_t
 
	mc⁄sﬁe_vga
;

51 
uöt8_t
 
	mc⁄sﬁe_£rül
;

52 
c‹ëy≥
 
	mc‹e_hódî_ty≥
;

53 
uöt8_t
 
	m∑ss_memm≠_cmdlöe
;

54 
uöt8_t
 
	mn€fi
;

57 
mu…iboŸ_x86_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

58 
mu…iboŸ_x86_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

59 
kexec_öfo
 *
öfo
);

60 
mu…iboŸ_x86_ußge
();

62 
ñf_x86_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

63 
ñf_x86_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

64 
kexec_öfo
 *
öfo
);

65 
ñf_x86_ußge
();

67 
bzImage_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

68 
bzImage_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

69 
kexec_öfo
 *
öfo
);

70 
bzImage_ußge
();

71 
do_bzImage_lﬂd
(
kexec_öfo
 *
öfo
,

72 c⁄° *
kî√l
, 
off_t
 
kî√l_Àn
,

73 c⁄° *
comm™d_löe
, 
off_t
 
comm™d_löe_Àn
,

74 c⁄° *
öôrd
, 
off_t
 
öôrd_Àn
,

75 
ªÆ_mode_íåy
);

77 
beoboŸ_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

78 
beoboŸ_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

79 
kexec_öfo
 *
öfo
);

80 
beoboŸ_ußge
();

82 
nbi_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

83 
nbi_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

84 
kexec_öfo
 *
öfo
);

85 
nbi_ußge
();

87 
xí_e820_to_kexec_ty≥
(
uöt32_t
 
ty≥
);

	@kexec/arch/i386/x86-linux-setup.c

16 
	#_GNU_SOURCE


	)

17 
	~<°döt.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°d¨g.h
>

21 
	~<°dlib.h
>

22 
	~<°ddef.h
>

23 
	~<î∫o.h
>

24 
	~<limôs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<sys/io˘l.h
>

29 
	~<löux/fb.h
>

30 
	~<uni°d.h
>

31 
	~<dúít.h
>

32 
	~<m¡ít.h
>

33 
	~<x86/x86-löux.h
>

34 
	~"../../kexec.h
"

35 
	~"kexec-x86.h
"

36 
	~"x86-löux-£tup.h
"

37 
	~"../../kexec/kexec-sysˇŒ.h
"

39 
	$öô_löux_∑ømëîs
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

44 
	`mem˝y
(
ªÆ_mode
->
hódî_magic
, "HdrS", 4);

45 
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 = 0x0206;

46 
ªÆ_mode
->
öôrd_addr_max
 = 
DEFAULT_INITRD_ADDR_MAX
;

47 
ªÆ_mode
->
cmdlöe_size
 = 
COMMAND_LINE_SIZE
;

48 
	}
}

50 
	$£tup_löux_boŸlﬂdî_∑ømëîs_high
(

51 
kexec_öfo
 *
öfo
, 
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

52 
ªÆ_mode_ba£
, 
cmdlöe_off£t
,

53 c⁄° *
cmdlöe
, 
off_t
 
cmdlöe_Àn
,

54 c⁄° *
öôrd_buf
, 
off_t
 
öôrd_size
, 
öôrd_high
)

56 *
cmdlöe_±r
;

57 
öôrd_ba£
, 
öôrd_addr_max
;

60 
ªÆ_mode
->
lﬂdî_ty≥
 = 
LOADER_TYPE_KEXEC
 << 4;

63 
ªÆ_mode
->
lﬂdî_Êags
 = 0;

66 i‡(
öôrd_high
)

67 
öôrd_addr_max
 = 
ULONG_MAX
;

69 
öôrd_addr_max
 = 
DEFAULT_INITRD_ADDR_MAX
;

70 i‡(
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x0203) {

71 
öôrd_addr_max
 = 
ªÆ_mode
->initrd_addr_max;

72 
	`dbg¥ötf
("initrd_addr_max is 0x%lx\n",

73 
öôrd_addr_max
);

78 i‡(
öôrd_buf
) {

79 
öôrd_ba£
 = 
	`add_buf„r
(
öfo
,

80 
öôrd_buf
, 
öôrd_size
, initrd_size,

81 4096, 
INITRD_BASE
, 
öôrd_addr_max
, -1);

82 
	`dbg¥ötf
("Lﬂded inôrdáà0x%lx sizê0x%lx\n", 
öôrd_ba£
,

83 
öôrd_size
);

85 
öôrd_ba£
 = 0;

86 
öôrd_size
 = 0;

90 
ªÆ_mode
->
öôrd_°¨t
 = 
öôrd_ba£
 & 0xffffffffUL;

91 
ªÆ_mode
->
öôrd_size
 = initrd_size & 0xffffffffUL;

93 i‡(
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x020c &&

94 (
öôrd_ba£
 & 0xffffffffUL) != initrd_base)

95 
ªÆ_mode
->
ext_ømdisk_image
 = 
öôrd_ba£
 >> 32;

97 i‡(
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x020c &&

98 (
öôrd_size
 & 0xffffffffUL) != initrd_size)

99 
ªÆ_mode
->
ext_ømdisk_size
 = 
öôrd_size
 >> 32;

103 
ªÆ_mode
->
˛_magic
 = 
CL_MAGIC_VALUE
;

104 
ªÆ_mode
->
˛_off£t
 = 
cmdlöe_off£t
;

107 i‡(
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x0202) {

108 
cmd_löe_±r
 = 
ªÆ_mode_ba£
 + 
cmdlöe_off£t
;

110 
ªÆ_mode
->
cmd_löe_±r
 = cmd_line_ptr & 0xffffffffUL;

111 i‡((
ªÆ_mode
->
¥Ÿocﬁ_vîsi⁄
 >= 0x020c) &&

112 ((
cmd_löe_±r
 & 0xffffffffUL) != cmd_line_ptr))

113 
ªÆ_mode
->
ext_cmd_löe_±r
 = 
cmd_löe_±r
 >> 32;

117 i‡(
cmdlöe_Àn
 > 
COMMAND_LINE_SIZE
) {

118 
cmdlöe_Àn
 = 
COMMAND_LINE_SIZE
;

120 
cmdlöe_±r
 = ((*)
ªÆ_mode
Ë+ 
cmdlöe_off£t
;

121 
	`mem˝y
(
cmdlöe_±r
, 
cmdlöe
, 
cmdlöe_Àn
);

122 
cmdlöe_±r
[
cmdlöe_Àn
 - 1] = '\0';

123 
	}
}

125 
	$£tup_löux_veßfb
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

127 
fb_fix_s¸ìnöfo
 
fix
;

128 
fb_v¨_s¸ìnöfo
 
v¨
;

129 
fd
;

131 
fd
 = 
	`›í
("/dev/fb0", 
O_RDONLY
);

132 i‡(-1 =
fd
)

135 i‡(-1 =
	`io˘l
(
fd
, 
FBIOGET_FSCREENINFO
, &
fix
))

136 
out
;

137 i‡(-1 =
	`io˘l
(
fd
, 
FBIOGET_VSCREENINFO
, &
v¨
))

138 
out
;

139 i‡(0 =
	`°rcmp
(
fix
.
id
, "VESA VGA")) {

141 
ªÆ_mode
->
‹ig_video_isVGA
 = 0x23;

142 } i‡(0 =
	`°rcmp
(
fix
.
id
, "EFI VGA")) {

144 
ªÆ_mode
->
‹ig_video_isVGA
 = 0x70;

147 
out
;

149 
	`˛o£
(
fd
);

151 
ªÆ_mode
->
lfb_width
 = 
v¨
.
xªs
;

152 
ªÆ_mode
->
lfb_height
 = 
v¨
.
yªs
;

153 
ªÆ_mode
->
lfb_dïth
 = 
v¨
.
bôs_≥r_pixñ
;

154 
ªÆ_mode
->
lfb_ba£
 = 
fix
.
smem_°¨t
;

155 
ªÆ_mode
->
lfb_löñígth
 = 
fix
.
löe_Àngth
;

156 
ªÆ_mode
->
veßpm_£g
 = 0;

159 
ªÆ_mode
->
lfb_size
 = (
fix
.
smem_Àn
 + 65535) / 65536;

160 
ªÆ_mode
->
∑ges
 = (
fix
.
smem_Àn
 + 4095) / 4096;

162 i‡(
v¨
.
bôs_≥r_pixñ
 > 8) {

163 
ªÆ_mode
->
ªd_pos
 = 
v¨
.
ªd
.
off£t
;

164 
ªÆ_mode
->
ªd_size
 = 
v¨
.
ªd
.
Àngth
;

165 
ªÆ_mode
->
gªí_pos
 = 
v¨
.
gªí
.
off£t
;

166 
ªÆ_mode
->
gªí_size
 = 
v¨
.
gªí
.
Àngth
;

167 
ªÆ_mode
->
blue_pos
 = 
v¨
.
blue
.
off£t
;

168 
ªÆ_mode
->
blue_size
 = 
v¨
.
blue
.
Àngth
;

169 
ªÆ_mode
->
rsvd_pos
 = 
v¨
.
å™•
.
off£t
;

170 
ªÆ_mode
->
rsvd_size
 = 
v¨
.
å™•
.
Àngth
;

174 
out
:

175 
	`˛o£
(
fd
);

177 
	}
}

179 
	#EDD_SYFS_DIR
 "/sys/fúmw¨e/edd"

	)

181 
	#EDD_EXT_FIXED_DISK_ACCESS
 (1 << 0)

	)

182 
	#EDD_EXT_DEVICE_LOCKING_AND_EJECTING
 (1 << 1)

	)

183 
	#EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT
 (1 << 2)

	)

184 
	#EDD_EXT_64BIT_EXTENSIONS
 (1 << 3)

	)

190 
	$fûe_sˇnf
(c⁄° *
dú
, c⁄° *
fûe
, c⁄° *
sˇnf_löe
, ...)

192 
va_li°
 
¨g±r
;

193 
FILE
 *
Â
;

194 
ªäo
;

195 
fûíame
[
PATH_MAX
];

197 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
dú
, 
fûe
);

198 
fûíame
[
PATH_MAX
-1] = 0;

200 
Â
 = 
	`f›í
(
fûíame
, "r");

201 i‡(!
Â
) {

202  -
î∫o
;

205 
	`va_°¨t
(
¨g±r
, 
sˇnf_löe
);

206 
ªäo
 = 
	`vfsˇnf
(
Â
, 
sˇnf_löe
, 
¨g±r
);

207 
	`va_íd
(
¨g±r
);

209 
	`f˛o£
(
Â
);

211  
ªäo
;

212 
	}
}

214 
	$∑r£_edd_exãnsi⁄s
(c⁄° *
dú
, 
edd_öfo
 *edd_info)

216 
fûíame
[
PATH_MAX
];

217 
löe
[1024];

218 
uöt16_t
 
Êags
 = 0;

219 
FILE
 *
Â
;

221 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
dú
, "extensions");

222 
fûíame
[
PATH_MAX
-1] = 0;

224 
Â
 = 
	`f›í
(
fûíame
, "r");

225 i‡(!
Â
) {

226  -
î∫o
;

229 
	`fgës
(
löe
, 1024, 
Â
)) {

234 i‡(
	`°r°r
(
löe
, "Fixed diskáccess") ==Üine)

235 
Êags
 |
EDD_EXT_FIXED_DISK_ACCESS
;

236 i‡(
	`°r°r
(
löe
, "DeviceÜockingándÉjecting") ==Üine)

237 
Êags
 |
EDD_EXT_DEVICE_LOCKING_AND_EJECTING
;

238 i‡(
	`°r°r
(
löe
, "Enhanced Disk Drive support") ==Üine)

239 
Êags
 |
EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT
;

240 i‡(
	`°r°r
(
löe
, "64-bitÉxtensions") ==Üine)

241 
Êags
 |
EDD_EXT_64BIT_EXTENSIONS
;

244 
	`f˛o£
(
Â
);

246 
edd_öfo
->
öãrÁ˚_suµ‹t
 = 
Êags
;

249 
	}
}

251 
	$ªad_edd_øw_d©a
(c⁄° *
dú
, 
edd_öfo
 *edd_info)

253 
fûíame
[
PATH_MAX
];

254 
FILE
 *
Â
;

255 
size_t
 
ªad_ch¨s
;

256 
uöt16_t
 
Àn
;

258 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
dú
, "raw_data");

259 
fûíame
[
PATH_MAX
-1] = 0;

261 
Â
 = 
	`f›í
(
fûíame
, "r");

262 i‡(!
Â
) {

263  -
î∫o
;

266 
	`mem£t
(
edd_öfo
->
edd_devi˚_∑øms
, 0, 
EDD_DEVICE_PARAM_SIZE
);

267 
ªad_ch¨s
 = 
	`‰ód
(
edd_öfo
->
edd_devi˚_∑øms
, (
uöt8_t
),

268 
EDD_DEVICE_PARAM_SIZE
, 
Â
);

269 
	`f˛o£
(
Â
);

271 
Àn
 = ((
uöt16_t
 *)
edd_öfo
->
edd_devi˚_∑øms
)[0];

272 
	`dbg¥ötf
("EDDÑaw d©®ha†Àngth %d\n", 
Àn
);

274 i‡(
ªad_ch¨s
 < 
Àn
) {

275 
	`Ârötf
(
°dîr
, "BIOSÑeported EDDÜength of %hd but only "

276 "%d ch¨†ªad.\n", 
Àn
, ()
ªad_ch¨s
);

281 
	}
}

283 
	$add_edd_íåy
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

284 c⁄° *
sysfs_«me
, *
cuºít_edd
, *
cuºít_mbr
)

286 
uöt8_t
 
devnum
, 
vîsi⁄
;

287 
uöt32_t
 
mbr_sig
;

288 
edd_öfo
 *edd_info;

290 i‡(!
cuºít_mbr
 || !
cuºít_edd
) {

291 
	`Ârötf
(
°dîr
, "%s: current_eddánd current_edd "

292 "mu°ÇŸ bêNULL", 
__FUNCTION__
);

296 
edd_öfo
 = &
ªÆ_mode
->
eddbuf
[*
cuºít_edd
];

297 
	`mem£t
(
edd_öfo
, 0, (edd_info));

300 i‡(
	`ssˇnf
(
	`ba£«me
(
sysfs_«me
), "öt13_dev%hhx", &
devnum
) != 1) {

301 
	`Ârötf
(
°dîr
, "Invalid format of int13_dev dir "

302 "íåy: %s\n", 
	`ba£«me
(
sysfs_«me
));

307 i‡(
	`fûe_sˇnf
(
sysfs_«me
, "mbr_sig«tuª", "0x%x", &
mbr_sig
) == 1) {

308 
ªÆ_mode
->
edd_mbr_sig_buf„r
[*
cuºít_mbr
] = 
mbr_sig
;

309 (*
cuºít_mbr
)++;

310 
	`dbg¥ötf
("EDD Devi˚ 0x%x: mbr_sig=0x%x\n", 
devnum
, 
mbr_sig
);

314 
edd_öfo
->
devi˚
 = 
devnum
;

317 i‡(
	`fûe_sˇnf
(
sysfs_«me
, "vîsi⁄", "0x%hhx", &
vîsi⁄
) != 1)

320 
edd_öfo
->
vîsi⁄
 = version;

323 i‡(
vîsi⁄
 != 0) {

325 i‡(
	`fûe_sˇnf
(
sysfs_«me
, "legacy_max_cylinder", "%hu",

326 &
edd_öfo
->
Àgacy_max_cylödî
) != 1) {

327 
	`Ârötf
(
°dîr
, "ReadingÜegacy_max_cylinder failed.\n");

332 i‡(
	`fûe_sˇnf
(
sysfs_«me
, "legacy_max_head", "%hhu",

333 &
edd_öfo
->
Àgacy_max_hód
) != 1) {

334 
	`Ârötf
(
°dîr
, "ReadingÜegacy_max_head failed.\n");

339 i‡(
	`fûe_sˇnf
(
sysfs_«me
, "legacy_sectors_per_track", "%hhu",

340 &
edd_öfo
->
Àgacy_£˘‹s_≥r_åack
) != 1) {

341 
	`Ârötf
(
°dîr
, "ReadingÜegacy_sectors_per_track failed.\n");

346 i‡(
	`∑r£_edd_exãnsi⁄s
(
sysfs_«me
, 
edd_öfo
) != 0) {

347 
	`Ârötf
(
°dîr
, "Parsing EDDÉxtensions failed.\n");

352 i‡(
	`ªad_edd_øw_d©a
(
sysfs_«me
, 
edd_öfo
) != 0) {

353 
	`Ârötf
(
°dîr
, "Reading EDDÑaw data failed.\n");

358 (*
cuºít_edd
)++;

361 
	}
}

363 
	$zîo_edd
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

365 
ªÆ_mode
->
eddbuf_íåõs
 = 0;

366 
ªÆ_mode
->
edd_mbr_sig_buf_íåõs
 = 0;

367 
	`mem£t
(
ªÆ_mode
->
eddbuf
, 0,

368 
EDDMAXNR
 * (
edd_öfo
));

369 
	`mem£t
(
ªÆ_mode
->
edd_mbr_sig_buf„r
, 0,

370 
EDD_MBR_SIG_MAX
 * (
uöt32_t
));

371 
	}
}

373 
	$£tup_edd_öfo
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

375 
DIR
 *
edd_dú
;

376 
dúít
 *
curs‹
;

377 
cuºít_edd
 = 0;

378 
cuºít_mbr
 = 0;

380 
edd_dú
 = 
	`›ídú
(
EDD_SYFS_DIR
);

381 i‡(!
edd_dú
) {

382 
	`dbg¥ötf
(
EDD_SYFS_DIR
 " doesÇotÉxist.\n");

386 
	`zîo_edd
(
ªÆ_mode
);

387 (
curs‹
 = 
	`ªaddú
(
edd_dú
))) {

388 
fuŒ_dú_«me
[
PATH_MAX
];

391 i‡(
	`°r°r
(
curs‹
->
d_«me
, "int13_dev") != cursor->d_name)

394 
	`¢¥ötf
(
fuŒ_dú_«me
, 
PATH_MAX
, "%s/%s",

395 
EDD_SYFS_DIR
, 
curs‹
->
d_«me
);

396 
fuŒ_dú_«me
[
PATH_MAX
-1] = 0;

398 i‡(
	`add_edd_íåy
(
ªÆ_mode
, 
fuŒ_dú_«me
, &
cuºít_edd
,

399 &
cuºít_mbr
) != 0) {

400 
	`zîo_edd
(
ªÆ_mode
);

401 
out
;

405 
ªÆ_mode
->
eddbuf_íåõs
 = 
cuºít_edd
;

406 
ªÆ_mode
->
edd_mbr_sig_buf_íåõs
 = 
cuºít_mbr
;

408 
out
:

409 
	`˛o£dú
(
edd_dú
);

411 
	`dbg¥ötf
("Added %d EDD MBRÉntriesánd %d EDDÉntries.\n",

412 
ªÆ_mode
->
edd_mbr_sig_buf_íåõs
,

413 
ªÆ_mode
->
eddbuf_íåõs
);

414 
	}
}

421 *
	$föd_m¡_by_f¢ame
(*
f¢ame
)

423 
FILE
 *
mèb
;

424 
m¡ít
 *
m¡
;

425 *
m¡dú
;

427 
mèb
 = 
	`£tm¡ít
("/etc/mtab", "r");

428 i‡(!
mèb
)

429  
NULL
;

430 
m¡
 = 
	`gëm¡ít
(
mèb
); mnt; mnt = getmntent(mtab)) {

431 i‡(
	`°rcmp
(
m¡
->
m¡_f¢ame
, 
f¢ame
) == 0)

434 
m¡dú
 = 
m¡
 ? 
	`°rdup
(m¡->
m¡_dú
Ë: 
NULL
;

435 
	`ídm¡ít
(
mèb
);

436  
m¡dú
;

437 
	}
}

439 
	$gë_boŸ∑øm
(*
buf
, 
off_t
 
off£t
, 
size_t
 
size
)

441 
d©a_fûe
;

442 *
debugfs_m¡
, *
sysfs_m¡
;

443 
fûíame
[
PATH_MAX
];

444 
îr
, 
has_sysfs_∑øms
 = 0;

446 
sysfs_m¡
 = 
	`föd_m¡_by_f¢ame
("sysfs");

447 i‡(
sysfs_m¡
) {

448 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
sysfs_m¡
,

450 
	`‰ì
(
sysfs_m¡
);

451 
îr
 = 
	`ac˚ss
(
fûíame
, 
F_OK
);

452 i‡(!
îr
)

453 
has_sysfs_∑øms
 = 1;

456 i‡(!
has_sysfs_∑øms
) {

457 
debugfs_m¡
 = 
	`föd_m¡_by_f¢ame
("debugfs");

458 i‡(!
debugfs_m¡
)

460 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
debugfs_m¡
,

462 
	`‰ì
(
debugfs_m¡
);

465 
d©a_fûe
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

466 i‡(
d©a_fûe
 < 0)

468 i‡(
	`l£ek
(
d©a_fûe
, 
off£t
, 
SEEK_SET
) < 0)

469 
˛o£
;

470 
	`ªad
(
d©a_fûe
, 
buf
, 
size
);

471 
˛o£
:

472 
	`˛o£
(
d©a_fûe
);

474 
	}
}

476 
	$£tup_sub¨ch
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

478 
off_t
 
off£t
 = 
	`off£tof
(
	`ty≥of
(*
ªÆ_mode
), 
h¨dw¨e_sub¨ch
);

480 
	`gë_boŸ∑øm
(&
ªÆ_mode
->
h¨dw¨e_sub¨ch
, 
off£t
, (
uöt32_t
));

481 
	}
}

483 
	sefi_mem_des¸ùt‹
 {

484 
uöt32_t
 
	mty≥
;

485 
uöt32_t
 
	m∑d
;

486 
uöt64_t
 
	mphys_addr
;

487 
uöt64_t
 
	mvút_addr
;

488 
uöt64_t
 
	mnum_∑ges
;

489 
uöt64_t
 
	m©åibuã
;

492 
	sefi_£tup_d©a
 {

493 
uöt64_t
 
	mfw_víd‹
;

494 
uöt64_t
 
	mru¡ime
;

495 
uöt64_t
 
	mèbÀs
;

496 
uöt64_t
 
	msmbios
;

497 
uöt64_t
 
	mª£rved
[8];

500 
	s£tup_d©a
 {

501 
uöt64_t
 
	m√xt
;

502 
uöt32_t
 
	mty≥
;

503 
	#SETUP_NONE
 0

	)

504 
	#SETUP_E820_EXT
 1

	)

505 
	#SETUP_DTB
 2

	)

506 
	#SETUP_PCI
 3

	)

507 
	#SETUP_EFI
 4

	)

508 
uöt32_t
 
	mÀn
;

509 
uöt8_t
 
	md©a
[0];

510 } 
__©åibuã__
((
∑cked
));

512 
	$gë_efi_vÆue
(c⁄° *
fûíame
,

513 c⁄° *
∑âîn
, 
uöt64_t
 *
vÆ
)

515 
FILE
 *
Â
;

516 
löe
[1024], *
s
, *
íd
;

518 
Â
 = 
	`f›í
(
fûíame
, "r");

519 i‡(!
Â
)

522 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

523 
s
 = 
	`°r°r
(
löe
, 
∑âîn
);

524 i‡(!
s
)

526 *
vÆ
 = 
	`°πouŒ
(
s
 + 
	`°æí
(
∑âîn
), &
íd
, 16);

527 i‡(*
vÆ
 =
ULLONG_MAX
) {

528 
	`f˛o£
(
Â
);

534 
	`f˛o£
(
Â
);

536 
	}
}

538 
	$gë_efi_vÆues
(
efi_£tup_d©a
 *
esd
)

540 
ªt
 = 0;

542 
ªt
 = 
	`gë_efi_vÆue
("/sys/firmware/efi/systab", "SMBIOS=0x",

543 &
esd
->
smbios
);

544 
ªt
 |
	`gë_efi_vÆue
("/sys/firmware/efi/fw_vendor", "0x",

545 &
esd
->
fw_víd‹
);

546 
ªt
 |
	`gë_efi_vÆue
("/sys/firmware/efi/runtime", "0x",

547 &
esd
->
ru¡ime
);

548 
ªt
 |
	`gë_efi_vÆue
("/sys/firmware/efi/config_table", "0x",

549 &
esd
->
èbÀs
);

550  
ªt
;

551 
	}
}

553 
	$gë_efi_ru¡ime_m≠
(
efi_mem_des¸ùt‹
 **
m≠
)

555 
DIR
 *
dúp
;

556 
dúít
 *
íåy
;

557 
fûíame
[1024];

558 
efi_mem_des¸ùt‹
 
md
, *
p
 = 
NULL
;

559 
ƒ_m≠s
 = 0;

561 
dúp
 = 
	`›ídú
("/sys/firmware/efi/runtime-map");

562 i‡(!
dúp
)

564 (
íåy
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

565 
	`•rötf
(
fûíame
,

567 (*)
íåy
->
d_«me
);

568 i‡(*
íåy
->
d_«me
 == '.')

570 
	`fûe_sˇnf
(
fûíame
, "ty≥", "0x%x", (*)&
md
.
ty≥
);

571 
	`fûe_sˇnf
(
fûíame
, "phys_addr", "0x%llx",

572 (*)&
md
.
phys_addr
);

573 
	`fûe_sˇnf
(
fûíame
, "virt_addr", "0x%llx",

574 (*)&
md
.
vút_addr
);

575 
	`fûe_sˇnf
(
fûíame
, "num_pages", "0x%llx",

576 (*)&
md
.
num_∑ges
);

577 
	`fûe_sˇnf
(
fûíame
, "attribute", "0x%llx",

578 (*)&
md
.
©åibuã
);

579 
p
 = 
	`ªÆloc
’, (
ƒ_m≠s
 + 1Ë* (
md
));

580 i‡(!
p
)

581 
îr_out
;

583 *(
p
 + 
ƒ_m≠s
Ë
md
;

584 *
m≠
 = 
p
;

585 
ƒ_m≠s
++;

588 
	`˛o£dú
(
dúp
);

589  
ƒ_m≠s
;

590 
îr_out
:

591 i‡(
m≠
)

592 
	`‰ì
(
m≠
);

593 
	`˛o£dú
(
dúp
);

595 
	}
}

597 
	sefi_öfo
 {

598 
uöt32_t
 
	mefi_lﬂdî_sig«tuª
;

599 
uöt32_t
 
	mefi_sy°ab
;

600 
uöt32_t
 
	mefi_memdesc_size
;

601 
uöt32_t
 
	mefi_memdesc_vîsi⁄
;

602 
uöt32_t
 
	mefi_memm≠
;

603 
uöt32_t
 
	mefi_memm≠_size
;

604 
uöt32_t
 
	mefi_sy°ab_hi
;

605 
uöt32_t
 
	mefi_memm≠_hi
;

613 
	$add_£tup_d©a
(
kexec_öfo
 *
öfo
,

614 
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

615 
£tup_d©a
 *
sd
)

617 
sdsize
 = (
£tup_d©a
Ë+ 
sd
->
Àn
;

619 
sd
->
√xt
 = 
ªÆ_mode
->
£tup_d©a
;

620 
ªÆ_mode
->
£tup_d©a
 = 
	`add_buf„r
(
öfo
, 
sd
, 
sdsize
, sdsize, 
	`gë∑gesize
(),

621 0x100000, 
ULONG_MAX
, 
INT_MAX
);

622 
	}
}

630 
	$£tup_efi_d©a
(
kexec_öfo
 *
öfo
,

631 
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

633 
öt64_t
 
memm≠_∑ddr
;

634 
£tup_d©a
 *
sd
;

635 
efi_£tup_d©a
 *
esd
;

636 
efi_mem_des¸ùt‹
 *
m≠s
;

637 
ƒ_m≠s
, 
size
, 
ªt
 = 0;

638 
efi_öfo
 *
ei
 = (efi_öfÿ*)
ªÆ_mode
->efi_info;

640 
ªt
 = 
	`ac˚ss
("/sys/fúmw¨e/efi/sy°ab", 
F_OK
);

641 i‡(
ªt
 < 0)

642 
out
;

644 
esd
 = 
	`mÆloc
((
efi_£tup_d©a
));

645 i‡(!
esd
) {

646 
ªt
 = 1;

647 
out
;

649 
	`mem£t
(
esd
, 0, (
efi_£tup_d©a
));

650 
ªt
 = 
	`gë_efi_vÆues
(
esd
);

651 i‡(
ªt
)

652 
‰ì_esd
;

653 
ƒ_m≠s
 = 
	`gë_efi_ru¡ime_m≠
(&
m≠s
);

654 i‡(!
ƒ_m≠s
) {

655 
ªt
 = 2;

656 
‰ì_esd
;

658 
sd
 = 
	`mÆloc
((
£tup_d©a
Ë+ (*
esd
));

659 i‡(!
sd
) {

660 
ªt
 = 3;

661 
‰ì_m≠s
;

664 
	`mem£t
(
sd
, 0, (
£tup_d©a
Ë+ (*
esd
));

665 
sd
->
√xt
 = 0;

666 
sd
->
ty≥
 = 
SETUP_EFI
;

667 
sd
->
Àn
 = (*
esd
);

668 
	`mem˝y
(
sd
->
d©a
, 
esd
, (*esd));

669 
	`‰ì
(
esd
);

671 
	`add_£tup_d©a
(
öfo
, 
ªÆ_mode
, 
sd
);

673 
size
 = 
ƒ_m≠s
 * (
efi_mem_des¸ùt‹
);

674 
memm≠_∑ddr
 = 
	`add_buf„r
(
öfo
, 
m≠s
, 
size
, size, 
	`gë∑gesize
(),

675 0x100000, 
ULONG_MAX
, 
INT_MAX
);

676 
ei
->
efi_memm≠
 = 
memm≠_∑ddr
 & 0xffffffff;

677 
ei
->
efi_memm≠_hi
 = 
memm≠_∑ddr
 >> 32;

678 
ei
->
efi_memm≠_size
 = 
size
;

679 
ei
->
efi_memdesc_size
 = (
efi_mem_des¸ùt‹
);

682 
‰ì_m≠s
:

683 
	`‰ì
(
m≠s
);

684 
‰ì_esd
:

685 
	`‰ì
(
esd
);

686 
out
:

687  
ªt
;

688 
	}
}

690 
	$add_e820_m≠_‰om_mr
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

691 
e820íåy
 *
e820
, 
mem‹y_ønge
 *
ønge
, 
ƒ_ønge
)

693 
i
;

695 
i
 = 0; i < 
ƒ_ønge
; i++) {

696 
e820
[
i
].
addr
 = 
ønge
[i].
°¨t
;

697 
e820
[
i
].
size
 = 
ønge
[i].
íd
 -Ñ™ge[i].
°¨t
 + 1;

698 
ønge
[
i
].
ty≥
) {

699 
RANGE_RAM
:

700 
e820
[
i
].
ty≥
 = 
E820_RAM
;

702 
RANGE_ACPI
:

703 
e820
[
i
].
ty≥
 = 
E820_ACPI
;

705 
RANGE_ACPI_NVS
:

706 
e820
[
i
].
ty≥
 = 
E820_NVS
;

709 
RANGE_RESERVED
:

710 
e820
[
i
].
ty≥
 = 
E820_RESERVED
;

713 
	`dbg¥ötf
("%016lx-%016lx (%d)\n",

714 
e820
[
i
].
addr
,

715 
e820
[
i
].
addr
 +É820[i].
size
 - 1,

716 
e820
[
i
].
ty≥
);

718 i‡(
ønge
[
i
].
ty≥
 !
RANGE_RAM
)

720 i‡((
ønge
[
i
].
°¨t
 <0x100000Ë&&Ñ™ge[i].
íd
 > 0x100000) {

721 
mem_k
 = (
ønge
[
i
].
íd
 >> 10) - (0x100000 >> 10);

722 
ªÆ_mode
->
ext_mem_k
 = 
mem_k
;

723 
ªÆ_mode
->
Æt_mem_k
 = 
mem_k
;

724 i‡(
mem_k
 > 0xfc00) {

725 
ªÆ_mode
->
ext_mem_k
 = 0xfc00;

727 i‡(
mem_k
 > 0xffffffff) {

728 
ªÆ_mode
->
Æt_mem_k
 = 0xffffffff;

732 
	}
}

734 
	$£tup_e820_ext
(
kexec_öfo
 *
öfo
, 
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

735 
mem‹y_ønge
 *
ønge
, 
ƒ_ønge
)

737 
£tup_d©a
 *
sd
;

738 
e820íåy
 *
e820
;

739 
ƒ_ønge_ext
;

741 
ƒ_ønge_ext
 = 
ƒ_ønge
 - 
E820MAX
;

742 
sd
 = 
	`xmÆloc
((
£tup_d©a
Ë+ 
ƒ_ønge_ext
 * (
e820íåy
));

743 
sd
->
√xt
 = 0;

744 
sd
->
Àn
 = 
ƒ_ønge_ext
 * (
e820íåy
);

745 
sd
->
ty≥
 = 
SETUP_E820_EXT
;

747 
e820
 = (
e820íåy
 *Ë
sd
->
d©a
;

748 
	`dbg¥ötf
("Extended E820 via setup_data:\n");

749 
	`add_e820_m≠_‰om_mr
(
ªÆ_mode
, 
e820
, 
ønge
 + 
E820MAX
, 
ƒ_ønge_ext
);

750 
	`add_£tup_d©a
(
öfo
, 
ªÆ_mode
, 
sd
);

751 
	}
}

753 
	$£tup_e820
(
kexec_öfo
 *
öfo
, 
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

755 
mem‹y_ønge
 *
ønge
;

756 
ƒ_ønge
, 
ƒ_ønge_ßved
;

759 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
 && !
¨ch_›ti⁄s
.
∑ss_memm≠_cmdlöe
) {

760 
ønge
 = 
öfo
->
¸ash_ønge
;

761 
ƒ_ønge
 = 
öfo
->
ƒ_¸ash_ønges
;

763 
ønge
 = 
öfo
->
mem‹y_ønge
;

764 
ƒ_ønge
 = 
öfo
->
mem‹y_ønges
;

767 
ƒ_ønge_ßved
 = 
ƒ_ønge
;

768 i‡(
ƒ_ønge
 > 
E820MAX
) {

769 
ƒ_ønge
 = 
E820MAX
;

772 
ªÆ_mode
->
e820_m≠_ƒ
 = 
ƒ_ønge
;

773 
	`dbg¥ötf
("E820 memmap:\n");

774 
	`add_e820_m≠_‰om_mr
(
ªÆ_mode
,Ñól_mode->
e820_m≠
, 
ønge
, 
ƒ_ønge
);

776 i‡(
ƒ_ønge_ßved
 > 
E820MAX
) {

777 
	`dbg¥ötf
("extra E820 memmapáreÖassed via setup_data\n");

778 
	`£tup_e820_ext
(
öfo
, 
ªÆ_mode
, 
ønge
, 
ƒ_ønge_ßved
);

780 
	}
}

783 
	$gë_efi_mem_desc_vîsi⁄
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

785 
efi_öfo
 *
ei
 = (efi_öfÿ*)
ªÆ_mode
->efi_info;

787  
ei
->
efi_memdesc_vîsi⁄
;

788 
	}
}

790 
	$£tup_efi_öfo
(
kexec_öfo
 *
öfo
,

791 
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

793 
ªt
, 
desc_vîsi⁄
;

794 
off_t
 
off£t
 = 
	`off£tof
(
	`ty≥of
(*
ªÆ_mode
), 
efi_öfo
);

796 
ªt
 = 
	`gë_boŸ∑øm
(&
ªÆ_mode
->
efi_öfo
, 
off£t
, 32);

797 i‡(
ªt
)

799 i‡(((
efi_öfo
 *)
ªÆ_mode
->efi_öfo)->
efi_memm≠_size
 == 0)

801 
out
;

802 
desc_vîsi⁄
 = 
	`gë_efi_mem_desc_vîsi⁄
(
ªÆ_mode
);

803 i‡(
desc_vîsi⁄
 != 1) {

804 
	`Ârötf
(
°dîr
,

806 
desc_vîsi⁄
);

807 
out
;

809 
ªt
 = 
	`£tup_efi_d©a
(
öfo
, 
ªÆ_mode
);

810 i‡(
ªt
)

811 
out
;

815 
out
:

816 
	`mem£t
(&
ªÆ_mode
->
efi_öfo
, 0, 32);

818 
	}
}

820 
	$£tup_löux_sy°em_∑ømëîs
(
kexec_öfo
 *
öfo
,

821 
x86_löux_∑øm_hódî
 *
ªÆ_mode
)

824 
	`£tup_sub¨ch
(
ªÆ_mode
);

825 i‡(
bzImage_suµ‹t_efi_boŸ
 && !
¨ch_›ti⁄s
.
n€fi
)

826 
	`£tup_efi_öfo
(
öfo
, 
ªÆ_mode
);

829 
ªÆ_mode
->
‹ig_x
 = 0;

830 
ªÆ_mode
->
‹ig_y
 = 0;

831 
ªÆ_mode
->
‹ig_video_∑ge
 = 0;

832 
ªÆ_mode
->
‹ig_video_mode
 = 0;

833 
ªÆ_mode
->
‹ig_video_cﬁs
 = 80;

834 
ªÆ_mode
->
‹ig_video_löes
 = 25;

835 
ªÆ_mode
->
‹ig_video_ega_bx
 = 0;

836 
ªÆ_mode
->
‹ig_video_isVGA
 = 1;

837 
ªÆ_mode
->
‹ig_video_poöts
 = 16;

838 
	`£tup_löux_veßfb
(
ªÆ_mode
);

841 
ªÆ_mode
->
ext_mem_k
 = 0;

842 
ªÆ_mode
->
Æt_mem_k
 = 0;

843 
ªÆ_mode
->
e820_m≠_ƒ
 = 0;

846 
	`mem£t
(&
ªÆ_mode
->
≠m_bios_öfo
, 0, (real_mode->apm_bios_info));

848 
	`mem£t
(&
ªÆ_mode
->
drive_öfo
, 0, (real_mode->drive_info));

850 
ªÆ_mode
->
sys_desc_èbÀ
.
Àngth
 = 0;

853 
ªÆ_mode
->
mou¡_roŸ_rd⁄ly
 = 0xFFFF;

858 
ªÆ_mode
->
roŸ_dev
 = (0x3 <<8)| 0;

861 
ªÆ_mode
->
aux_devi˚_öfo
 = 0;

863 
	`£tup_e820
(
öfo
, 
ªÆ_mode
);

866 
	`£tup_edd_öfo
(
ªÆ_mode
);

867 
	}
}

	@kexec/arch/i386/x86-linux-setup.h

1 #i‚de‡
X86_LINUX_SETUP_H


2 
	#X86_LINUX_SETUP_H


	)

3 
	~<x86/x86-löux.h
>

5 
öô_löux_∑ømëîs
(
x86_löux_∑øm_hódî
 *
ªÆ_mode
);

6 
£tup_löux_boŸlﬂdî_∑ømëîs_high
(

7 
kexec_öfo
 *
öfo
, 
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

8 
ªÆ_mode_ba£
, 
cmdlöe_off£t
,

9 c⁄° *
cmdlöe
, 
off_t
 
cmdlöe_Àn
,

10 c⁄° *
öôrd_buf
, 
off_t
 
öôrd_size
, 
öôrd_high
);

11 
ölöe
 
	$£tup_löux_boŸlﬂdî_∑ømëîs
(

12 
kexec_öfo
 *
öfo
, 
x86_löux_∑øm_hódî
 *
ªÆ_mode
,

13 
ªÆ_mode_ba£
, 
cmdlöe_off£t
,

14 c⁄° *
cmdlöe
, 
off_t
 
cmdlöe_Àn
,

15 c⁄° *
öôrd_buf
, 
off_t
 
öôrd_size
)

17 
	`£tup_löux_boŸlﬂdî_∑ømëîs_high
(
öfo
,

18 
ªÆ_mode
, 
ªÆ_mode_ba£
,

19 
cmdlöe_off£t
, 
cmdlöe
, 
cmdlöe_Àn
,

20 
öôrd_buf
, 
öôrd_size
, 0);

21 
	}
}

22 
£tup_löux_sy°em_∑ømëîs
(
kexec_öfo
 *
öfo
,

23 
x86_löux_∑øm_hódî
 *
ªÆ_mode
);

26 
	#SETUP_BASE
 0x90000

	)

27 
	#KERN32_BASE
 0x100000

	)

28 
	#INITRD_BASE
 0x1000000

	)

31 
	#PURGATORY_CMDLINE_SIZE
 64

	)

32 
bzImage_suµ‹t_efi_boŸ
;

33 
¨ch_›ti⁄s_t
 
¨ch_›ti⁄s
;

	@kexec/arch/ia64/crashdump-ia64.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<î∫o.h
>

22 
	~<limôs.h
>

23 
	~<ñf.h
>

24 
	~"../../kexec.h
"

25 
	~"../../kexec-ñf.h
"

26 
	~"../../kexec-sysˇŒ.h
"

27 
	~"kexec-ü64.h
"

28 
	~"¸ashdump-ü64.h
"

29 
	~"../kexec/¸ashdump.h
"

31 
	gmem‹y_ønges
 = 0;

32 
	#LOAD_OFFSET
 (0xa000000000000000UL + 0x100000000UL - \

33 
kî√l_code_°¨t
)

	)

35 
¸ash_ñf_öfo
 
	gñf_öfo
 =

37 
˛ass
: 
ELFCLASS64
,

38 
d©a
: 
ELFDATA2LSB
,

39 
machöe
: 
EM_IA_64
,

40 
∑ge_off£t
: 
PAGE_OFFSET
,

48 
mem‹y_ønge
 *
	g¸ash_mem‹y_ønge
;

50 
mem‹y_ønge
 
	g¸ash_ª£rved_mem
;

51 
	gñfc‹ehdr
;

52 
	gkî√l_code_°¨t
;

53 
	gkî√l_code_íd
;

54 
	slﬂded_£gmít
 {

55 
	m°¨t
;

56 
	míd
;

59 
	#MAX_LOAD_SEGMENTS
 128

	)

60 
lﬂded_£gmít
 
	glﬂded_£gmíts
[
MAX_LOAD_SEGMENTS
];

62 
	glﬂded_£gmíts_num
, 
	glﬂded_£gmíts_ba£
;

63 
	$£g_comp
(c⁄° *
a
, c⁄° *
b
)

65 c⁄° 
lﬂded_£gmít
 *
x
 = 
a
, *
y
 = 
b
;

67 i‡(
x
->
°¨t
 > 
y
->start)  1;

68 i‡(
x
->
°¨t
 < 
y
->start)  -1;

70 
	}
}

74 
	$add_lﬂded_£gmíts_öfo
(
mem_ehdr
 *
ehdr
)

76 
i
 = 0;

77 
i
 < 
ehdr
->
e_phnum
) {

78 
mem_phdr
 *
phdr
;

79 
phdr
 = &
ehdr
->
e_phdr
[
i
];

80 i‡(
phdr
->
p_ty≥
 !
PT_LOAD
) {

81 
i
++;

85 
lﬂded_£gmíts
[
lﬂded_£gmíts_num
].
°¨t
 =

86 
	`_ALIGN_DOWN
(
phdr
->
p_∑ddr
, 
ELF_PAGE_SIZE
);

87 
lﬂded_£gmíts
[
lﬂded_£gmíts_num
].
íd
 =

88 
lﬂded_£gmíts
[
lﬂded_£gmíts_num
].
°¨t
;

95 
i
 < 
ehdr
->
e_phnum
) {

96 
phdr
 = &
ehdr
->
e_phdr
[
i
];

97 i‡(
phdr
->
p_ty≥
 !
PT_LOAD
)

99 
lﬂded_£gmíts
[
lﬂded_£gmíts_num
].
íd
 =

100 
	`_ALIGN
(
phdr
->
p_∑ddr
 +Öhdr->
p_memsz
,

101 
ELF_PAGE_SIZE
);

102 
i
++;

104 
lﬂded_£gmíts_num
++;

106 
	}
}

111 
	$ex˛ude_¸ash_ª£rve_ªgi⁄
(*
ƒ_ønges
)

113 
i
, 
j
, 
tidx
 = -1;

114 
c°¨t
, 
˚nd
;

115 
mem‹y_ønge
 
ãmp_ªgi⁄
;

118 
c°¨t
 = 
¸ash_ª£rved_mem
.
°¨t
;

119 
˚nd
 = 
¸ash_ª£rved_mem
.
íd
;

121 
i
 = 0; i < (*
ƒ_ønges
); i++) {

122 
m°¨t
, 
míd
;

123 
m°¨t
 = 
¸ash_mem‹y_ønge
[
i
].
°¨t
;

124 
míd
 = 
¸ash_mem‹y_ønge
[
i
].
íd
;

125 i‡(
c°¨t
 < 
míd
 && 
˚nd
 > 
m°¨t
) {

126 i‡(
c°¨t
 !
m°¨t
 && 
˚nd
 !
míd
) {

128 
¸ash_mem‹y_ønge
[
i
].
íd
 = 
c°¨t
 - 1;

129 
ãmp_ªgi⁄
.
°¨t
 = 
˚nd
 + 1;

130 
ãmp_ªgi⁄
.
íd
 = 
míd
;

131 
ãmp_ªgi⁄
.
ty≥
 = 
RANGE_RAM
;

132 
tidx
 = 
i
+1;

133 } i‡(
c°¨t
 !
m°¨t
)

134 
¸ash_mem‹y_ønge
[
i
].
íd
 = 
c°¨t
 - 1;

136 
¸ash_mem‹y_ønge
[
i
].
°¨t
 = 
˚nd
 + 1;

140 i‡(
tidx
 >= 0) {

141 i‡(*
ƒ_ønges
 =
max_mem‹y_ønges
) {

143 
	`Ârötf
(
°dîr
, "Error: Number of crash memoryÑanges"

147 
j
 = (*
ƒ_ønges
 - 1); j >
tidx
; j--)

148 
¸ash_mem‹y_ønge
[
j
+1] = crash_memory_range[j];

149 
¸ash_mem‹y_ønge
[
tidx
].
°¨t
 = 
ãmp_ªgi⁄
.start;

150 
¸ash_mem‹y_ønge
[
tidx
].
íd
 = 
ãmp_ªgi⁄
.end;

151 
¸ash_mem‹y_ønge
[
tidx
].
ty≥
 = 
ãmp_ªgi⁄
.type;

152 (*
ƒ_ønges
)++;

155 
	}
}

157 
	$gë_¸ash_mem‹y_ønges
(*
ønges
)

159 c⁄° *
iomem
 = 
	`¥oc_iomem
();

160 
löe
[
MAX_LINE
];

161 
FILE
 *
Â
;

162 
°¨t
, 
íd
;

164 
¸ash_mem‹y_ønge
 = 
	`xmÆloc
((
mem‹y_ønge
) *

165 
max_mem‹y_ønges
);

166 
Â
 = 
	`f›í
(
iomem
, "r");

167 i‡(!
Â
) {

168 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

169 
iomem
, 
	`°ªº‹
(
î∫o
));

172 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

173 *
°r
;

174 
ty≥
, 
c⁄sumed
, 
cou¡
;

175 i‡(
mem‹y_ønges
 >
max_mem‹y_ønges
)

177 
cou¡
 = 
	`ssˇnf
(
löe
, "%lx-%lx : %n",

178 &
°¨t
, &
íd
, &
c⁄sumed
);

179 
°r
 = 
löe
 + 
c⁄sumed
;

180 i‡(
cou¡
 != 2)

183 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

184 
ty≥
 = 
RANGE_RAM
;

185 } i‡(
	`memcmp
(
°r
, "Crash kernel\n", 13) == 0) {

188 
¸ash_ª£rved_mem
.
°¨t
 = start;

189 
¸ash_ª£rved_mem
.
íd
 =Énd;

190 
¸ash_ª£rved_mem
.
ty≥
 = 
RANGE_RAM
;

193 i‡(
	`memcmp
(
°r
, "Kernel code\n", 12) == 0) {

194 
kî√l_code_°¨t
 = 
°¨t
;

195 
kî√l_code_íd
 = 
íd
;

197 } i‡(
	`memcmp
(
°r
, "Uncached RAM\n", 13) == 0) {

198 
ty≥
 = 
RANGE_UNCACHED
;

202 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

203 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

204 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

205 
mem‹y_ønges
++;

207 
	`f˛o£
(
Â
);

208 i‡(
	`ex˛ude_¸ash_ª£rve_ªgi⁄
(&
mem‹y_ønges
) < 0)

210 *
ønges
 = 
mem‹y_ønges
;

212 
	}
}

219 
	$cmdlöe_add_ñfc‹ehdr
(c⁄° **
cmdlöe
, 
addr
)

221 *
°r
;

222 
buf
[64];

223 
size_t
 
Àn
;

224 
	`•rötf
(
buf
, "Élfc‹ehdr=%ldK", 
addr
/1024);

225 
Àn
 = 
	`°æí
(*
cmdlöe
Ë+ såÀn(
buf
) + 1;

226 
°r
 = 
	`xmÆloc
(
Àn
);

227 
	`•rötf
(
°r
, "%s%s", *
cmdlöe
, 
buf
);

228 *
cmdlöe
 = 
°r
;

229 
	}
}

231 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, 
mem_ehdr
 *
ehdr
,

232 
max_addr
, 
mö_ba£
,

233 c⁄° **
cmdlöe
)

235 
ƒ_ønges
;

236 
sz
;

237 
size_t
 
size
;

238 *
tmp
;

239 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
 &&

240 
	`gë_¸ash_mem‹y_ønges
(&
ƒ_ønges
) == 0) {

241 
i
;

243 
ñf_öfo
.
kîn_∑ddr_°¨t
 = 
kî√l_code_°¨t
;

244 
i
=0; i < 
ƒ_ønges
; i++) {

245 
m°¨t
 = 
¸ash_mem‹y_ønge
[
i
].
°¨t
;

246 
míd
 = 
¸ash_mem‹y_ønge
[
i
].
íd
;

247 i‡(!
m°¨t
 && !
míd
)

249 i‡(
kî√l_code_°¨t
 >
m°¨t
 &&

250 
kî√l_code_°¨t
 < 
míd
) {

251 
ñf_öfo
.
kîn_vaddr_°¨t
 = 
m°¨t
 + 
LOAD_OFFSET
;

255 
ñf_öfo
.
kîn_size
 = 
kî√l_code_íd
 - 
kî√l_code_°¨t
 + 1;

256 i‡(
	`¸ash_¸óã_ñf64_hódîs
(
öfo
, &
ñf_öfo
,

257 
¸ash_mem‹y_ønge
, 
ƒ_ønges
,

258 &
tmp
, &
sz
, 
EFI_PAGE_SIZE
) < 0)

261 
ñfc‹ehdr
 = 
	`add_buf„r
(
öfo
, 
tmp
, 
sz
, sz, 
EFI_PAGE_SIZE
,

262 
mö_ba£
, 
max_addr
, -1);

263 
lﬂded_£gmíts
[
lﬂded_£gmíts_num
].
°¨t
 = 
ñfc‹ehdr
;

264 
lﬂded_£gmíts
[
lﬂded_£gmíts_num
].
íd
 = 
ñfc‹ehdr
 + 
sz
;

265 
lﬂded_£gmíts_num
++;

266 
	`cmdlöe_add_ñfc‹ehdr
(
cmdlöe
, 
ñfc‹ehdr
);

268 
	`add_lﬂded_£gmíts_öfo
(
ehdr
);

269 
size
 = (
lﬂded_£gmít
Ë* 
lﬂded_£gmíts_num
;

270 
	`qs‹t
(
lﬂded_£gmíts
, 
lﬂded_£gmíts_num
,

271 (
lﬂded_£gmít
), 
£g_comp
);

272 
lﬂded_£gmíts_ba£
 = 
	`add_buf„r
(
öfo
, 
lﬂded_£gmíts
,

273 
size
, size, 16, 0, 
max_addr
, -1);

275 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__loaded_segments",

276 &
lﬂded_£gmíts_ba£
, ());

277 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__loaded_segments_num",

278 &
lﬂded_£gmíts_num
, ());

280 
	}
}

282 
	$is_¸ashkî√l_mem_ª£rved
()

284 
uöt64_t
 
°¨t
, 
íd
;

286  
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
,

287 &
íd
Ë=0 ? (
°¨t
 !=Énd) : 0;

288 
	}
}

	@kexec/arch/ia64/crashdump-ia64.h

1 #i‚de‡
CRASHDUMP_IA64_H


2 
	#CRASHDUMP_IA64_H


	)

4 
	#PAGE_OFFSET
 0xe000000000000000UL

	)

5 
	#__∑
(
x
Ë(()(x)-
PAGE_OFFSET
)

	)

6 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
,

7 
mem_ehdr
 *
ehdr
, 
max_addr
,

8 
mö_ba£
, c⁄° **
cmdlöe
);

10 
	#CRASH_MAX_MEMMAP_NR
 (
KEXEC_MAX_SEGMENTS
 + 1)

	)

	@kexec/arch/ia64/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_IA64_OPTIONS_H


2 
	#KEXEC_ARCH_IA64_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

5 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

6 
	#OPT_RAMDISK
 (
OPT_ARCH_MAX
+1)

	)

7 
	#OPT_NOIO
 (
OPT_ARCH_MAX
+2)

	)

8 
	#OPT_VMM
 (
OPT_ARCH_MAX
+3)

	)

13 
	#KEXEC_ARCH_OPTIONS
 \

14 
KEXEC_OPTIONS
 \

15 

	)

16 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

32 
	#KEXEC_ALL_OPTIONS
 \

33 
KEXEC_ARCH_OPTIONS
 \

34 {"comm™d-löe", 1, 0, 
OPT_APPEND
}, \

35 {"≠≥nd", 1, 0, 
OPT_APPEND
}, \

36 {"öôrd", 1, 0, 
OPT_RAMDISK
}, \

37 {"noio", 0, 0, 
OPT_NOIO
}, \

38 {"vmm", 1, 0, 
OPT_VMM
}, \

39 

	)

40 
	#KEXEC_ALL_OPT_STR
 
KEXEC_OPT_STR


	)

	@kexec/arch/ia64/kexec-elf-ia64.c

25 
	#_GNU_SOURCE


	)

26 
	~<°ddef.h
>

27 
	~<°dio.h
>

28 
	~<°rög.h
>

29 
	~<°dlib.h
>

30 
	~<î∫o.h
>

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

35 
	~<uni°d.h
>

36 
	~<gë›t.h
>

37 
	~<limôs.h
>

38 
	~<ñf.h
>

39 
	~<boŸ/ñf_boŸ.h
>

40 
	~<ù_checksum.h
>

41 
	~"../../kexec.h
"

42 
	~"../../kexec-sysˇŒ.h
"

43 
	~"../../kexec-ñf.h
"

44 
	~"kexec-ü64.h
"

45 
	~"¸ashdump-ü64.h
"

46 
	~<¨ch/›ti⁄s.h
>

48 c⁄° 
	g¥obe_debug
 = 0;

49 
ßved_efi_memm≠_size
;

56 
	$ñf_ü64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

58 
mem_ehdr
 
ehdr
;

59 
ªsu…
;

60 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

61 i‡(
ªsu…
 < 0) {

62 i‡(
¥obe_debug
) {

63 
	`Ârötf
(
°dîr
, "Notán ELFÉxecutable\n");

68 i‡(
ehdr
.
e_machöe
 !
EM_IA_64
) {

70 i‡(
¥obe_debug
) {

71 
	`Ârötf
(
°dîr
, "Not forÅhisárchitecture.\n");

76 
	}
}

78 
	$ñf_ü64_ußge
()

80 
	`¥ötf
(" --command-line=STRING SetÅhe kernel commandÜineÅo "

90 
	}
}

94 
	$move_lﬂded_£gmíts
(
mem_ehdr
 *
ehdr
, 
addr
)

96 
i
;

97 
off£t
 = 0;

98 
found
 = 0;

99 
mem_phdr
 *
phdr
;

100 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

101 
phdr
 = &
ehdr
->
e_phdr
[
i
];

102 i‡(
phdr
->
p_ty≥
 =
PT_LOAD
) {

103 
off£t
 = 
addr
 - 
phdr
->
p_∑ddr
;

104 
found
++;

108 i‡(!
found
)

109 
	`dõ
("move_lﬂded_£gmíts:ÇÿPT_LOADÑegi⁄ 0x%016x\n", 
addr
);

110 
ehdr
->
e_íåy
 +
off£t
;

111 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

112 
phdr
 = &
ehdr
->
e_phdr
[
i
];

113 i‡(
phdr
->
p_ty≥
 =
PT_LOAD
)

114 
phdr
->
p_∑ddr
 +
off£t
;

116 
	}
}

118 
	$ñf_ü64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

119 
kexec_öfo
 *
öfo
)

121 
mem_ehdr
 
ehdr
;

122 c⁄° *
comm™d_löe
, *
ømdisk
=0, *
vmm
=0, *
kî√l_buf
;

123 *
ømdisk_buf
 = 
NULL
;

124 
off_t
 
ømdisk_size
 = 0, 
kî√l_size
;

125 
comm™d_löe_Àn
;

126 
íåy
, 
max_addr
, 
gp_vÆue
;

127 
comm™d_löe_ba£
, 
ømdisk_ba£
, 
image_ba£
;

128 
efi_memm≠_ba£
, 
efi_memm≠_size
;

129 
boŸ_∑øm_ba£
;

130 
noio
=0;

131 
ªsu…
;

132 
›t
;

133 *
efi_memm≠_buf
, *
boŸ_∑øm
;

136 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

137 
KEXEC_ARCH_OPTIONS


138 {"comm™d-löe", 1, 0, 
OPT_APPEND
},

139 {"≠≥nd", 1, 0, 
OPT_APPEND
},

140 {"öôrd", 1, 0, 
OPT_RAMDISK
},

141 {"noio", 0, 0, 
OPT_NOIO
},

142 {"vmm", 1, 0, 
OPT_VMM
},

146 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "";

148 
comm™d_löe
 = 0;

149 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
,

150 
›ti⁄s
, 0)) != -1) {

151 
›t
) {

154 i‡(
›t
 < 
OPT_ARCH_MAX
) {

157 
OPT_APPEND
:

158 
comm™d_löe
 = 
›èrg
;

160 
OPT_RAMDISK
:

161 
ømdisk
 = 
›èrg
;

163 
OPT_NOIO
:

164 
noio
 = 1;

166 
OPT_VMM
:

167 
vmm
 = 
›èrg
;

171 
comm™d_löe_Àn
 = 0;

172 i‡(
comm™d_löe
) {

173 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 16;

176 i‡(
vmm
)

177 
kî√l_buf
 = 
	`¶uΩ_decom¥ess_fûe
(
vmm
, &
kî√l_size
);

179 
kî√l_buf
 = 
buf
;

180 
kî√l_size
 = 
Àn
;

184 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
kî√l_buf
, 
kî√l_size
, &
ehdr
, 0);

185 i‡(
ªsu…
 < 0) {

186 
	`Ârötf
(
°dîr
, "ELFÖarse failed\n");

187 
	`‰ì_ñf_öfo
(&
ehdr
);

188  
ªsu…
;

191 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
 ) {

192 i‡((
mem_mö
 =0x00Ë&& (
mem_max
 =
ULONG_MAX
)) {

193 
	`Ârötf
(
°dîr
, "FailedÅo find crash kernelÑegion "

194 "ö %s\n", 
	`¥oc_iomem
());

195 
	`‰ì_ñf_öfo
(&
ehdr
);

198 
	`move_lﬂded_£gmíts
(&
ehdr
, 
mem_mö
);

199 } i‡(
	`upd©e_lﬂded_£gmíts
(&
ehdr
) < 0) {

200 
	`Ârötf
(
°dîr
, "FailedÅoÖlace kernel\n");

204 
íåy
 = 
ehdr
.
e_íåy
;

205 
max_addr
 = 
	`ñf_max_addr
(&
ehdr
);

208 
ªsu…
 = 
	`ñf_exec_lﬂd
(&
ehdr
, 
öfo
);

209 i‡(
ªsu…
 < 0) {

210 
	`Ârötf
(
°dîr
, "ELFÜoad failed\n");

211 
	`‰ì_ñf_öfo
(&
ehdr
);

212  
ªsu…
;

217 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
,

218 0x0, 
ULONG_MAX
, -1, 0);

221 i‡(
	`lﬂd_¸ashdump_£gmíts
(
öfo
, &
ehdr
, 
max_addr
, 0,

222 &
comm™d_löe
) < 0)

226 
boŸ_∑øm
 = 
	`xmÆloc
(4096);

227 
boŸ_∑øm_ba£
 = 
	`add_buf„r
(
öfo
, 
boŸ_∑øm
, 4096, 4096, 4096, 0,

228 
max_addr
, -1);

230 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__noio",

231 &
noio
, ());

233 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__boot_param_base",

234 &
boŸ_∑øm_ba£
, ());

237 
efi_memm≠_size
 = 
ßved_efi_memm≠_size
;

238 
efi_memm≠_buf
 = 
	`xmÆloc
(
efi_memm≠_size
);

239 
efi_memm≠_ba£
 = 
	`add_buf„r
(
öfo
, 
efi_memm≠_buf
,

240 
efi_memm≠_size
,Éfi_memmap_size, 4096, 0,

241 
max_addr
, -1);

243 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__efi_memmap_base",

244 &
efi_memm≠_ba£
, ());

246 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__efi_memmap_size",

247 &
efi_memm≠_size
, ());

248 i‡(
comm™d_löe
) {

249 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

251 i‡(
comm™d_löe_Àn
 || (
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
 )) {

252 *
cmdlöe
 = 
	`xmÆloc
(
comm™d_löe_Àn
);

253 
	`°r˝y
(
cmdlöe
, 
comm™d_löe
);

255 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

256 
buf
[128];

257 
	`•rötf
(
buf
," max_addr=%lluM min_addr=%lluM",

258 
mem_max
>>20, 
mem_mö
>>20);

259 
comm™d_löe_Àn
 = 
	`°æí
(
cmdlöe
Ë+ såÀn(
buf
) + 1;

260 
cmdlöe
 = 
	`xªÆloc
(cmdlöe, 
comm™d_löe_Àn
);

261 
	`°rˇt
(
cmdlöe
, 
buf
);

264 
comm™d_löe_Àn
 = 
	`_ALIGN
(command_line_len, 16);

265 
comm™d_löe_ba£
 = 
	`add_buf„r
(
öfo
, 
cmdlöe
,

266 
comm™d_löe_Àn
, command_line_len,

267 
	`gë∑gesize
(), 0UL,

268 
max_addr
, -1);

269 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__command_line_len",

270 &
comm™d_löe_Àn
, ());

271 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__command_line",

272 &
comm™d_löe_ba£
, ());

275 i‡(
ømdisk
) {

276 
ømdisk_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
ømdisk_size
);

277 
ømdisk_ba£
 = 
	`add_buf„r
(
öfo
, 
ømdisk_buf
, 
ømdisk_size
,

278 
ømdisk_size
,

279 
	`gë∑gesize
(), 0, 
max_addr
, -1);

280 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__ramdisk_base",

281 &
ømdisk_ba£
, ());

282 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__ramdisk_size",

283 &
ømdisk_size
, ());

286 i‡(
vmm
) {

287 
image_ba£
 = 
	`add_buf„r
(
öfo
, 
buf
, 
Àn
,Üen,

288 
	`gë∑gesize
(), 0, 
max_addr
, -1);

289 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__vmcode_base",

290 &
image_ba£
, ());

291 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__vmcode_size",

292 &
Àn
, ());

295 
gp_vÆue
 = 
öfo
->
rhdr
.
ªl_addr
 + 0x200000;

296 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__gp_vÆue", &
gp_vÆue
,

297 (
gp_vÆue
));

299 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "__kî√l_íåy", &
íåy
,

300 (
íåy
));

301 
	`‰ì_ñf_öfo
(&
ehdr
);

303 
	}
}

	@kexec/arch/ia64/kexec-elf-rel-ia64.c

28 
	~<°dio.h
>

29 
	~<ñf.h
>

30 
	~"../../kexec.h
"

31 
	~"../../kexec-ñf.h
"

33 
	#MAX_LTOFF
 ((
uöt64_t
Ë(1 << 22))

	)

35 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

37 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2LSB
) {

40 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS64
) {

43 i‡(
ehdr
->
e_machöe
 !
EM_IA_64
) {

47 
	}
}

50 
	$ü64_∑tch
 (
uöt64_t
 
ö¢_addr
, uöt64_à
mask
, uöt64_à
vÆ
)

52 
uöt64_t
 
m0
, 
m1
, 
v0
, 
v1
, 
b0
, 
b1
, *
b
 = (uöt64_à*Ë(
ö¢_addr
 & -16);

53 
	#ö¢_mask
 ((1UL << 41Ë- 1)

	)

54 
shi·
;

56 
b0
 = 
b
[0]; 
b1
 = b[1];

57 
shi·
 = 5 + 41 * (
ö¢_addr
 % 16);

58 i‡(
shi·
 >= 64) {

59 
m1
 = 
mask
 << (
shi·
 - 64);

60 
v1
 = 
vÆ
 << (
shi·
 - 64);

62 
m0
 = 
mask
 << 
shi·
; 
m1
 = mask >> (64 - shift);

63 
v0
 = 
vÆ
 << 
shi·
; 
v1
 = val >> (64 - shift);

64 
b
[0] = (
b0
 & ~
m0
Ë| (
v0
 & m0);

66 
b
[1] = (
b1
 & ~
m1
Ë| (
v1
 & m1);

67 
	}
}

69 
ölöe
 
uöt64_t


70 
	$bundÀ
 (c⁄° 
uöt64_t
 
ö¢
)

72  
ö¢
 & ~0xfUL;

73 
	}
}

75 
	$machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
ehdr
, 
r_ty≥
,

76 *
loˇti⁄
, 
addªss
, 
vÆue
)

78 
uöt64_t
 
gp_vÆue
 = 
ehdr
->
ªl_addr
 + 0x200000;

79 
r_ty≥
) {

80 
R_IA64_NONE
:

82 
R_IA64_SEGREL64LSB
:

83 
R_IA64_DIR64LSB
:

84 *((
uöt64_t
 *)
loˇti⁄
Ë
vÆue
;

86 
R_IA64_DIR32LSB
:

87 *((
uöt32_t
 *)
loˇti⁄
Ë
vÆue
;

88 i‡(
vÆue
 !*((
uöt32_t
 *)
loˇti⁄
))

89 
ovîÊow
;

91 
R_IA64_IMM64
:

92 
	`ü64_∑tch
((
uöt64_t
)
loˇti⁄
, 0x01fffefe000UL,

94 (((
vÆue
 & 0x8000000000000000UL) >> 27)

96 | ((
vÆue
 & 0x0000000000200000UL) << 0)

98 | ((
vÆue
 & 0x00000000001f0000UL) << 6)

100 | ((
vÆue
 & 0x000000000000ff80UL) << 20)

102 | ((
vÆue
 & 0x000000000000007fUL) << 13)));

103 
	`ü64_∑tch
((
uöt64_t
)
loˇti⁄
 - 1, 0x1ffffffffffUL, 
vÆue
>>22);

105 
R_IA64_IMM22
:

106 i‡(
vÆue
 + (1 << 21) >= (1 << 22))

107 
	`dõ
("value out of IMM22Ñange\n");

108 
	`ü64_∑tch
((
uöt64_t
)
loˇti⁄
, 0x01fffcfe000UL,

110 (((
vÆue
 & 0x200000UL) << 15)

112 | ((
vÆue
 & 0x1f0000UL) << 6)

114 | ((
vÆue
 & 0x00ff80UL) << 20)

116 | ((
vÆue
 & 0x00007fUL) << 13) ));

118 
R_IA64_PCREL21B
: {

119 
uöt64_t
 
dñè
 = ((
öt64_t
)
vÆue
 - (öt64_t)
addªss
)/16;

120 i‡(
dñè
 + (1 << 20) >= (1 << 21))

121 
	`dõ
("value out of IMM21BÑange\n");

122 
vÆue
 = ((
öt64_t
)(vÆuê- 
	`bundÀ
(
addªss
)))/16;

123 
	`ü64_∑tch
((
uöt64_t
)
loˇti⁄
, 0x11ffffe000UL,

124 (((
vÆue
 & 0x100000UL) << 16)

125 | ((
vÆue
 & 0x0fffffUL) << 13) ));

128 
R_IA64_PCREL64LSB
: {

129 
vÆue
 = vÆuê- 
addªss
;

130 
	`put_u«lig√d
(
vÆue
, (
uöt64_t
 *)
loˇti⁄
);

132 
R_IA64_GPREL22
:

133 
R_IA64_LTOFF22X
:

134 i‡(
vÆue
 - 
gp_vÆue
 + 
MAX_LTOFF
/2 >= MAX_LTOFF)

135 
	`dõ
("value out of gpÑelativeÑange");

136 
vÆue
 -
gp_vÆue
;

137 
	`ü64_∑tch
((
uöt64_t
)
loˇti⁄
, 0x01fffcfe000UL,

138 (((
vÆue
 & 0x200000UL) << 15)

139 |((
vÆue
 & 0x1f0000UL) << 6)

140 |((
vÆue
 & 0x00ff80UL) << 20)

141 |((
vÆue
 & 0x00007fUL) << 13) ));

143 
R_IA64_LDXMOV
:

144 i‡(
vÆue
 - 
gp_vÆue
 + 
MAX_LTOFF
/2 >= MAX_LTOFF)

145 
	`dõ
("value out of gpÑelativeÑange");

146 
	`ü64_∑tch
((
uöt64_t
)
loˇti⁄
, 0x1fff80fe000UL, 0x10000000000UL);

148 
R_IA64_LTOFF22
:

151 
	`dõ
("UnknownÑelaÑelocation: 0x%lx 0x%lx\n",

152 
r_ty≥
, 
addªss
);

156 
ovîÊow
:

157 
	`dõ
("overflow inÑelocationÅype %lu val %Lx\n",

158 
r_ty≥
, 
vÆue
);

159 
	}
}

	@kexec/arch/ia64/kexec-ia64.c

23 
	#_GNU_SOURCE


	)

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<°döt.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~<sched.h
>

31 
	~<limôs.h
>

32 
	~"../../kexec.h
"

33 
	~"../../kexec-sysˇŒ.h
"

34 
	~"ñf.h
"

35 
	~"kexec-ü64.h
"

36 
	~<¨ch/›ti⁄s.h
>

41 
mem‹y_ønge
 *
	gmem‹y_ønge
;

42 
	gmax_mem‹y_ønges
;

43 
	gmem‹y_ønges
;

44 
	gßved_efi_memm≠_size
;

47 
	$•lô_ønge
(
ønge
, 
°¨t
, 
íd
)

49 
øm_íd
 = 
mem‹y_ønge
[
ønge
 - 1].
íd
;

50 
ty≥
 = 
mem‹y_ønge
[
ønge
 - 1].type;

51 
i
;

53 
°¨t
 = 
	`_ALIGN_DOWN
(start, 1UL<<12);

54 
íd
 = 
	`_ALIGN
(end, 1UL<<12);

55 
i
 = 0; i < 
ønge
; i++)

56 if(
mem‹y_ønge
[
i
].
°¨t
 <°¨à&& mem‹y_ønge[i].
íd
 >=end)

58 i‡(
i
 >
ønge
)

59  
ønge
;

60 
ønge
 = 
i
;

61 i‡(
mem‹y_ønge
[
ønge
].
°¨t
 < start) {

62 
mem‹y_ønge
[
ønge
].
íd
 = 
°¨t
;

63 
ønge
++;

65 
mem‹y_ønge
[
ønge
].
°¨t
 = start;

66 
mem‹y_ønge
[
ønge
].
íd
 =Énd;

67 
mem‹y_ønge
[
ønge
].
ty≥
 = 
RANGE_RESERVED
;

68 
ønge
++;

69 i‡(
íd
 < 
øm_íd
) {

70 
mem‹y_ønge
[
ønge
].
°¨t
 = 
íd
;

71 
mem‹y_ønge
[
ønge
].
íd
 = 
øm_íd
;

72 
mem‹y_ønge
[
ønge
].
ty≥
 =Åype;

73 
ønge
++;

75  
ønge
;

76 
	}
}

79 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

80 
kexec_Êags
)

82 c⁄° *
iomem
 = 
	`¥oc_iomem
();

83 
löe
[
MAX_LINE
];

84 
FILE
 *
Â
;

85 
Â
 = 
	`f›í
(
iomem
, "r");

86 i‡(!
Â
) {

87 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

88 
iomem
, 
	`°ªº‹
(
î∫o
));

93 
max_mem‹y_ønges
 = 0;

94 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

95 
max_mem‹y_ønges
++;

97 
mem‹y_ønge
 = 
	`xmÆloc
((memory_range) *

98 
max_mem‹y_ønges
);

99 
	`ªwöd
(
Â
);

101 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

102 
°¨t
, 
íd
;

103 *
°r
;

104 
ty≥
;

105 
c⁄sumed
;

106 
cou¡
;

107 i‡(
mem‹y_ønges
 >
max_mem‹y_ønges
)

109 
cou¡
 = 
	`ssˇnf
(
löe
, "%lx-%lx : %n",

110 &
°¨t
, &
íd
, &
c⁄sumed
);

111 i‡(
cou¡
 != 2)

113 
°r
 = 
löe
 + 
c⁄sumed
;

114 
íd
 =Énd + 1;

115 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

116 
ty≥
 = 
RANGE_RAM
;

118 i‡(
	`memcmp
(
°r
, "reserved\n", 9) == 0) {

119 
ty≥
 = 
RANGE_RESERVED
;

121 i‡(
	`memcmp
(
°r
, "Crash kernel\n", 13) == 0) {

128 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

129 i‡(
°¨t
 > 
mem_mö
)

130 
mem_mö
 = 
°¨t
;

131 i‡(
íd
 < 
mem_max
)

132 
mem_max
 = 
íd
;

135 } i‡(
	`memcmp
(
°r
, "BootÖarameter\n", 14) == 0) {

136 
mem‹y_ønges
 = 
	`•lô_ønge
(mem‹y_ønges, 
°¨t
, 
íd
);

138 } i‡(
	`memcmp
(
°r
, "EFI Memory Map\n", 14) == 0) {

139 
mem‹y_ønges
 = 
	`•lô_ønge
(mem‹y_ønges, 
°¨t
, 
íd
);

140 
ßved_efi_memm≠_size
 = 
íd
 - 
°¨t
;

142 } i‡(
	`memcmp
(
°r
, "Uncached RAM\n", 13) == 0) {

143 
ty≥
 = 
RANGE_UNCACHED
;

151 i‡((
mem‹y_ønges
 > 0) &&

152 (
°¨t
 =
mem‹y_ønge
[
mem‹y_ønges
-1].
íd
) &&

153 (
ty≥
 =
mem‹y_ønge
[
mem‹y_ønges
-1].type)) {

154 
mem‹y_ønge
[
mem‹y_ønges
-1].
íd
 =Énd;

157 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

158 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

159 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

160 
mem‹y_ønges
++;

163 
	`f˛o£
(
Â
);

164 *
ønge
 = 
mem‹y_ønge
;

165 *
ønges
 = 
mem‹y_ønges
;

168 
	}
}

171 
fûe_ty≥
 
	gfûe_ty≥
[] = {

172 {"ñf-ü64", 
ñf_ü64_¥obe
, 
ñf_ü64_lﬂd
, 
ñf_ü64_ußge
},

174 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

177 
	$¨ch_ußge
()

179 
	}
}

181 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

186 
˝u_£t_t
 
afföôy
;

187 
	`CPU_ZERO
(&
afföôy
);

188 
	`CPU_SET
(0, &
afföôy
);

189 
	`sched_£èfföôy
(0, (
afföôy
), &affinity);

192 
	}
}

194 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

195 { "ü64", 
KEXEC_ARCH_IA_64
 },

196 { 
NULL
, 0 },

199 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

202 
	}
}

204 
	$upd©e_lﬂded_£gmíts
(
mem_ehdr
 *
ehdr
)

206 
i
;

207 
u
;

208 
mem_phdr
 *
phdr
;

209 
°¨t_addr
 = 
ULONG_MAX
, 
íd_addr
 = 0;

210 
Æign
 = 1UL<<26;

211 
°¨t
, 
íd
;

213 
u
 = 0; u < 
ehdr
->
e_phnum
; u++) {

214 
phdr
 = &
ehdr
->
e_phdr
[
u
];

215 i‡(
phdr
->
p_ty≥
 !
PT_LOAD
)

217 i‡(
phdr
->
p_∑ddr
 < 
°¨t_addr
)

218 
°¨t_addr
 = 
phdr
->
p_∑ddr
;

219 i‡((
phdr
->
p_∑ddr
 +Öhdr->
p_memsz
Ë> 
íd_addr
)

220 
íd_addr
 = 
phdr
->
p_∑ddr
 +Öhdr->
p_memsz
;

223 
i
 = 0; i < 
mem‹y_ønges
 && 
mem‹y_ønge
[i].
°¨t
 <
°¨t_addr
;

224 
i
++) {

225 i‡(
mem‹y_ønge
[
i
].
ty≥
 =
RANGE_RAM
 &&

226 
mem‹y_ønge
[
i
].
íd
 > 
íd_addr
)

230 
i
 = 0; i < 
mem‹y_ønges
; i++) {

231 i‡(
mem‹y_ønge
[
i
].
ty≥
 !
RANGE_RAM
)

233 
°¨t
 = 
	`_ALIGN
(
mem‹y_ønge
[
i
].°¨t, 
Æign
);

234 
íd
 = 
mem‹y_ønge
[
i
].end;

235 i‡(
íd
 > 
°¨t
 && (íd - sèπË> (
íd_addr
 - 
°¨t_addr
)) {

236 
	`move_lﬂded_£gmíts
(
ehdr
, 
°¨t
);

242 
	}
}

244 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

246 
	}
}

	@kexec/arch/ia64/kexec-ia64.h

1 #i‚de‡
KEXEC_IA64_H


2 
	#KEXEC_IA64_H


	)

4 
max_mem‹y_ønges
;

5 
ñf_ü64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

6 
ñf_ü64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

7 
kexec_öfo
 *
öfo
);

8 
ñf_ü64_ußge
();

9 
upd©e_lﬂded_£gmíts
(
mem_ehdr
 *
ehdr
);

10 
move_lﬂded_£gmíts
(
mem_ehdr
 *
ehdr
, 
addr
);

12 
	#EFI_PAGE_SIZE
 (1UL<<12)

	)

13 
	#ELF_PAGE_SIZE
 (1UL<<16)

	)

	@kexec/arch/ia64/kexec-iomem.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

3 
	~"../../kexec.h
"

4 
	~"../../¸ashdump.h
"

6 c⁄° 
	g¥oc_iomem_°r
[]= "/proc/iomem";

7 c⁄° 
	g¥oc_iomem_machöe_°r
[]= "/proc/iomem_machine";

18 c⁄° *
	$¥oc_iomem
()

20 i‡(
	`xí_¥e£¡
())

21  
¥oc_iomem_machöe_°r
;

22  
¥oc_iomem_°r
;

23 
	}
}

	@kexec/arch/m68k/bootinfo.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	~"../../kexec.h
"

8 
	~"boŸöfo.h
"

10 c⁄° *
	gboŸöfo_fûe
 = 
DEFAULT_BOOTINFO_FILE
;

11 
bi_ªc
 *
	gboŸöfo
;

12 
off_t
 
	gboŸöfo_size
;

14 
	gnum_memchunks
;

16 
bi_ªc
 *
	$bi_√xt
(
bi_ªc
 *
bi
, 
uöt16_t
 
size
)

18  (*)(()
bi
 + 
size
);

19 
	}
}

21 
bi_ªc
 *
	$bi_föd
(
bi_ªc
 *
¥ev
, 
uöt16_t
 
èg
)

23 
bi_ªc
 *
bi
 = 
¥ev
 ? 
	`bi_√xt
’ªv,Öªv->
size
Ë: 
boŸöfo
;

25 
bi
 = 
¥ev
 ? 
	`bi_√xt
’ªv,Öªv->
size
Ë: 
boŸöfo
;

26 
bi
->
èg
 !
BI_LAST
; bò
	`bi_√xt
(bi, bi->
size
))

27 i‡(
bi
->
èg
 ==Åag)

28  
bi
;

29  
NULL
;

30 
	}
}

32 
	$bi_ªmove
(
uöt16_t
 
èg
)

34 
bi_ªc
 *
bi
;

35 
off_t
 
ªm
;

36 
uöt16_t
 
size
;

38 
bi
 = 
boŸöfo
;

39 
ªm
 = 
boŸöfo_size
;

41 i‡(
bi
->
èg
 =
BI_LAST
)

44 
size
 = 
bi
->size;

45 i‡(
bi
->
èg
 ==Åag) {

46 
	`memmove
(
bi
, 
	`bi_√xt
(bi, 
size
), 
ªm
 - size);

47 
boŸöfo_size
 -
size
;

48 
ªm
 -
size
;

52 
bi
 = 
	`bi_√xt
(bi, 
size
);

53 
ªm
 -
size
;

55 
	}
}

57 
bi_ªc
 *
	$bi_add
(
uöt16_t
 
èg
, uöt16_à
size
)

59 
bi_ªc
 *
bi
;

62 
size
 = 
	`_ALIGN_UP
(4 + size, 4);

64 
boŸöfo
 = 
	`xªÆloc
(boŸöfo, 
boŸöfo_size
 + 
size
);

67 
bi
 = 
	`bi_√xt
(
boŸöfo
, 
boŸöfo_size
 - 2);

68 
boŸöfo_size
 +
size
;

69 
	`mem£t
(
bi
, 0, 
size
);

70 
bi
->
èg
 =Åag;

71 
bi
->
size
 = size;

74 
	`bi_√xt
(
bi
, 
size
)->
èg
 = 
BI_LAST
;

76  
bi
;

77 
	}
}

79 
	$boŸöfo_lﬂd
()

81 
bi_ªc
 *
bi
;

82 
off_t
 
ªm
;

83 
uöt16_t
 
èg
, 
size
;

85 
	`dbg¥ötf
("Lﬂdög boŸöfÿ‰om %s\n", 
boŸöfo_fûe
);

86 
boŸöfo
 = (*)
	`¶uΩ_fûe_Àn
(
boŸöfo_fûe
, 
MAX_BOOTINFO_SIZE
,

87 &
boŸöfo_size
);

88 i‡(!
boŸöfo
)

89 
	`dõ
("No bootinfo\n");

91 
bi
 = 
boŸöfo
;

92 
ªm
 = 
boŸöfo_size
;

94 i‡(
ªm
 < 2)

95 
	`dõ
("UnexpectedÉnd of bootinfo\n");

97 
èg
 = 
bi
->tag;

98 i‡(
èg
 =
BI_LAST
) {

99 
ªm
 -= 2;

103 i‡(
ªm
 < 4)

104 
	`dõ
("UnexpectedÉnd of bootinfo\n");

106 
size
 = 
bi
->size;

107 i‡(
size
 < 4 || size % 4)

108 
	`dõ
("InvalidÅag size\n");

109 i‡(
ªm
 < 
size
)

110 
	`dõ
("UnexpectedÉnd of bootinfo\n");

112 i‡(
èg
 =
BI_MEMCHUNK
)

113 
num_memchunks
++;

115 
bi
 = 
	`bi_√xt
(bi, 
size
);

116 
ªm
 -
size
;

119 i‡(
ªm
)

120 
	`dõ
("Trailing dataátÉnd of bootinfo\n");

121 
	}
}

123 
	$boŸöfo_¥öt
()

125 
bi_ªc
 *
bi
 = 
boŸöfo
;

126 
uöt16_t
 
èg
, 
size
;

129 
èg
 = 
bi
->tag;

130 i‡(
èg
 =
BI_LAST
) {

131 
	`puts
("BI_LAST");

135 
size
 = 
bi
->size;

136 
èg
) {

137 
BI_MACHTYPE
:

138 
	`¥ötf
("BI_MACHTYPE: 0x%08x\n", 
bi
->
machty≥
);

141 
BI_MEMCHUNK
:

142 
	`¥ötf
("BI_MEMCHUNK: 0x%08x bytesát 0x%08x\n",

143 
bi
->
mem_öfo
.
size
, bi->mem_öfo.
addr
);

146 
BI_RAMDISK
:

147 
	`¥ötf
("BI_RAMDISK: 0x%08x bytesát 0x%08x\n",

148 
bi
->
mem_öfo
.
size
, bi->mem_öfo.
addr
);

151 
BI_COMMAND_LINE
:

152 
	`¥ötf
("BI_COMMAND_LINE: %s\n", 
bi
->
°rög
);

156 
	`¥ötf
("BIÅag 0x%04x sizê%u\n", 
èg
, 
size
);

159 
bi
 = 
	`bi_√xt
(bi, 
size
);

161 
	}
}

163 
	$boŸöfo_gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
)

165 
mem‹y_ønge
 *
ønges
;

166 
i
;

167 
bi_ªc
 *
bi
;

169 
ønges
 = 
	`xmÆloc
(
num_memchunks
 * (
mem‹y_ønge
));

170 
i
 = 0, 
bi
 = 
NULL
;

171 
i
 < 
num_memchunks
 && (
bi
 = 
	`bi_föd
(bi, 
BI_MEMCHUNK
)); i++) {

172 
ønges
[
i
].
°¨t
 = 
bi
->
mem_öfo
.
addr
;

173 
ønges
[
i
].
íd
 = 
bi
->
mem_öfo
.
addr
 + bi->mem_öfo.
size
 - 1;

174 
ønges
[
i
].
ty≥
 = 
RANGE_RAM
;

177 *
ønge
 = 
ønges
;

178  
i
;

179 
	}
}

181 
	$boŸöfo_£t_cmdlöe
(c⁄° *
cmdlöe
)

183 
bi_ªc
 *
bi
;

184 
uöt16_t
 
size
;

187 
	`bi_ªmove
(
BI_COMMAND_LINE
);

189 i‡(!
cmdlöe
)

193 
size
 = 
	`°æí
(
cmdlöe
) + 1;

194 
bi
 = 
	`bi_add
(
BI_COMMAND_LINE
, 
size
);

195 
	`mem˝y
(
bi
->
°rög
, 
cmdlöe
, 
size
);

196 
	}
}

198 
	$boŸöfo_£t_ømdisk
(
ømdisk_addr
,

199 
ømdisk_size
)

201 
bi_ªc
 *
bi
;

204 
	`bi_ªmove
(
BI_RAMDISK
);

206 i‡(!
ømdisk_size
)

210 
bi
 = 
	`bi_add
(
BI_RAMDISK
, (bi->
mem_öfo
));

211 
bi
->
mem_öfo
.
addr
 = 
ømdisk_addr
;

212 
bi
->
mem_öfo
.
size
 = 
ømdisk_size
;

213 
	}
}

222 
	$boŸöfo_check_boŸvîsi⁄
(c⁄° 
kexec_öfo
 *
öfo
)

224 
bi_ªc
 *
bi
;

225 c⁄° 
boŸvîsi⁄
 *
bv
;

226 
uöt16_t
 
maj‹
, 
mö‹
;

227 
i
;

229 
bv
 = 
öfo
->
£gmít
[0].
buf
;

230 i‡(
bv
->
magic
 !
BOOTINFOV_MAGIC
) {

231 
	`¥ötf
("WARNING: No bootversion in kernel image\n");

235 
bi
 = 
	`bi_föd
(
NULL
, 
BI_MACHTYPE
);

236 i‡(!
bi
) {

237 
	`¥ötf
("WARNING: No machtype in bootinfo\n");

241 
i
 = 0; 
bv
->
machvîsi⁄s
[i].
machty≥
 !
bi
->machtype; i++)

242 i‡(!
bv
->
machvîsi⁄s
[
i
].
machty≥
) {

243 
	`¥ötf
("WARNING: Machtype 0x%08xÇot in kernel bootversion\n",

244 
bi
->
machty≥
);

248 
maj‹
 = 
	`BI_VERSION_MAJOR
(
bv
->
machvîsi⁄s
[
i
].
vîsi⁄
);

249 
mö‹
 = 
	`BI_VERSION_MINOR
(
bv
->
machvîsi⁄s
[
i
].
vîsi⁄
);

250 
	`dbg¥ötf
("Kî√»u£†boŸvîsi⁄ %u.%u\n", 
maj‹
, 
mö‹
);

251 i‡(
maj‹
 !
SUPPORTED_BOOTINFO_VERSION
)

252 
	`¥ötf
("WARNING: Kernel bootversion %u.%u isÅoo %s forÅhis kexec (expected %u.x)\n",

253 
maj‹
, 
mö‹
,

254 
maj‹
 < 
SUPPORTED_BOOTINFO_VERSION
 ? "old" : "new",

255 
SUPPORTED_BOOTINFO_VERSION
);

256 
	}
}

258 
	$add_boŸöfo
(
kexec_öfo
 *
öfo
, 
addr
)

260 
	`add_buf„r
(
öfo
, 
boŸöfo
, 
boŸöfo_size
, bootinfo_size,

261 (*), 
addr
, 0x0fffffff, 1);

262 
	}
}

	@kexec/arch/m68k/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_M68K_OPTIONS_H


2 
	#KEXEC_ARCH_M68K_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

7 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

8 
	#OPT_REUSE_CMDLINE
 (
OPT_ARCH_MAX
+1)

	)

9 
	#OPT_RAMDISK
 (
OPT_ARCH_MAX
+2)

	)

10 
	#OPT_BOOTINFO
 (
OPT_ARCH_MAX
+3)

	)

15 
	#KEXEC_ARCH_OPTIONS
 \

16 
KEXEC_OPTIONS
 \

17 

	)

18 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

34 
	#KEXEC_ALL_OPTIONS
 \

35 
KEXEC_ARCH_OPTIONS
 \

36 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 }, \

37 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 }, \

38 { "ªu£-cmdlöe", 0, 
NULL
, 
OPT_REUSE_CMDLINE
 }, \

39 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 }, \

40 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 }, \

41 { "boŸöfo", 1, 
NULL
, 
OPT_BOOTINFO
 },

	)

43 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/m68k/kexec-elf-m68k.c

10 
	#_GNU_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<uni°d.h
>

19 
	~<gë›t.h
>

20 
	~<ñf.h
>

21 
	~<boŸ/ñf_boŸ.h
>

22 
	~<ù_checksum.h
>

23 
	~"../../kexec.h
"

24 
	~"../../kexec-ñf.h
"

25 
	~"../../kexec-sysˇŒ.h
"

26 
	~"kexec-m68k.h
"

27 
	~"boŸöfo.h
"

28 
	~<¨ch/›ti⁄s.h
>

30 
	#KiB
 * 1024

	)

31 
	#MiB
 * 1024 
KiB


	)

33 
	#PAGE_SIZE
 4 
KiB


	)

36 
	$ñf_m68k_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

38 
mem_ehdr
 
ehdr
;

39 
ªsu…
;

40 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

41 i‡(
ªsu…
 < 0)

42 
out
;

45 i‡(
ehdr
.
e_machöe
 !
EM_68K
) {

47 
	`Ârötf
(
°dîr
, "Not forÅhisárchitecture.\n");

48 
ªsu…
 = -1;

49 
out
;

51 
ªsu…
 = 0;

52 
out
:

53 
	`‰ì_ñf_öfo
(&
ehdr
);

54  
ªsu…
;

55 
	}
}

57 
	$ñf_m68k_ußge
()

59 
	`¥ötf
(" --command-line=STRING SetÅhe kernel commandÜineÅo STRING\n"

66 
	}
}

68 
	$£gmít_íd
(c⁄° 
kexec_öfo
 *
öfo
, 
i
)

70  ()
öfo
->
£gmít
[
i
].
mem
 + info->£gmít[i].
memsz
 - 1;

71 
	}
}

73 
	$ñf_m68k_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

74 
kexec_öfo
 *
öfo
)

76 
mem_ehdr
 
ehdr
;

77 c⁄° *
cmdlöe
 = 
NULL
, *
ømdisk_fûe
 = NULL;

78 
›t
, 
ªsu…
, 
i
;

79 
boŸöfo_addr
, 
ømdisk_addr
 = 0;

80 
off_t
 
ømdisk_size
 = 0;

83 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

84 
KEXEC_ARCH_OPTIONS


85 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 },

86 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 },

87 { "ªu£-cmdlöe", 0, 
NULL
, 
OPT_REUSE_CMDLINE
 },

88 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 },

89 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 },

90 { "boŸöfo", 1, 
NULL
, 
OPT_BOOTINFO
 },

91 { 0, 0, 
NULL
, 0 },

94 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "d";

96 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) !=

98 
›t
) {

101 i‡(
›t
 < 
OPT_ARCH_MAX
)

103 
OPT_APPEND
:

104 
cmdlöe
 = 
›èrg
;

106 
OPT_REUSE_CMDLINE
:

107 
cmdlöe
 = 
	`gë_comm™d_löe
();

109 
OPT_RAMDISK
:

110 
ømdisk_fûe
 = 
›èrg
;

112 
OPT_BOOTINFO
:

117 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

118 i‡(
ªsu…
 < 0)

119 
	`dõ
("ELFÉxecÖarse failed\n");

122 
i
 = 0; i < 
ehdr
.
e_phnum
; i++) {

123 
mem_phdr
 *
phdr
;

124 
phdr
 = &
ehdr
.
e_phdr
[
i
];

125 i‡(
phdr
->
p_ty≥
 !
PT_LOAD
 ||Öhdr->
p_off£t
)

128 
	`dbg¥ötf
("Removög ELF hódî from segmíà%d\n", 
i
);

129 
phdr
->
p_∑ddr
 +
PAGE_SIZE
;

130 
phdr
->
p_vaddr
 +
PAGE_SIZE
;

131 
phdr
->
p_fûesz
 -
PAGE_SIZE
;

132 
phdr
->
p_memsz
 -
PAGE_SIZE
;

133 
phdr
->
p_off£t
 +
PAGE_SIZE
;

134 
phdr
->
p_d©a
 +
PAGE_SIZE
;

138 
ªsu…
 = 
	`ñf_exec_lﬂd
(&
ehdr
, 
öfo
);

139 i‡(
ªsu…
 < 0)

140 
	`dõ
("ELFÉxecÜoad failed\n");

142 
öfo
->
íåy
 = (*)
	`vút_to_phys
(
ehdr
.
e_íåy
);

145 
boŸöfo_addr
 = 
	`£gmít_íd
(
öfo
, info->
ƒ_£gmíts
 - 1) + 1;

148 i‡(
ømdisk_fûe
) {

149 *
ømdisk
 = 
	`¶uΩ_decom¥ess_fûe
(
ømdisk_fûe
,

150 &
ømdisk_size
);

152 
ømdisk_addr
 = 
	`_ALIGN_DOWN
(
öfo
->
mem‹y_ønge
[0].
íd
 -

153 
ømdisk_size
 + 1,

154 
PAGE_SIZE
);

155 i‡(!
buf
)

156 
	`dõ
("RamdiskÜoad failed\n");

157 
	`add_buf„r
(
öfo
, 
ømdisk
, 
ømdisk_size
,Ñamdisk_size,

158 
PAGE_SIZE
, 
ømdisk_addr
, 
öfo
->
mem‹y_ønge
[0].
íd
,

163 
	`boŸöfo_£t_cmdlöe
(
cmdlöe
);

164 
	`boŸöfo_£t_ømdisk
(
ømdisk_addr
, 
ømdisk_size
);

165 i‡(
kexec_debug
)

166 
	`boŸöfo_¥öt
();

167 
	`add_boŸöfo
(
öfo
, 
boŸöfo_addr
);

175 i‡(
	`£gmít_íd
(
öfo
, info->
ƒ_£gmíts
 - 1Ë>
	`vút_to_phys
(4 
MiB
 - 1))

176 
	`¥ötf
("WARNING: Kernel isÜargerÅhan 4 MiB\n");

179 
	`boŸöfo_check_boŸvîsi⁄
(
öfo
);

182 
	}
}

	@kexec/arch/m68k/kexec-elf-rel-m68k.c

10 
	~<°dio.h
>

11 
	~<ñf.h
>

12 
	~"../../kexec.h
"

13 
	~"../../kexec-ñf.h
"

15 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

17 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2MSB
)

19 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
)

21 i‡(
ehdr
->
e_machöe
 !
EM_68K
)

24 
	}
}

26 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

27 *
UNUSED
(
loˇti⁄
),

28 
UNUSED
(
addªss
),

29 
	$UNUSED
(
vÆue
))

31 
r_ty≥
) {

33 
	`dõ
("Unknow¿ªœÑñoˇti⁄: %lu\n", 
r_ty≥
);

37 
	}
}

	@kexec/arch/m68k/kexec-m68k.c

10 
	~<°ddef.h
>

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	~<°döt.h
>

14 
	~<°rög.h
>

15 
	~<gë›t.h
>

16 
	~"../../kexec.h
"

17 
	~"../../kexec-sysˇŒ.h
"

18 
	~"kexec-m68k.h
"

19 
	~"boŸöfo.h
"

20 
	~<¨ch/›ti⁄s.h
>

23 
	gm68k_memoff£t
;

27 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

28 
kexec_Êags
)

30 
	`boŸöfo_lﬂd
();

31 *
ønges
 = 
	`boŸöfo_gë_mem‹y_ønges
(
ønge
);

32 
m68k_memoff£t
 = (*
ønge
)[0].
°¨t
;

34 
	}
}

37 
fûe_ty≥
 
	gfûe_ty≥
[] = {

38 {"ñf-m68k", 
ñf_m68k_¥obe
, 
ñf_m68k_lﬂd
, 
ñf_m68k_ußge
},

40 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

42 
	$¨ch_ußge
()

44 
	}
}

46 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

48 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

49 
KEXEC_ALL_OPTIONS


50 { "boŸöfo", 1, 
NULL
, 
OPT_BOOTINFO
 },

51 { 0, 0, 
NULL
, 0 },

53 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ALL_OPT_STR
;

54 
›t
;

56 
›ãº
 = 0;

57 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) !=

59 
›t
) {

62 
OPT_BOOTINFO
:

63 
boŸöfo_fûe
 = 
›èrg
;

68 
›ãº
 = 1;

69 
›töd
 = 1;

71 
	}
}

73 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

74 { "m68k", 
KEXEC_ARCH_68K
 },

75 { 
NULL
, 0 },

78 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

81 
	}
}

83 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

85 
	}
}

87 
	$is_¸ashkî√l_mem_ª£rved
()

90 
	}
}

92 
	$vút_to_phys
(
addr
)

94  
addr
 + 
m68k_memoff£t
;

95 
	}
}

100 
	$add_£gmít
(
kexec_öfo
 *
öfo
, c⁄° *
buf
, 
size_t
 
bufsz
,

101 
ba£
, 
size_t
 
memsz
)

103 
	`add_£gmít_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
ba£
, 
memsz
, 1);

104 
	}
}

	@kexec/arch/m68k/kexec-m68k.h

1 #i‚de‡
KEXEC_M68K_H


2 
	#KEXEC_M68K_H


	)

4 
ñf_m68k_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

5 
ñf_m68k_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

6 
kexec_öfo
 *
öfo
);

7 
ñf_m68k_ußge
();

	@kexec/arch/mips/crashdump-mips.c

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<î∫o.h
>

24 
	~<limôs.h
>

25 
	~<ñf.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<uni°d.h
>

29 
	~"../../kexec.h
"

30 
	~"../../kexec-ñf.h
"

31 
	~"../../kexec-sysˇŒ.h
"

32 
	~"../../¸ashdump.h
"

33 
	~"kexec-mùs.h
"

34 
	~"¸ashdump-mùs.h
"

35 
	~"unu£d.h
"

39 
mem‹y_ønge
 
	g¸ash_mem‹y_ønge
[
CRASH_MAX_MEMORY_RANGES
];

42 
mem‹y_ønge
 
	g¸ash_ª£rved_mem
;

46 
	$gë_kî√l_∑ddr
(
¸ash_ñf_öfo
 *
ñf_öfo
)

48 
uöt64_t
 
°¨t
;

50 i‡(
	`xí_¥e£¡
())

53 i‡(
	`∑r£_iomem_sögÀ
("Kî√»code\n", &
°¨t
, 
NULL
) == 0) {

54 
ñf_öfo
->
kîn_∑ddr_°¨t
 = 
°¨t
;

55 
	`dbg¥ötf
("kî√»lﬂdÖhysiˇ»add∏°¨à0x%lx\n", 
°¨t
);

59 
	`Ârötf
(
°dîr
, "Cannot determine kernelÖhysicalÜoadáddr\n");

61 
	}
}

63 
	$gë_kî√l_vaddr_™d_size
(
¸ash_ñf_öfo
 *
ñf_öfo
,

64 
°¨t_off£t
)

66 
uöt64_t
 
íd
;

68 i‡(!
ñf_öfo
->
kîn_∑ddr_°¨t
)

71 
ñf_öfo
->
kîn_vaddr_°¨t
 =Élf_öfo->
kîn_∑ddr_°¨t
 |

72 
°¨t_off£t
;

73 i‡(
	`∑r£_iomem_sögÀ
("Kî√»d©a\n", 
NULL
, &
íd
) == 0) {

74 
ñf_öfo
->
kîn_size
 = 
íd
 -Élf_öfo->
kîn_∑ddr_°¨t
;

75 
	`dbg¥ötf
("kernel_vaddr= 0x%llxÖaddr %llx\n",

76 
ñf_öfo
->
kîn_vaddr_°¨t
,

77 
ñf_öfo
->
kîn_∑ddr_°¨t
);

78 
	`dbg¥ötf
("kî√»sizê0x%lx\n", 
ñf_öfo
->
kîn_size
);

81 
	`Ârötf
(
°dîr
, "Cannot determine kernel virtualÜoadáddránd size\n");

83 
	}
}

88 
	$ex˛ude_¸ash_ª£rve_ªgi⁄
(*
ƒ_ønges
)

90 
i
, 
j
, 
tidx
 = -1;

91 
c°¨t
, 
˚nd
;

92 
mem‹y_ønge
 
ãmp_ªgi⁄
 = {

93 .
°¨t
 = 0,

94 .
íd
 = 0

98 
c°¨t
 = 
¸ash_ª£rved_mem
.
°¨t
;

99 
˚nd
 = 
¸ash_ª£rved_mem
.
íd
;

101 
i
 = 0; i < (*
ƒ_ønges
); i++) {

102 
m°¨t
, 
míd
;

103 
m°¨t
 = 
¸ash_mem‹y_ønge
[
i
].
°¨t
;

104 
míd
 = 
¸ash_mem‹y_ønge
[
i
].
íd
;

105 i‡(
c°¨t
 < 
míd
 && 
˚nd
 > 
m°¨t
) {

106 i‡(
c°¨t
 !
m°¨t
 && 
˚nd
 !
míd
) {

108 
¸ash_mem‹y_ønge
[
i
].
íd
 = 
c°¨t
 - 1;

109 
ãmp_ªgi⁄
.
°¨t
 = 
˚nd
 + 1;

110 
ãmp_ªgi⁄
.
íd
 = 
míd
;

111 
ãmp_ªgi⁄
.
ty≥
 = 
RANGE_RAM
;

112 
tidx
 = 
i
+1;

113 } i‡(
c°¨t
 !
m°¨t
)

114 
¸ash_mem‹y_ønge
[
i
].
íd
 = 
c°¨t
 - 1;

116 
¸ash_mem‹y_ønge
[
i
].
°¨t
 = 
˚nd
 + 1;

120 i‡(
tidx
 >= 0) {

121 i‡(*
ƒ_ønges
 =
CRASH_MAX_MEMORY_RANGES
) {

123 
	`Ârötf
(
°dîr
, "Error: Number of crash memoryÑanges"

127 
j
 = (*
ƒ_ønges
 - 1); j >
tidx
; j--)

128 
¸ash_mem‹y_ønge
[
j
+1] = crash_memory_range[j];

129 
¸ash_mem‹y_ønge
[
tidx
].
°¨t
 = 
ãmp_ªgi⁄
.start;

130 
¸ash_mem‹y_ønge
[
tidx
].
íd
 = 
ãmp_ªgi⁄
.end;

131 
¸ash_mem‹y_ønge
[
tidx
].
ty≥
 = 
ãmp_ªgi⁄
.type;

132 (*
ƒ_ønges
)++;

135 
	}
}

147 
	$gë_¸ash_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
)

149 c⁄° 
iomem
[] = "/proc/iomem";

150 
i
, 
mem‹y_ønges
 = 0;

151 
löe
[
MAX_LINE
];

152 
FILE
 *
Â
;

153 
°¨t
, 
íd
;

155 
Â
 = 
	`f›í
(
iomem
, "r");

156 i‡(!
Â
) {

157 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

158 
iomem
, 
	`°ªº‹
(
î∫o
));

162 
¸ash_mem‹y_ønge
[0].
°¨t
 = 
BACKUP_SRC_START
;

163 
¸ash_mem‹y_ønge
[0].
íd
 = 
BACKUP_SRC_END
;

164 
¸ash_mem‹y_ønge
[0].
ty≥
 = 
RANGE_RAM
;

165 
mem‹y_ønges
++;

167 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

168 *
°r
;

169 
ty≥
, 
c⁄sumed
, 
cou¡
;

170 i‡(
mem‹y_ønges
 >
CRASH_MAX_MEMORY_RANGES
)

172 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx-%Lx : %n",

173 &
°¨t
, &
íd
, &
c⁄sumed
);

174 i‡(
cou¡
 != 2)

176 
°r
 = 
löe
 + 
c⁄sumed
;

179 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

180 
ty≥
 = 
RANGE_RAM
;

181 } i‡(
	`memcmp
(
°r
, "Crash kernel\n", 13) == 0) {

184 
¸ash_ª£rved_mem
.
°¨t
 = start;

185 
¸ash_ª£rved_mem
.
íd
 =Énd;

186 
¸ash_ª£rved_mem
.
ty≥
 = 
RANGE_RAM
;

191 i‡(
°¨t
 =
BACKUP_SRC_START
 && 
íd
 >(
BACKUP_SRC_END
 + 1))

192 
°¨t
 = 
BACKUP_SRC_END
 + 1;

194 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

195 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

196 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

197 
mem‹y_ønges
++;

200 i‡((
MAXMEM
 - 1Ë>
°¨t
 && (MAXMEM - 1Ë<
íd
) {

201 
¸ash_mem‹y_ønge
[
mem‹y_ønges
 - 1].
íd
 = 
MAXMEM
 - 1;

204 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 
MAXMEM
;

205 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

206 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

207 
mem‹y_ønges
++;

210 
	`f˛o£
(
Â
);

212 i‡(
	`ex˛ude_¸ash_ª£rve_ªgi⁄
(&
mem‹y_ønges
) < 0)

215 *
ønge
 = 
¸ash_mem‹y_ønge
;

216 *
ønges
 = 
mem‹y_ønges
;

218 
	}
}

221 
	$u…ﬂ
(
i
, *
°r
)

223 
j
 = 0, 
k
;

224 
tmp
;

227 
°r
[
j
++] = 
i
 % 10 + '0';

228 } (
i
 /= 10) > 0);

229 
°r
[
j
] = '\0';

232 
j
 = 0, 
k
 = 
	`°æí
(
°r
) - 1; j < k; j++, k--) {

233 
tmp
 = 
°r
[
k
];

234 
°r
[
k
] = så[
j
];

235 
°r
[
j
] = 
tmp
;

237 
	}
}

241 
	$cmdlöe_add_mem
(*
cmdlöe
, 
addr
,

242 
size
)

244 
cmdÀn
, 
Àn
;

245 
°r
[50], *
±r
;

247 
addr
 =áddr/1024;

248 
size
 = size/1024;

249 
±r
 = 
°r
;

250 
	`°r˝y
(
°r
, " mem=");

251 
±r
 +
	`°æí
(
°r
);

252 
	`u…ﬂ
(
size
, 
±r
);

253 
	`°rˇt
(
°r
, "K@");

254 
±r
 = 
°r
 + 
	`°æí
(str);

255 
	`u…ﬂ
(
addr
, 
±r
);

256 
	`°rˇt
(
°r
, "K");

257 
Àn
 = 
	`°æí
(
°r
);

258 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

259 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

260 
	`dõ
("CommandÜine overflow\n");

261 
	`°rˇt
(
cmdlöe
, 
°r
);

264 
	}
}

267 
	$cmdlöe_add_ñfc‹ehdr
(*
cmdlöe
, 
addr
)

269 
cmdÀn
, 
Àn
, 
Æign
 = 1024;

270 
°r
[30], *
±r
;

274 i‡(
addr
%
Æign
)

276 
addr
 =áddr/
Æign
;

277 
±r
 = 
°r
;

278 
	`°r˝y
(
°r
, "Élfcorehdr=");

279 
±r
 +
	`°æí
(
°r
);

280 
	`u…ﬂ
(
addr
, 
±r
);

281 
	`°rˇt
(
°r
, "K");

282 
Àn
 = 
	`°æí
(
°r
);

283 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

284 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

285 
	`dõ
("CommandÜine overflow\n");

286 
	`°rˇt
(
cmdlöe
, 
°r
);

288 
	}
}

290 #ifde‡
__mùs64


291 
¸ash_ñf_öfo
 
	gñf_öfo64
 = {

292 
˛ass
: 
ELFCLASS64
,

293 
d©a
 : 
ELFDATA2MSB
,

294 
machöe
 : 
EM_MIPS
,

295 
∑ge_off£t
 : 
PAGE_OFFSET
,

296 
lowmem_limô
 : 
MAXMEM
,

299 
¸ash_ñf_öfo
 
	gñf_öfo32
 = {

300 
˛ass
: 
ELFCLASS32
,

301 
d©a
 : 
ELFDATA2MSB
,

302 
machöe
 : 
EM_MIPS
,

303 
∑ge_off£t
 : 
PAGE_OFFSET
,

304 
lowmem_limô
 : 
MAXMEM
,

311 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, * 
mod_cmdlöe
,

312 
UNUSED
(
max_addr
),

313 
	$UNUSED
(
mö_ba£
))

315 *
tmp
;

316 
sz
, 
ñfc‹ehdr
;

317 
ƒ_ønges
, 
Æign
 = 1024;

318 
mem‹y_ønge
 *
mem_ønge
;

319 
¸ash_¸óã_ñf_hódîs_func
 
¸ash_¸óã
 = 
¸ash_¸óã_ñf32_hódîs
;

320 
¸ash_ñf_öfo
 *
ñf_öfo
 = &
ñf_öfo32
;

321 
°¨t_off£t
 = 0x80000000UL;

323 #ifde‡
__mùs64


324 i‡(
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =
CORE_TYPE_ELF64
) {

325 
ñf_öfo
 = &
ñf_öfo64
;

326 
¸ash_¸óã
 = 
¸ash_¸óã_ñf64_hódîs
;

327 
°¨t_off£t
 = 0xffffffff80000000UL;

331 i‡(
	`gë_kî√l_∑ddr
(
ñf_öfo
))

334 i‡(
	`gë_kî√l_vaddr_™d_size
(
ñf_öfo
, 
°¨t_off£t
))

337 i‡(
	`gë_¸ash_mem‹y_ønges
(&
mem_ønge
, &
ƒ_ønges
) < 0)

340 
öfo
->
backup_§c_°¨t
 = 
BACKUP_SRC_START
;

341 
öfo
->
backup_§c_size
 = 
BACKUP_SRC_SIZE
;

343 
sz
 = 
	`_ALIGN
(
BACKUP_SRC_SIZE
, 
Æign
);

344 
tmp
 = 
	`xmÆloc
(
sz
);

345 
	`mem£t
(
tmp
, 0, 
sz
);

346 
öfo
->
backup_°¨t
 = 
	`add_buf„r
(öfo, 
tmp
, 
sz
, sz, 
Æign
,

347 
¸ash_ª£rved_mem
.
°¨t
,

348 
¸ash_ª£rved_mem
.
íd
, -1);

350 i‡(
	`¸ash_¸óã
(
öfo
, 
ñf_öfo
, 
¸ash_mem‹y_ønge
, 
ƒ_ønges
,

351 &
tmp
, &
sz
, 
ELF_CORE_HEADER_ALIGN
) < 0)

353 
ñfc‹ehdr
 = 
	`add_buf„r
(
öfo
, 
tmp
, 
sz
, sz, 
Æign
,

354 
¸ash_ª£rved_mem
.
°¨t
,

355 
¸ash_ª£rved_mem
.
íd
, -1);

361 
	`cmdlöe_add_mem
(
mod_cmdlöe
, 
¸ash_ª£rved_mem
.
°¨t
,

362 
ñfc‹ehdr
 - 
¸ash_ª£rved_mem
.
°¨t
);

363 
	`cmdlöe_add_ñfc‹ehdr
(
mod_cmdlöe
, 
ñfc‹ehdr
);

365 
	`dbg¥ötf
("CRASH MEMORY RANGES:\n");

366 
	`dbg¥ötf
("%016Lx-%016Lx\n", 
¸ash_ª£rved_mem
.
°¨t
,

367 
¸ash_ª£rved_mem
.
íd
);

369 
	}
}

371 
	$is_¸ashkî√l_mem_ª£rved
()

373 
uöt64_t
 
°¨t
, 
íd
;

375  
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
) == 0 ?

376 (
°¨t
 !
íd
) : 0;

377 
	}
}

	@kexec/arch/mips/crashdump-mips.h

1 #i‚de‡
CRASHDUMP_MIPS_H


2 
	#CRASHDUMP_MIPS_H


	)

4 
	gkexec_öfo
;

5 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, *
mod_cmdlöe
,

6 
max_addr
, 
mö_ba£
);

7 #ifde‡
__mùs64


8 
	#PAGE_OFFSET
 0xa800000000000000ULL

	)

10 
	#PAGE_OFFSET
 0x80000000

	)

12 
	#__∑
(
x
Ë(()(
X
Ë& 0x7fffffff)

	)

14 
	#MAXMEM
 0x80000000

	)

16 
	#CRASH_MAX_MEMMAP_NR
 (
KEXEC_MAX_SEGMENTS
 + 1)

	)

17 
	#CRASH_MAX_MEMORY_RANGES
 (
MAX_MEMORY_RANGES
 + 2)

	)

19 
	#COMMAND_LINE_SIZE
 512

	)

22 
	#BACKUP_SRC_START
 0x00000000

	)

23 
	#BACKUP_SRC_END
 0x000fffff

	)

24 
	#BACKUP_SRC_SIZE
 (
BACKUP_SRC_END
 - 
BACKUP_SRC_START
 + 1)

	)

26 
¨ch_›ti⁄s_t
 
¨ch_›ti⁄s
;

	@kexec/arch/mips/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_MIPS_OPTIONS_H


2 
	#KEXEC_ARCH_MIPS_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

5 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

10 
	#KEXEC_ARCH_OPTIONS
 \

11 
KEXEC_OPTIONS
 \

12 

	)

13 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

29 
	#KEXEC_ALL_OPTIONS
 \

30 
KEXEC_ARCH_OPTIONS
 \

31 {"comm™d-löe", 1, 0, 
OPT_APPEND
}, \

32 {"≠≥nd", 1, 0, 
OPT_APPEND
},

	)

34 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/mips/kexec-elf-mips.c

13 
	#_GNU_SOURCE


	)

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~<°dlib.h
>

17 
	~<î∫o.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<f˙é.h
>

21 
	~<uni°d.h
>

22 
	~<gë›t.h
>

23 
	~<ñf.h
>

24 
	~<boŸ/ñf_boŸ.h
>

25 
	~<ù_checksum.h
>

26 
	~"../../kexec.h
"

27 
	~"../../kexec-ñf.h
"

28 
	~"../../kexec-sysˇŒ.h
"

29 
	~"kexec-mùs.h
"

30 
	~"¸ashdump-mùs.h
"

31 
	~<¨ch/›ti⁄s.h
>

33 c⁄° 
	g¥obe_debug
 = 0;

35 
	#BOOTLOADER
 "kexec"

	)

36 
	#MAX_COMMAND_LINE
 256

	)

37 
	#UPSZ
(
X
Ë
	`_ALIGN_UP
((X), 4)

	)

38 
	gcmdlöe_buf
[256] = "kexec ";

40 
	$ñf_mùs_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

42 
mem_ehdr
 
ehdr
;

43 
ªsu…
;

44 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

45 i‡(
ªsu…
 < 0) {

46 
out
;

50 i‡(
ehdr
.
e_machöe
 !
EM_MIPS
) {

52 i‡(
¥obe_debug
) {

53 
	`Ârötf
(
°dîr
, "Not forÅhisárchitecture.\n");

55 
ªsu…
 = -1;

56 
out
;

58 
ªsu…
 = 0;

59 
out
:

60 
	`‰ì_ñf_öfo
(&
ehdr
);

61  
ªsu…
;

62 
	}
}

64 
	$ñf_mùs_ußge
()

66 
	`¥ötf
(" --command-line=STRING SetÅhe kernel commandÜineÅo "

70 
	}
}

72 
	$ñf_mùs_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

73 
kexec_öfo
 *
öfo
)

75 
mem_ehdr
 
ehdr
;

76 c⁄° *
comm™d_löe
;

77 
comm™d_löe_Àn
;

78 *
¸ash_cmdlöe
;

79 
›t
;

80 
ªsu…
;

81 
cmdlöe_addr
;

82 
size_t
 
i
;

85 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

86 
KEXEC_ARCH_OPTIONS


87 {"comm™d-löe", 1, 0, 
OPT_APPEND
},

88 {"≠≥nd", 1, 0, 
OPT_APPEND
},

92 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "d";

94 
comm™d_löe
 = 0;

95 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
,

96 
›ti⁄s
, 0)) != -1) {

97 
›t
) {

100 i‡(
›t
 < 
OPT_ARCH_MAX
) {

103 
OPT_APPEND
:

104 
comm™d_löe
 = 
›èrg
;

109 
comm™d_löe_Àn
 = 0;

114 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

115 
¸ash_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

116 
	`mem£t
((*)
¸ash_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

118 
¸ash_cmdlöe
 = 
NULL
;

120 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

121 i‡(
ªsu…
 < 0)

122 
	`dõ
("ELFÉxecÖarse failed\n");

125 
i
 = 0; i < 
ehdr
.
e_phnum
; i++) {

126 
mem_phdr
 *
phdr
;

127 
phdr
 = &
ehdr
.
e_phdr
[
i
];

128 i‡(
phdr
->
p_ty≥
 =
PT_LOAD
)

129 
phdr
->
p_∑ddr
 = 
	`vút_to_phys
(phdr->p_paddr);

133 
ªsu…
 = 
	`ñf_exec_lﬂd
(&
ehdr
, 
öfo
);

134 i‡(
ªsu…
 < 0)

135 
	`dõ
("ELFÉxecÜoad failed\n");

137 
öfo
->
íåy
 = (*)
	`vút_to_phys
(
ehdr
.
e_íåy
);

139 i‡(
comm™d_löe
)

140 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

142 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

143 
ªsu…
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
¸ash_cmdlöe
,

145 i‡(
ªsu…
 < 0) {

146 
	`‰ì
(
¸ash_cmdlöe
);

151 i‡(
comm™d_löe
)

152 
	`°∫ˇt
(
cmdlöe_buf
, 
comm™d_löe
, 
comm™d_löe_Àn
);

153 i‡(
¸ash_cmdlöe
)

154 
	`°∫ˇt
(
cmdlöe_buf
, 
¸ash_cmdlöe
,

155 (
¸ash_cmdlöe
) -

156 
	`°æí
(
¸ash_cmdlöe
) - 1);

158 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
)

161 
cmdlöe_addr
 = 
öfo
->
£gmít
[0].
mem
 +

162 
öfo
->
£gmít
[0].
memsz
;

164 
cmdlöe_addr
 = 0;

166 
	`add_buf„r
(
öfo
, 
cmdlöe_buf
, (cmdline_buf),

167 (
cmdlöe_buf
), (*),

168 
cmdlöe_addr
, 0x0fffffff, 1);

171 
	}
}

	@kexec/arch/mips/kexec-elf-rel-mips.c

13 
	~<°dio.h
>

14 
	~<ñf.h
>

15 
	~"../../kexec.h
"

16 
	~"../../kexec-ñf.h
"

18 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

20 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2MSB
) {

23 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
) {

26 i‡(
ehdr
->
e_machöe
 !
EM_MIPS
) {

30 
	}
}

32 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

33 *
UNUSED
(
loˇti⁄
),

34 
UNUSED
(
addªss
),

35 
	$UNUSED
(
vÆue
))

37 
r_ty≥
) {

40 
	`dõ
("Unknow¿ªœÑñoˇti⁄: %lu\n", 
r_ty≥
);

44 
	}
}

	@kexec/arch/mips/kexec-mips.c

13 
	~<°ddef.h
>

14 
	~<°dio.h
>

15 
	~<î∫o.h
>

16 
	~<°döt.h
>

17 
	~<°rög.h
>

18 
	~<gë›t.h
>

19 
	~"../../kexec.h
"

20 
	~"../../kexec-sysˇŒ.h
"

21 
	~"kexec-mùs.h
"

22 
	~<¨ch/›ti⁄s.h
>

24 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

27 
gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

28 
	$UNUSED
(
kexec_Êags
))

30 
mem‹y_ønges
 = 0;

32 c⁄° 
iomem
[] = "/proc/iomem";

33 
löe
[
MAX_LINE
];

34 
FILE
 *
Â
;

35 
°¨t
, 
íd
;

36 *
°r
;

37 
ty≥
, 
c⁄sumed
, 
cou¡
;

39 
Â
 = 
	`f›í
(
iomem
, "r");

40 i‡(!
Â
) {

41 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿%s: %s\n", 
iomem
, 
	`°ªº‹
(
î∫o
));

44 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

45 i‡(
mem‹y_ønges
 >
MAX_MEMORY_RANGES
)

47 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx-%Lx : %n", &
°¨t
, &
íd
, &
c⁄sumed
);

48 i‡(
cou¡
 != 2)

50 
°r
 = 
löe
 + 
c⁄sumed
;

51 
íd
 =Énd + 1;

52 i‡(
	`memcmp
(
°r
, "System RAM\n", 11) == 0) {

53 
ty≥
 = 
RANGE_RAM
;

54 } i‡(
	`memcmp
(
°r
, "reserved\n", 9) == 0) {

55 
ty≥
 = 
RANGE_RESERVED
;

59 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

60 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

61 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 =Åype;

62 
mem‹y_ønges
++;

64 
	`f˛o£
(
Â
);

65 *
ønge
 = 
mem‹y_ønge
;

66 *
ønges
 = 
mem‹y_ønges
;

68 
	}
}

70 
fûe_ty≥
 
	gfûe_ty≥
[] = {

71 {"ñf-mùs", 
ñf_mùs_¥obe
, 
ñf_mùs_lﬂd
, 
ñf_mùs_ußge
},

73 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

75 
	$¨ch_ußge
()

77 #ifde‡
__mùs64


78 
	`Ârötf
(
°dîr
, " --elf32-core-headers Prepare core headers in "

81 
	}
}

83 #ifde‡
__mùs64


84 
¨ch_›ti⁄s_t
 
	g¨ch_›ti⁄s
 = {

85 .
c‹e_hódî_ty≥
 = 
CORE_TYPE_ELF64


89 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

92 
	}
}

94 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

98 { "mùs", 
KEXEC_ARCH_MIPS
 },

99 { "mùs64", 
KEXEC_ARCH_MIPS
 },

100 { 
NULL
, 0 },

103 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

107 
	}
}

109 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

111 
	}
}

113 
	$vút_to_phys
(
addr
)

115  
addr
 & 0x7fffffff;

116 
	}
}

121 
	$add_£gmít
(
kexec_öfo
 *
öfo
, c⁄° *
buf
, 
size_t
 
bufsz
,

122 
ba£
, 
size_t
 
memsz
)

124 
	`add_£gmít_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
	`vút_to_phys
(
ba£
), 
memsz
, 1);

125 
	}
}

130 
	$add_buf„r
(
kexec_öfo
 *
öfo
, c⁄° *
buf
,

131 
bufsz
, 
memsz
,

132 
buf_Æign
, 
buf_mö
,

133 
buf_max
, 
buf_íd
)

135  
	`add_buf„r_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
memsz
, 
buf_Æign
,

136 
buf_mö
, 
buf_max
, 
buf_íd
, 1);

137 
	}
}

	@kexec/arch/mips/kexec-mips.h

1 #i‚de‡
KEXEC_MIPS_H


2 
	#KEXEC_MIPS_H


	)

4 
	#MAX_MEMORY_RANGES
 64

	)

5 
	#MAX_LINE
 160

	)

7 
	#CORE_TYPE_ELF32
 1

	)

8 
	#CORE_TYPE_ELF64
 2

	)

10 
ñf_mùs_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

11 
ñf_mùs_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

12 
kexec_öfo
 *
öfo
);

13 
ñf_mùs_ußge
();

15 
	s¨ch_›ti⁄s_t
 {

16 
	mc‹e_hódî_ty≥
;

	@kexec/arch/ppc/crashdump-powerpc.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<î∫o.h
>

6 
	~<limôs.h
>

7 
	~<ñf.h
>

8 
	~<dúít.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<f˙é.h
>

12 
	~"../../kexec.h
"

13 
	~"../../kexec-ñf.h
"

14 
	~"../../kexec-sysˇŒ.h
"

15 
	~"../../¸ashdump.h
"

16 
	~"kexec-µc.h
"

17 
	~"¸ashdump-powîpc.h
"

19 #ifde‡
CONFIG_PPC64


20 
¸ash_ñf_öfo
 
	gñf_öfo64
 = {

21 
˛ass
: 
ELFCLASS64
,

22 
d©a
: 
ELFDATA2MSB
,

23 
machöe
: 
EM_PPC64
,

24 
∑ge_off£t
: 
PAGE_OFFSET
,

25 
lowmem_limô
: 
MAXMEM
,

28 
¸ash_ñf_öfo
 
	gñf_öfo32
 = {

29 
˛ass
: 
ELFCLASS32
,

30 
d©a
: 
ELFDATA2MSB
,

31 #ifde‡
CONFIG_PPC64


32 
machöe
: 
EM_PPC64
,

34 
machöe
: 
EM_PPC
,

36 
∑ge_off£t
: 
PAGE_OFFSET
,

37 
lowmem_limô
: 
MAXMEM
,

43 
mem‹y_ønge
 *
	g¸ash_mem‹y_ønge
;

44 
	g¸ash_ƒ_mem‹y_ønges
;

47 
	g¸ash_max_mem‹y_ønges
;

53 
mem_rgns_t
 
	gußbÀmem_rgns
 = {0, 
NULL
};

57 
	$add_¸ash_mem‹y_ønge
(
°¨t
,

58 
íd
)

60 #i‚de‡
CONFIG_PPC64


61 i‡(
°¨t
 < 
ñf_öfo32
.
lowmem_limô
 && 
íd
 >Élf_info32.lowmem_limit) {

62 
	`add_¸ash_mem‹y_ønge
(
°¨t
, 
ñf_öfo32
.
lowmem_limô
);

63 
	`add_¸ash_mem‹y_ønge
(
ñf_öfo32
.
lowmem_limô
, 
íd
);

68 i‡(
¸ash_ƒ_mem‹y_ønges
 < 
¸ash_max_mem‹y_ønges
) {

69 
¸ash_mem‹y_ønge
[
¸ash_ƒ_mem‹y_ønges
].
°¨t
 = start;

70 
¸ash_mem‹y_ønge
[
¸ash_ƒ_mem‹y_ønges
].
íd
 =Énd;

71 
¸ash_mem‹y_ønge
[
¸ash_ƒ_mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

74 
¸ash_ƒ_mem‹y_ønges
++;

75 
	}
}

89 
	$gë_¸ash_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
)

92 
devi˚_åì
[256] = "/proc/device-tree/";

93 
‚ame
[256];

94 
DIR
 *
dú
, *
dmem
;

95 
fd
;

96 
dúít
 *
díåy
, *
míåy
;

97 
n
, 
¸ash_∫g_Àn
 = 0;

98 
°¨t
, 
íd
, 
c°¨t
, 
˚nd
;

100 
¸ash_max_mem‹y_ønges
 = 
max_mem‹y_ønges
 + 6;

101 
¸ash_∫g_Àn
 = (
mem‹y_ønge
Ë* 
¸ash_max_mem‹y_ønges
;

103 
¸ash_mem‹y_ønge
 = (
mem‹y_ønge
 *Ë
	`mÆloc
(
¸ash_∫g_Àn
);

104 i‡(!
¸ash_mem‹y_ønge
) {

105 
	`Ârötf
(
°dîr
, "Allocation for crash memoryÑange failed\n");

108 
	`mem£t
(
¸ash_mem‹y_ønge
, 0, 
¸ash_∫g_Àn
);

109 
¸ash_ƒ_mem‹y_ønges
 = 0;

111 #i‚de‡
CONFIG_BOOKE


113 
	`add_¸ash_mem‹y_ønge
(
BACKUP_SRC_START
, 
BACKUP_SRC_END
 + 1);

116 
dú
 = 
	`›ídú
(
devi˚_åì
);

117 i‡(!
dú
) {

118 
	`≥º‹
(
devi˚_åì
);

119 
îr
;

121 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

122 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7)

123 && 
	`°rcmp
(
díåy
->
d_«me
, "memory"))

125 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

126 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

127 
dmem
 = 
	`›ídú
(
‚ame
);

128 i‡(!
dmem
) {

129 
	`≥º‹
(
‚ame
);

130 
	`˛o£dú
(
dú
);

131 
îr
;

133 (
míåy
 = 
	`ªaddú
(
dmem
)Ë!
NULL
) {

134 i‡(
	`°rcmp
(
míåy
->
d_«me
, "reg"))

136 
	`°rˇt
(
‚ame
, "/reg");

137 
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

138 i‡(
fd
 < 0) {

139 
	`≥º‹
(
‚ame
);

140 
	`˛o£dú
(
dmem
);

141 
	`˛o£dú
(
dú
);

142 
îr
;

144 
n
 = 
	`ªad_mem‹y_ªgi⁄_limôs
(
fd
, &
°¨t
, &
íd
);

146 
	`˛o£
(
fd
);

147 i‡(
n
 != 0) {

148 
	`˛o£dú
(
dmem
);

149 
	`˛o£dú
(
dú
);

150 
îr
;

152 #i‚de‡
CONFIG_BOOKE


153 i‡(
°¨t
 =0 && 
íd
 >(
BACKUP_SRC_END
 + 1))

154 
°¨t
 = 
BACKUP_SRC_END
 + 1;

163 i‡(
mem‹y_limô
) {

164 i‡(
°¨t
 >
mem‹y_limô
)

166 i‡(
íd
 > 
mem‹y_limô
)

167 
íd
 = 
mem‹y_limô
;

173 
c°¨t
 = 
¸ash_ba£
;

174 
˚nd
 = 
¸ash_ba£
 + 
¸ash_size
;

176 i‡(
c°¨t
 >
íd
 || 
˚nd
 <
°¨t
)

177 
	`add_¸ash_mem‹y_ønge
(
°¨t
, 
íd
);

179 i‡(
°¨t
 < 
c°¨t
)

180 
	`add_¸ash_mem‹y_ønge
(
°¨t
, 
c°¨t
);

181 i‡(
˚nd
 < 
íd
)

182 
	`add_¸ash_mem‹y_ønge
(
˚nd
, 
íd
);

185 
	`˛o£dú
(
dmem
);

187 
	`˛o£dú
(
dú
);

193 i‡(
¸ash_ba£
 < 
πas_ba£
 + 
πas_size
 &&

194 
πas_ba£
 < 
¸ash_ba£
 + 
¸ash_size
) {

195 
c°¨t
 = 
πas_ba£
;

196 
˚nd
 = 
πas_ba£
 + 
πas_size
;

197 i‡(
c°¨t
 < 
¸ash_ba£
)

198 
c°¨t
 = 
¸ash_ba£
;

199 i‡(
˚nd
 > 
¸ash_ba£
 + 
¸ash_size
)

200 
˚nd
 = 
¸ash_ba£
 + 
¸ash_size
;

201 
	`add_¸ash_mem‹y_ønge
(
c°¨t
, 
˚nd
);

204 i‡(
¸ash_ƒ_mem‹y_ønges
 >
¸ash_max_mem‹y_ønges
) {

205 
	`Ârötf
(
°dîr
,

208 
îr
;

211 *
ønge
 = 
¸ash_mem‹y_ønge
;

212 *
ønges
 = 
¸ash_ƒ_mem‹y_ønges
;

214 
j
;

215 
	`dbg¥ötf
("CRASH MEMORY RANGES\n");

216 
j
 = 0; j < *
ønges
; j++) {

217 
°¨t
 = 
¸ash_mem‹y_ønge
[
j
].start;

218 
íd
 = 
¸ash_mem‹y_ønge
[
j
].end;

219 
	`dbg¥ötf
("%016Lx-%016Lx\n", 
°¨t
, 
íd
);

224 
îr
:

225 i‡(
¸ash_mem‹y_ønge
)

226 
	`‰ì
(
¸ash_mem‹y_ønge
);

228 
	}
}

231 
	$uŒtﬂ
(
i
, *
°r
)

233 
j
 = 0, 
k
;

234 
tmp
;

237 
°r
[
j
++] = 
i
 % 10 + '0';

238 } (
i
 /= 10) > 0);

239 
°r
[
j
] = '\0';

242 
j
 = 0, 
k
 = 
	`°æí
(
°r
) - 1; j < k; j++, k--) {

243 
tmp
 = 
°r
[
k
];

244 
°r
[
k
] = så[
j
];

245 
°r
[
j
] = 
tmp
;

247 
	}
}

250 
	$add_cmdlöe
(*
cmdlöe
, *
°r
)

252 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ såÀn(
°r
);

253 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

254 
	`dõ
("CommandÜine overflow\n");

255 
	`°rˇt
(
cmdlöe
, 
°r
);

256 
	}
}

258 
	$add_cmdlöe_∑øm
(*
cmdlöe
, 
addr
,

259 *
cmd°r
, *
byã
)

261 
Æign
 = 1024;

262 
°r
[
COMMAND_LINE_SIZE
], *
±r
;

265 
byã
[0]) {

267 i‡(
addr
%
Æign
)

269 
addr
 =áddr/
Æign
;

272 
addr
 =áddr/(
Æign
 *align);

275 
±r
 = 
°r
;

276 
	`°r˝y
(
°r
, 
cmd°r
);

277 
±r
 +
	`°æí
(
°r
);

278 
	`uŒtﬂ
(
addr
, 
±r
);

279 
	`°rˇt
(
°r
, 
byã
);

281 
	`add_cmdlöe
(
cmdlöe
, 
°r
);

283 
	`dbg¥ötf
("Comm™dÜöêa·îáddögÉlfc‹ehdr: %s\n", 
cmdlöe
);

286 
	}
}

292 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, *
mod_cmdlöe
,

293 
max_addr
, 
mö_ba£
)

295 *
tmp
;

296 
sz
, 
ñfc‹ehdr
;

297 
ƒ_ønges
, 
Æign
 = 1024, 
i
;

298 
íd
;

299 
mem‹y_ønge
 *
mem_ønge
;

301 i‡(
	`gë_¸ash_mem‹y_ønges
(&
mem_ønge
, &
ƒ_ønges
) < 0)

304 
öfo
->
backup_§c_°¨t
 = 
BACKUP_SRC_START
;

305 
öfo
->
backup_§c_size
 = 
BACKUP_SRC_SIZE
;

306 #i‚de‡
CONFIG_BOOKE


308 
sz
 = 
	`_ALIGN
(
BACKUP_SRC_SIZE
, 
Æign
);

309 
tmp
 = 
	`xmÆloc
(
sz
);

310 
	`mem£t
(
tmp
, 0, 
sz
);

311 
öfo
->
backup_°¨t
 = 
	`add_buf„r
(öfo, 
tmp
, 
sz
, sz, 
Æign
,

312 0, 
max_addr
, 1);

313 
	`ª£rve
(
öfo
->
backup_°¨t
, 
sz
);

326 
i
 = 0; i < 
ƒ_ønges
; i++) {

327 
íd
 = 
¸ash_mem‹y_ønge
[
i
].end - 1;

328 
¸ash_mem‹y_ønge
[
i
].
íd
 =Énd;

332 #ifde‡
CONFIG_PPC64


334 i‡(
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =
CORE_TYPE_ELF64
) {

335 i‡(
	`¸ash_¸óã_ñf64_hódîs
(
öfo
, &
ñf_öfo64
,

336 
¸ash_mem‹y_ønge
, 
ƒ_ønges
, &
tmp
,

337 &
sz
, 
ELF_CORE_HEADER_ALIGN
) < 0)

339 } i‡(
	`¸ash_¸óã_ñf32_hódîs
(
öfo
, &
ñf_öfo32
,

340 
¸ash_mem‹y_ønge
, 
ƒ_ønges
, &
tmp
, &
sz
,

341 
ELF_CORE_HEADER_ALIGN
) < 0)

344 i‡(
	`¸ash_¸óã_ñf32_hódîs
(
öfo
, &
ñf_öfo32
, 
¸ash_mem‹y_ønge
,

345 
ƒ_ønges
, &
tmp
, &
sz
, 
ELF_CORE_HEADER_ALIGN
)

350 
ñfc‹ehdr
 = 
	`add_buf„r
(
öfo
, 
tmp
, 
sz
, sz, 
Æign
,

351 
mö_ba£
, 
max_addr
, 1);

352 
	`ª£rve
(
ñfc‹ehdr
, 
sz
);

356 
	`add_cmdlöe_∑øm
(
mod_cmdlöe
, 
ñfc‹ehdr
, "Élfcorehdr=", "K");

357 
	`add_cmdlöe
(
mod_cmdlöe
, " maxcpus=1");

359 
	}
}

365 
	$add_ußbÀ_mem_rgns
(
ba£
, 
size
)

367 
i
;

368 
íd
 = 
ba£
 + 
size
;

369 
u°¨t
, 
uíd
;

371 
ba£
 = 
	`_ALIGN_DOWN
(ba£, 
	`gë∑gesize
());

372 
íd
 = 
	`_ALIGN_UP
”nd, 
	`gë∑gesize
());

374 
i
 = 0; i < 
ußbÀmem_rgns
.
size
; i++) {

375 
u°¨t
 = 
ußbÀmem_rgns
.
ønges
[
i
].
°¨t
;

376 
uíd
 = 
ußbÀmem_rgns
.
ønges
[
i
].
íd
;

377 i‡(
ba£
 < 
uíd
 && 
íd
 > 
u°¨t
) {

378 i‡((
ba£
 >
u°¨t
Ë&& (
íd
 <
uíd
))

380 i‡(
ba£
 < 
u°¨t
 && 
íd
 > 
uíd
) {

381 
ußbÀmem_rgns
.
ønges
[
i
].
°¨t
 = 
ba£
;

382 
ußbÀmem_rgns
.
ønges
[
i
].
íd
 =Énd;

384 } i‡(
ba£
 < 
u°¨t
) {

385 
ußbÀmem_rgns
.
ønges
[
i
].
°¨t
 = 
ba£
;

387 } i‡(
íd
 > 
uíd
) {

388 
ußbÀmem_rgns
.
ønges
[
i
].
íd
 =Énd;

393 
ußbÀmem_rgns
.
ønges
[ußbÀmem_rgns.
size
].
°¨t
 = 
ba£
;

394 
ußbÀmem_rgns
.
ønges
[ußbÀmem_rgns.
size
++].
íd
 =Énd;

396 
	`dbg¥ötf
("usable memoryÑgns size:%u base:%llx size:%llx\n",

397 
ußbÀmem_rgns
.
size
, 
ba£
, size);

398 
	}
}

400 
	$is_¸ashkî√l_mem_ª£rved
()

402 
fd
;

404 
fd
 = 
	`›í
("/¥oc/devi˚-åì/cho£n/löux,¸ashkî√l-ba£", 
O_RDONLY
);

405 i‡(
fd
 < 0)

407 
	`˛o£
(
fd
);

409 
	}
}

	@kexec/arch/ppc/crashdump-powerpc.h

1 #i‚de‡
CRASHDUMP_POWERPC_H


2 
	#CRASHDUMP_POWERPC_H


	)

4 
	gkexec_öfo
;

5 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, *
mod_cmdlöe
,

6 
max_addr
, 
mö_ba£
);

7 
add_ußbÀ_mem_rgns
(
ba£
, 
size
);

9 
¨ch_›ti⁄s_t
 
¨ch_›ti⁄s
;

11 #ifde‡
CONFIG_PPC64


12 
	#PAGE_OFFSET
 0xC000000000000000UL

	)

13 
	#VMALLOCBASE
 0xD000000000000000UL

	)

14 
	#MAXMEM
 (-
KERNELBASE
-
VMALLOCBASE
)

	)

16 
	#PAGE_OFFSET
 0xC0000000

	)

17 
	#MAXMEM
 0x30000000

	)

20 
	#KERNELBASE
 
PAGE_OFFSET


	)

21 
	#__∑
(
x
Ë(()(x)-
PAGE_OFFSET
)

	)

23 
	#COMMAND_LINE_SIZE
 512

	)

25 #ifde‡
CONFIG_BOOKE


27 
	#BACKUP_SRC_START
 0x0000

	)

28 
	#BACKUP_SRC_END
 0x0000

	)

29 
	#BACKUP_SRC_SIZE
 0x0000

	)

32 
	#BACKUP_SRC_START
 0x0000

	)

33 
	#BACKUP_SRC_END
 0xffff

	)

34 
	#BACKUP_SRC_SIZE
 (
BACKUP_SRC_END
 - 
BACKUP_SRC_START
 + 1)

	)

37 
	#KDUMP_BACKUP_LIMIT
 
BACKUP_SRC_SIZE


	)

39 
¸ash_ba£
;

40 
¸ash_size
;

41 
πas_ba£
;

42 
πas_size
;

43 
uöt64_t
 
›Æ_ba£
;

44 
uöt64_t
 
›Æ_size
;

45 
uöt64_t
 
mem‹y_limô
;

	@kexec/arch/ppc/fixup_dtb.c

1 
	#_GNU_SOURCE


	)

2 
	~<uni°d.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

10 
	~"../../kexec.h
"

11 
	~"../../kexec-sysˇŒ.h
"

12 
	~<libfdt.h
>

13 
	~"›s.h
"

14 
	~"∑ge.h
"

15 
	~"fixup_dtb.h
"

16 
	~"kexec-µc.h
"

18 c⁄° 
	g¥oc_dts
[] = "/proc/device-tree";

20 
	$¥öt_fdt_ª£rve_ªgi⁄s
(*
blob_buf
)

22 
i
, 
num
;

24 i‡(!
kexec_debug
)

27 
num
 = 
	`fdt_num_mem_rsv
(
blob_buf
);

28 
	`dbg¥ötf
 ("ª£rvêªgi⁄s: %d\n", 
num
);

29 
i
 = 0; i < 
num
; i++) {

30 
uöt64_t
 
off£t
, 
size
;

32 i‡(
	`fdt_gë_mem_rsv
(
blob_buf
, 
i
, &
off£t
, &
size
) == 0) {

33 
	`dbg¥ötf
("%d: off£t: %Œx, size: %Œx\n", 
i
, 
off£t
, 
size
);

35 
	`dbg¥ötf
("ErrorÑetreivingÑeservedÑegion\n");

38 
	}
}

41 
	$fixup_nodes
(*
nodes
[])

43 
ödex
 = 0;

44 *
‚ame
;

45 *
¥›_«me
;

46 *
node_«me
;

47 *
node
;

48 
Àn
;

49 *
c⁄ã¡
;

50 
off_t
 
c⁄ã¡_size
;

51 
ªt
;

53 
nodes
[
ödex
]) {

55 
Àn
 = 
	`a•rötf
(&
‚ame
, "%s%s", 
¥oc_dts
, 
nodes
[
ödex
]);

56 i‡(
Àn
 < 0)

57 
	`dõ
("asprintf() failed\n");

59 
c⁄ã¡
 = 
	`¶uΩ_fûe
(
‚ame
, &
c⁄ã¡_size
);

60 i‡(!
c⁄ã¡
) {

61 
	`dõ
("C™'à›í %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

64 
¥›_«me
 = 
‚ame
 + 
Àn
;

65 *
¥›_«me
 != '/')

66 
¥›_«me
--;

68 *
¥›_«me
 = '\0';

69 
¥›_«me
++;

71 
node_«me
 = 
‚ame
 + (
¥oc_dts
) - 1;

73 
node
 = 
	`föddevi˚
(
node_«me
);

74 i‡(!
node
)

75 
node
 = 
	`¸óã_node
(
NULL
, 
node_«me
 + 1);

77 
ªt
 = 
	`£çr›
(
node
, 
¥›_«me
, 
c⁄ã¡
, 
c⁄ã¡_size
);

78 i‡(
ªt
 < 0)

79 
	`dõ
("setprop of %s/%s size: %ld failed: %s\n",

80 
node_«me
, 
¥›_«me
, 
c⁄ã¡_size
,

81 
	`fdt_°ªº‹
(
ªt
));

83 
	`‰ì
(
c⁄ã¡
);

84 
	`‰ì
(
‚ame
);

85 
ödex
++;

87 
	}
}

95 
	$fixup_cmdlöe
(c⁄° *
cmdlöe
)

97 *
cho£n
;

98 *
fixup_cmd_node
[] = {

100 
NULL
,

103 
cho£n
 = 
	`föddevi˚
("/chosen");

105 i‡(!
cmdlöe
) {

106 i‡(!
cho£n
)

107 
	`fixup_nodes
(
fixup_cmd_node
);

109 i‡(!
cho£n
)

110 
cho£n
 = 
	`¸óã_node
(
NULL
, "chosen");

111 
	`£çr›_°r
(
cho£n
, "boŸ¨gs", 
cmdlöe
);

114 
	}
}

116 
	#EXPAND_GRANULARITY
 1024

	)

118 *
	$ex∑nd_buf
(
möex∑nd
, *
blob_buf
, 
off_t
 *
blob_size
)

120 
size
 = 
	`fdt_tŸÆsize
(
blob_buf
);

121 
rc
;

123 
size
 = 
	`_ALIGN
(sizê+ 
möex∑nd
, 
EXPAND_GRANULARITY
);

124 
blob_buf
 = 
	`ªÆloc
(blob_buf, 
size
);

125 i‡(!
blob_buf
)

126 
	`dõ
("Couldn'àföd %d byã†tÿex∑nd devi˚Åªe\n\r", 
size
);

127 
rc
 = 
	`fdt_›í_öto
(
blob_buf
, blob_buf, 
size
);

128 i‡(
rc
 != 0)

129 
	`dõ
("Couldn'tÉxpand fdt intoÇew buffer: %s\n\r",

130 
	`fdt_°ªº‹
(
rc
));

132 *
blob_size
 = 
	`fdt_tŸÆsize
(
blob_buf
);

134  
blob_buf
;

135 
	}
}

137 
	$fixup_ª£rve_ªgi⁄s
(
kexec_öfo
 *
öfo
, *
blob_buf
)

139 
ªt
, 
i
;

140 
nodeoff£t
;

141 
u64
 
vÆ
 = 0;

145 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

146 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++) {

147 
uöt64_t
 
addªss
 = ()
öfo
->
£gmít
[
i
].
mem
;

148 
uöt64_t
 
size
 = 
öfo
->
£gmít
[
i
].
memsz
;

150 (
i
+1Ë< 
öfo
->
ƒ_£gmíts
 &&

151 (
addªss
 + 
size
 =()
öfo
->
£gmít
[
i
+1].
mem
)) {

152 
size
 +
öfo
->
£gmít
[++
i
].
memsz
;

155 
ªt
 = 
	`fdt_add_mem_rsv
(
blob_buf
, 
addªss
, 
size
);

156 i‡(
ªt
) {

157 
	`¥ötf
("%s: Errorádding memoryÑangeÅo memreserve!\n",

158 
	`fdt_°ªº‹
(
ªt
));

159 
out
;

162 } i‡(
ømdisk
 || 
ªu£_öôrd
) {

165 
ªt
 = 
	`fdt_add_mem_rsv
(
blob_buf
, 
ømdisk_ba£
, 
ømdisk_size
);

166 i‡(
ªt
) {

167 
	`¥ötf
("%s: UnableÅoáddÇewÑeserved memory for initrd flat deviceÅree\n",

168 
	`fdt_°ªº‹
(
ªt
));

169 
out
;

177 
nodeoff£t
 = 
	`fdt_node_off£t_by_¥›_vÆue
(
blob_buf
, -1, "device_type", "cpu", 4);

178 
nodeoff£t
 !-
FDT_ERR_NOTFOUND
) {

179 c⁄° *
buf
;

180 
sz
, 
ªt
;

181 
u64
 
tmp
;

183 
buf
 = 
	`fdt_gë¥›
(
blob_buf
, 
nodeoff£t
, "˝u-ªÀa£-addr", &
sz
);

185 i‡(
buf
) {

186 i‡(
sz
 == 4) {

187 
tmp
 = *(
u32
 *)
buf
;

188 } i‡(
sz
 == 8) {

189 
tmp
 = *(
u64
 *)
buf
;

193 i‡(
	`_ALIGN_DOWN
(
tmp
, 
PAGE_SIZE
Ë!_ALIGN_DOWN(
vÆ
, PAGE_SIZE)) {

194 
vÆ
 = 
tmp
;

195 
ªt
 = 
	`fdt_add_mem_rsv
(
blob_buf
, 
	`_ALIGN_DOWN
(
vÆ
, 
PAGE_SIZE
), PAGE_SIZE);

196 i‡(
ªt
)

197 
	`¥ötf
("%s: UnableÅoáddÑeserve for cpu-release-addr!\n",

198 
	`fdt_°ªº‹
(
ªt
));

202 
nodeoff£t
 = 
	`fdt_node_off£t_by_¥›_vÆue
(
blob_buf
,Çodeoffset,

207 
out
:

208 
	`¥öt_fdt_ª£rve_ªgi⁄s
(
blob_buf
);

209 
	}
}

211 
	$fixup_mem‹y
(
kexec_öfo
 *
öfo
, *
blob_buf
)

213 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

214 
nodeoff£t
, 
Àn
 = 0;

215 
u8
 
tmp
[16];

216 c⁄° *
addr˚Œ
, *
size˚Œ
;

218 
nodeoff£t
 = 
	`fdt_∑th_off£t
(
blob_buf
, "/memory");

220 i‡(
nodeoff£t
 < 0) {

221 
	`¥ötf
("Error searching for memoryÇode!\n");

225 
addr˚Œ
 = 
	`fdt_gë¥›
(
blob_buf
, 0, "#addªss-˚Œs", 
NULL
);

227 i‡((
addr˚Œ
) && (*addrcell == 2)) {

228 
tmp
[0] = (
¸ash_ba£
 >> 56) & 0xff;

229 
tmp
[1] = (
¸ash_ba£
 >> 48) & 0xff;

230 
tmp
[2] = (
¸ash_ba£
 >> 40) & 0xff;

231 
tmp
[3] = (
¸ash_ba£
 >> 32) & 0xff;

232 
tmp
[4] = (
¸ash_ba£
 >> 24) & 0xff;

233 
tmp
[5] = (
¸ash_ba£
 >> 16) & 0xff;

234 
tmp
[6] = (
¸ash_ba£
 >> 8) & 0xff;

235 
tmp
[7] = (
¸ash_ba£
 ) & 0xff;

236 
Àn
 = 8;

238 
tmp
[0] = (
¸ash_ba£
 >> 24) & 0xff;

239 
tmp
[1] = (
¸ash_ba£
 >> 16) & 0xff;

240 
tmp
[2] = (
¸ash_ba£
 >> 8) & 0xff;

241 
tmp
[3] = (
¸ash_ba£
 ) & 0xff;

242 
Àn
 = 4;

245 
size˚Œ
 = 
	`fdt_gë¥›
(
blob_buf
, 0, "#size-˚Œs", 
NULL
);

247 i‡((
size˚Œ
) && (*sizecell == 2)) {

248 
tmp
[0+
Àn
] = (
¸ash_size
 >> 56) & 0xff;

249 
tmp
[1+
Àn
] = (
¸ash_size
 >> 48) & 0xff;

250 
tmp
[2+
Àn
] = (
¸ash_size
 >> 40) & 0xff;

251 
tmp
[3+
Àn
] = (
¸ash_size
 >> 32) & 0xff;

252 
tmp
[4+
Àn
] = (
¸ash_size
 >> 24) & 0xff;

253 
tmp
[5+
Àn
] = (
¸ash_size
 >> 16) & 0xff;

254 
tmp
[6+
Àn
] = (
¸ash_size
 >> 8) & 0xff;

255 
tmp
[7+
Àn
] = (
¸ash_size
 ) & 0xff;

256 
Àn
 += 8;

258 
tmp
[0+
Àn
] = (
¸ash_size
 >> 24) & 0xff;

259 
tmp
[1+
Àn
] = (
¸ash_size
 >> 16) & 0xff;

260 
tmp
[2+
Àn
] = (
¸ash_size
 >> 8) & 0xff;

261 
tmp
[3+
Àn
] = (
¸ash_size
 ) & 0xff;

262 
Àn
 += 4;

265 i‡(
	`fdt_£çr›
(
blob_buf
, 
nodeoff£t
, "ªg", 
tmp
, 
Àn
) != 0) {

266 
	`¥ötf
 ("Error setting memoryÇode!\n");

269 
	`fdt_dñ¥›
(
blob_buf
, 
nodeoff£t
, "linux,usable-memory");

271 
	}
}

277 
	$fixup_¸ashkî√l
(
kexec_öfo
 *
öfo
, *
blob_buf
)

279 
nodeoff£t
;

281 
nodeoff£t
 = 
	`fdt_∑th_off£t
(
blob_buf
, "/chosen");

283 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

284 i‡(
nodeoff£t
 < 0) {

285 
	`¥ötf
("fdt_¸ashkî√l: %s\n", 
	`fdt_°ªº‹
(
nodeoff£t
));

289 
	`fdt_dñ¥›
(
blob_buf
, 
nodeoff£t
, "linux,crashkernel-base");

290 
	`fdt_dñ¥›
(
blob_buf
, 
nodeoff£t
, "linux,crashkernel-size");

292 
	}
}

296 
	$fixup_öôrd
(*
blob_buf
)

298 
îr
, 
nodeoff£t
;

299 
tmp
;

301 
nodeoff£t
 = 
	`fdt_∑th_off£t
(
blob_buf
, "/chosen");

303 i‡(
nodeoff£t
 < 0) {

304 
	`¥ötf
("fdt_öôrd: %s\n", 
	`fdt_°ªº‹
(
nodeoff£t
));

308 
	`fdt_dñ¥›
(
blob_buf
, 
nodeoff£t
, "linux,initrd-start");

309 
	`fdt_dñ¥›
(
blob_buf
, 
nodeoff£t
, "linux,initrd-end");

311 i‡((
ªu£_öôrd
 || 
ømdisk
) &&

312 ((
ømdisk_ba£
 !0Ë&& (
ømdisk_size
 != 0))) {

313 
tmp
 = 
ømdisk_ba£
;

314 
îr
 = 
	`fdt_£çr›
(
blob_buf
, 
nodeoff£t
,

315 "löux,öôrd-°¨t", &
tmp
, (tmp));

316 i‡(
îr
 < 0) {

317 
	`¥ötf
("WARNING: "

319 
	`fdt_°ªº‹
(
îr
));

323 
tmp
 = 
ømdisk_ba£
 + 
ømdisk_size
;

324 
îr
 = 
	`fdt_£çr›
(
blob_buf
, 
nodeoff£t
,

325 "löux,öôrd-íd", &
tmp
, (tmp));

326 i‡(
îr
 < 0) {

327 
	`¥ötf
("WARNING: couldÇot setÜinux,initrd-end %s.\n",

328 
	`fdt_°ªº‹
(
îr
));

332 
	}
}

334 *
	$fixup_dtb_öô
(
kexec_öfo
 *
öfo
, *
blob_buf
, 
off_t
 *
blob_size
,

335 
hﬁe_addr
, *
dtb_addr
)

337 
ªt
, 
i
, 
num
 = 
	`fdt_num_mem_rsv
(
blob_buf
);

339 
	`fdt_öô
(
blob_buf
);

343 
i
 = 
num
 - 1; i >= 0; i--) {

344 
ªt
 = 
	`fdt_dñ_mem_rsv
(
blob_buf
, 
i
);

345 i‡(
ªt
) {

346 
	`¥ötf
("%s: Error deleting memoryÑeserveÑegion %d from deviceÅree!\n",

347 
	`fdt_°ªº‹
(
ªt
), 
i
);

352 
ªt
 = 
	`fdt_∑ck
(
blob_buf
);

353 i‡(
ªt
)

354 
	`¥ötf
("%s: U«bÀÅÿ∑ck fœàdevi˚Åªe\n", 
	`fdt_°ªº‹
(
ªt
));

357 
blob_buf
 = 
	`ex∑nd_buf
(
öfo
->
ƒ_£gmíts
 * (
fdt_ª£rve_íåy
),

358 
blob_buf
, 
blob_size
);

361 *
dtb_addr
 = 
	`loˇã_hﬁe
(
öfo
, *
blob_size
, 0,

362 
hﬁe_addr
, hﬁe_addr+
KERNEL_ACCESS_TOP
, -1);

363 
ªt
 = 
	`fdt_add_mem_rsv
(
blob_buf
, *
dtb_addr
, 
	`PAGE_ALIGN
(*
blob_size
));

364 i‡(
ªt
) {

365 
	`¥ötf
("%s: UnableÅoáddÇewÑeserved memory forÅhe flat deviceÅree\n",

366 
	`fdt_°ªº‹
(
ªt
));

369  
blob_buf
;

370 
	}
}

372 
	$ßve_fixed_up_dtb
(*
blob_buf
, 
off_t
 
blob_size
)

374 
FILE
 *
Â
;

376 i‡(!
kexec_debug
)

378 
Â
 = 
	`f›í
("debug.dtb", "w");

379 i‡(
Â
) {

380 i‡–
blob_size
 =
	`fwrôe
(
blob_buf
, (), blob_size, 
Â
)) {

381 
	`dbg¥ötf
("debug.dtb written\n");

383 
	`dbg¥ötf
("UnableÅo write debug.dtb\n");

386 
	`dbg¥ötf
("UnableÅo dump flat deviceÅreeÅo debug.dtb\n");

388 
	}
}

390 *
	$fixup_dtb_föÆize
(
kexec_öfo
 *
öfo
, *
blob_buf
, 
off_t
 *
blob_size
,

391 *
nodes
[], *
cmdlöe
)

393 
	`fixup_nodes
(
nodes
);

394 
	`fixup_cmdlöe
(
cmdlöe
);

395 
	`fixup_ª£rve_ªgi⁄s
(
öfo
, 
blob_buf
);

396 
	`fixup_mem‹y
(
öfo
, 
blob_buf
);

397 
	`fixup_öôrd
(
blob_buf
);

398 
	`fixup_¸ashkî√l
(
öfo
, 
blob_buf
);

400 
blob_buf
 = (*)
dt_›s
.
	`föÆize
();

401 *
blob_size
 = 
	`fdt_tŸÆsize
(
blob_buf
);

403 
	`ßve_fixed_up_dtb
(
blob_buf
, *
blob_size
);

405  
blob_buf
;

406 
	}
}

	@kexec/arch/ppc/fixup_dtb.h

1 #i‚de‡
__FIXUP_DTB_H


2 
	#__FIXUP_DTB_H


	)

4 *
fixup_dtb_öô
(
kexec_öfo
 *
öfo
, *
blob_buf
, 
off_t
 *
blob_size
,

5 
hﬁe_addr
, *
dtb_addr
);

7 *
fixup_dtb_föÆize
(
kexec_öfo
 *
öfo
, *
blob_buf
, 
off_t
 *
blob_size
,

8 *
nodes
[], *
cmdlöe
);

	@kexec/arch/ppc/fs2dt.c

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

25 
	~<dúít.h
>

26 
	~<uni°d.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<î∫o.h
>

30 
	~<°dio.h
>

31 
	~"../../kexec.h
"

32 
	~"kexec-µc.h
"

34 
	#MAXPATH
 1024

	)

35 
	#NAMESPACE
 16384

	)

36 
	#TREEWORDS
 65536

	)

37 
	#MEMRESERVE
 256

	)

38 
	#MAX_MEMORY_RANGES
 1024

	)

39 
	#COMMAND_LINE_SIZE
 512

	)

41 
	g∑th«me
[
MAXPATH
];

42 
	g¥›«mes
[
NAMESPACE
] = { 0 };

43 
	gdt°ru˘
[
TREEWORDS
], *
	gdt
;

44 
	gmem_r§v
[2*
MEMRESERVE
] = { 0, 0 };

46 
	g¸ash_∑øm
;

47 
	gloˇl_cmdlöe
[
COMMAND_LINE_SIZE
] = { "" };

48 *
	gdt_Àn
;

50 
boŸblock
 
	gbb
[1];

52 
	$ª£rve
(
whîe
, 
Àngth
)

54 
size_t
 
off£t
;

56 
off£t
 = 0; 
mem_r§v
[offset + 1]; offset += 2)

59 i‡(
off£t
 + 4 >2 * 
MEMRESERVE
)

60 
	`dõ
("unrecoverableÉrror:ÉxhasutedÑeservation meta data\n");

62 
mem_r§v
[
off£t
] = 
whîe
;

63 
mem_r§v
[
off£t
 + 1] = 
Àngth
;

64 
mem_r§v
[
off£t
 + 3] = 0;

65 
	}
}

68 
	$check¥›
(*
«me
, *
d©a
, 
Àn
)

70 
ba£
, 
size
, 
íd
;

72 i‡((
d©a
 =
NULL
Ë&& (
ba£
 || 
size
 || 
íd
))

73 
	`dõ
("unrecoverableÉrror:ÇoÖroperty data");

74 i‡(!
	`°rcmp
(
«me
, "linux,rtas-base"))

75 
ba£
 = *
d©a
;

76 i‡(!
	`°rcmp
(
«me
, "linux,tce-base"))

77 
ba£
 = *(*Ë
d©a
;

78 i‡(!
	`°rcmp
(
«me
, "rtas-size") ||

79 !
	`°rcmp
(
«me
, "linux,tce-size"))

80 
size
 = *
d©a
;

81 i‡(
ªu£_öôrd
 && !
	`°rcmp
(
«me
, "linux,initrd-start"))

82 i‡(
Àn
 == 8)

83 
ba£
 = *(*Ë
d©a
;

85 
ba£
 = *
d©a
;

86 i‡(
ªu£_öôrd
 && !
	`°rcmp
(
«me
, "linux,initrd-end"))

87 
íd
 = *(*Ë
d©a
;

89 i‡(
size
 && 
íd
)

90 
	`dõ
("unrecoverableÉrror: sizeándÉnd setát sameÅime\n");

91 i‡(
ba£
 && 
size
) {

92 
	`ª£rve
(
ba£
, 
size
);

93 
ba£
 = 0;

94 
size
 = 0;

96 i‡(
ba£
 && 
íd
) {

97 
	`ª£rve
(
ba£
, 
íd
-base);

98 
ba£
 = 0;

99 
íd
 = 0;

101 
	}
}

107 
	$¥›num
(c⁄° *
«me
)

109 
off£t
 = 0;

111 
¥›«mes
[
off£t
])

112 i‡(
	`°rcmp
(
«me
, 
¥›«mes
+
off£t
))

113 
off£t
 +
	`°æí
(
¥›«mes
+offset)+1;

115  
off£t
;

117 i‡(
NAMESPACE
 - 
off£t
 < 
	`°æí
(
«me
) + 1)

118 
	`dõ
("unrecoverableÉrror:Öropnames overrun\n");

120 
	`°r˝y
(
¥›«mes
+
off£t
, 
«me
);

122  
off£t
;

123 
	}
}

125 
	$add_ußbÀ_mem_¥›îty
(
fd
, 
Àn
)

127 
‚ame
[
MAXPATH
], *
b«me
;

128 
buf
[2];

129 
ønges
[2*
MAX_MEMORY_RANGES
];

130 
ba£
, 
íd
, 
loc_ba£
, 
loc_íd
;

131 
ønge
, 
æí
 = 0;

133 
	`°r˝y
(
‚ame
, 
∑th«me
);

134 
b«me
 = 
	`°ºchr
(
‚ame
, '/');

135 
b«me
[0] = '\0';

136 
b«me
 = 
	`°ºchr
(
‚ame
, '/');

137 i‡(
	`°∫cmp
(
b«me
, "/mem‹y@", 8Ë&& 
	`°rcmp
(bname, "/memory"))

140 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) < 0)

141 
	`dõ
("unrecoverableÉrror:Érror seeking in \"%s\": %s\n",

142 
∑th«me
, 
	`°ªº‹
(
î∫o
));

143 i‡(
	`ªad_mem‹y_ªgi⁄_limôs
(
fd
, &
ba£
, &
íd
) != 0)

144 
	`dõ
("unrecoverableÉrror:ÉrrorÖarsing memory/regÜimits\n");

146 
ønge
 = 0;Ñ™gê< 
ußbÀmem_rgns
.
size
;Ñange++) {

147 
loc_ba£
 = 
ußbÀmem_rgns
.
ønges
[
ønge
].
°¨t
;

148 
loc_íd
 = 
ußbÀmem_rgns
.
ønges
[
ønge
].
íd
;

149 i‡(
loc_ba£
 >
ba£
 && 
loc_íd
 <
íd
) {

150 
ønges
[
æí
++] = 
loc_ba£
;

151 
ønges
[
æí
++] = 
loc_íd
 - 
loc_ba£
;

152 } i‡(
ba£
 < 
loc_íd
 && 
íd
 > 
loc_ba£
) {

153 i‡(
loc_ba£
 < 
ba£
)

154 
loc_ba£
 = 
ba£
;

155 i‡(
loc_íd
 > 
íd
)

156 
loc_íd
 = 
íd
;

157 
ønges
[
æí
++] = 
loc_ba£
;

158 
ønges
[
æí
++] = 
loc_íd
 - 
loc_ba£
;

162 i‡(!
æí
) {

168 
ønges
[
æí
++] = 0;

169 
ønges
[
æí
++] = 0;

172 
æí
 =Ñlen * ();

176 *
dt
++ = 3;

177 *
dt
++ = 
æí
;

178 *
dt
++ = 
	`¥›num
("linux,usable-memory");

179 
	`mem˝y
(
dt
, &
ønges
, 
æí
);

180 
dt
 +(
æí
 + 3)/4;

181 
	}
}

184 
	$puçr›s
(*
‚
, 
dúít
 **
∆i°
, 
numli°
)

186 
dúít
 *
dp
;

187 
i
 = 0, 
fd
, 
Àn
;

188 
°©
 
°©buf
;

190 
i
 = 0; i < 
numli°
; i++) {

191 
dp
 = 
∆i°
[
i
];

192 
	`°r˝y
(
‚
, 
dp
->
d_«me
);

194 i‡(!
	`°rcmp
(
dp
->
d_«me
, ".") || !strcmp(dp->d_name, ".."))

197 i‡(
	`l°©
(
∑th«me
, &
°©buf
))

198 
	`dõ
("unrecoverableÉrror: couldÇot stat \"%s\": %s\n",

199 
∑th«me
, 
	`°ªº‹
(
î∫o
));

201 i‡(!
¸ash_∑øm
 && !
	`°rcmp
(
‚
, "linux,crashkernel-base"))

204 i‡(!
¸ash_∑øm
 && !
	`°rcmp
(
‚
, "linux,crashkernel-size"))

211 i‡(!
	`°rcmp
(
dp
->
d_«me
, "linux,pci-domain") ||

212 !
	`°rcmp
(
dp
->
d_«me
, "linux,htab-base") ||

213 !
	`°rcmp
(
dp
->
d_«me
, "linux,htab-size") ||

214 !
	`°rcmp
(
dp
->
d_«me
, "linux,kernel-end") ||

215 !
	`°rcmp
(
dp
->
d_«me
, "linux,usable-memory"))

221 i‡((!
	`°rcmp
(
dp
->
d_«me
, "linux,initrd-start") ||

222 !
	`°rcmp
(
dp
->
d_«me
, "linux,initrd-end")) &&

223 !
ªu£_öôrd
)

226 i‡(!
	`S_ISREG
(
°©buf
.
°_mode
))

229 
Àn
 = 
°©buf
.
°_size
;

231 *
dt
++ = 3;

232 
dt_Àn
 = 
dt
;

233 *
dt
++ = 
Àn
;

234 *
dt
++ = 
	`¥›num
(
‚
);

236 
fd
 = 
	`›í
(
∑th«me
, 
O_RDONLY
);

237 i‡(
fd
 == -1)

238 
	`dõ
("unrecoverableÉrror: couldÇot open \"%s\": %s\n",

239 
∑th«me
, 
	`°ªº‹
(
î∫o
));

241 i‡(
	`ªad
(
fd
, 
dt
, 
Àn
) !=Üen)

242 
	`dõ
("unrecoverableÉrror: couldÇotÑead \"%s\": %s\n",

243 
∑th«me
, 
	`°ªº‹
(
î∫o
));

245 
	`check¥›
(
‚
, 
dt
, 
Àn
);

248 i‡(!
	`°rcmp
(
dp
->
d_«me
, "bootargs")) {

249 
cmd_Àn
;

250 
ãmp_cmdlöe
[
COMMAND_LINE_SIZE
] = { "" };

251 *
∑øm
 = 
NULL
;

252 
cmd_Àn
 = 
	`°æí
(
loˇl_cmdlöe
);

253 i‡(
cmd_Àn
 != 0) {

254 
∑øm
 = 
	`°r°r
(
loˇl_cmdlöe
, "crashkernel=");

255 i‡(
∑øm
)

256 
¸ash_∑øm
 = 1;

257 
∑øm
 = 
	`°r°r
(
loˇl_cmdlöe
, "root=");

259 i‡(!
∑øm
) {

260 *
ﬁd_∑øm
;

261 
	`mem˝y
(
ãmp_cmdlöe
, 
dt
, 
Àn
);

262 
∑øm
 = 
	`°r°r
(
ãmp_cmdlöe
, "root=");

263 i‡(
∑øm
) {

264 
ﬁd_∑øm
 = 
	`°πok
(
∑øm
, " ");

265 i‡(
cmd_Àn
 != 0)

266 
	`°rˇt
(
loˇl_cmdlöe
, " ");

267 
	`°rˇt
(
loˇl_cmdlöe
, 
ﬁd_∑øm
);

270 
	`°rˇt
(
loˇl_cmdlöe
, " ");

271 
cmd_Àn
 = 
	`°æí
(
loˇl_cmdlöe
);

272 
cmd_Àn
 = cmd_len + 1;

273 
	`mem˝y
(
dt
, 
loˇl_cmdlöe
, 
cmd_Àn
);

274 
Àn
 = 
cmd_Àn
;

275 *
dt_Àn
 = 
cmd_Àn
;

277 
	`dbg¥ötf
("Modifõd cmdlöe:%s\n", 
loˇl_cmdlöe
);

281 
dt
 +(
Àn
 + 3)/4;

282 i‡(!
	`°rcmp
(
dp
->
d_«me
, "ªg"Ë&& 
ußbÀmem_rgns
.
size
)

283 
	`add_ußbÀ_mem_¥›îty
(
fd
, 
Àn
);

284 
	`˛o£
(
fd
);

287 
‚
[0] = '\0';

288 
	`check¥›
(
∑th«me
, 
NULL
, 0);

289 
	}
}

295 
	$com∑ªfunc
(c⁄° *
díåy1
, c⁄° *
díåy2
)

297 *
°r1
 = (*(
dúít
 **)
díåy1
)->
d_«me
;

298 *
°r2
 = (*(
dúít
 **)
díåy2
)->
d_«me
;

306 i‡(
	`°rchr
(
°r1
, '@'Ë&& såchr(
°r2
, '@') &&

307 (
	`°æí
(
°r1
Ë> såÀn(
°r2
)))

310  
	`°rcmp
(
°r1
, 
°r2
);

311 
	}
}

317 
	$puäode
()

319 *
dn
;

320 
dúít
 *
dp
;

321 *
ba£«me
;

322 
dúít
 **
«mñi°
;

323 
numli°
, 
i
;

324 
°©
 
°©buf
;

326 
numli°
 = 
	`sˇndú
(
∑th«me
, &
«mñi°
, 0, 
com∑ªfunc
);

327 i‡(
numli°
 < 0)

328 
	`dõ
("unrecoverableÉrror: couldÇot scan \"%s\": %s\n",

329 
∑th«me
, 
	`°ªº‹
(
î∫o
));

330 i‡(
numli°
 == 0)

331 
	`dõ
("unrecoverableÉrror:Ço directoryÉntries in \"%s\"",

332 
∑th«me
);

334 
ba£«me
 = 
	`°ºchr
(
∑th«me
, '/') + 1;

336 *
dt
++ = 1;

337 
	`°r˝y
((*)
dt
, *
ba£«me
 ? basename : "");

338 
dt
 +
	`°æí
((*)dt) / () + 1;

340 
	`°rˇt
(
∑th«me
, "/");

341 
dn
 = 
∑th«me
 + 
	`°æí
(pathname);

343 
	`puçr›s
(
dn
, 
«mñi°
, 
numli°
);

354 i‡((
ømdisk
 || (
öôrd_ba£
 && 
ªu£_öôrd
))

355 && !
	`°rcmp
(
ba£«me
, "chosen/")) {

356 
Àn
 = 8;

357 
öôrd_íd
;

358 *
dt
++ = 3;

359 *
dt
++ = 
Àn
;

360 *
dt
++ = 
	`¥›num
("linux,initrd-start");

362 
	`mem˝y
(
dt
, &
öôrd_ba£
, 
Àn
);

363 
dt
 +(
Àn
 + 3)/4;

365 
Àn
 = 8;

366 *
dt
++ = 3;

367 *
dt
++ = 
Àn
;

368 *
dt
++ = 
	`¥›num
("linux,initrd-end");

370 
öôrd_íd
 = 
öôrd_ba£
 + 
öôrd_size
;

372 
	`mem˝y
(
dt
, &
öôrd_íd
, 
Àn
);

373 
dt
 +(
Àn
 + 3)/4;

375 i‡(
öôrd_ba£
 && 
öôrd_size
 && 
ªu£_öôrd
)

376 
	`ª£rve
(
öôrd_ba£
, 
öôrd_size
);

379 
i
 = 0; i < 
numli°
; i++) {

380 
dp
 = 
«mñi°
[
i
];

381 
	`°r˝y
(
dn
, 
dp
->
d_«me
);

382 
	`‰ì
(
«mñi°
[
i
]);

384 i‡(!
	`°rcmp
(
dn
, ".") || !strcmp(dn, ".."))

387 i‡(
	`l°©
(
∑th«me
, &
°©buf
))

388 
	`dõ
("unrecoverableÉrror: couldÇot stat \"%s\": %s\n",

389 
∑th«me
, 
	`°ªº‹
(
î∫o
));

391 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
))

392 
	`puäode
();

395 *
dt
++ = 2;

396 
dn
[-1] = '\0';

397 
	`‰ì
(
«mñi°
);

398 
	}
}

400 
	$¸óã_Ê©ãn_åì
(
kexec_öfo
 *
öfo
, **
buÂ
,

401 *
sizï
, *
cmdlöe
)

403 
Àn
;

404 
éí
;

405 *
buf
;

406 
me
;

408 
me
 = 0;

410 
	`°r˝y
(
∑th«me
, "/proc/device-tree/");

412 
dt
 = 
dt°ru˘
;

414 i‡(
cmdlöe
)

415 
	`°r˝y
(
loˇl_cmdlöe
, 
cmdlöe
);

417 
	`puäode
();

418 *
dt
++ = 9;

420 
Àn
 = 
	`_ALIGN
((
bb
[0]), 8);

422 
bb
->
off_mem_rsvm≠
 = 
Àn
;

424 
Àn
 = 1; 
mem_r§v
[len];Üen += 2)

426 
Àn
 += 3;

427 
Àn
 *(
mem_r§v
[0]);

429 
bb
->
off_dt_°ru˘
 = bb->
off_mem_rsvm≠
 + 
Àn
;

431 
Àn
 = 
dt
 - 
dt°ru˘
;

432 
Àn
 *= ();

433 
bb
->
dt_°ru˘_size
 = 
Àn
;

434 
bb
->
off_dt_°rögs
 = bb->
off_dt_°ru˘
 + 
Àn
;

436 
Àn
 = 
	`¥›num
("");

437 
bb
->
dt_°rögs_size
 = 
Àn
;

438 
Àn
 = 
	`_ALIGN
(len, 4);

439 
bb
->
tŸÆsize
 = bb->
off_dt_°rögs
 + 
Àn
;

441 
bb
->
magic
 = 0xd00dfeed;

442 
bb
->
vîsi⁄
 = 17;

443 
bb
->
œ°_comp_vîsi⁄
 = 16;

445 
	`ª£rve
(
me
, 
bb
->
tŸÆsize
);

447 
buf
 = (*Ë
	`mÆloc
(
bb
->
tŸÆsize
);

448 *
buÂ
 = 
buf
;

449 
	`mem˝y
(
buf
, 
bb
, bb->
off_mem_rsvm≠
);

450 
éí
 = 
bb
->
off_mem_rsvm≠
;

451 
	`mem˝y
(
buf
+
éí
, 
mem_r§v
, 
bb
->
off_dt_°ru˘
 - bb->
off_mem_rsvm≠
);

452 
éí
 =ÅÀ¿+ (
bb
->
off_dt_°ru˘
 - bb->
off_mem_rsvm≠
);

453 
	`mem˝y
(
buf
+
éí
, 
dt°ru˘
, 
bb
->
off_dt_°rögs
 - bb->
off_dt_°ru˘
);

454 
éí
 =ÅÀ¿+ (
bb
->
off_dt_°rögs
 - bb->
off_dt_°ru˘
);

455 
	`mem˝y
(
buf
+
éí
, 
¥›«mes
, 
bb
->
tŸÆsize
 - bb->
off_dt_°rögs
);

456 
éí
 =ÅÀ¿+ 
bb
->
tŸÆsize
 - bb->
off_dt_°rögs
;

457 *
sizï
 = 
éí
;

459 
	}
}

	@kexec/arch/ppc/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_PPC_OPTIONS_H


2 
	#KEXEC_ARCH_PPC_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

7 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

8 
	#OPT_GAMECUBE
 (
OPT_ARCH_MAX
+1)

	)

9 
	#OPT_DTB
 (
OPT_ARCH_MAX
+2)

	)

10 
	#OPT_NODES
 (
OPT_ARCH_MAX
+3)

	)

11 
	#OPT_RAMDISK
 (
OPT_ARCH_MAX
+4)

	)

16 
	#KEXEC_ARCH_OPTIONS
 \

17 
KEXEC_OPTIONS
 \

18 

	)

19 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

35 
	#KEXEC_ALL_OPTIONS
 \

36 
KEXEC_ARCH_OPTIONS
 \

37 {"comm™d-löe", 1, 0, 
OPT_APPEND
},\

38 {"≠≥nd", 1, 0, 
OPT_APPEND
},\

39 {"ømdisk", 1, 0, 
OPT_APPEND
},\

40 {"öôrd", 1, 0, 
OPT_APPEND
},\

41 {"gamecube", 1, 0, 
OPT_GAMECUBE
},\

42 {"dtb", 1, 0, 
OPT_DTB
},\

43 {"ªu£-node", 1, 0, 
OPT_NODES
},

	)

45 
	#KEXEC_ALL_OPT_STR
 
KEXEC_OPT_STR


	)

	@kexec/arch/ppc/include/page.h

1 #i‚de‡
_PPC_BOOT_PAGE_H


2 
	#_PPC_BOOT_PAGE_H


	)

12 #ifde‡
__ASSEMBLY__


13 
	#ASM_CONST
(
x
Ë
	)
x

15 
	#__ASM_CONST
(
x
Ëx##
UL


	)

16 
	#ASM_CONST
(
x
Ë
	`__ASM_CONST
(x)

	)

20 
	#PAGE_SHIFT
 12

	)

21 
	#PAGE_SIZE
 (
	`ASM_CONST
(1Ë<< 
PAGE_SHIFT
)

	)

22 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

25 
	#PAGE_ALIGN
(
addr
Ë((◊ddr)+((
PAGE_SIZE
)-1))&(~((PAGE_SIZE)-1)))

	)

	@kexec/arch/ppc/include/types.h

1 #i‚de‡
_TYPES_H_


2 
	#_TYPES_H_


	)

4 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

6 
	tu8
;

7 
	tu16
;

8 
	tu32
;

9 
	tu64
;

10 sig√d 
	ts8
;

11 
	ts16
;

12 
	ts32
;

13 
	ts64
;

15 
	#mö
(
x
,
y
) ({ \

16 
	`ty≥of
(
x
Ë
_x
 = (x); \

17 
	`ty≥of
(
y
Ë
_y
 = (y); \

18 (Ë(&
_x
 =&
_y
); \

19 
_x
 < 
_y
 ? _x : _y; })

	)

21 
	#max
(
x
,
y
) ({ \

22 
	`ty≥of
(
x
Ë
_x
 = (x); \

23 
	`ty≥of
(
y
Ë
_y
 = (y); \

24 (Ë(&
_x
 =&
_y
); \

25 
_x
 > 
_y
 ? _x : _y; })

	)

	@kexec/arch/ppc/kexec-dol-ppc.c

9 
	#_GNU_SOURCE


	)

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<î∫o.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<f˙é.h
>

17 
	~<uni°d.h
>

18 
	~<gë›t.h
>

19 
	~<ñf.h
>

20 
	~<boŸ/ñf_boŸ.h
>

21 
	~<ù_checksum.h
>

22 
	~"../../kexec.h
"

23 
	~"kexec-µc.h
"

24 
	~<¨ch/›ti⁄s.h
>

26 
	gdebug
 = 0;

39 
	#DOL_HEADER_SIZE
 0x100

	)

41 
	#DOL_SECT_MAX_TEXT
 7

	)

42 
	#DOL_SECT_MAX_DATA
 11

	)

43 
	#DOL_MAX_SECT
 (
DOL_SECT_MAX_TEXT
+
DOL_SECT_MAX_DATA
)

	)

47 
uöt32_t
 
	moff£t_ãxt
[
DOL_SECT_MAX_TEXT
];

48 
uöt32_t
 
	moff£t_d©a
[
DOL_SECT_MAX_DATA
];

49 
uöt32_t
 
	maddªss_ãxt
[
DOL_SECT_MAX_TEXT
];

50 
uöt32_t
 
	maddªss_d©a
[
DOL_SECT_MAX_DATA
];

51 
uöt32_t
 
	msize_ãxt
[
DOL_SECT_MAX_TEXT
];

52 
uöt32_t
 
	msize_d©a
[
DOL_SECT_MAX_DATA
];

53 
uöt32_t
 
	maddªss_bss
;

54 
uöt32_t
 
	msize_bss
;

55 
uöt32_t
 
	míåy_poöt
;

56 } 
	tdﬁ_hódî
;

58 
	#dﬁ_£˘_off£t
(
h±r
, 
ödex
) \

59 ((
ödex
 >
DOL_SECT_MAX_TEXT
)? \

60 
h±r
->
off£t_d©a
[
ödex
 - 
DOL_SECT_MAX_TEXT
] \

61 :
h±r
->
off£t_ãxt
[
ödex
])

	)

62 
	#dﬁ_£˘_addªss
(
h±r
, 
ödex
) \

63 ((
ödex
 >
DOL_SECT_MAX_TEXT
)? \

64 
h±r
->
addªss_d©a
[
ödex
 - 
DOL_SECT_MAX_TEXT
] \

65 :
h±r
->
addªss_ãxt
[
ödex
])

	)

66 
	#dﬁ_£˘_size
(
h±r
, 
ödex
) \

67 ((
ödex
 >
DOL_SECT_MAX_TEXT
)? \

68 
h±r
->
size_d©a
[
ödex
 - 
DOL_SECT_MAX_TEXT
] \

69 :
h±r
->
size_ãxt
[
ödex
])

	)

70 
	#dﬁ_£˘_ty≥
(
ödex
) \

71 ((
ödex
 >
DOL_SECT_MAX_TEXT
Ë? "d©a" : "ãxt")

	)

74 
uöt32_t
 
	m£˘s_bôm≠
;

75 
uöt32_t
 
	m°¨t
;

76 
uöt32_t
 
	msize
;

77 } 
	tdﬁ_£gmít
;

79 
	#dﬁ_£g_íd
(
s1
) \

80 (
s1
->
°¨t
 + s1->
size
)

	)

81 
	#dﬁ_£g_a·î_£˘
(
s1
, 
s2
) \

82 (
s1
->
°¨t
 >
	`dﬁ_£g_íd
(
s2
))

	)

83 
	#dﬁ_£g_ovîœps
(
s1
, 
s2
) \

84 (!(
	`dﬁ_£g_a·î_£˘
(
s1
,
s2
Ë|| dﬁ_£g_a·î_£˘(s2,s1)))

	)

87 
	#PAGE_SHIFT
 12

	)

88 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

89 
	#PAGE_MASK
 (~((1 << 
PAGE_SHIFT
Ë- 1))

	)

90 
	#PAGE_ALIGN
(
addr
Ë
	`_ALIGN
◊ddr, 
PAGE_SIZE
)

	)

92 
	#MAX_COMMAND_LINE
 256

	)

94 
	#UPSZ
(
X
Ë
	`_ALIGN_UP
((X), 4)

	)

95 
	sboŸ_nŸes
 {

96 
Elf_Bhdr
 
	mhdr
;

97 
Elf_Nhdr
 
	mbl_hdr
;

98 
	mbl_desc
[
UPSZ
(
BOOTLOADER
)];

99 
Elf_Nhdr
 
	mblv_hdr
;

100 
	mblv_desc
[
UPSZ
(
BOOTLOADER_VERSION
)];

101 
Elf_Nhdr
 
	mcmd_hdr
;

102 
	mcomm™d_löe
[0];

103 } 
	gñf_boŸ_nŸes
 = {

104 .
hdr
 = {

105 .
b_sig«tuª
 = 0x0E1FB007,

106 .
	gb_size
 = (
ñf_boŸ_nŸes
),

107 .
	gb_checksum
 = 0,

108 .
	gb_ªc‹ds
 = 3,

110 .
	gbl_hdr
 = {

111 .
n_«mesz
 = 0,

112 .
	gn_descsz
 = (
BOOTLOADER
),

113 .
	gn_ty≥
 = 
EBN_BOOTLOADER_NAME
,

115 .
	gbl_desc
 = 
BOOTLOADER
,

116 .
	gblv_hdr
 = {

117 .
n_«mesz
 = 0,

118 .
	gn_descsz
 = (
BOOTLOADER_VERSION
),

119 .
	gn_ty≥
 = 
EBN_BOOTLOADER_VERSION
,

121 .
	gblv_desc
 = 
BOOTLOADER_VERSION
,

122 .
	gcmd_hdr
 = {

123 .
n_«mesz
 = 0,

124 .
	gn_descsz
 = 0,

125 .
	gn_ty≥
 = 
EBN_COMMAND_LINE
,

129 
	$¥öt_£˘s_bôm≠
(
dﬁ_£gmít
 * 
£g
)

131 
i
, 
fú°_£í
;

133 
	`¥ötf
("\t" "sects_bitmap");

134 
fú°_£í
 = 0;

135 
i
 = 0; i < 
DOL_MAX_SECT
; i++) {

136 i‡((
£g
->
£˘s_bôm≠
 & (1 << 
i
)) == 0)

138 
	`¥ötf
("%c%d", (
fú°_£í
 ? ',' : '='), 
i
);

139 
fú°_£í
 = 1;

141 
	`¥ötf
("\n");

142 
	}
}

144 
	$¥öt_dﬁ_£gmít
(
dﬁ_£gmít
 * 
£g
)

146 
	`¥ötf
("dol segment:\n");

147 
	`¥ötf
("\t" "start=%08lx, size=%ld (%08lx)\n",

148 ()
£g
->
°¨t
, ()£g->
size
,

149 ()
£g
->
size
);

150 
	`¥ötf
("\t" "íd=%08lx\n", ()
	`dﬁ_£g_íd
(
£g
));

151 
	`¥öt_£˘s_bôm≠
(
£g
);

152 
	}
}

154 
	$lﬂd_dﬁ_£gmíts
(
dﬁ_£gmít
 * 
£g
, 
max_£gs
, 
dﬁ_hódî
 * 
h
)

156 
i
, 
n
, 
ªmaöög
;

157 
°¨t
, 
size
;

158 
adj1
, 
adj2
, 
íd1
;

160 
n
 = 0;

161 
ªmaöög
 = 
max_£gs
;

162 
i
 = 0; i < 
DOL_MAX_SECT
 && 
ªmaöög
 > 0; i++) {

164 i‡(
	`dﬁ_£˘_size
(
h
, 
i
) == 0)

168 
£g
->
£˘s_bôm≠
 = (1 << 
i
);

170 
°¨t
 = 
	`dﬁ_£˘_addªss
(
h
, 
i
);

171 
size
 = 
	`dﬁ_£˘_size
(
h
, 
i
);

174 
£g
->
°¨t
 = sèπ & 
PAGE_MASK
;

175 
íd1
 = 
°¨t
 + 
size
;

176 
adj1
 = 
°¨t
 - 
£g
->start;

177 
adj2
 = 
	`PAGE_ALIGN
(
íd1
) -Énd1;

178 
£g
->
size
 = 
adj1
 + sizê+ 
adj2
;

182 
£g
++;

183 
ªmaöög
--;

184 
n
++;

186  
n
;

187 
	}
}

189 
	$fix_dﬁ_£gmíts_ovîœps
(
dﬁ_£gmít
 * 
£g
, 
max_£gs
)

191 
i
, 
j
;

192 
dﬁ_£gmít
 *
p
, *
µ
;

193 
exåa_Àngth
;

196 
i
 = 0; i < 
max_£gs
; i++) {

197 
p
 = 
£g
 + 
i
;

200 i‡(
p
->
size
 == 0)

204 
j
 = 0; j < 
i
; j++) {

205 
µ
 = 
£g
 + 
j
;

208 i‡(
µ
->
size
 =0 || !
	`dﬁ_£g_ovîœps
(
p
,Öp))

212 i‡(
µ
->
°¨t
 < 
p
->start) {

214 
exåa_Àngth
 = 
	`dﬁ_£g_íd
(
p
Ë- dﬁ_£g_íd(
µ
);

215 i‡(
exåa_Àngth
 > 0) {

216 
µ
->
size
 +
exåa_Àngth
;

218 
µ
->
£˘s_bôm≠
 |
p
->sects_bitmap;

219 
p
->
size
 =Ö->
°¨t
 =Ö->
£˘s_bôm≠
 = 0;

222 
i
 = 0;

226 
exåa_Àngth
 = 
	`dﬁ_£g_íd
(
µ
Ë- dﬁ_£g_íd(
p
);

227 i‡(
exåa_Àngth
 > 0) {

228 
p
->
size
 +
exåa_Àngth
;

230 
p
->
£˘s_bôm≠
 |
µ
->sects_bitmap;

231 
µ
->
size
 =Öp->
°¨t
 =Öp->
£˘s_bôm≠
 = 0;

235 
	}
}

237 
	$dﬁ_µc_¥obe
(c⁄° *
buf
, 
off_t
 
dﬁ_Àngth
)

239 
dﬁ_hódî
 
hódî
, *
h
;

240 
i
, 
vÆid
 = 0;

243 i‡(
dﬁ_Àngth
 < 
DOL_HEADER_SIZE
) {

244 i‡(
debug
) {

245 
	`Ârötf
(
°dîr
, "Notá DOL file,Åoo short.\n");

251 
	`mem˝y
(&
hódî
, 
buf
, (header));

252 
h
 = &
hódî
;

255 
i
 = 0; i < 
DOL_MAX_SECT
; i++) {

257 i‡((
	`dﬁ_£˘_off£t
(
h
, 
i
) != 0)

258 && (
	`dﬁ_£˘_off£t
(
h
, 
i
Ë< 
DOL_HEADER_SIZE
)) {

259 i‡(
debug
) {

260 
	`Ârötf
(
°dîr
,

262 
	`dﬁ_£˘_ty≥
(
i
));

268 i‡((
uötmax_t
)(
	`dﬁ_£˘_off£t
(
h
, 
i
Ë+ 
	`dﬁ_£˘_size
(h, i)) >

269 (
uötmax_t
)
dﬁ_Àngth
) {

270 i‡(
debug
) {

271 
	`Ârötf
(
°dîr
,

273 
	`dﬁ_£˘_ty≥
(
i
));

279 i‡(
	`dﬁ_£˘_addªss
(
h
, 
i
) != 0

280 && !(
	`dﬁ_£˘_addªss
(
h
, 
i
) & 0x80000000)) {

281 
	`Ârötf
(
°dîr
, "warning, %s segment below 2GB\n",

282 
	`dﬁ_£˘_ty≥
(
i
));

285 i‡(
i
 < 
DOL_SECT_MAX_TEXT
) {

287 i‡(
h
->
íåy_poöt
 >
	`dﬁ_£˘_addªss
(h, 
i
)

288 && 
h
->
íåy_poöt
 < 
	`dﬁ_£˘_addªss
(h, 
i
) +

289 
	`dﬁ_£˘_size
(
h
, 
i
))

290 
vÆid
 = 1;

295 i‡(
h
->
addªss_bss
 != 0 && !(h->address_bss & 0x80000000)) {

296 
	`Ârötf
(
°dîr
, "warning, BSS segment below 2GB\n");

300 i‡(!
vÆid
) {

301 i‡(
debug
) {

302 
	`Ârötf
(
°dîr
, "EntryÖoint out ofÅext segment\n");

309 
	}
}

311 
	$dﬁ_µc_ußge
()

313 
¥ötf


317 
	}
}

319 
dﬁ_µc_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
UNUSED
(
Àn
),

320 
kexec_öfo
 *
öfo
)

322 
dﬁ_hódî
 
	ghódî
, *
	gh
;

323 
	gíåy
;

324 *
	g¨g_buf
;

325 
size_t
 
	g¨g_byãs
;

326 
	g¨g_ba£
;

327 
boŸ_nŸes
 *
	gnŸes
;

328 
size_t
 
	gnŸe_byãs
;

329 c⁄° *
	gcomm™d_löe
;

330 
	gcomm™d_löe_Àn
;

331 
	gm°¨t
;

332 
dﬁ_£gmít
 
	gdﬁ_£gs
[
DOL_MAX_SECT
];

333 
	g£˘s_bôm≠
;

334 
	glowe°_°¨t
;

335 
	gi
, 
	gj
, 
	gk
;

336 
	g›t
;

339 c⁄° 
›ti⁄
 
	g›ti⁄s
[] = {

340 
KEXEC_ARCH_OPTIONS


341 {"comm™d-löe", 1, 0, 
OPT_APPEND
},

342 {"≠≥nd", 1, 0, 
OPT_APPEND
},

345 c⁄° 
	gsh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
;

350 
	gcomm™d_löe
 = 0;

351 (
	g›t
 = 
gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

352 
›t
) {

355 i‡(
›t
 < 
OPT_ARCH_MAX
) {

358 
	gOPT_APPEND
:

359 
comm™d_löe
 = 
›èrg
;

363 
	gcomm™d_löe_Àn
 = 0;

364 i‡(
	gcomm™d_löe
) {

365 
	gcomm™d_löe_Àn
 = 
°æí
(
comm™d_löe
) + 1;

369 
mem˝y
(&
hódî
, 
buf
, (header));

370 
	gh
 = &
hódî
;

373 
	gíåy
 = 
h
->
íåy_poöt
;

376 
mem£t
(
dﬁ_£gs
, 0, (dol_segs));

378 
lﬂd_dﬁ_£gmíts
(
dﬁ_£gs
, 
DOL_MAX_SECT
, 
h
);

379 
fix_dﬁ_£gmíts_ovîœps
(
dﬁ_£gs
, 
DOL_MAX_SECT
);

382 
	gi
 = 0; i < 
	gDOL_MAX_SECT
; i++) {

383 *
	g£g_buf
;

385 i‡(
	gdﬁ_£gs
[
i
].
	gsize
 == 0)

391 
	g£g_buf
 = 
xmÆloc
(
dﬁ_£gs
[
i
].
size
);

392 
	gm°¨t
 = 
dﬁ_£gs
[
i
].
°¨t
;

393 i‡(
	gm°¨t
 & 0xf0000000) {

404 
	gm°¨t
 &= ~0xf0000000;

406 
add_£gmít
(
öfo
,

407 
£g_buf
, 
dﬁ_£gs
[
i
].
size
,

408 
m°¨t
, 
dﬁ_£gs
[
i
].
size
);

412 
	g£˘s_bôm≠
 = 0;

413 
	g£˘s_bôm≠
 !
dﬁ_£gs
[
i
].
£˘s_bôm≠
) {

414 *
£c_buf
;

416 
	glowe°_°¨t
 = 0xffffffff;

417 
	gj
 = -1, 
	gk
 = 0; k < 
	gDOL_MAX_SECT
; k++) {

419 i‡((
	g£˘s_bôm≠
 & (1 << 
	gk
)) != 0)

422 i‡((
	gdﬁ_£gs
[
i
].
	g£˘s_bôm≠
 & (1 << 
	gk
)) == 0)

425 i‡(
dﬁ_£˘_addªss
(
h
, 
k
Ë< 
	glowe°_°¨t
) {

426 
	glowe°_°¨t
 = 
dﬁ_£˘_addªss
(
h
, 
k
);

427 
	gj
 = 
k
;

431 
	g£˘s_bôm≠
 |(1 << 
j
);

434 
	g£c_buf
 = 
£g_buf
 +

435 (
dﬁ_£˘_addªss
(
h
, 
j
Ë- 
	gdﬁ_£gs
[
i
].
	g°¨t
);

436 
mem˝y
(
£c_buf
, 
buf
 + 
dﬁ_£˘_off£t
(
h
, 
j
),

437 
dﬁ_£˘_size
(
h
, 
j
));

442 
	gnŸe_byãs
 = (
ñf_boŸ_nŸes
Ë+ 
_ALIGN
(
comm™d_löe_Àn
, 4);

443 
	g¨g_byãs
 = 
nŸe_byãs
 + 
_ALIGN
(
£tup_dﬁ_size
, 4);

445 
	g¨g_buf
 = 
xmÆloc
(
¨g_byãs
);

446 
	g¨g_ba£
 = 
add_buf„r
(
öfo
,

447 
¨g_buf
, 
¨g_byãs
,árg_bytes, 4, 0, 0xFFFFFFFFUL, 1);

449 
	gnŸes
 = (
boŸ_nŸes
 *)(
¨g_buf
 + 
_ALIGN
(
£tup_dﬁ_size
, 4));

451 
	gnŸes
->
	ghdr
.
	gb_size
 = 
nŸe_byãs
;

452 
	gnŸes
->
	gcmd_hdr
.
	gn_descsz
 = 
comm™d_löe_Àn
;

453 
	gnŸes
->
	ghdr
.
	gb_checksum
 = 
compuã_ù_checksum
(
nŸes
, 
nŸe_byãs
);

455 
	g£tup_dﬁ_ªgs
.
	g•r8
 = 
íåy
;

457 
mem˝y
(
¨g_buf
, 
£tup_dﬁ_°¨t
, 
£tup_dﬁ_size
);

458 
mem˝y
(
nŸes
, &
ñf_boŸ_nŸes
, (elf_boot_notes));

459 
mem˝y
(
nŸes
->
comm™d_löe
, comm™d_löe, 
comm™d_löe_Àn
);

461 i‡(
	gdebug
) {

462 
Ârötf
(
°dout
, "íåy = %p\n", (*)
¨g_ba£
);

463 
¥öt_£gmíts
(
°dout
, 
öfo
);

466 
	göfo
->
	gíåy
 = (*)
¨g_ba£
;

	@kexec/arch/ppc/kexec-elf-ppc.c

9 
	#_GNU_SOURCE


	)

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<î∫o.h
>

14 
	~<limôs.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<uni°d.h
>

19 
	~<gë›t.h
>

20 
	~<ñf.h
>

21 
	~<boŸ/ñf_boŸ.h
>

22 
	~<ù_checksum.h
>

23 
	~"../../kexec.h
"

24 
	~"../../kexec-ñf.h
"

25 
	~"kexec-µc.h
"

26 
	~<¨ch/›ti⁄s.h
>

27 
	~"../../kexec-sysˇŒ.h
"

28 
	~"¸ashdump-powîpc.h
"

30 
	~"c⁄fig.h
"

31 
	~"fixup_dtb.h
"

33 c⁄° 
	g¥obe_debug
 = 0;

35 
	gªu£_öôrd
;

36 c⁄° *
	gømdisk
;

37 
¸óã_Ê©ãn_åì
(
kexec_öfo
 *, **, *,

40 
	#UPSZ
(
X
Ë
	`_ALIGN_UP
((X), 4);

	)

41 #ifde‡
WITH_GAMECUBE


42 
	sboŸ_nŸes
 {

43 
Elf_Bhdr
 
	mhdr
;

44 
Elf_Nhdr
 
	mbl_hdr
;

45 
	mbl_desc
[
UPSZ
(
BOOTLOADER
)];

46 
Elf_Nhdr
 
	mblv_hdr
;

47 
	mblv_desc
[
UPSZ
(
BOOTLOADER_VERSION
)];

48 
Elf_Nhdr
 
	mcmd_hdr
;

49 
	mcomm™d_löe
[0];

50 } 
	gñf_boŸ_nŸes
 = {

51 .
hdr
 = {

52 .
b_sig«tuª
 = 0x0E1FB007,

53 .
	gb_size
 = (
ñf_boŸ_nŸes
),

54 .
	gb_checksum
 = 0,

55 .
	gb_ªc‹ds
 = 3,

57 .
	gbl_hdr
 = {

58 .
n_«mesz
 = 0,

59 .
	gn_descsz
 = (
BOOTLOADER
),

60 .
	gn_ty≥
 = 
EBN_BOOTLOADER_NAME
,

62 .
	gbl_desc
 = 
BOOTLOADER
,

63 .
	gblv_hdr
 = {

64 .
n_«mesz
 = 0,

65 .
	gn_descsz
 = (
BOOTLOADER_VERSION
),

66 .
	gn_ty≥
 = 
EBN_BOOTLOADER_VERSION
,

68 .
	gblv_desc
 = 
BOOTLOADER_VERSION
,

69 .
	gcmd_hdr
 = {

70 .
n_«mesz
 = 0,

71 .
	gn_descsz
 = 0,

72 .
	gn_ty≥
 = 
EBN_COMMAND_LINE
,

77 
	$ñf_µc_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

80 
mem_ehdr
 
ehdr
;

81 
ªsu…
;

82 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

83 i‡(
ªsu…
 < 0) {

84 
out
;

88 i‡(
ehdr
.
e_machöe
 !
EM_PPC
) {

90 i‡(
¥obe_debug
) {

91 
	`Ârötf
(
°dîr
, "Not forÅhisárchitecture.\n");

93 
ªsu…
 = -1;

94 
out
;

96 
ªsu…
 = 0;

97 
out
:

98 
	`‰ì_ñf_öfo
(&
ehdr
);

99  
ªsu…
;

100 
	}
}

102 #ifde‡
WITH_GAMECUBE


103 
	$gamecube_hack_addªs£s
(
mem_ehdr
 *
ehdr
)

105 
mem_phdr
 *
phdr
, *
phdr_íd
;

106 
phdr_íd
 = 
ehdr
->
e_phdr
 +Éhdr->
e_phnum
;

107 
phdr
 = 
ehdr
->
e_phdr
;Öhd∏!
phdr_íd
;Öhdr++) {

120 
phdr
->
p_∑ddr
 &= ~0xf0000000;

122 
	}
}

126 c⁄° 
›ti⁄
 
	g›ti⁄s
[] = {

127 
KEXEC_ARCH_OPTIONS


128 {"comm™d-löe", 1, 0, 
OPT_APPEND
},

129 {"≠≥nd", 1, 0, 
OPT_APPEND
},

130 {"ømdisk", 1, 0, 
OPT_RAMDISK
},

131 {"öôrd", 1, 0, 
OPT_RAMDISK
},

132 {"gamecube", 1, 0, 
OPT_GAMECUBE
},

133 {"dtb", 1, 0, 
OPT_DTB
},

134 {"ªu£-node", 1, 0, 
OPT_NODES
},

137 c⁄° 
	gsh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
;

139 
	$ñf_µc_ußge
()

141 
	`¥ötf
(

152 
	}
}

154 
	$ñf_µc_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

155 
kexec_öfo
 *
öfo
)

157 
mem_ehdr
 
ehdr
;

158 *
comm™d_löe
, *
¸ash_cmdlöe
, *
cmdlöe_buf
;

159 *
tmp_cmdlöe
;

160 
comm™d_löe_Àn
, 
¸ash_cmdlöe_Àn
;

161 *
dtb
;

162 
ªsu…
;

163 *
îr‹_msg
;

164 
max_addr
, 
hﬁe_addr
;

165 
mem_phdr
 *
phdr
;

166 
size_t
 
size
;

167 #ifde‡
CONFIG_PPC64


168 
toc_addr
;

170 #ifde‡
WITH_GAMECUBE


171 
èrgë_is_gamecube
 = 1;

172 *
¨g_buf
;

173 
size_t
 
¨g_byãs
;

174 
¨g_ba£
;

175 
boŸ_nŸes
 *
nŸes
;

176 
size_t
 
nŸe_byãs
;

177 *
£tup_°¨t
;

178 
uöt32_t
 
£tup_size
;

180 *
£g_buf
 = 
NULL
;

181 
off_t
 
£g_size
 = 0;

182 
èrgë_is_gamecube
 = 0;

183 
addr
;

184 
dtb_addr
;

185 
dtb_addr_a˘uÆ
;

187 
kî√l_addr
;

188 
	#FIXUP_ENTRYS
 (20)

	)

189 *
fixup_nodes
[
FIXUP_ENTRYS
 + 1];

190 
cur_fixup
 = 0;

191 
›t
;

192 *
blob_buf
 = 
NULL
;

193 
off_t
 
blob_size
 = 0;

195 
comm™d_löe
 = 
tmp_cmdlöe
 = 
NULL
;

196 
dtb
 = 
NULL
;

197 
max_addr
 = 
LONG_MAX
;

198 
hﬁe_addr
 = 0;

199 
kî√l_addr
 = 0;

200 
ømdisk
 = 0;

201 
ªsu…
 = 0;

202 
îr‹_msg
 = 
NULL
;

204 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

205 
›t
) {

208 i‡(
›t
 < 
OPT_ARCH_MAX
) {

211 
OPT_APPEND
:

212 
tmp_cmdlöe
 = 
›èrg
;

214 
OPT_RAMDISK
:

215 
ømdisk
 = 
›èrg
;

217 
OPT_GAMECUBE
:

218 
èrgë_is_gamecube
 = 
	`©oi
(
›èrg
);

221 
OPT_DTB
:

222 
dtb
 = 
›èrg
;

225 
OPT_NODES
:

226 i‡(
cur_fixup
 >
FIXUP_ENTRYS
) {

227 
	`dõ
("TheÇumber ofÉntries forÅhe fixup isÅooÜarge\n");

229 
fixup_nodes
[
cur_fixup
] = 
›èrg
;

230 
cur_fixup
++;

235 i‡(
ømdisk
 && 
ªu£_öôrd
)

236 
	`dõ
("Can't specify --ramdisk or --initrd with --reuseinitrd\n");

238 
comm™d_löe_Àn
 = 0;

239 i‡(
tmp_cmdlöe
) {

240 
comm™d_löe
 = 
tmp_cmdlöe
;

242 
comm™d_löe
 = 
	`gë_comm™d_löe
();

244 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
);

246 
fixup_nodes
[
cur_fixup
] = 
NULL
;

249 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

250 i‡(
ªsu…
 < 0) {

251 
out
;

254 #ifde‡
WITH_GAMECUBE


255 i‡(
èrgë_is_gamecube
) {

256 
	`gamecube_hack_addªs£s
(&
ehdr
);

265 
phdr
 = &
ehdr
.
e_phdr
[0];

266 
size
 = 
phdr
->
p_fûesz
;

267 i‡(
size
 > 
phdr
->
p_memsz
)

268 
size
 = 
phdr
->
p_memsz
;

270 
kî√l_addr
 = 
	`loˇã_hﬁe
(
öfo
, 
size
, 0, 0, 
max_addr
, 1);

271 #ifde‡
CONFIG_PPC64


272 
ehdr
.
e_phdr
[0].
p_∑ddr
 = (
Elf64_Addr
)
kî√l_addr
;

274 
ehdr
.
e_phdr
[0].
p_∑ddr
 = 
kî√l_addr
;

278 
ªsu…
 = 
	`ñf_exec_lﬂd
(&
ehdr
, 
öfo
);

279 i‡(
ªsu…
 < 0) {

280 
out
;

287 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

288 
¸ash_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

289 
	`mem£t
((*)
¸ash_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

290 
ªsu…
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
¸ash_cmdlöe
,

291 
max_addr
, 0);

292 i‡(
ªsu…
 < 0) {

293 
ªsu…
 = -1;

294 
out
;

296 
¸ash_cmdlöe_Àn
 = 
	`°æí
(
¸ash_cmdlöe
);

298 
¸ash_cmdlöe
 = 
NULL
;

299 
¸ash_cmdlöe_Àn
 = 0;

307 #ifde‡
WITH_GAMECUBE


308 i‡(
èrgë_is_gamecube
) {

309 
£tup_°¨t
 = 
£tup_dﬁ_°¨t
;

310 
£tup_size
 = 
£tup_dﬁ_size
;

311 
£tup_dﬁ_ªgs
.
•r8
 = 
ehdr
.
e_íåy
;

313 
£tup_°¨t
 = 
£tup_sim∂e_°¨t
;

314 
£tup_size
 = 
£tup_sim∂e_size
;

315 
£tup_sim∂e_ªgs
.
•r8
 = 
ehdr
.
e_íåy
;

317 
nŸe_byãs
 = (
ñf_boŸ_nŸes
Ë+ 
	`_ALIGN
(
comm™d_löe_Àn
, 4);

318 
¨g_byãs
 = 
nŸe_byãs
 + 
	`_ALIGN
(
£tup_size
, 4);

320 
¨g_buf
 = 
	`xmÆloc
(
¨g_byãs
);

321 
¨g_ba£
 = 
	`add_buf„r
(
öfo
,

322 
¨g_buf
, 
¨g_byãs
,árg_byãs, 4, 0, 
	`ñf_max_addr
(&
ehdr
), 1);

324 
nŸes
 = (
boŸ_nŸes
 *)(
¨g_buf
 + 
	`_ALIGN
(
£tup_size
, 4));

326 
	`mem˝y
(
¨g_buf
, 
£tup_°¨t
, 
£tup_size
);

327 
	`mem˝y
(
nŸes
, &
ñf_boŸ_nŸes
, (elf_boot_notes));

328 
	`mem˝y
(
nŸes
->
comm™d_löe
, comm™d_löe, 
comm™d_löe_Àn
);

329 
nŸes
->
hdr
.
b_size
 = 
nŸe_byãs
;

330 
nŸes
->
cmd_hdr
.
n_descsz
 = 
comm™d_löe_Àn
;

331 
nŸes
->
hdr
.
b_checksum
 = 
	`compuã_ù_checksum
“Ÿes, 
nŸe_byãs
);

333 
öfo
->
íåy
 = (*)
¨g_ba£
;

335 i‡(
¸ash_cmdlöe_Àn
 + 
comm™d_löe_Àn
 + 1 > 
COMMAND_LINE_SIZE
) {

336 
	`¥ötf
("Kernel commandÜineÉxceeds size\n");

340 
cmdlöe_buf
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

341 
	`mem£t
((*)
cmdlöe_buf
, 0, 
COMMAND_LINE_SIZE
);

342 i‡(
comm™d_löe
)

343 
	`°∫ˇt
(
cmdlöe_buf
, 
comm™d_löe
, 
comm™d_löe_Àn
);

344 i‡(
¸ash_cmdlöe
)

345 
	`°∫ˇt
(
cmdlöe_buf
, 
¸ash_cmdlöe
,

346 (
¸ash_cmdlöe
) -

347 
	`°æí
(
¸ash_cmdlöe
) - 1);

349 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, (c⁄° *)
purg©‹y
,

350 
purg©‹y_size
, 0, 
	`ñf_max_addr
(&
ehdr
), 1, 0);

355 i‡(
dtb
) {

357 
blob_buf
 = 
	`¶uΩ_fûe
(
dtb
, &
blob_size
);

359 
	`¸óã_Ê©ãn_åì
(
öfo
, (**)&
blob_buf
,

360 (*)&
blob_size
, 
cmdlöe_buf
);

362 i‡(!
blob_buf
 || !
blob_size
) {

363 
îr‹_msg
 = "DeviceÅree seemsÅo beánÉmpty file.\n";

364 
out2
;

368 
blob_buf
 = 
	`fixup_dtb_öô
(
öfo
, blob_buf, &
blob_size
, 
kî√l_addr
, &
dtb_addr
);

370 i‡(
ømdisk
) {

371 
£g_buf
 = 
	`¶uΩ_ømdisk_µc
(
ømdisk
, &
£g_size
);

373 
hﬁe_addr
 = 
	`add_buf„r
(
öfo
, 
£g_buf
, 
£g_size
, seg_size,

374 0, 
dtb_addr
 + 
blob_size
 + 1, 
max_addr
, -1);

375 
ømdisk_ba£
 = 
hﬁe_addr
;

376 
ømdisk_size
 = 
£g_size
;

378 i‡(
ªu£_öôrd
) {

379 
ømdisk_ba£
 = 
öôrd_ba£
;

380 
ømdisk_size
 = 
öôrd_size
;

383 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
 && 
ømdisk_ba£
 != 0) {

384 i‡–(
ømdisk_ba£
 < 
¸ash_ba£
) ||

385 (
ømdisk_ba£
 > 
¸ash_ba£
 + 
¸ash_size
) ) {

386 
	`¥ötf
("WARNING:Ñamdisk isábove crashkernelÑegion!\n");

388 i‡(
ømdisk_ba£
 + 
ømdisk_size
 > 
¸ash_ba£
 + 
¸ash_size
) {

389 
	`¥ötf
("WARNING:Ñamdisk overflows crashkernelÑegion!\n");

395 
	`fixup_dtb_föÆize
(
öfo
, 
blob_buf
, &
blob_size
, 
fixup_nodes
,

396 
cmdlöe_buf
);

397 
dtb_addr_a˘uÆ
 = 
	`add_buf„r
(
öfo
, 
blob_buf
, 
blob_size
, blob_size, 0, 
dtb_addr
,

398 
kî√l_addr
 + 
KERNEL_ACCESS_TOP
, 1);

399 i‡(
dtb_addr_a˘uÆ
 !
dtb_addr
) {

400 
îr‹_msg
 = "Error deviceÅreeÇotÜoaddedÅoáddress it wasÉxpectingÅo beÜoadedÅoo!\n";

401 
out2
;

411 
addr
 = 
kî√l_addr
 + (
ehdr
.
e_íåy
 -Éhdr.
e_phdr
[0].
p_vaddr
);

412 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "kî√l", &
addr
, (addr));

414 
addr
 = 
dtb_addr
;

415 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "dt_offset",

416 &
addr
, (addr));

418 
	#PUL_STACK_SIZE
 (16 * 1024)

	)

419 
addr
 = 
	`loˇã_hﬁe
(
öfo
, 
PUL_STACK_SIZE
, 0, 0,

420 
	`ñf_max_addr
(&
ehdr
), 1);

421 
addr
 +
PUL_STACK_SIZE
;

422 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "°ack", &
addr
, (addr));

423 #unde‡
PUL_STACK_SIZE


432 
	#TCB_SIZE
 1024

	)

433 
	#TCB_TP_OFFSET
 0x7000

	)

435 
addr
 = 
	`loˇã_hﬁe
(
öfo
, 
TCB_SIZE
, 0, 0,

436 (()
	`ñf_max_addr
(&
ehdr
Ë- 
TCB_TP_OFFSET
),

438 
addr
 +
TCB_SIZE
 + 
TCB_TP_OFFSET
;

439 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "my_thªad_±r", &
addr
, (addr));

441 #unde‡
TCB_SIZE


442 #unde‡
TCB_TP_OFFSET


444 
addr
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "purgatory_start");

445 
öfo
->
íåy
 = (*)
addr
;

447 
out2
:

448 
	`‰ì
(
cmdlöe_buf
);

450 
out
:

451 
	`‰ì_ñf_öfo
(&
ehdr
);

452 
	`‰ì
(
¸ash_cmdlöe
);

453 i‡(!
tmp_cmdlöe
)

454 
	`‰ì
(
comm™d_löe
);

455 i‡(
îr‹_msg
)

456 
	`dõ
(
îr‹_msg
);

458  
ªsu…
;

459 
	}
}

	@kexec/arch/ppc/kexec-elf-rel-ppc.c

1 
	~<°dio.h
>

2 
	~<ñf.h
>

3 
	~"../../kexec.h
"

4 
	~"../../kexec-ñf.h
"

6 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

8 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2MSB
) {

11 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
) {

14 i‡(
ehdr
->
e_machöe
 !
EM_PPC
) {

18 
	}
}

20 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

21 *
loˇti⁄
, 
addªss
, 
vÆue
)

23 
	gr_ty≥
) {

24 
	gR_PPC_ADDR32
:

26 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
;

29 
	gR_PPC_ADDR16_LO
:

31 *(
uöt16_t
 *)
loˇti⁄
 = 
vÆue
;

34 
	gR_PPC_ADDR16_HI
:

35 *(
uöt16_t
 *)
loˇti⁄
 = (
vÆue
>>16) & 0xffff;

38 
	gR_PPC_ADDR16_HA
:

43 *(
uöt16_t
 *)
loˇti⁄
 = (
vÆue
 + 0x8000) >> 16;

46 
	gR_PPC_REL24
:

47 i‡(()(
vÆue
 - 
addªss
) < -0x02000000

48 || ()(
vÆue
 - 
addªss
) >= 0x02000000)

50 
dõ
("Symbol moreÅhan 16MiBáway");

53 *(
	guöt32_t
 *)
	gloˇti⁄


54 (*(
uöt32_t
 *)
loˇti⁄
 & ~0x03fffffc)

55 | ((
vÆue
 - 
addªss
)

59 
	gR_PPC_REL32
:

61 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
 - 
addªss
;

64 
dõ
("Unknow¿ªœÑñoˇti⁄: %lu\n", 
r_ty≥
);

	@kexec/arch/ppc/kexec-ppc.c

9 
	~<°ddef.h
>

10 
	~<°dio.h
>

11 
	~<î∫o.h
>

12 
	~<°döt.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<dúít.h
>

17 
	~<°dlib.h
>

18 
	~<sys/°©.h
>

19 
	~<f˙é.h
>

20 
	~<uni°d.h
>

22 
	~"../../kexec.h
"

23 
	~"../../kexec-sysˇŒ.h
"

24 
	~"kexec-µc.h
"

25 
	~"¸ashdump-powîpc.h
"

26 
	~<¨ch/›ti⁄s.h
>

28 
	~"c⁄fig.h
"

30 
	gdt_addªss_˚Œs
 = 0, 
	gdt_size_˚Œs
 = 0;

31 
uöt64_t
 
	grmo_t›
;

32 
uöt64_t
 
	gmem‹y_limô
;

33 
	g¸ash_ba£
 = 0, 
	g¸ash_size
 = 0;

34 
	göôrd_ba£
 = 0, 
	göôrd_size
 = 0;

35 
	gømdisk_ba£
 = 0, 
	gømdisk_size
 = 0;

36 
	gπas_ba£
, 
	gπas_size
;

37 
	gmax_mem‹y_ønges
;

38 c⁄° *
	gømdisk
;

44 
	$öô_mem‹y_ªgi⁄_öfo
()

46 
size_t
 
ªs
 = 0;

47 
fd
;

48 *
fûe
;

50 
fûe
 = "/proc/device-tree/#address-cells";

51 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

52 i‡(
fd
 < 0) {

53 
	`Ârötf
(
°dîr
, "U«bÀÅÿ›í %s\n", 
fûe
);

57 
ªs
 = 
	`ªad
(
fd
, &
dt_addªss_˚Œs
, (dt_address_cells));

58 i‡(
ªs
 !(
dt_addªss_˚Œs
)) {

59 
	`Ârötf
(
°dîr
, "Eº‹Ñódög %s\n", 
fûe
);

62 
	`˛o£
(
fd
);

64 
fûe
 = "/proc/device-tree/#size-cells";

65 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

66 i‡(
fd
 < 0) {

67 
	`Ârötf
(
°dîr
, "U«bÀÅÿ›í %s\n", 
fûe
);

71 
ªs
 = 
	`ªad
(
fd
, &
dt_size_˚Œs
, (dt_size_cells));

72 i‡(
ªs
 !(
dt_size_˚Œs
)) {

73 
	`Ârötf
(
°dîr
, "Eº‹Ñódög %s\n", 
fûe
);

76 
	`˛o£
(
fd
);

79 
dt_size_˚Œs
 *= ();

80 
dt_addªss_˚Œs
 *= ();

83 
	}
}

85 
	#MAXBYTES
 128

	)

90 
	$ªad_mem‹y_ªgi⁄_limôs
(
fd
, *
°¨t
,

91 *
íd
)

93 
buf
[
MAXBYTES
];

94 *
p
;

95 
nbyãs
 = 
dt_addªss_˚Œs
 + 
dt_size_˚Œs
;

97 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) == -1) {

98 
	`Ârötf
(
°dîr
, "Error in file seek\n");

101 i‡(
	`ªad
(
fd
, 
buf
, 
nbyãs
) !=Çbytes) {

102 
	`Ârötf
(
°dîr
, "ErrorÑeadingÅhe memoryÑegion info\n");

106 
p
 = (*)
buf
;

107 i‡(
dt_addªss_˚Œs
 == ()) {

108 *
°¨t
 = 
p
[0];

109 
p
++;

110 } i‡(
dt_addªss_˚Œs
 == ()) {

111 *
°¨t
 = ((*)
p
)[0];

112 
p
 = (*)p + 1;

114 
	`Ârötf
(
°dîr
, "Unsupported value for #address-cells : %ld\n",

115 
dt_addªss_˚Œs
);

119 i‡(
dt_size_˚Œs
 == ())

120 *
íd
 = *
°¨t
 + 
p
[0];

121 i‡(
dt_size_˚Œs
 == ())

122 *
íd
 = *
°¨t
 + ((*)
p
)[0];

124 
	`Ârötf
(
°dîr
, "Unsupported value for #size-cells : %ld\n",

125 
dt_size_˚Œs
);

130 
	}
}

132 
	$¨ch_ªu£_öôrd
()

134 
ªu£_öôrd
 = 1;

135 
	}
}

137 #ifde‡
WITH_GAMECUBE


138 
	#MAX_MEMORY_RANGES
 64

	)

139 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

141 
gë_mem‹y_ønges_gc
(
mem‹y_ønge
 **
ønge
, *
ønges
,

142 
	$UNUSED
(
kexec_Êags
))

144 
mem‹y_ønges
 = 0;

147 
mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 0x00003000;

148 
mem‹y_ønge
[
mem‹y_ønges
].
íd
 = 0x0174bfff;

149 
mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

150 
mem‹y_ønges
++;

151 *
ønge
 = 
mem‹y_ønge
;

152 *
ønges
 = 
mem‹y_ønges
;

154 
	}
}

156 
	gu£_√w_dtb
;

157 
	gƒ_mem‹y_ønges
, 
	gƒ_ex˛ude_ønges
;

158 
mem‹y_ønge
 *
	gex˛ude_ønge
;

159 
mem‹y_ønge
 *
	gmem‹y_ønge
;

160 
mem‹y_ønge
 *
	gba£_mem‹y_ønge
;

161 
uöt64_t
 
	gmem‹y_max
;

168 
	$cou¡_mem‹y_ønges
()

170 
devi˚_åì
[256] = "/proc/device-tree/";

171 
dúít
 *
díåy
;

172 
DIR
 *
dú
;

174 i‡((
dú
 = 
	`›ídú
(
devi˚_åì
)Ë=
NULL
) {

175 
	`≥º‹
(
devi˚_åì
);

179 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

180 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) &&

181 
	`°rcmp
(
díåy
->
d_«me
, "memory"))

183 
max_mem‹y_ønges
++;

187 i‡(
u£_√w_dtb
) {

188 
max_mem‹y_ønges
++;

191 
	`˛o£dú
(
dú
);

194 
	}
}

196 
	$˛ónup_mem‹y_ønges
()

198 
	`‰ì
(
mem‹y_ønge
);

199 
	`‰ì
(
ba£_mem‹y_ønge
);

200 
	`‰ì
(
ex˛ude_ønge
);

201 
	}
}

207 
	$Æloc_mem‹y_ønges
()

209 
mem‹y_ønge_Àn
;

211 
mem‹y_ønge_Àn
 = (
mem‹y_ønge
Ë* 
max_mem‹y_ønges
;

213 
mem‹y_ønge
 = 
	`mÆloc
(
mem‹y_ønge_Àn
);

214 i‡(!
mem‹y_ønge
)

217 
ba£_mem‹y_ønge
 = 
	`mÆloc
(
mem‹y_ønge_Àn
);

218 i‡(!
ba£_mem‹y_ønge
)

219 
îr1
;

221 
ex˛ude_ønge
 = 
	`mÆloc
(
mem‹y_ønge_Àn
);

222 i‡(!
ex˛ude_ønge
)

223 
îr1
;

225 
	`mem£t
(
mem‹y_ønge
, 0, 
mem‹y_ønge_Àn
);

226 
	`mem£t
(
ba£_mem‹y_ønge
, 0, 
mem‹y_ønge_Àn
);

227 
	`mem£t
(
ex˛ude_ønge
, 0, 
mem‹y_ønge_Àn
);

230 
îr1
:

231 
	`Ârötf
(
°dîr
, "memoryÑange structureállocation failure\n");

232 
	`˛ónup_mem‹y_ønges
();

234 
	}
}

237 
	$s‹t_ønges
()

239 
i
, 
j
;

240 
uöt64_t
 
t°¨t
, 
ãnd
;

241 
i
 = 0; i < 
ƒ_ex˛ude_ønges
 - 1; i++) {

242 
j
 = 0; j < 
ƒ_ex˛ude_ønges
 - 
i
 - 1; j++) {

243 i‡(
ex˛ude_ønge
[
j
].
°¨t
 >Éxclude_range[j+1].start) {

244 
t°¨t
 = 
ex˛ude_ønge
[
j
].
°¨t
;

245 
ãnd
 = 
ex˛ude_ønge
[
j
].
íd
;

246 
ex˛ude_ønge
[
j
].
°¨t
 =Éxclude_range[j+1].start;

247 
ex˛ude_ønge
[
j
].
íd
 =Éxclude_range[j+1].end;

248 
ex˛ude_ønge
[
j
+1].
°¨t
 = 
t°¨t
;

249 
ex˛ude_ønge
[
j
+1].
íd
 = 
ãnd
;

254 
	}
}

260 
	$s‹t_ba£_ønges
()

262 
i
, 
j
;

263 
t°¨t
, 
ãnd
;

265 
i
 = 0; i < 
ƒ_mem‹y_ønges
 - 1; i++) {

266 
j
 = 0; j < 
ƒ_mem‹y_ønges
 - 
i
 - 1; j++) {

267 i‡(
ba£_mem‹y_ønge
[
j
].
°¨t
 > base_memory_range[j+1].start) {

268 
t°¨t
 = 
ba£_mem‹y_ønge
[
j
].
°¨t
;

269 
ãnd
 = 
ba£_mem‹y_ønge
[
j
].
íd
;

270 
ba£_mem‹y_ønge
[
j
].
°¨t
 = base_memory_range[j+1].start;

271 
ba£_mem‹y_ønge
[
j
].
íd
 = base_memory_range[j+1].end;

272 
ba£_mem‹y_ønge
[
j
+1].
°¨t
 = 
t°¨t
;

273 
ba£_mem‹y_ønge
[
j
+1].
íd
 = 
ãnd
;

278 
	}
}

280 
	$ªÆloc_mem‹y_ønges
()

282 
size_t
 
mem‹y_ønge_Àn
;

284 
max_mem‹y_ønges
++;

285 
mem‹y_ønge_Àn
 = (
mem‹y_ønge
Ë* 
max_mem‹y_ønges
;

287 
mem‹y_ønge
 = (mem‹y_øngê*Ë
	`ªÆloc
(memory_range,

288 
mem‹y_ønge_Àn
);

289 i‡(!
mem‹y_ønge
)

290 
îr
;

292 
ba£_mem‹y_ønge
 = (
mem‹y_ønge
 *Ë
	`ªÆloc
(base_memory_range,

293 
mem‹y_ønge_Àn
);

294 i‡(!
ba£_mem‹y_ønge
)

295 
îr
;

297 
ex˛ude_ønge
 = (
mem‹y_ønge
 *Ë
	`ªÆloc
(exclude_range,

298 
mem‹y_ønge_Àn
);

299 i‡(!
ex˛ude_ønge
)

300 
îr
;

302 
ußbÀmem_rgns
.
ønges
 = (
mem‹y_ønge
 *)

303 
	`ªÆloc
(
ußbÀmem_rgns
.
ønges
,

304 
mem‹y_ønge_Àn
);

305 i‡(!(
ußbÀmem_rgns
.
ønges
))

306 
îr
;

310 
îr
:

311 
	`Ârötf
(
°dîr
, "memoryÑange structureÑe-allocation failure\n");

313 
	}
}

316 
	$gë_ba£_ønges
()

318 
loˇl_mem‹y_ønges
 = 0;

319 
devi˚_åì
[256] = "/proc/device-tree/";

320 
‚ame
[256];

321 
buf
[
MAXBYTES
];

322 
DIR
 *
dú
, *
dmem
;

323 
dúít
 *
díåy
, *
míåy
;

324 
n
, 
fd
;

326 i‡((
dú
 = 
	`›ídú
(
devi˚_åì
)Ë=
NULL
) {

327 
	`≥º‹
(
devi˚_åì
);

330 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

331 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) &&

332 
	`°rcmp
(
díåy
->
d_«me
, "memory"))

334 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

335 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

336 i‡((
dmem
 = 
	`›ídú
(
‚ame
)Ë=
NULL
) {

337 
	`≥º‹
(
‚ame
);

338 
	`˛o£dú
(
dú
);

341 (
míåy
 = 
	`ªaddú
(
dmem
)Ë!
NULL
) {

342 
°¨t
, 
íd
;

344 i‡(
	`°rcmp
(
míåy
->
d_«me
, "reg"))

346 
	`°rˇt
(
‚ame
, "/reg");

347 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0) {

348 
	`≥º‹
(
‚ame
);

349 
	`˛o£dú
(
dmem
);

350 
	`˛o£dú
(
dú
);

353 i‡(
	`ªad_mem‹y_ªgi⁄_limôs
(
fd
, &
°¨t
, &
íd
) != 0) {

354 
	`˛o£
(
fd
);

355 
	`˛o£dú
(
dmem
);

356 
	`˛o£dú
(
dú
);

359 i‡(
loˇl_mem‹y_ønges
 >
max_mem‹y_ønges
) {

360 i‡(
	`ªÆloc_mem‹y_ønges
() < 0){

361 
	`˛o£
(
fd
);

366 
ba£_mem‹y_ønge
[
loˇl_mem‹y_ønges
].
°¨t
 = start;

367 
ba£_mem‹y_ønge
[
loˇl_mem‹y_ønges
].
íd
 =Énd;

368 
ba£_mem‹y_ønge
[
loˇl_mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

369 
loˇl_mem‹y_ønges
++;

370 
	`dbg¥ötf
("%016llx-%016llx : %x\n",

371 
ba£_mem‹y_ønge
[
loˇl_mem‹y_ønges
-1].
°¨t
,

372 
ba£_mem‹y_ønge
[
loˇl_mem‹y_ønges
-1].
íd
,

373 
ba£_mem‹y_ønge
[
loˇl_mem‹y_ønges
-1].
ty≥
);

374 
	`˛o£
(
fd
);

376 
	`˛o£dú
(
dmem
);

378 
	`˛o£dú
(
dú
);

379 
ƒ_mem‹y_ønges
 = 
loˇl_mem‹y_ønges
;

380 
	`s‹t_ba£_ønges
();

381 
mem‹y_max
 = 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
 - 1].
íd
;

383 
	`dbg¥ötf
("gë ba£ mem‹yÑ™ges:%d\n", 
ƒ_mem‹y_ønges
);

386 
	}
}

388 
	$ªad_kî√l_mem‹y_limô
(*
‚ame
, *
buf
)

390 
FILE
 *
fûe
;

391 
n
;

393 i‡(!
‚ame
 || !
buf
)

396 
fûe
 = 
	`f›í
(
‚ame
, "r");

397 i‡(
fûe
 =
NULL
) {

398 i‡(
î∫o
 !
ENOENT
) {

399 
	`≥º‹
(
‚ame
);

402 
î∫o
 = 0;

409 i‡((
n
 = 
	`‰ód
(&
mem‹y_limô
, 1, (
uöt64_t
), 
fûe
)) < 0) {

410 
	`≥º‹
(
‚ame
);

411 
îr_out
;

413 i‡(
n
 !(
uöt64_t
)) {

414 
	`Ârötf
(
°dîr
, "%sÇode has invalid size: %d\n",

415 
‚ame
, 
n
);

416 
îr_out
;

418 
	`f˛o£
(
fûe
);

421 
îr_out
:

422 
	`f˛o£
(
fûe
);

424 
	}
}

429 
	$gë_devåì_dëaûs
(
kexec_Êags
)

431 
uöt64_t
 
rmo_ba£
;

432 
t˚_ba£
;

433 
t˚_size
;

434 
hèb_ba£
, 
hèb_size
;

435 
kî√l_íd
;

436 
öôrd_°¨t
, 
öôrd_íd
;

437 
buf
[
MAXBYTES
];

438 
devi˚_åì
[256] = "/proc/device-tree/";

439 
‚ame
[256];

440 
DIR
 *
dú
, *
cdú
;

441 
FILE
 *
fûe
;

442 
dúít
 *
díåy
;

443 
n
, 
i
 = 0;

445 i‡((
dú
 = 
	`›ídú
(
devi˚_åì
)Ë=
NULL
) {

446 
	`≥º‹
(
devi˚_åì
);

450 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

451 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "chosen", 6) &&

452 
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) &&

453 
	`°∫cmp
(
díåy
->
d_«me
, "memory", 6) &&

454 
	`°∫cmp
(
díåy
->
d_«me
, "pci@", 4) &&

455 
	`°∫cmp
(
díåy
->
d_«me
, "rtas", 4))

457 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

458 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

459 i‡((
cdú
 = 
	`›ídú
(
‚ame
)Ë=
NULL
) {

460 
	`≥º‹
(
‚ame
);

461 
îr‹_›ídú
;

464 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "chosen", 6) == 0) {

466 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

467 
	`°rˇt
(
‚ame
, "/linux,kernel-end");

468 
fûe
 = 
	`f›í
(
‚ame
, "r");

469 i‡(!
fûe
) {

470 
	`≥º‹
(
‚ame
);

471 
îr‹_›ícdú
;

473 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

474 
	`≥º‹
(
‚ame
);

475 
îr‹_›ífûe
;

477 i‡(
n
 =(
uöt32_t
)) {

478 
kî√l_íd
 = ((
uöt32_t
 *)
buf
)[0];

479 } i‡(
n
 =(
uöt64_t
)) {

480 
kî√l_íd
 = ((
uöt64_t
 *)
buf
)[0];

482 
	`Ârötf
(
°dîr
, "%†nodêha†övÆid size: %d\n", 
‚ame
, 
n
);

483 
îr‹_›ífûe
;

485 
	`f˛o£
(
fûe
);

488 
ex˛ude_ønge
[
i
].
°¨t
 = 0x0UL;

489 
ex˛ude_ønge
[
i
].
íd
 = 
kî√l_íd
;

490 
i
++;

491 i‡(
i
 >
max_mem‹y_ønges
)

492 
	`ªÆloc_mem‹y_ønges
();

493 
	`mem£t
(
‚ame
, 0, (fname));

494 
	`•rötf
(
‚ame
, "%s%s%s",

495 
devi˚_åì
, 
díåy
->
d_«me
,

497 
fûe
 = 
	`f›í
(
‚ame
, "r");

498 i‡(!
fûe
) {

499 
	`≥º‹
(
‚ame
);

500 
îr‹_›ícdú
;

502 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

503 
	`≥º‹
(
‚ame
);

504 
îr‹_›ífûe
;

506 i‡(
n
 =(
uöt32_t
)) {

507 
¸ash_ba£
 = ((
uöt32_t
 *)
buf
)[0];

508 } i‡(
n
 =(
uöt64_t
)) {

509 
¸ash_ba£
 = ((
uöt64_t
 *)
buf
)[0];

511 
	`Ârötf
(
°dîr
, "%†nodêha†övÆid size: %d\n", 
‚ame
, 
n
);

512 
îr‹_›ífûe
;

514 
	`f˛o£
(
fûe
);

516 
	`mem£t
(
‚ame
, 0, (fname));

517 
	`•rötf
(
‚ame
, "%s%s%s",

518 
devi˚_åì
, 
díåy
->
d_«me
,

520 
fûe
 = 
	`f›í
(
‚ame
, "r");

521 i‡(!
fûe
) {

522 
	`≥º‹
(
‚ame
);

523 
îr‹_›ícdú
;

525 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

526 
	`≥º‹
(
‚ame
);

527 
îr‹_›ífûe
;

529 i‡(
n
 =(
uöt32_t
)) {

530 
¸ash_size
 = ((
uöt32_t
 *)
buf
)[0];

531 } i‡(
n
 =(
uöt64_t
)) {

532 
¸ash_size
 = ((
uöt64_t
 *)
buf
)[0];

534 
	`Ârötf
(
°dîr
, "%†nodêha†övÆid size: %d\n", 
‚ame
, 
n
);

535 
îr‹_›ífûe
;

537 
	`f˛o£
(
fûe
);

539 i‡(
¸ash_ba£
 > 
mem_mö
)

540 
mem_mö
 = 
¸ash_ba£
;

541 i‡(
¸ash_ba£
 + 
¸ash_size
 < 
mem_max
)

542 
mem_max
 = 
¸ash_ba£
 + 
¸ash_size
;

544 #i‚de‡
CONFIG_BOOKE


545 
	`add_ußbÀ_mem_rgns
(0, 
¸ash_ba£
 + 
¸ash_size
);

547 
	`ª£rve
(
KDUMP_BACKUP_LIMIT
,

548 
¸ash_ba£
-
KDUMP_BACKUP_LIMIT
);

550 
	`add_ußbÀ_mem_rgns
(
¸ash_ba£
, 
¸ash_size
);

559 
	`mem£t
(
‚ame
, 0, (fname));

560 
	`¢¥ötf
(
‚ame
, (‚ame), "%s%s%s", 
devi˚_åì
,

561 
díåy
->
d_«me
, "/linux,memory-limit");

562 i‡(
	`ªad_kî√l_mem‹y_limô
(
‚ame
, 
buf
) < 0)

563 
îr‹_›ícdú
;

566 
	`mem£t
(
‚ame
, 0, (fname));

567 
	`•rötf
(
‚ame
, "%s%s%s",

568 
devi˚_åì
, 
díåy
->
d_«me
,

570 
fûe
 = 
	`f›í
(
‚ame
, "r");

571 i‡(!
fûe
) {

572 
î∫o
 = 0;

573 
öôrd_°¨t
 = 0;

575 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

576 
	`≥º‹
(
‚ame
);

577 
îr‹_›ífûe
;

579 i‡(
n
 =(
uöt32_t
)) {

580 
öôrd_°¨t
 = ((
uöt32_t
 *)
buf
)[0];

581 } i‡(
n
 =(
uöt64_t
)) {

582 
öôrd_°¨t
 = ((
uöt64_t
 *)
buf
)[0];

584 
	`Ârötf
(
°dîr
, "%†nodêha†övÆid size: %d\n", 
‚ame
, 
n
);

585 
îr‹_›ífûe
;

587 
	`f˛o£
(
fûe
);

590 
	`mem£t
(
‚ame
, 0, (fname));

591 
	`•rötf
(
‚ame
, "%s%s%s",

592 
devi˚_åì
, 
díåy
->
d_«me
,

594 
fûe
 = 
	`f›í
(
‚ame
, "r");

595 i‡(!
fûe
) {

596 
î∫o
 = 0;

597 
öôrd_íd
 = 0;

599 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

600 
	`≥º‹
(
‚ame
);

601 
îr‹_›ífûe
;

603 i‡(
n
 =(
uöt32_t
)) {

604 
öôrd_íd
 = ((
uöt32_t
 *)
buf
)[0];

605 } i‡(
n
 =(
uöt64_t
)) {

606 
öôrd_íd
 = ((
uöt64_t
 *)
buf
)[0];

608 
	`Ârötf
(
°dîr
, "%†nodêha†övÆid size: %d\n", 
‚ame
, 
n
);

609 
îr‹_›ífûe
;

611 
	`f˛o£
(
fûe
);

614 i‡((
öôrd_íd
 - 
öôrd_°¨t
) != 0 ) {

615 
öôrd_ba£
 = 
öôrd_°¨t
;

616 
öôrd_size
 = 
öôrd_íd
 - 
öôrd_°¨t
;

619 i‡(
ªu£_öôrd
) {

621 
ex˛ude_ønge
[
i
].
°¨t
 = 
öôrd_°¨t
;

622 
ex˛ude_ønge
[
i
].
íd
 = 
öôrd_íd
;

623 
i
++;

624 i‡(
i
 >
max_mem‹y_ønges
)

625 
	`ªÆloc_mem‹y_ønges
();

629 
	`mem£t
(
‚ame
, 0, (fname));

630 
	`•rötf
(
‚ame
, "%s%s%s",

631 
devi˚_åì
, 
díåy
->
d_«me
,

633 
fûe
 = 
	`f›í
(
‚ame
, "r");

634 i‡(!
fûe
) {

635 
	`˛o£dú
(
cdú
);

636 i‡(
î∫o
 =
ENOENT
) {

638 
î∫o
 = 0;

641 
	`≥º‹
(
‚ame
);

642 
îr‹_›ídú
;

644 i‡(
	`‰ód
(&
hèb_ba£
, (), 1, 
fûe
)

646 
	`≥º‹
(
‚ame
);

647 
îr‹_›ífûe
;

649 
	`mem£t
(
‚ame
, 0, (fname));

650 
	`•rötf
(
‚ame
, "%s%s%s",

651 
devi˚_åì
, 
díåy
->
d_«me
,

653 
fûe
 = 
	`f›í
(
‚ame
, "r");

654 i‡(!
fûe
) {

655 
	`≥º‹
(
‚ame
);

656 
îr‹_›ícdú
;

658 i‡(
	`‰ód
(&
hèb_size
, (), 1, 
fûe
)

660 
	`≥º‹
(
‚ame
);

661 
îr‹_›ífûe
;

664 
ex˛ude_ønge
[
i
].
°¨t
 = 
hèb_ba£
;

665 
ex˛ude_ønge
[
i
].
íd
 = 
hèb_ba£
 + 
hèb_size
;

666 
i
++;

667 i‡(
i
 >
max_mem‹y_ønges
)

668 
	`ªÆloc_mem‹y_ønges
();

671 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "rtas", 4) == 0) {

672 
	`°rˇt
(
‚ame
, "/linux,rtas-base");

673 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

674 
	`≥º‹
(
‚ame
);

675 
îr‹_›ícdú
;

677 i‡(
	`‰ód
(&
πas_ba£
, (), 1, 
fûe
)

679 
	`≥º‹
(
‚ame
);

680 
îr‹_›ífûe
;

682 
	`mem£t
(
‚ame
, 0, (fname));

683 
	`•rötf
(
‚ame
, "%s%s%s",

684 
devi˚_åì
, 
díåy
->
d_«me
,

686 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

687 
	`≥º‹
(
‚ame
);

688 
îr‹_›ícdú
;

690 i‡(
	`‰ód
(&
πas_size
, (), 1, 
fûe
)

692 
	`≥º‹
(
‚ame
);

693 
îr‹_›ífûe
;

695 
	`˛o£dú
(
cdú
);

697 
ex˛ude_ønge
[
i
].
°¨t
 = 
πas_ba£
;

698 
ex˛ude_ønge
[
i
].
íd
 = 
πas_ba£
 + 
πas_size
;

699 
i
++;

700 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
)

701 
	`add_ußbÀ_mem_rgns
(
πas_ba£
, 
πas_size
);

704 i‡(!
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) ||

705 !
	`°rcmp
(
díåy
->
d_«me
, "memory")) {

706 
fd
;

707 
	`°rˇt
(
‚ame
, "/reg");

708 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0) {

709 
	`≥º‹
(
‚ame
);

710 
îr‹_›ícdú
;

712 i‡(
	`ªad_mem‹y_ªgi⁄_limôs
(
fd
, &
rmo_ba£
, &
rmo_t›
) != 0)

713 
îr‹_›ífûe
;

715 i‡(
rmo_t›
 > 0x30000000UL)

716 
rmo_t›
 = 0x30000000UL;

718 
	`˛o£
(
fd
);

719 
	`˛o£dú
(
cdú
);

722 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "pci@", 4) == 0) {

723 
	`°rˇt
(
‚ame
, "/linux,tce-base");

724 
fûe
 = 
	`f›í
(
‚ame
, "r");

725 i‡(!
fûe
) {

726 
	`˛o£dú
(
cdú
);

727 i‡(
î∫o
 =
ENOENT
) {

729 
î∫o
 = 0;

732 
	`≥º‹
(
‚ame
);

733 
îr‹_›ídú
;

735 i‡(
	`‰ód
(&
t˚_ba£
, (), 1, 
fûe
)

737 
	`≥º‹
(
‚ame
);

738 
îr‹_›ífûe
;

740 
	`mem£t
(
‚ame
, 0, (fname));

741 
	`•rötf
(
‚ame
, "%s%s%s",

742 
devi˚_åì
, 
díåy
->
d_«me
,

744 
fûe
 = 
	`f›í
(
‚ame
, "r");

745 i‡(!
fûe
) {

746 
	`≥º‹
(
‚ame
);

747 
îr‹_›ícdú
;

749 i‡(
	`‰ód
(&
t˚_size
, (), 1, 
fûe
)

751 
	`≥º‹
(
‚ame
);

752 
îr‹_›ífûe
;

755 
ex˛ude_ønge
[
i
].
°¨t
 = 
t˚_ba£
;

756 
ex˛ude_ønge
[
i
].
íd
 = 
t˚_ba£
 + 
t˚_size
;

757 
i
++;

758 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
)

759 
	`add_ußbÀ_mem_rgns
(
t˚_ba£
, 
t˚_size
);

760 
	`˛o£dú
(
cdú
);

763 
	`˛o£dú
(
dú
);

765 
ƒ_ex˛ude_ønges
 = 
i
;

767 
	`s‹t_ønges
();

770 
k
;

771 
k
 = 0; k < 
i
; k++)

772 
	`dbg¥ötf
("exclude_range sortedÉxclude_range[%d] "

773 "°¨t:%Œx,Énd:%Œx\n", 
k
, 
ex˛ude_ønge
[k].
°¨t
,

774 
ex˛ude_ønge
[
k
].
íd
);

778 
îr‹_›ífûe
:

779 
	`f˛o£
(
fûe
);

780 
îr‹_›ícdú
:

781 
	`˛o£dú
(
cdú
);

782 
îr‹_›ídú
:

783 
	`˛o£dú
(
dú
);

785 
	}
}

789 
	$£tup_mem‹y_ønges
(
kexec_Êags
)

791 
i
, 
j
 = 0;

797 i‡(
	`gë_ba£_ønges
())

798 
out
;

799 i‡(
	`gë_devåì_dëaûs
(
kexec_Êags
))

800 
out
;

802 
i
 = 0; i < 
ƒ_ex˛ude_ønges
; i++) {

806 i‡(
i
 == 0) {

807 i‡(
ex˛ude_ønge
[
i
].
°¨t
 != 0) {

808 
mem‹y_ønge
[
j
].
°¨t
 = 0;

809 
mem‹y_ønge
[
j
].
íd
 = 
ex˛ude_ønge
[
i
].
°¨t
 - 1;

810 
mem‹y_ønge
[
j
].
ty≥
 = 
RANGE_RAM
;

811 
j
++;

818 i‡(
i
 =
ƒ_ex˛ude_ønges
 - 1) {

819 i‡(
ex˛ude_ønge
[
i
].
íd
 < 
mem‹y_max
) {

820 
mem‹y_ønge
[
j
].
°¨t
 = 
ex˛ude_ønge
[
i
].
íd
 + 1;

821 
mem‹y_ønge
[
j
].
íd
 = 
mem‹y_max
;

822 
mem‹y_ønge
[
j
].
ty≥
 = 
RANGE_RAM
;

823 
j
++;

825 i‡(
mem‹y_ønge
[
j
-1].
°¨t
 >
rmo_t›
) {

826 
j
--;

829 i‡((
mem‹y_ønge
[
j
-1].
°¨t
 < 
rmo_t›
) &&

830 (
mem‹y_ønge
[
j
-1].
íd
 >
rmo_t›
)) {

831 
mem‹y_ønge
[
j
-1].
íd
 = 
rmo_t›
;

838 i‡(
ex˛ude_ønge
[
i
+1].
°¨t
 =ex˛ude_ønge[i].
íd
 + 1)

840 
mem‹y_ønge
[
j
].
°¨t
 = 
ex˛ude_ønge
[
i
].
íd
 + 1;

841 
mem‹y_ønge
[
j
].
íd
 = 
ex˛ude_ønge
[
i
+1].
°¨t
 - 1;

842 
mem‹y_ønge
[
j
].
ty≥
 = 
RANGE_RAM
;

843 
j
++;

845 i‡(
mem‹y_ønge
[
j
-1].
°¨t
 >
rmo_t›
) {

846 
j
--;

849 i‡((
mem‹y_ønge
[
j
-1].
°¨t
 < 
rmo_t›
) &&

850 (
mem‹y_ønge
[
j
-1].
íd
 >
rmo_t›
)) {

851 
mem‹y_ønge
[
j
-1].
íd
 = 
rmo_t›
;

857 i‡(!
j
) {

858 
mem‹y_ønge
[0].
°¨t
 = 
ba£_mem‹y_ønge
[0].start;

859 
mem‹y_ønge
[0].
íd
 = 
rmo_t›
;

860 
mem‹y_ønge
[0].
ty≥
 = 
RANGE_RAM
;

861 
ƒ_mem‹y_ønges
 = 1;

863 
ƒ_mem‹y_ønges
 = 
j
;

866 
k
;

867 
k
 = 0; k < 
j
; k++)

868 
	`dbg¥ötf
("setup_memory_ranges memory_range[%d] "

869 "°¨t:%Œx,Énd:%Œx\n", 
k
, 
mem‹y_ønge
[k].
°¨t
,

870 
mem‹y_ønge
[
k
].
íd
);

873 
out
:

874 
	`˛ónup_mem‹y_ønges
();

876 
	}
}

880 
	$gë_mem‹y_ønges_dt
(
mem‹y_ønge
 **
ønge
, *
ønges
,

881 
kexec_Êags
)

883 i‡(
	`cou¡_mem‹y_ønges
())

885 i‡(
	`Æloc_mem‹y_ønges
())

887 i‡(
	`£tup_mem‹y_ønges
(
kexec_Êags
))

890 *
ønge
 = 
mem‹y_ønge
;

891 *
ønges
 = 
ƒ_mem‹y_ønges
;

893 
	}
}

897 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

898 
kexec_Êags
)

900 
ªs
 = 0;

902 
ªs
 = 
	`öô_mem‹y_ªgi⁄_öfo
();

903 i‡(
ªs
 != 0)

904  
ªs
;

905 #ifde‡
WITH_GAMECUBE


906  
	`gë_mem‹y_ønges_gc
(
ønge
, 
ønges
, 
kexec_Êags
);

908  
	`gë_mem‹y_ønges_dt
(
ønge
, 
ønges
, 
kexec_Êags
);

910 
	}
}

912 
fûe_ty≥
 
	gfûe_ty≥
[] = {

913 {"ñf-µc", 
ñf_µc_¥obe
, 
ñf_µc_lﬂd
, 
ñf_µc_ußge
},

914 {"dﬁ-µc", 
dﬁ_µc_¥obe
, 
dﬁ_µc_lﬂd
, 
dﬁ_µc_ußge
},

915 {"uImage-µc", 
uImage_µc_¥obe
, 
uImage_µc_lﬂd
, 
uImage_µc_ußge
 },

917 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

919 
	$¨ch_ußge
()

921 
	}
}

923 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

926 
	}
}

928 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

932 { "µc", 
KEXEC_ARCH_DEFAULT
 },

933 { 
NULL
, 0 },

936 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

939 
	}
}

941 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

943 
	}
}

	@kexec/arch/ppc/kexec-ppc.h

1 #i‚de‡
KEXEC_PPC_H


2 
	#KEXEC_PPC_H


	)

4 
	#MAXBYTES
 128

	)

5 
	#MAX_LINE
 160

	)

6 
	#CORE_TYPE_ELF32
 1

	)

7 
	#CORE_TYPE_ELF64
 2

	)

9 
£tup_sim∂e_°¨t
[];

10 
uöt32_t
 
£tup_sim∂e_size
;

13 
uöt32_t
 
•r8
;

14 } 
£tup_sim∂e_ªgs
;

16 
£tup_dﬁ_°¨t
[];

17 
uöt32_t
 
£tup_dﬁ_size
;

18 
uöt64_t
 
rmo_t›
;

21 
uöt32_t
 
•r8
;

22 } 
£tup_dﬁ_ªgs
;

24 
	#SIZE_16M
 (16*1024*1024UL)

	)

26 
ñf_µc_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

27 
ñf_µc_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

28 
kexec_öfo
 *
öfo
);

29 
ñf_µc_ußge
();

31 
uImage_µc_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

32 
uImage_µc_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

33 
kexec_öfo
 *
öfo
);

34 
uImage_µc_ußge
();

36 
dﬁ_µc_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

37 
dﬁ_µc_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

38 
kexec_öfo
 *
öfo
);

39 
dﬁ_µc_ußge
();

45 
	#KERNEL_ACCESS_TOP
 (24 * 1024 * 1024)

	)

48 
	sboŸblock
 {

49 
	mmagic
,

50 
	mtŸÆsize
,

51 
	moff_dt_°ru˘
,

52 
	moff_dt_°rögs
,

53 
	moff_mem_rsvm≠
,

54 
	mvîsi⁄
,

55 
	mœ°_comp_vîsi⁄
,

56 
	mboŸ_physid
,

57 
	mdt_°rögs_size
,

58 
	mdt_°ru˘_size
;

61 
	smem_rgns
 {

62 
	msize
;

63 
mem‹y_ønge
 *
	mønges
;

64 } 
	tmem_rgns_t
;

65 
mem_rgns_t
 
ußbÀmem_rgns
;

66 
max_mem‹y_ønges
;

67 
¸ash_ba£
, 
¸ash_size
;

68 
öôrd_ba£
, 
öôrd_size
;

69 
ømdisk_ba£
, 
ømdisk_size
;

70 
ªu£_öôrd
;

71 c⁄° *
ømdisk
;

74 
dt_addªss_˚Œs
, 
dt_size_˚Œs
;

75 
öô_mem‹y_ªgi⁄_öfo
();

76 
ªad_mem‹y_ªgi⁄_limôs
(
fd
, *
°¨t
,

77 *
íd
);

78 
	#COMMAND_LINE_SIZE
 512

	)

80 
ª£rve
(
whîe
, 
Àngth
);

83 * 
¶uΩ_ømdisk_µc
(c⁄° *
fûíame
, 
off_t
 *
r_size
);

	@kexec/arch/ppc/kexec-uImage-ppc.c

4 
	#_GNU_SOURCE


	)

5 
	~<°dlib.h
>

6 
	~<°döt.h
>

7 
	~<°rög.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<image.h
>

10 
	~<gë›t.h
>

11 
	~<¨ch/›ti⁄s.h
>

12 
	~"../../kexec.h
"

13 
	~"../../kexec-sysˇŒ.h
"

14 
	~"kexec-µc.h
"

15 
	~"fixup_dtb.h
"

16 
	~<kexec-uImage.h
>

17 
	~"¸ashdump-powîpc.h
"

18 
	~<limôs.h
>

20 
¸óã_Ê©ãn_åì
(
kexec_öfo
 *, **, *,

24 c⁄° 
›ti⁄
 
	g›ti⁄s
[] = {

25 
KEXEC_ARCH_OPTIONS


26 {"comm™d-löe", 1, 0, 
OPT_APPEND
},

27 {"≠≥nd", 1, 0, 
OPT_APPEND
},

28 {"ømdisk", 1, 0, 
OPT_RAMDISK
},

29 {"öôrd", 1, 0, 
OPT_RAMDISK
},

30 {"dtb", 1, 0, 
OPT_DTB
},

31 {"ªu£-node", 1, 0, 
OPT_NODES
},

34 c⁄° 
	gsh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
;

36 
	$uImage_µc_ußge
()

38 
	`¥ötf
(

47 
	}
}

54 *
	$¶uΩ_ømdisk_µc
(c⁄° *
fûíame
, 
off_t
 *
r_size
)

56 
Image_öfo
 
img
;

57 
off_t
 
size
;

58 c⁄° *
buf
 = 
	`¶uΩ_fûe
(
fûíame
, &
size
);

59 
rc
;

62 i‡(!
buf
)

63  
buf
;

64 
rc
 = 
	`uImage_¥obe_ømdisk
(
buf
, 
size
, 
IH_ARCH_PPC
);

65 i‡(
rc
 < 0)

66 
	`dõ
("uImage: C‹ru±edÑamdisk fûê%s\n", 
fûíame
);

67 i‡(
rc
 == 0) {

68 i‡(
	`uImage_lﬂd
(
buf
, 
size
, &
img
) != 0)

69 
	`dõ
("uImage: Reading %ld bytes from %s failed\n",

70 
size
, 
fûíame
);

71 
buf
 = 
img
.buf;

72 
size
 = 
img
.
Àn
;

75 *
r_size
 = 
size
;

76  
buf
;

77 
	}
}

79 
	$uImage_µc_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

81  
	`uImage_¥obe_kî√l
(
buf
, 
Àn
, 
IH_ARCH_PPC
);

82 
	}
}

84 
	$µc_lﬂd_b¨e_bôs
(
¨gc
, **
¨gv
, c⁄° *
buf
,

85 
off_t
 
Àn
, 
kexec_öfo
 *
öfo
, 
lﬂd_addr
,

86 
ï
)

88 *
comm™d_löe
, *
cmdlöe_buf
, *
¸ash_cmdlöe
;

89 *
tmp_cmdlöe
;

90 
comm™d_löe_Àn
, 
¸ash_cmdlöe_Àn
;

91 *
dtb
;

92 
addr
;

93 
dtb_addr
;

94 
dtb_addr_a˘uÆ
;

95 
	#FIXUP_ENTRYS
 (20)

	)

96 *
fixup_nodes
[
FIXUP_ENTRYS
 + 1];

97 
cur_fixup
 = 0;

98 
›t
;

99 
ªt
 = 0;

100 *
£g_buf
 = 
NULL
;

101 
off_t
 
£g_size
 = 0;

102 
hﬁe_addr
;

103 
max_addr
;

104 *
blob_buf
 = 
NULL
;

105 
off_t
 
blob_size
 = 0;

106 *
îr‹_msg
 = 
NULL
;

108 
cmdlöe_buf
 = 
NULL
;

109 
comm™d_löe
 = 
NULL
;

110 
tmp_cmdlöe
 = 
NULL
;

111 
dtb
 = 
NULL
;

112 
max_addr
 = 
LONG_MAX
;

114 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

115 
›t
) {

118 i‡(
›t
 < 
OPT_ARCH_MAX
) {

121 
OPT_APPEND
:

122 
tmp_cmdlöe
 = 
›èrg
;

125 
OPT_RAMDISK
:

126 
ømdisk
 = 
›èrg
;

129 
OPT_DTB
:

130 
dtb
 = 
›èrg
;

133 
OPT_NODES
:

134 i‡(
cur_fixup
 >
FIXUP_ENTRYS
) {

135 
	`dõ
("TheÇumber ofÉntries forÅhe fixup isÅooÜarge\n");

137 
fixup_nodes
[
cur_fixup
] = 
›èrg
;

138 
cur_fixup
++;

143 i‡(
ømdisk
 && 
ªu£_öôrd
)

144 
	`dõ
("Can't specify --ramdisk or --initrd with --reuseinitrd\n");

146 
comm™d_löe_Àn
 = 0;

147 i‡(
tmp_cmdlöe
) {

148 
comm™d_löe
 = 
tmp_cmdlöe
;

150 
comm™d_löe
 = 
	`gë_comm™d_löe
();

152 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

154 
fixup_nodes
[
cur_fixup
] = 
NULL
;

162 
	#_1MiB
 (1 * 1024 * 1024)

	)

168 i‡(!
	`vÆid_mem‹y_ønge
(
öfo
, 
lﬂd_addr
,Üﬂd_add∏+ (
Àn
 + 
_1MiB
))) {

169 
ï_off£t
 = 
ï
 - 
lﬂd_addr
;

171 
lﬂd_addr
 = 
	`loˇã_hﬁe
(
öfo
, 
Àn
 + 
_1MiB
, 0, 0, 
max_addr
, 1);

172 i‡(
lﬂd_addr
 =
ULONG_MAX
) {

173 
	`¥ötf
("Can'tállocate memory for kernel ofÜen %ld\n",

174 
Àn
 + 
_1MiB
);

178 
ï
 = 
lﬂd_addr
 + 
ï_off£t
;

181 
	`add_£gmít
(
öfo
, 
buf
, 
Àn
, 
lﬂd_addr
,Üí + 
_1MiB
);

184 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

185 
¸ash_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

186 
	`mem£t
((*)
¸ash_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

187 
ªt
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
¸ash_cmdlöe
,

188 
max_addr
, 0);

189 i‡(
ªt
 < 0) {

190 
ªt
 = -1;

191 
out
;

193 
¸ash_cmdlöe_Àn
 = 
	`°æí
(
¸ash_cmdlöe
);

195 
¸ash_cmdlöe
 = 
NULL
;

196 
¸ash_cmdlöe_Àn
 = 0;

199 i‡(
¸ash_cmdlöe_Àn
 + 
comm™d_löe_Àn
 + 1 > 
COMMAND_LINE_SIZE
) {

200 
	`¥ötf
("Kernel commandÜineÉxceeds maximumÖossibleÜength\n");

204 
cmdlöe_buf
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

205 
	`mem£t
((*)
cmdlöe_buf
, 0, 
COMMAND_LINE_SIZE
);

207 i‡(
comm™d_löe
)

208 
	`°r˝y
(
cmdlöe_buf
, 
comm™d_löe
);

209 i‡(
¸ash_cmdlöe
)

210 
	`°∫ˇt
(
cmdlöe_buf
, 
¸ash_cmdlöe
, 
¸ash_cmdlöe_Àn
);

212 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, (c⁄° *)
purg©‹y
,

213 
purg©‹y_size
, 0, -1, -1, 0);

218 i‡(
dtb
) {

220 
blob_buf
 = 
	`¶uΩ_fûe
(
dtb
, &
blob_size
);

222 
	`¸óã_Ê©ãn_åì
(
öfo
, (**)&
blob_buf
,

223 (*)&
blob_size
, 
cmdlöe_buf
);

225 i‡(!
blob_buf
 || !
blob_size
) {

226 
îr‹_msg
 = "DeviceÅree seemsÅo beánÉmpty file.\n";

227 
out2
;

231 
blob_buf
 = 
	`fixup_dtb_öô
(
öfo
, blob_buf, &
blob_size
, 
lﬂd_addr
, &
dtb_addr
);

233 i‡(
ømdisk
) {

234 
£g_buf
 = 
	`¶uΩ_ømdisk_µc
(
ømdisk
, &
£g_size
);

236 
hﬁe_addr
 = 
	`add_buf„r
(
öfo
, 
£g_buf
, 
£g_size
, seg_size,

237 0, 
dtb_addr
 + 
blob_size
, 
max_addr
, -1);

238 
ømdisk_ba£
 = 
hﬁe_addr
;

239 
ømdisk_size
 = 
£g_size
;

241 i‡(
ªu£_öôrd
) {

242 
ømdisk_ba£
 = 
öôrd_ba£
;

243 
ømdisk_size
 = 
öôrd_size
;

246 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
 && 
ømdisk_ba£
 != 0) {

247 i‡–(
ømdisk_ba£
 < 
¸ash_ba£
) ||

248 (
ømdisk_ba£
 > 
¸ash_ba£
 + 
¸ash_size
) ) {

249 
	`¥ötf
("WARNING:Ñamdisk isábove crashkernelÑegion!\n");

251 i‡(
ømdisk_ba£
 + 
ømdisk_size
 > 
¸ash_ba£
 + 
¸ash_size
) {

252 
	`¥ötf
("WARNING:Ñamdisk overflows crashkernelÑegion!\n");

258 
	`fixup_dtb_föÆize
(
öfo
, 
blob_buf
, &
blob_size
, 
fixup_nodes
,

259 
cmdlöe_buf
);

260 
dtb_addr_a˘uÆ
 = 
	`add_buf„r
(
öfo
, 
blob_buf
, 
blob_size
, blob_size, 0, 
dtb_addr
,

261 
lﬂd_addr
 + 
KERNEL_ACCESS_TOP
, 1);

262 i‡(
dtb_addr_a˘uÆ
 !
dtb_addr
) {

263 
	`¥ötf
("dtb_addr_a˘uÆ: %lx, dtb_addr: %lx\n", 
dtb_addr_a˘uÆ
, 
dtb_addr
);

264 
îr‹_msg
 = "Error deviceÅreeÇotÜoaddedÅoáddress it wasÉxpectingÅo beÜoadedÅoo!\n";

265 
out2
;

269 
addr
 = 
ï
;

270 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "kî√l", &
addr
, (addr));

272 
addr
 = 
dtb_addr
;

273 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "dt_off£t", &
addr
, (addr));

275 
	#PUL_STACK_SIZE
 (16 * 1024)

	)

276 
addr
 = 
	`loˇã_hﬁe
(
öfo
, 
PUL_STACK_SIZE
, 0, 0, -1, 1);

277 
addr
 +
PUL_STACK_SIZE
;

278 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "°ack", &
addr
, (addr));

280 #unde‡
PUL_STACK_SIZE


289 
	#TCB_SIZE
 1024

	)

290 
	#TCB_TP_OFFSET
 0x7000

	)

291 
addr
 = 
	`loˇã_hﬁe
(
öfo
, 
TCB_SIZE
, 0, 0,

292 (()-1 - 
TCB_TP_OFFSET
),

294 
addr
 +
TCB_SIZE
 + 
TCB_TP_OFFSET
;

295 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "my_thªad_±r", &
addr
, (addr));

296 #unde‡
TCB_TP_OFFSET


297 #unde‡
TCB_SIZE


299 
addr
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "purgatory_start");

300 
öfo
->
íåy
 = (*)
addr
;

302 
out2
:

303 
	`‰ì
(
cmdlöe_buf
);

304 
out
:

305 
	`‰ì
(
¸ash_cmdlöe
);

306 i‡(!
tmp_cmdlöe
)

307 
	`‰ì
(
comm™d_löe
);

308 i‡(
îr‹_msg
)

309 
	`dõ
(
îr‹_msg
);

310  
ªt
;

311 
	}
}

313 
	$uImage_µc_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

314 
kexec_öfo
 *
öfo
)

316 
Image_öfo
 
img
;

317 
ªt
;

319 
ªt
 = 
	`uImage_lﬂd
(
buf
, 
Àn
, &
img
);

320 i‡(
ªt
)

321  
ªt
;

323  
	`µc_lﬂd_b¨e_bôs
(
¨gc
, 
¨gv
, 
img
.
buf
, img.
Àn
, 
öfo
,

324 
img
.
ba£
, img.
ï
);

325 
	}
}

	@kexec/arch/ppc/libfdt-wrapper.c

24 
	~<°dlib.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	~<∑ge.h
>

28 
	~<libfdt.h
>

29 
	~"›s.h
"

30 
	~"../../kexec.h
"

32 
	#BAD_ERROR
(
îr
) (((err) < 0) \

33 && ((
îr
Ë!-
FDT_ERR_NOTFOUND
) \

34 && ((
îr
Ë!-
FDT_ERR_EXISTS
))

	)

36 
	#check_îr
(
îr
) \

38 i‡(
	`BAD_ERROR
(
îr
Ë|| (”º < 0Ë&& 
kexec_debug
)) \

39 
	`¥ötf
("%s():%d %s\n\r", 
__func__
, 
__LINE__
, \

40 
	`fdt_°ªº‹
(
îr
)); \

41 i‡(
	`BAD_ERROR
(
îr
)) \

42 
	`exô
(1); \

43 (
îr
 < 0) ? -1 : 0; \

44 })

	)

46 
	#off£t_devp
(
off
) \

48 
_off£t
 = (
off
); \

49 
	`check_îr
(
_off£t
Ë? 
NULL
 : (*)(_offset+1); \

50 })

	)

52 
	#devp_off£t_föd
(
devp
Ë((()(devp))-1)

	)

53 
	#devp_off£t
(
devp
Ë(dev∞? (()(devp))-1 : 0)

	)

55 *
	gfdt
;

56 *
	gbuf
;

57 
dt_›s
 
	gdt_›s
;

59 
	#EXPAND_GRANULARITY
 1024

	)

61 
	$ex∑nd_buf
(
möex∑nd
)

63 
size
 = 
	`fdt_tŸÆsize
(
fdt
);

64 
rc
;

66 
size
 = 
	`_ALIGN
(sizê+ 
möex∑nd
, 
EXPAND_GRANULARITY
);

67 
buf
 = 
	`ªÆloc
(buf, 
size
);

68 i‡(!
buf
)

69 
	`dõ
("Couldn'àföd %d byã†tÿex∑nd devi˚Åªe\n\r", 
size
);

70 
rc
 = 
	`fdt_›í_öto
(
fdt
, 
buf
, 
size
);

71 i‡(
rc
 != 0)

72 
	`dõ
("Couldn'tÉxpand fdt intoÇew buffer: %s\n\r",

73 
	`fdt_°ªº‹
(
rc
));

75 
fdt
 = 
buf
;

76 
	}
}

78 *
	$fdt_wøµî_föddevi˚
(c⁄° *
∑th
)

80  
	`off£t_devp
(
	`fdt_∑th_off£t
(
fdt
, 
∑th
));

81 
	}
}

83 
	$fdt_wøµî_gë¥›
(c⁄° *
devp
, c⁄° *
«me
,

84 *
buf
, c⁄° 
buÊí
)

86 c⁄° *
p
;

87 
Àn
;

89 
p
 = 
	`fdt_gë¥›
(
fdt
, 
	`devp_off£t
(
devp
), 
«me
, &
Àn
);

90 i‡(!
p
)

91  
	`check_îr
(
Àn
);

92 
	`mem˝y
(
buf
, 
p
, 
	`mö
(
Àn
, 
buÊí
));

93  
Àn
;

94 
	}
}

96 
	$fdt_wøµî_£çr›
(c⁄° *
devp
, c⁄° *
«me
,

97 c⁄° *
buf
, c⁄° 
Àn
)

99 
rc
;

101 
rc
 = 
	`fdt_£çr›
(
fdt
, 
	`devp_off£t
(
devp
), 
«me
, 
buf
, 
Àn
);

102 i‡(
rc
 =-
FDT_ERR_NOSPACE
) {

103 
	`ex∑nd_buf
(
Àn
 + 16);

104 
rc
 = 
	`fdt_£çr›
(
fdt
, 
	`devp_off£t
(
devp
), 
«me
, 
buf
, 
Àn
);

107  
	`check_îr
(
rc
);

108 
	}
}

110 *
	$fdt_wøµî_gë_∑ª¡
(c⁄° *
devp
)

112  
	`off£t_devp
(
	`fdt_∑ª¡_off£t
(
fdt
, 
	`devp_off£t
(
devp
)));

113 
	}
}

115 *
	$fdt_wøµî_¸óã_node
(c⁄° *
devp
, c⁄° *
«me
)

117 
off£t
;

119 
off£t
 = 
	`fdt_add_subnode
(
fdt
, 
	`devp_off£t
(
devp
), 
«me
);

120 i‡(
off£t
 =-
FDT_ERR_NOSPACE
) {

121 
	`ex∑nd_buf
(
	`°æí
(
«me
) + 16);

122 
off£t
 = 
	`fdt_add_subnode
(
fdt
, 
	`devp_off£t
(
devp
), 
«me
);

125  
	`off£t_devp
(
off£t
);

126 
	}
}

128 *
	$fdt_wøµî_föd_node_by_¥›_vÆue
(c⁄° *
¥ev
,

129 c⁄° *
«me
,

130 c⁄° *
vÆ
,

131 
Àn
)

133 
off£t
 = 
	`fdt_node_off£t_by_¥›_vÆue
(
fdt
, 
	`devp_off£t_föd
(
¥ev
),

134 
«me
, 
vÆ
, 
Àn
);

135  
	`off£t_devp
(
off£t
);

136 
	}
}

138 *
	$fdt_wøµî_föd_node_by_com∑tibÀ
(c⁄° *
¥ev
,

139 c⁄° *
vÆ
)

141 
off£t
 = 
	`fdt_node_off£t_by_com∑tibÀ
(
fdt
, 
	`devp_off£t_föd
(
¥ev
),

142 
vÆ
);

143  
	`off£t_devp
(
off£t
);

144 
	}
}

146 *
	$fdt_wøµî_gë_∑th
(c⁄° *
devp
, *
buf
, 
Àn
)

148 
rc
;

150 
rc
 = 
	`fdt_gë_∑th
(
fdt
, 
	`devp_off£t
(
devp
), 
buf
, 
Àn
);

151 i‡(
	`check_îr
(
rc
))

152  
NULL
;

153  
buf
;

154 
	}
}

156 
	$fdt_wøµî_föÆize
()

158 
rc
;

160 
rc
 = 
	`fdt_∑ck
(
fdt
);

161 i‡(
rc
 != 0)

162 
	`dõ
("Couldn'tÖack flatÅree: %s\n\r",

163 
	`fdt_°ªº‹
(
rc
));

164  ()
fdt
;

165 
	}
}

167 
	$fdt_öô
(*
blob
)

169 
îr
;

170 
bufsize
;

172 
dt_›s
.
föddevi˚
 = 
fdt_wøµî_föddevi˚
;

173 
dt_›s
.
gë¥›
 = 
fdt_wøµî_gë¥›
;

174 
dt_›s
.
£çr›
 = 
fdt_wøµî_£çr›
;

175 
dt_›s
.
gë_∑ª¡
 = 
fdt_wøµî_gë_∑ª¡
;

176 
dt_›s
.
¸óã_node
 = 
fdt_wøµî_¸óã_node
;

177 
dt_›s
.
föd_node_by_¥›_vÆue
 = 
fdt_wøµî_föd_node_by_¥›_vÆue
;

178 
dt_›s
.
föd_node_by_com∑tibÀ
 = 
fdt_wøµî_föd_node_by_com∑tibÀ
;

179 
dt_›s
.
gë_∑th
 = 
fdt_wøµî_gë_∑th
;

180 
dt_›s
.
föÆize
 = 
fdt_wøµî_föÆize
;

183 
fdt
 = 
blob
;

184 
bufsize
 = 
	`fdt_tŸÆsize
(
fdt
);

186 
îr
 = 
	`fdt_›í_öto
(
fdt
, fdt, 
bufsize
);

187 i‡(
îr
 != 0)

188 
	`dõ
("fdt_öô(): %s\n\r", 
	`fdt_°ªº‹
(
îr
));

189 
	}
}

	@kexec/arch/ppc/ops.h

11 #i‚de‡
_PPC_BOOT_OPS_H_


12 
	#_PPC_BOOT_OPS_H_


	)

13 
	~"ty≥s.h
"

15 
	#COMMAND_LINE_SIZE
 512

	)

16 
	#MAX_PATH_LEN
 256

	)

17 
	#MAX_PROP_LEN
 256

	)

19 (*
	tkî√l_íåy_t
)(
	tr3
, 
	tr4
, *
	tr5
);

22 
	sdt_›s
 {

23 * (*
föddevi˚
)(c⁄° *
«me
);

24 (*
gë¥›
)(c⁄° *
ph™dÀ
, c⁄° *
«me
, *
buf
,

25 c⁄° 
buÊí
);

26 (*
£çr›
)(c⁄° *
ph™dÀ
, c⁄° *
«me
,

27 c⁄° *
buf
, c⁄° 
buÊí
);

28 *(*
gë_∑ª¡
)(c⁄° *
ph™dÀ
);

30 *(*
¸óã_node
)(c⁄° *
∑ª¡
, c⁄° *
«me
);

31 *(*
föd_node_by_¥›_vÆue
)(c⁄° *
¥ev
,

32 c⁄° *
¥›«me
,

33 c⁄° *
¥›vÆ
, 
¥›Àn
);

34 *(*
föd_node_by_com∑tibÀ
)(c⁄° *
¥ev
,

35 c⁄° *
com∑t
);

36 (*
föÆize
)();

37 *(*
gë_∑th
)(c⁄° *
ph™dÀ
, *
buf
, 
Àn
);

39 
dt_›s
 dt_ops;

41 
	`fdt_öô
(*
blob
);

42 
	`Êush_ˇche
(*, );

43 
	`dt_xœã_ªg
(*
node
, 
ªs
, *
addr
, *
size
);

44 
	`dt_xœã_addr
(*
node
, 
u32
 *
buf
, 
buÊí
, *
xœãd_addr
);

45 
	`dt_is_com∑tibÀ
(*
node
, c⁄° *
com∑t
);

46 
	`dt_gë_ªg_f‹m©
(*
node
, 
u32
 *
«ddr
, u32 *
nsize
);

47 
	`dt_gë_vútuÆ_ªg
(*
node
, **
addr
, 
ƒes
);

49 
ölöe
 *
	$föddevi˚
(c⁄° *
«me
)

51  (
dt_›s
.
föddevi˚
Ë? dt_›s.
	`föddevi˚
(
«me
Ë: 
NULL
;

52 
	}
}

54 
ölöe
 
	$gë¥›
(*
devp
, c⁄° *
«me
, *
buf
, 
buÊí
)

56  (
dt_›s
.
gë¥›
Ë? dt_›s.
	`gë¥›
(
devp
, 
«me
, 
buf
, 
buÊí
) : -1;

57 
	}
}

59 
ölöe
 
	$£çr›
(*
devp
, c⁄° *
«me
,

60 c⁄° *
buf
, 
buÊí
)

62  (
dt_›s
.
£çr›
Ë? dt_›s.
	`£çr›
(
devp
, 
«me
, 
buf
, 
buÊí
) : -1;

63 
	}
}

64 
	#£çr›_vÆ
(
devp
, 
«me
, 
vÆ
) \

66 
	`ty≥of
(
vÆ
Ë
x
 = (val); \

67 
	`£çr›
((
devp
), (
«me
), &
x
, (x)); \

68 } 0)

	)

70 
ölöe
 
	$£çr›_°r
(*
devp
, c⁄° *
«me
, c⁄° *
buf
)

72 i‡(
dt_›s
.
£çr›
)

73  
dt_›s
.
	`£çr›
(
devp
, 
«me
, 
buf
, 
	`°æí
(buf) + 1);

76 
	}
}

78 
ölöe
 *
	$gë_∑ª¡
(c⁄° *
devp
)

80  
dt_›s
.
gë_∑ª¡
 ? dt_›s.
	`gë_∑ª¡
(
devp
Ë: 
NULL
;

81 
	}
}

83 
ölöe
 *
	$¸óã_node
(c⁄° *
∑ª¡
, c⁄° *
«me
)

85  
dt_›s
.
¸óã_node
 ? dt_›s.
	`¸óã_node
(
∑ª¡
, 
«me
Ë: 
NULL
;

86 
	}
}

89 
ölöe
 *
	$föd_node_by_¥›_vÆue
(c⁄° *
¥ev
,

90 c⁄° *
¥›«me
,

91 c⁄° *
¥›vÆ
, 
¥›Àn
)

93 i‡(
dt_›s
.
föd_node_by_¥›_vÆue
)

94  
dt_›s
.
	`föd_node_by_¥›_vÆue
(
¥ev
, 
¥›«me
,

95 
¥›vÆ
, 
¥›Àn
);

97  
NULL
;

98 
	}
}

100 
ölöe
 *
	$föd_node_by_¥›_vÆue_°r
(c⁄° *
¥ev
,

101 c⁄° *
¥›«me
,

102 c⁄° *
¥›vÆ
)

104  
	`föd_node_by_¥›_vÆue
(
¥ev
, 
¥›«me
, 
¥›vÆ
,

105 
	`°æí
(
¥›vÆ
) + 1);

106 
	}
}

108 
ölöe
 *
	$föd_node_by_devty≥
(c⁄° *
¥ev
,

109 c⁄° *
ty≥
)

111  
	`föd_node_by_¥›_vÆue_°r
(
¥ev
, "devi˚_ty≥", 
ty≥
);

112 
	}
}

114 
ölöe
 *
	$föd_node_by_Æüs
(c⁄° *
Æüs
)

116 *
devp
 = 
	`föddevi˚
("/aliases");

118 i‡(
devp
) {

119 
∑th
[
MAX_PATH_LEN
];

120 i‡(
	`gë¥›
(
devp
, 
Æüs
, 
∑th
, 
MAX_PATH_LEN
) > 0)

121  
	`föddevi˚
(
∑th
);

124  
NULL
;

125 
	}
}

127 
ölöe
 *
	$föd_node_by_com∑tibÀ
(c⁄° *
¥ev
,

128 c⁄° *
com∑t
)

130 i‡(
dt_›s
.
föd_node_by_com∑tibÀ
)

131  
dt_›s
.
	`föd_node_by_com∑tibÀ
(
¥ev
, 
com∑t
);

133  
NULL
;

134 
	}
}

136 
	#dt_fixup_mac_addªs£s
(...) \

137 
	`__dt_fixup_mac_addªs£s
(0, 
__VA_ARGS__
, 
NULL
)

	)

140 
ölöe
 *
	$gë_∑th
(c⁄° *
ph™dÀ
, *
buf
, 
Àn
)

142 i‡(
dt_›s
.
gë_∑th
)

143  
dt_›s
.
	`gë_∑th
(
ph™dÀ
, 
buf
, 
Àn
);

145  
NULL
;

146 
	}
}

	@kexec/arch/ppc/ppc_asm.h

10 
	#¸0
 0

	)

11 
	#¸1
 1

	)

12 
	#¸2
 2

	)

13 
	#¸3
 3

	)

14 
	#¸4
 4

	)

15 
	#¸5
 5

	)

16 
	#¸6
 6

	)

17 
	#¸7
 7

	)

22 
	#r0
 0

	)

23 
	#r1
 1

	)

24 
	#r2
 2

	)

25 
	#r3
 3

	)

26 
	#r4
 4

	)

27 
	#r5
 5

	)

28 
	#r6
 6

	)

29 
	#r7
 7

	)

30 
	#r8
 8

	)

31 
	#r9
 9

	)

32 
	#r10
 10

	)

33 
	#r11
 11

	)

34 
	#r12
 12

	)

35 
	#r13
 13

	)

36 
	#r14
 14

	)

37 
	#r15
 15

	)

38 
	#r16
 16

	)

39 
	#r17
 17

	)

40 
	#r18
 18

	)

41 
	#r19
 19

	)

42 
	#r20
 20

	)

43 
	#r21
 21

	)

44 
	#r22
 22

	)

45 
	#r23
 23

	)

46 
	#r24
 24

	)

47 
	#r25
 25

	)

48 
	#r26
 26

	)

49 
	#r27
 27

	)

50 
	#r28
 28

	)

51 
	#r29
 29

	)

52 
	#r30
 30

	)

53 
	#r31
 31

	)

56 
	#MSR_SF
 (1<<63)

	)

57 
	#MSR_ISF
 (1<<61)

	)

58 
	#MSR_VEC
 (1<<25Ë

	)

59 
	#MSR_POW
 (1<<18Ë

	)

60 
	#MSR_WE
 (1<<18Ë

	)

61 
	#MSR_TGPR
 (1<<17Ë

	)

62 
	#MSR_CE
 (1<<17Ë

	)

63 
	#MSR_ILE
 (1<<16Ë

	)

64 
	#MSR_EE
 (1<<15Ë

	)

65 
	#MSR_PR
 (1<<14Ë

	)

66 
	#MSR_FP
 (1<<13Ë

	)

67 
	#MSR_ME
 (1<<12Ë

	)

68 
	#MSR_FE0
 (1<<11Ë

	)

69 
	#MSR_SE
 (1<<10Ë

	)

70 
	#MSR_BE
 (1<<9Ë

	)

71 
	#MSR_DE
 (1<<9Ë

	)

72 
	#MSR_FE1
 (1<<8Ë

	)

73 
	#MSR_IP
 (1<<6Ë

	)

74 
	#MSR_IR
 (1<<5Ë

	)

75 
	#MSR_DR
 (1<<4Ë

	)

76 
	#MSR_PE
 (1<<3Ë

	)

77 
	#MSR_PX
 (1<<2Ë

	)

78 
	#MSR_RI
 (1<<1Ë

	)

79 
	#MSR_LE
 (1<<0Ë

	)

82 
	#SPRN_CTR
 0x009

	)

83 
	#SPRN_DABR
 0x3F5

	)

84 
	#SPRN_DAR
 0x013

	)

85 
	#SPRN_TBRL
 0x10C

	)

86 
	#SPRN_TBRU
 0x10D

	)

87 
	#SPRN_TBWL
 0x11C

	)

88 
	#SPRN_TBWU
 0x11D

	)

89 
	#SPRN_HIOR
 0x137

	)

90 
	#SPRN_DBAT0L
 0x219

	)

91 
	#SPRN_DBAT0U
 0x218

	)

92 
	#SPRN_DBAT1L
 0x21B

	)

93 
	#SPRN_DBAT1U
 0x21A

	)

94 
	#SPRN_DBAT2L
 0x21D

	)

95 
	#SPRN_DBAT2U
 0x21C

	)

96 
	#SPRN_DBAT3L
 0x21F

	)

97 
	#SPRN_DBAT3U
 0x21E

	)

98 
	#SPRN_DBAT4L
 0x239

	)

99 
	#SPRN_DBAT4U
 0x238

	)

100 
	#SPRN_DBAT5L
 0x23B

	)

101 
	#SPRN_DBAT5U
 0x23A

	)

102 
	#SPRN_DBAT6L
 0x23D

	)

103 
	#SPRN_DBAT6U
 0x23C

	)

104 
	#SPRN_DBAT7L
 0x23F

	)

105 
	#SPRN_DBAT7U
 0x23E

	)

107 
	#SPRN_DEC
 0x016

	)

108 
	#SPRN_DER
 0x095

	)

109 
	#DER_RSTE
 0x40000000

	)

110 
	#DER_CHSTPE
 0x20000000

	)

111 
	#DER_MCIE
 0x10000000

	)

112 
	#DER_EXTIE
 0x02000000

	)

113 
	#DER_ALIE
 0x01000000

	)

114 
	#DER_PRIE
 0x00800000

	)

115 
	#DER_FPUVIE
 0x00400000

	)

116 
	#DER_DECIE
 0x00200000

	)

117 
	#DER_SYSIE
 0x00040000

	)

118 
	#DER_TRE
 0x00020000

	)

119 
	#DER_SEIE
 0x00004000

	)

120 
	#DER_ITLBMSE
 0x00002000

	)

121 
	#DER_ITLBERE
 0x00001000

	)

122 
	#DER_DTLBMSE
 0x00000800

	)

123 
	#DER_DTLBERE
 0x00000400

	)

124 
	#DER_LBRKE
 0x00000008

	)

125 
	#DER_IBRKE
 0x00000004

	)

126 
	#DER_EBRKE
 0x00000002

	)

127 
	#DER_DPIE
 0x00000001

	)

128 
	#SPRN_DMISS
 0x3D0

	)

129 
	#SPRN_DSISR
 0x012

	)

130 
	#SPRN_EAR
 0x11A

	)

131 
	#SPRN_HASH1
 0x3D2

	)

132 
	#SPRN_HASH2
 0x3D3

	)

133 
	#SPRN_HID0
 0x3F0

	)

134 
	#HID0_EMCP
 (1<<31Ë

	)

135 
	#HID0_EBA
 (1<<29Ë

	)

136 
	#HID0_EBD
 (1<<28Ë

	)

137 
	#HID0_SBCLK
 (1<<27)

	)

138 
	#HID0_EICE
 (1<<26)

	)

139 
	#HID0_TBEN
 (1<<26Ë

	)

140 
	#HID0_ECLK
 (1<<25)

	)

141 
	#HID0_PAR
 (1<<24)

	)

142 
	#HID0_STEN
 (1<<24Ë

	)

143 
	#HID0_HIGH_BAT
 (1<<23Ë

	)

144 
	#HID0_DOZE
 (1<<23)

	)

145 
	#HID0_NAP
 (1<<22)

	)

146 
	#HID0_SLEEP
 (1<<21)

	)

147 
	#HID0_DPM
 (1<<20)

	)

148 
	#HID0_BHTCLR
 (1<<18Ë

	)

149 
	#HID0_XAEN
 (1<<17Ë

	)

150 
	#HID0_NHR
 (1<<16Ë

	)

151 
	#HID0_ICE
 (1<<15Ë

	)

152 
	#HID0_DCE
 (1<<14Ë

	)

153 
	#HID0_ILOCK
 (1<<13Ë

	)

154 
	#HID0_DLOCK
 (1<<12Ë

	)

155 
	#HID0_ICFI
 (1<<11Ë

	)

156 
	#HID0_DCI
 (1<<10Ë

	)

157 
	#HID0_SPD
 (1<<9Ë

	)

158 
	#HID0_SGE
 (1<<7Ë

	)

159 
	#HID0_SIED
 (1<<7Ë

	)

160 
	#HID0_DFCA
 (1<<6Ë

	)

161 
	#HID0_LRSTK
 (1<<4Ë

	)

162 
	#HID0_BTIC
 (1<<5Ë

	)

163 
	#HID0_ABE
 (1<<3Ë

	)

164 
	#HID0_FOLD
 (1<<3Ë

	)

165 
	#HID0_BHTE
 (1<<2Ë

	)

166 
	#HID0_BTCD
 (1<<1Ë

	)

167 
	#HID0_NOPDST
 (1<<1Ë

	)

168 
	#HID0_NOPTI
 (1<<0Ë

	)

170 
	#SPRN_HID1
 0x3F1

	)

171 
	#HID1_EMCP
 (1<<31Ë

	)

172 
	#HID1_PC0
 (1<<16Ë

	)

173 
	#HID1_PC1
 (1<<15Ë

	)

174 
	#HID1_PC2
 (1<<14Ë

	)

175 
	#HID1_PC3
 (1<<13Ë

	)

176 
	#HID1_SYNCBE
 (1<<11Ë

	)

177 
	#HID1_ABE
 (1<<10Ë

	)

178 
	#SPRN_HID2
 0x3F8

	)

179 
	#SPRN_IABR
 0x3F2

	)

180 
	#SPRN_HID4
 0x3F4

	)

181 
	#SPRN_HID5
 0x3F6

	)

182 #i‡!
deföed
(
SPRN_IAC1
Ë&& !deföed(
SPRN_IAC2
)

183 
	#SPRN_IAC1
 0x3F4

	)

184 
	#SPRN_IAC2
 0x3F5

	)

186 
	#SPRN_IBAT0L
 0x211

	)

187 
	#SPRN_IBAT0U
 0x210

	)

188 
	#SPRN_IBAT1L
 0x213

	)

189 
	#SPRN_IBAT1U
 0x212

	)

190 
	#SPRN_IBAT2L
 0x215

	)

191 
	#SPRN_IBAT2U
 0x214

	)

192 
	#SPRN_IBAT3L
 0x217

	)

193 
	#SPRN_IBAT3U
 0x216

	)

194 
	#SPRN_IBAT4L
 0x231

	)

195 
	#SPRN_IBAT4U
 0x230

	)

196 
	#SPRN_IBAT5L
 0x233

	)

197 
	#SPRN_IBAT5U
 0x232

	)

198 
	#SPRN_IBAT6L
 0x235

	)

199 
	#SPRN_IBAT6U
 0x234

	)

200 
	#SPRN_IBAT7L
 0x237

	)

201 
	#SPRN_IBAT7U
 0x236

	)

202 
	#SPRN_ICMP
 0x3D5

	)

203 
	#SPRN_ICTC
 0x3FB

	)

204 
	#SPRN_ICTRL
 0x3F3

	)

205 
	#ICTRL_EICE
 0x08000000

	)

206 
	#ICTRL_EDC
 0x04000000

	)

207 
	#ICTRL_EICP
 0x00000100

	)

208 
	#SPRN_IMISS
 0x3D4

	)

209 
	#SPRN_IMMR
 0x27E

	)

210 
	#SPRN_L2CR
 0x3F9

	)

211 
	#SPRN_L2CR2
 0x3f8

	)

212 
	#L2CR_L2E
 0x80000000

	)

213 
	#L2CR_L2PE
 0x40000000

	)

214 
	#L2CR_L2SIZ_MASK
 0x30000000

	)

215 
	#L2CR_L2SIZ_256KB
 0x10000000

	)

216 
	#L2CR_L2SIZ_512KB
 0x20000000

	)

217 
	#L2CR_L2SIZ_1MB
 0x30000000

	)

218 
	#L2CR_L2CLK_MASK
 0x0e000000

	)

219 
	#L2CR_L2CLK_DISABLED
 0x00000000

	)

220 
	#L2CR_L2CLK_DIV1
 0x02000000

	)

221 
	#L2CR_L2CLK_DIV1_5
 0x04000000

	)

222 
	#L2CR_L2CLK_DIV2
 0x08000000

	)

223 
	#L2CR_L2CLK_DIV2_5
 0x0a000000

	)

224 
	#L2CR_L2CLK_DIV3
 0x0c000000

	)

225 
	#L2CR_L2RAM_MASK
 0x01800000

	)

226 
	#L2CR_L2RAM_FLOW
 0x00000000

	)

227 
	#L2CR_L2RAM_PIPE
 0x01000000

	)

228 
	#L2CR_L2RAM_PIPE_LW
 0x01800000

	)

229 
	#L2CR_L2DO
 0x00400000

	)

230 
	#L2CR_L2I
 0x00200000

	)

231 
	#L2CR_L2CTL
 0x00100000

	)

232 
	#L2CR_L2WT
 0x00080000

	)

233 
	#L2CR_L2TS
 0x00040000

	)

234 
	#L2CR_L2OH_MASK
 0x00030000

	)

235 
	#L2CR_L2OH_0_5
 0x00000000

	)

236 
	#L2CR_L2OH_1_0
 0x00010000

	)

237 
	#L2CR_L2SL
 0x00008000

	)

238 
	#L2CR_L2DF
 0x00004000

	)

239 
	#L2CR_L2BYP
 0x00002000

	)

240 
	#L2CR_L2IP
 0x00000001

	)

241 
	#SPRN_L3CR
 0x3FA

	)

242 
	#L3CR_L3E
 0x80000000

	)

243 
	#L3CR_L3PE
 0x40000000

	)

244 
	#L3CR_L3APE
 0x20000000

	)

245 
	#L3CR_L3SIZ
 0x10000000

	)

246 
	#L3CR_L3CLKEN
 0x08000000

	)

247 
	#L3CR_L3RES
 0x04000000

	)

248 
	#L3CR_L3CLKDIV
 0x03800000

	)

249 
	#L3CR_L3IO
 0x00400000

	)

250 
	#L3CR_L3SPO
 0x00040000

	)

251 
	#L3CR_L3CKSP
 0x00030000

	)

252 
	#L3CR_L3PSP
 0x0000e000

	)

253 
	#L3CR_L3REP
 0x00001000

	)

254 
	#L3CR_L3HWF
 0x00000800

	)

255 
	#L3CR_L3I
 0x00000400

	)

256 
	#L3CR_L3RT
 0x00000300

	)

257 
	#L3CR_L3NIRCA
 0x00000080

	)

258 
	#L3CR_L3DO
 0x00000040

	)

259 
	#L3CR_PMEN
 0x00000004

	)

260 
	#L3CR_PMSIZ
 0x00000001

	)

261 
	#SPRN_MSSCR0
 0x3f6

	)

262 
	#SPRN_MSSSR0
 0x3f7

	)

263 
	#SPRN_LDSTCR
 0x3f8

	)

264 
	#SPRN_LDSTDB
 0x3f4

	)

265 
	#SPRN_LR
 0x008

	)

266 
	#SPRN_MMCR0
 0x3B8

	)

267 
	#SPRN_MMCR1
 0x3BC

	)

268 #i‚de‡
SPRN_PIR


269 
	#SPRN_PIR
 0x3FF

	)

271 
	#SPRN_PMC1
 0x3B9

	)

272 
	#SPRN_PMC2
 0x3BA

	)

273 
	#SPRN_PMC3
 0x3BD

	)

274 
	#SPRN_PMC4
 0x3BE

	)

275 
	#SPRN_PTEHI
 0x3D5

	)

276 
	#SPRN_PTELO
 0x3D6

	)

277 
	#SPRN_PVR
 0x11F

	)

278 
	#SPRN_RPA
 0x3D6

	)

279 
	#SPRN_SDA
 0x3BF

	)

280 
	#SPRN_SDR1
 0x019

	)

281 
	#SPRN_SIA
 0x3BB

	)

282 
	#SPRN_SPRG0
 0x110

	)

283 
	#SPRN_SPRG1
 0x111

	)

284 
	#SPRN_SPRG2
 0x112

	)

285 
	#SPRN_SPRG3
 0x113

	)

286 
	#SPRN_SPRG4
 0x114

	)

287 
	#SPRN_SPRG5
 0x115

	)

288 
	#SPRN_SPRG6
 0x116

	)

289 
	#SPRN_SPRG7
 0x117

	)

290 
	#SPRN_SRR0
 0x01A

	)

291 
	#SPRN_SRR1
 0x01B

	)

292 
	#SPRN_THRM1
 0x3FC

	)

294 
	#THRM1_TIN
 (1 << 31)

	)

295 
	#THRM1_TIV
 (1 << 30)

	)

296 
	#THRM1_THRES
(
x
Ë((x&0x7f)<<23)

	)

297 
	#THRM3_SITV
(
x
Ë((x&0x3fff)<<1)

	)

298 
	#THRM1_TID
 (1<<2)

	)

299 
	#THRM1_TIE
 (1<<1)

	)

300 
	#THRM1_V
 (1<<0)

	)

301 
	#SPRN_THRM2
 0x3FD

	)

302 
	#SPRN_THRM3
 0x3FE

	)

303 
	#THRM3_E
 (1<<0)

	)

304 
	#SPRN_TLBMISS
 0x3D4

	)

305 
	#SPRN_UMMCR0
 0x3A8

	)

306 
	#SPRN_UMMCR1
 0x3AC

	)

307 
	#SPRN_UPMC1
 0x3A9

	)

308 
	#SPRN_UPMC2
 0x3AA

	)

309 
	#SPRN_UPMC3
 0x3AD

	)

310 
	#SPRN_UPMC4
 0x3AE

	)

311 
	#SPRN_USIA
 0x3AB

	)

312 
	#SPRN_VRSAVE
 0x100

	)

313 
	#SPRN_XER
 0x001

	)

316 
	#MMCR0_PMC1_CYCLES
 (1 << 7)

	)

317 
	#MMCR0_PMC1_ICACHEMISS
 (5 << 7)

	)

318 
	#MMCR0_PMC1_DTLB
 (6 << 7)

	)

319 
	#MMCR0_PMC2_DCACHEMISS
 0x6

	)

320 
	#MMCR0_PMC2_CYCLES
 0x1

	)

321 
	#MMCR0_PMC2_ITLB
 0x7

	)

322 
	#MMCR0_PMC2_LOADMISSTIME
 0x5

	)

325 
	#CTR
 
SPRN_CTR


	)

326 
	#DAR
 
SPRN_DAR


	)

327 
	#DABR
 
SPRN_DABR


	)

328 
	#DBAT0L
 
SPRN_DBAT0L


	)

329 
	#DBAT0U
 
SPRN_DBAT0U


	)

330 
	#DBAT1L
 
SPRN_DBAT1L


	)

331 
	#DBAT1U
 
SPRN_DBAT1U


	)

332 
	#DBAT2L
 
SPRN_DBAT2L


	)

333 
	#DBAT2U
 
SPRN_DBAT2U


	)

334 
	#DBAT3L
 
SPRN_DBAT3L


	)

335 
	#DBAT3U
 
SPRN_DBAT3U


	)

336 
	#DBAT4L
 
SPRN_DBAT4L


	)

337 
	#DBAT4U
 
SPRN_DBAT4U


	)

338 
	#DBAT5L
 
SPRN_DBAT5L


	)

339 
	#DBAT5U
 
SPRN_DBAT5U


	)

340 
	#DBAT6L
 
SPRN_DBAT6L


	)

341 
	#DBAT6U
 
SPRN_DBAT6U


	)

342 
	#DBAT7L
 
SPRN_DBAT7L


	)

343 
	#DBAT7U
 
SPRN_DBAT7U


	)

344 
	#DEC
 
SPRN_DEC


	)

345 
	#DMISS
 
SPRN_DMISS


	)

346 
	#DSISR
 
SPRN_DSISR


	)

347 
	#EAR
 
SPRN_EAR


	)

348 
	#HASH1
 
SPRN_HASH1


	)

349 
	#HASH2
 
SPRN_HASH2


	)

350 
	#HID0
 
SPRN_HID0


	)

351 
	#HID1
 
SPRN_HID1


	)

352 
	#IABR
 
SPRN_IABR


	)

353 
	#IBAT0L
 
SPRN_IBAT0L


	)

354 
	#IBAT0U
 
SPRN_IBAT0U


	)

355 
	#IBAT1L
 
SPRN_IBAT1L


	)

356 
	#IBAT1U
 
SPRN_IBAT1U


	)

357 
	#IBAT2L
 
SPRN_IBAT2L


	)

358 
	#IBAT2U
 
SPRN_IBAT2U


	)

359 
	#IBAT3L
 
SPRN_IBAT3L


	)

360 
	#IBAT3U
 
SPRN_IBAT3U


	)

361 
	#IBAT4L
 
SPRN_IBAT4L


	)

362 
	#IBAT4U
 
SPRN_IBAT4U


	)

363 
	#IBAT5L
 
SPRN_IBAT5L


	)

364 
	#IBAT5U
 
SPRN_IBAT5U


	)

365 
	#IBAT6L
 
SPRN_IBAT6L


	)

366 
	#IBAT6U
 
SPRN_IBAT6U


	)

367 
	#IBAT7L
 
SPRN_IBAT7L


	)

368 
	#IBAT7U
 
SPRN_IBAT7U


	)

369 
	#ICMP
 
SPRN_ICMP


	)

370 
	#IMISS
 
SPRN_IMISS


	)

371 
	#IMMR
 
SPRN_IMMR


	)

372 
	#L2CR
 
SPRN_L2CR


	)

373 
	#L3CR
 
SPRN_L3CR


	)

374 
	#LR
 
SPRN_LR


	)

375 
	#PVR
 
SPRN_PVR


	)

376 
	#RPA
 
SPRN_RPA


	)

377 
	#SDR1
 
SPRN_SDR1


	)

378 
	#SPR0
 
SPRN_SPRG0


	)

379 
	#SPR1
 
SPRN_SPRG1


	)

380 
	#SPR2
 
SPRN_SPRG2


	)

381 
	#SPR3
 
SPRN_SPRG3


	)

382 
	#SPR4
 
SPRN_SPRG4


	)

383 
	#SPR5
 
SPRN_SPRG5


	)

384 
	#SPR6
 
SPRN_SPRG6


	)

385 
	#SPR7
 
SPRN_SPRG7


	)

386 
	#SPRG0
 
SPRN_SPRG0


	)

387 
	#SPRG1
 
SPRN_SPRG1


	)

388 
	#SPRG2
 
SPRN_SPRG2


	)

389 
	#SPRG3
 
SPRN_SPRG3


	)

390 
	#SPRG4
 
SPRN_SPRG4


	)

391 
	#SPRG5
 
SPRN_SPRG5


	)

392 
	#SPRG6
 
SPRN_SPRG6


	)

393 
	#SPRG7
 
SPRN_SPRG7


	)

394 
	#SRR0
 
SPRN_SRR0


	)

395 
	#SRR1
 
SPRN_SRR1


	)

396 
	#SRR2
 
SPRN_SRR2


	)

397 
	#SRR3
 
SPRN_SRR3


	)

398 
	#ICTC
 
SPRN_ICTC


	)

399 
	#THRM1
 
SPRN_THRM1


	)

400 
	#THRM2
 
SPRN_THRM2


	)

401 
	#THRM3
 
SPRN_THRM3


	)

402 
	#XER
 
SPRN_XER


	)

403 
	#TBRL
 
SPRN_TBRL


	)

404 
	#TBRU
 
SPRN_TBRU


	)

405 
	#TBWL
 
SPRN_TBWL


	)

406 
	#TBWU
 
SPRN_TBWU


	)

412 
	#PVR_VER
(
pvr
Ë((’vrË>> 16Ë& 0xFFFFË

	)

413 
	#PVR_REV
(
pvr
Ë((’vrË>> 0Ë& 0xFFFFË

	)

420 
	#PVR_FAM
(
pvr
Ë((’vrË>> 20Ë& 0xFFFË

	)

421 
	#PVR_MEM
(
pvr
Ë((’vrË>> 16Ë& 0xFË

	)

422 
	#PVR_CORE
(
pvr
Ë((’vrË>> 12Ë& 0xFË

	)

423 
	#PVR_CFG
(
pvr
Ë((’vrË>> 8Ë& 0xFË

	)

424 
	#PVR_MAJ
(
pvr
Ë((’vrË>> 4Ë& 0xFË

	)

425 
	#PVR_MIN
(
pvr
Ë((’vrË>> 0Ë& 0xFË

	)

429 
	#PVR_403GA
 0x00200000

	)

430 
	#PVR_403GB
 0x00200100

	)

431 
	#PVR_403GC
 0x00200200

	)

432 
	#PVR_403GCX
 0x00201400

	)

433 
	#PVR_405GP
 0x40110000

	)

434 
	#PVR_STB03XXX
 0x40310000

	)

435 
	#PVR_NP405H
 0x41410000

	)

436 
	#PVR_NP405L
 0x41610000

	)

437 
	#PVR_440GP_RB
 0x40120440

	)

438 
	#PVR_440GP_RC1
 0x40120481

	)

439 
	#PVR_440GP_RC2
 0x40200481

	)

440 
	#PVR_440GX_RA
 0x51b21850

	)

441 
	#PVR_440GX_RB
 0x51b21851

	)

442 
	#PVR_440GX_RB1
 0x51b21852

	)

443 
	#PVR_601
 0x00010000

	)

444 
	#PVR_602
 0x00050000

	)

445 
	#PVR_603
 0x00030000

	)

446 
	#PVR_603e
 0x00060000

	)

447 
	#PVR_603ev
 0x00070000

	)

448 
	#PVR_603r
 0x00071000

	)

449 
	#PVR_604
 0x00040000

	)

450 
	#PVR_604e
 0x00090000

	)

451 
	#PVR_604r
 0x000A0000

	)

452 
	#PVR_620
 0x00140000

	)

453 
	#PVR_740
 0x00080000

	)

454 
	#PVR_750
 
PVR_740


	)

455 
	#PVR_740P
 0x10080000

	)

456 
	#PVR_750P
 
PVR_740P


	)

457 
	#PVR_7400
 0x000C0000

	)

458 
	#PVR_7410
 0x800C0000

	)

459 
	#PVR_7450
 0x80000000

	)

466 
	#PVR_821
 0x00500000

	)

467 
	#PVR_823
 
PVR_821


	)

468 
	#PVR_850
 
PVR_821


	)

469 
	#PVR_860
 
PVR_821


	)

470 
	#PVR_8240
 0x00810100

	)

471 
	#PVR_8245
 0x80811014

	)

472 
	#PVR_8260
 
PVR_8240


	)

475 
	#SR0
 0

	)

476 
	#SR1
 1

	)

477 
	#SR2
 2

	)

478 
	#SR3
 3

	)

479 
	#SR4
 4

	)

480 
	#SR5
 5

	)

481 
	#SR6
 6

	)

482 
	#SR7
 7

	)

483 
	#SR8
 8

	)

484 
	#SR9
 9

	)

485 
	#SR10
 10

	)

486 
	#SR11
 11

	)

487 
	#SR12
 12

	)

488 
	#SR13
 13

	)

489 
	#SR14
 14

	)

490 
	#SR15
 15

	)

495 
	#RELOC_SYM
(
sym
) \

496 
mÊr
 
r3
; \

497 
bl
 1f; \

498 1: 
mÊr
 
r0
; \

499 
mér
 
r3
; \

500 
lis
 
r3
, 1b@
ha
; \

501 
‹i
 
r3
,Ñ3, 1b@
l
; \

502 
subf
 
r0
, 
r3
,Ñ0; \

503 
lis
 
r3
, 
sym
@
ha
; \

504 
‹i
 
r3
,Ñ3, 
sym
@
l
; \

505 
add
 
r3
,Ñ3, 
r0


	)

	@kexec/arch/ppc64/crashdump-ppc64.c

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<î∫o.h
>

25 
	~<limôs.h
>

26 
	~<ñf.h
>

27 
	~<dúít.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<f˙é.h
>

31 
	~"../../kexec.h
"

32 
	~"../../kexec-ñf.h
"

33 
	~"../../kexec-sysˇŒ.h
"

34 
	~"../../¸ashdump.h
"

35 
	~"kexec-µc64.h
"

36 
	~"¸ashdump-µc64.h
"

38 
¸ash_ñf_öfo
 
	gñf_öfo64
 =

40 
˛ass
: 
ELFCLASS64
,

41 
d©a
: 
ELFDATA2MSB
,

42 
machöe
: 
EM_PPC64
,

43 
∑ge_off£t
: 
PAGE_OFFSET
,

44 
lowmem_limô
: 
MAXMEM
,

47 
¸ash_ñf_öfo
 
	gñf_öfo32
 =

49 
˛ass
: 
ELFCLASS32
,

50 
d©a
: 
ELFDATA2MSB
,

51 
machöe
: 
EM_PPC64
,

52 
∑ge_off£t
: 
PAGE_OFFSET
,

53 
lowmem_limô
: 
MAXMEM
,

56 
¨ch_›ti⁄s_t
 
¨ch_›ti⁄s
;

61 
mem‹y_ønge
 *
	g¸ash_mem‹y_ønge
 = 
NULL
;

64 
	g¸ash_max_mem‹y_ønges
;

70 
mem_rgns_t
 
	gußbÀmem_rgns
 = {0, 
NULL
};

72 
	gc°¨t
, 
	g˚nd
;

73 
	gmem‹y_ønges
;

79 
	$ex˛ude_¸ash_ªgi⁄
(
uöt64_t
 
°¨t
, uöt64_à
íd
)

82 i‡(
mem‹y_limô
) {

83 i‡(
°¨t
 >
mem‹y_limô
)

85 i‡(
íd
 > 
mem‹y_limô
)

86 
íd
 = 
mem‹y_limô
;

89 i‡(
c°¨t
 < 
íd
 && 
˚nd
 > 
°¨t
) {

90 i‡(
°¨t
 < 
c°¨t
 && 
íd
 > 
˚nd
) {

91 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

92 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 = 
c°¨t
;

93 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

94 
mem‹y_ønges
++;

95 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 
˚nd
;

96 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

97 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

98 
mem‹y_ønges
++;

99 } i‡(
°¨t
 < 
c°¨t
) {

100 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

101 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 = 
c°¨t
;

102 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

103 
mem‹y_ønges
++;

104 } i‡(
íd
 > 
˚nd
) {

105 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 
˚nd
;

106 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

107 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

108 
mem‹y_ønges
++;

111 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = start;

112 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
íd
 =Énd;

113 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

114 
mem‹y_ønges
++;

116 
	}
}

118 
	$gë_dyn_ªc⁄f_¸ash_mem‹y_ønges
()

120 
uöt64_t
 
°¨t
, 
íd
;

121 
‚ame
[128], 
buf
[32];

122 
FILE
 *
fûe
;

123 
i
;

124 
n
;

125 
uöt32_t
 
Êags
;

127 
	`°r˝y
(
‚ame
, "/proc/device-tree/");

128 
	`°rˇt
(
‚ame
, "ibm,dynamic-reconfiguration-memory/ibm,dynamic-memory");

129 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

130 
	`≥º‹
(
‚ame
);

134 
	`f£ek
(
fûe
, 4, 
SEEK_SET
);

135 
i
 = 0; i < 
num_of_lmbs
; i++) {

136 i‡((
n
 = 
	`‰ód
(
buf
, 1, 24, 
fûe
)) < 0) {

137 
	`≥º‹
(
‚ame
);

138 
	`f˛o£
(
fûe
);

141 i‡(
mem‹y_ønges
 >(
max_mem‹y_ønges
 + 1)) {

143 
	`Ârötf
(
°dîr
,

149 
°¨t
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[
DRCONF_ADDR
]);

150 
íd
 = 
°¨t
 + 
lmb_size
;

151 i‡(
°¨t
 =0 && 
íd
 >(
BACKUP_SRC_END
 + 1))

152 
°¨t
 = 
BACKUP_SRC_END
 + 1;

154 
Êags
 = 
	`be32_to_˝u
((*((
uöt32_t
 *)&
buf
[
DRCONF_FLAGS
])));

157 i‡((
Êags
 & 0x80) || !(flags & 0x8))

160 
	`ex˛ude_¸ash_ªgi⁄
(
°¨t
, 
íd
);

162 
	`f˛o£
(
fûe
);

164 
	}
}

177 
	$gë_¸ash_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
)

180 
devi˚_åì
[256] = "/proc/device-tree/";

181 
‚ame
[256];

182 
buf
[
MAXBYTES
];

183 
DIR
 *
dú
, *
dmem
;

184 
FILE
 *
fûe
;

185 
dúít
 *
díåy
, *
míåy
;

186 
i
, 
n
, 
¸ash_∫g_Àn
 = 0;

187 
°¨t
, 
íd
;

188 
∑ge_size
;

190 
¸ash_max_mem‹y_ønges
 = 
max_mem‹y_ønges
 + 6;

191 
¸ash_∫g_Àn
 = (
mem‹y_ønge
Ë* 
¸ash_max_mem‹y_ønges
;

193 
¸ash_mem‹y_ønge
 = (
mem‹y_ønge
 *Ë
	`mÆloc
(
¸ash_∫g_Àn
);

194 i‡(!
¸ash_mem‹y_ønge
) {

195 
	`Ârötf
(
°dîr
, "Allocation for crash memoryÑange failed\n");

198 
	`mem£t
(
¸ash_mem‹y_ønge
, 0, 
¸ash_∫g_Àn
);

201 
¸ash_mem‹y_ønge
[0].
°¨t
 = 
BACKUP_SRC_START
;

202 
¸ash_mem‹y_ønge
[0].
íd
 = 
BACKUP_SRC_END
 + 1;

203 
¸ash_mem‹y_ønge
[0].
ty≥
 = 
RANGE_RAM
;

204 
mem‹y_ønges
++;

206 i‡((
dú
 = 
	`›ídú
(
devi˚_åì
)Ë=
NULL
) {

207 
	`≥º‹
(
devi˚_åì
);

208 
îr
;

211 
c°¨t
 = 
¸ash_ba£
;

212 
˚nd
 = 
¸ash_ba£
 + 
¸ash_size
;

214 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

215 i‡(!
	`°∫cmp
(
díåy
->
d_«me
,

217 
	`gë_dyn_ªc⁄f_¸ash_mem‹y_ønges
();

220 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) &&

221 
	`°rcmp
(
díåy
->
d_«me
, "memory"))

223 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

224 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

225 i‡((
dmem
 = 
	`›ídú
(
‚ame
)Ë=
NULL
) {

226 
	`≥º‹
(
‚ame
);

227 
	`˛o£dú
(
dú
);

228 
îr
;

230 (
míåy
 = 
	`ªaddú
(
dmem
)Ë!
NULL
) {

231 i‡(
	`°rcmp
(
míåy
->
d_«me
, "reg"))

233 
	`°rˇt
(
‚ame
, "/reg");

234 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

235 
	`≥º‹
(
‚ame
);

236 
	`˛o£dú
(
dmem
);

237 
	`˛o£dú
(
dú
);

238 
îr
;

240 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

241 
	`≥º‹
(
‚ame
);

242 
	`f˛o£
(
fûe
);

243 
	`˛o£dú
(
dmem
);

244 
	`˛o£dú
(
dú
);

245 
îr
;

247 i‡(
mem‹y_ønges
 >(
max_mem‹y_ønges
 + 1)) {

249 
	`Ârötf
(
°dîr
,

252 
îr
;

255 
°¨t
 = 
	`be64_to_˝u
(((*)
buf
)[0]);

256 
íd
 = 
°¨t
 +

257 
	`be64_to_˝u
(((*)
buf
)[1]);

258 i‡(
°¨t
 =0 && 
íd
 >(
BACKUP_SRC_END
 + 1))

259 
°¨t
 = 
BACKUP_SRC_END
 + 1;

261 
	`ex˛ude_¸ash_ªgi⁄
(
°¨t
, 
íd
);

262 
	`f˛o£
(
fûe
);

264 
	`˛o£dú
(
dmem
);

266 
	`˛o£dú
(
dú
);

272 i‡(
¸ash_ba£
 < 
πas_ba£
 + 
πas_size
 &&

273 
πas_ba£
 < 
¸ash_ba£
 + 
¸ash_size
) {

274 
∑ge_size
 = 
	`gë∑gesize
();

275 
c°¨t
 = 
πas_ba£
;

276 
˚nd
 = 
πas_ba£
 + 
πas_size
;

277 i‡(
c°¨t
 < 
¸ash_ba£
)

278 
c°¨t
 = 
¸ash_ba£
;

279 i‡(
˚nd
 > 
¸ash_ba£
 + 
¸ash_size
)

280 
˚nd
 = 
¸ash_ba£
 + 
¸ash_size
;

291 
˚nd
 = 
	`_ALIGN
(˚nd, 
∑ge_size
);

293 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 
c°¨t
;

294 
¸ash_mem‹y_ønge
[
mem‹y_ønges
++].
íd
 = 
˚nd
;

301 i‡(
¸ash_ba£
 < 
›Æ_ba£
 + 
›Æ_size
 &&

302 
›Æ_ba£
 < 
¸ash_ba£
 + 
¸ash_size
) {

303 
∑ge_size
 = 
	`gë∑gesize
();

304 
c°¨t
 = 
›Æ_ba£
;

305 
˚nd
 = 
›Æ_ba£
 + 
›Æ_size
;

306 i‡(
c°¨t
 < 
¸ash_ba£
)

307 
c°¨t
 = 
¸ash_ba£
;

308 i‡(
˚nd
 > 
¸ash_ba£
 + 
¸ash_size
)

309 
˚nd
 = 
¸ash_ba£
 + 
¸ash_size
;

320 
˚nd
 = 
	`_ALIGN
(˚nd, 
∑ge_size
);

322 
¸ash_mem‹y_ønge
[
mem‹y_ønges
].
°¨t
 = 
c°¨t
;

323 
¸ash_mem‹y_ønge
[
mem‹y_ønges
++].
íd
 = 
˚nd
;

325 *
ønge
 = 
¸ash_mem‹y_ønge
;

326 *
ønges
 = 
mem‹y_ønges
;

328 
j
;

329 
	`dbg¥ötf
("CRASH MEMORY RANGES\n");

330 
j
 = 0; j < *
ønges
; j++) {

331 
°¨t
 = 
¸ash_mem‹y_ønge
[
j
].start;

332 
íd
 = 
¸ash_mem‹y_ønge
[
j
].end;

333 
	`dbg¥ötf
("%016Lx-%016Lx\n", 
°¨t
, 
íd
);

338 
îr
:

339 i‡(
¸ash_mem‹y_ønge
)

340 
	`‰ì
(
¸ash_mem‹y_ønge
);

342 
	}
}

345 
	$u…ﬂ
(
uöt64_t
 
i
, *
°r
)

347 
j
 = 0, 
k
;

348 
tmp
;

351 
°r
[
j
++] = 
i
 % 10 + '0';

352 } (
i
 /=10) > 0);

353 
°r
[
j
] = '\0';

356 
j
 = 0, 
k
 = 
	`°æí
(
°r
) - 1; j < k; j++, k--) {

357 
tmp
 = 
°r
[
k
];

358 
°r
[
k
] = så[
j
];

359 
°r
[
j
] = 
tmp
;

361 
	}
}

363 
	$add_cmdlöe_∑øm
(*
cmdlöe
, 
uöt64_t
 
addr
, *
cmd°r
,

364 *
byã
)

366 
cmdÀn
, 
Àn
, 
Æign
 = 1024;

367 
°r
[
COMMAND_LINE_SIZE
], *
±r
;

370 
byã
[0]) {

372 i‡(
addr
%
Æign
)

374 
addr
 =áddr/
Æign
;

377 
addr
 =áddr/(
Æign
 *align);

380 
±r
 = 
°r
;

381 
	`°r˝y
(
°r
, 
cmd°r
);

382 
±r
 +
	`°æí
(
°r
);

383 
	`u…ﬂ
(
addr
, 
±r
);

384 
	`°rˇt
(
°r
, 
byã
);

385 
Àn
 = 
	`°æí
(
°r
);

386 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

387 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

388 
	`dõ
("CommandÜine overflow\n");

389 
	`°rˇt
(
cmdlöe
, 
°r
);

390 
	`dbg¥ötf
("Comm™dÜöêa·îáddögÉlfc‹ehdr: %s\n", 
cmdlöe
);

392 
	}
}

398 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, * 
mod_cmdlöe
,

399 
uöt64_t
 
max_addr
, 
mö_ba£
)

401 *
tmp
;

402 
sz
;

403 
uöt64_t
 
ñfc‹ehdr
;

404 
ƒ_ønges
, 
Æign
 = 1024, 
i
;

405 
íd
;

406 
mem‹y_ønge
 *
mem_ønge
;

408 i‡(
	`gë_¸ash_mem‹y_ønges
(&
mem_ønge
, &
ƒ_ønges
) < 0)

411 
öfo
->
backup_§c_°¨t
 = 
BACKUP_SRC_START
;

412 
öfo
->
backup_§c_size
 = 
BACKUP_SRC_SIZE
;

414 
sz
 = 
	`_ALIGN
(
BACKUP_SRC_SIZE
, 
Æign
);

415 
tmp
 = 
	`xmÆloc
(
sz
);

416 
	`mem£t
(
tmp
, 0, 
sz
);

417 
öfo
->
backup_°¨t
 = 
	`add_buf„r
(öfo, 
tmp
, 
sz
, sz, 
Æign
,

418 0, 
max_addr
, 1);

419 
	`ª£rve
(
öfo
->
backup_°¨t
, 
sz
);

431 
i
 = 0; i < 
ƒ_ønges
; i++) {

432 
íd
 = 
¸ash_mem‹y_ønge
[
i
].end - 1;

433 
¸ash_mem‹y_ønge
[
i
].
íd
 =Énd;

438 i‡(
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 =
CORE_TYPE_ELF64
) {

439 i‡(
	`¸ash_¸óã_ñf64_hódîs
(
öfo
, &
ñf_öfo64
,

440 
¸ash_mem‹y_ønge
, 
ƒ_ønges
,

441 &
tmp
, &
sz
,

442 
ELF_CORE_HEADER_ALIGN
) < 0)

446 i‡(
	`¸ash_¸óã_ñf32_hódîs
(
öfo
, &
ñf_öfo32
,

447 
¸ash_mem‹y_ønge
, 
ƒ_ønges
,

448 &
tmp
, &
sz
,

449 
ELF_CORE_HEADER_ALIGN
) < 0)

453 
ñfc‹ehdr
 = 
	`add_buf„r
(
öfo
, 
tmp
, 
sz
, sz, 
Æign
, 
mö_ba£
,

454 
max_addr
, 1);

455 
	`ª£rve
(
ñfc‹ehdr
, 
sz
);

459 
	`add_cmdlöe_∑øm
(
mod_cmdlöe
, 
ñfc‹ehdr
, "Élfcorehdr=", "K");

461 
	}
}

467 
	$add_ußbÀ_mem_rgns
(
ba£
, 
size
)

469 
i
;

470 
íd
 = 
ba£
 + 
size
;

471 
u°¨t
, 
uíd
;

473 
ba£
 = 
	`_ALIGN_DOWN
(ba£, 
	`gë∑gesize
());

474 
íd
 = 
	`_ALIGN_UP
”nd, 
	`gë∑gesize
());

476 
i
=0; i < 
ußbÀmem_rgns
.
size
; i++) {

477 
u°¨t
 = 
ußbÀmem_rgns
.
ønges
[
i
].
°¨t
;

478 
uíd
 = 
ußbÀmem_rgns
.
ønges
[
i
].
íd
;

479 i‡(
ba£
 < 
uíd
 && 
íd
 > 
u°¨t
) {

480 i‡((
ba£
 >
u°¨t
Ë&& (
íd
 <
uíd
))

482 i‡(
ba£
 < 
u°¨t
 && 
íd
 > 
uíd
) {

483 
ußbÀmem_rgns
.
ønges
[
i
].
°¨t
 = 
ba£
;

484 
ußbÀmem_rgns
.
ønges
[
i
].
íd
 =Énd;

485 #ifde‡
DEBUG


486 
	`Ârötf
(
°dîr
, "usable memoryÑgn %u:Çew base:%llxÇew size:%llx\n",

487 
i
, 
ba£
, 
size
);

490 } i‡(
ba£
 < 
u°¨t
) {

491 
ußbÀmem_rgns
.
ønges
[
i
].
°¨t
 = 
ba£
;

492 #ifde‡
DEBUG


493 
	`Ârötf
(
°dîr
, "usable memoryÑgn %u:Çew base:%llxÇew size:%llx",

494 
i
, 
ba£
, 
ußbÀmem_rgns
.
ønges
[i].
íd
 - base);

497 } i‡(
íd
 > 
uíd
){

498 
ußbÀmem_rgns
.
ønges
[
i
].
íd
 =Énd;

499 #ifde‡
DEBUG


500 
	`Ârötf
(
°dîr
, "usable memoryÑgn %u:ÇewÉnd:%llx,Çew size:%llx",

501 
i
, 
íd
,Énd - 
ußbÀmem_rgns
.
ønges
[i].
°¨t
);

507 
ußbÀmem_rgns
.
ønges
[ußbÀmem_rgns.
size
].
°¨t
 = 
ba£
;

508 
ußbÀmem_rgns
.
ønges
[ußbÀmem_rgns.
size
++].
íd
 =Énd;

510 
	`dbg¥ötf
("usable memoryÑgns size:%u base:%llx size:%llx\n",

511 
ußbÀmem_rgns
.
size
, 
ba£
, size);

512 
	}
}

514 
	$is_¸ashkî√l_mem_ª£rved
()

516 
fd
;

518 
fd
 = 
	`›í
("/¥oc/devi˚-åì/cho£n/löux,¸ashkî√l-ba£", 
O_RDONLY
);

519 i‡(
fd
 < 0)

521 
	`˛o£
(
fd
);

523 
	}
}

526 
	$s‹t_ªgi⁄s
(
mem_rgns_t
 *
rgn
)

528 
i
, 
j
;

529 
t°¨t
, 
ãnd
;

530 
i
 = 0; i < 
rgn
->
size
; i++) {

531 
j
 = 0; j < 
rgn
->
size
 - 
i
 - 1; j++) {

532 i‡(
rgn
->
ønges
[
j
].
°¨t
 >Ñgn->ranges[j+1].start) {

533 
t°¨t
 = 
rgn
->
ønges
[
j
].
°¨t
;

534 
ãnd
 = 
rgn
->
ønges
[
j
].
íd
;

535 
rgn
->
ønges
[
j
].
°¨t
 =Ñgn->ranges[j+1].start;

536 
rgn
->
ønges
[
j
].
íd
 =Ñgn->ranges[j+1].end;

537 
rgn
->
ønges
[
j
+1].
°¨t
 = 
t°¨t
;

538 
rgn
->
ønges
[
j
+1].
íd
 = 
ãnd
;

544 
	}
}

	@kexec/arch/ppc64/crashdump-ppc64.h

1 #i‚de‡
CRASHDUMP_PPC64_H


2 
	#CRASHDUMP_PPC64_H


	)

4 
	~<°döt.h
>

5 
	~<sys/ty≥s.h
>

7 
	gkexec_öfo
;

8 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, *
mod_cmdlöe
,

9 
uöt64_t
 
max_addr
, 
mö_ba£
);

10 
add_ußbÀ_mem_rgns
(
ba£
, 
size
);

12 
	#PAGE_OFFSET
 0xC000000000000000ULL

	)

13 
	#KERNELBASE
 
PAGE_OFFSET


	)

14 
	#VMALLOCBASE
 0xD000000000000000ULL

	)

16 
	#__∑
(
x
Ë(()(x)-
PAGE_OFFSET
)

	)

17 
	#MAXMEM
 (-
KERNELBASE
-
VMALLOCBASE
)

	)

19 
	#COMMAND_LINE_SIZE
 512

	)

21 
	#BACKUP_SRC_START
 0x0000

	)

22 
	#BACKUP_SRC_END
 0xffff

	)

23 
	#BACKUP_SRC_SIZE
 (
BACKUP_SRC_END
 - 
BACKUP_SRC_START
 + 1)

	)

25 
	#KDUMP_BACKUP_LIMIT
 
BACKUP_SRC_SIZE


	)

27 
	#KERNEL_RUN_AT_ZERO_MAGIC
 0x72756e30

	)

29 
uöt64_t
 
¸ash_ba£
;

30 
uöt64_t
 
¸ash_size
;

31 
uöt64_t
 
mem‹y_limô
;

32 
πas_ba£
;

33 
πas_size
;

34 
uöt64_t
 
›Æ_ba£
;

35 
uöt64_t
 
›Æ_size
;

37 
uöt64_t
 
	glmb_size
;

38 
	gnum_of_lmbs
;

40 
	#DRCONF_ADDR
 0

	)

41 
	#DRCONF_FLAGS
 20

	)

	@kexec/arch/ppc64/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_PPC64_OPTIONS_H


2 
	#KEXEC_ARCH_PPC64_OPTIONS_H


	)

4 
	#OPT_ELF64_CORE
 (
OPT_MAX
+0)

	)

5 
	#OPT_ARCH_MAX
 (
OPT_MAX
+1)

	)

8 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+0)

	)

9 
	#OPT_RAMDISK
 (
OPT_ARCH_MAX
+1)

	)

10 
	#OPT_DEVICETREEBLOB
 (
OPT_ARCH_MAX
+2)

	)

11 
	#OPT_ARGS_IGNORE
 (
OPT_ARCH_MAX
+3)

	)

14 
	#KEXEC_ARCH_OPTIONS
 \

15 
KEXEC_OPTIONS
 \

16 { "ñf64-c‹e-hódîs", 0, 0, 
OPT_ELF64_CORE
 }, \

17 

	)

18 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

34 
	#KEXEC_ALL_OPTIONS
 \

35 
KEXEC_ARCH_OPTIONS
 \

36 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 }, \

37 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 }, \

38 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 }, \

39 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 }, \

40 { "devi˚åìblob", 1, 
NULL
, 
OPT_DEVICETREEBLOB
 }, \

41 { "dtb", 1, 
NULL
, 
OPT_DEVICETREEBLOB
 }, \

42 { "¨gs-löux", 0, 
NULL
, 
OPT_ARGS_IGNORE
 },

	)

44 
	#KEXEC_ALL_OPT_STR
 
KEXEC_OPT_STR


	)

	@kexec/arch/ppc64/kexec-elf-ppc64.c

23 
	#_GNU_SOURCE


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

27 
	~<î∫o.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<f˙é.h
>

31 
	~<uni°d.h
>

32 
	~<gë›t.h
>

33 
	~<löux/ñf.h
>

34 
	~"../../kexec.h
"

35 
	~"../../kexec-ñf.h
"

36 
	~"../../kexec-sysˇŒ.h
"

37 
	~"kexec-µc64.h
"

38 
	~"../../fs2dt.h
"

39 
	~"¸ashdump-µc64.h
"

40 
	~<¨ch/›ti⁄s.h
>

42 
uöt64_t
 
	göôrd_ba£
, 
	göôrd_size
;

43 
	gªu£_öôrd
 = 0;

44 c⁄° *
	gømdisk
;

46 
	gmy_debug
 = 0;

48 
	$ñf_µc64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

50 
mem_ehdr
 
ehdr
;

51 
ªsu…
;

52 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

53 i‡(
ªsu…
 < 0) {

54 
out
;

58 i‡((
ehdr
.
e_machöe
 !
EM_PPC64
Ë&& (ehdr.e_machöê!
EM_PPC
)) {

60 
ªsu…
 = -1;

61 
out
;

63 
ªsu…
 = 0;

64 
out
:

65 
	`‰ì_ñf_öfo
(&
ehdr
);

66  
ªsu…
;

67 
	}
}

69 
	$¨ch_ªu£_öôrd
()

71 
ªu£_öôrd
 = 1;

72 
	}
}

74 
	$ªad_¥›
(*
«me
, *
vÆue
, 
size_t
 
Àn
)

76 
fd
;

77 
size_t
 
æí
;

79 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
);

80 i‡(
fd
 == -1)

83 
æí
 = 
	`ªad
(
fd
, 
vÆue
, 
Àn
);

84 i‡(
æí
 < 0)

85 
	`Ârötf
(
°dîr
, "Warning : Can'tÑead %s : %s",

86 
«me
, 
	`°ªº‹
(
î∫o
));

87 i‡(
æí
 !
Àn
)

88 
	`Ârötf
(
°dîr
, "W¨nög : sh‹àªad from %s", 
«me
);

90 
	`˛o£
(
fd
);

92 
	}
}

94 
	$ñf_µc64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

95 
kexec_öfo
 *
öfo
)

97 
mem_ehdr
 
ehdr
;

98 *
cmdlöe
, *
modifõd_cmdlöe
 = 
NULL
;

99 c⁄° *
devi˚åìblob
;

100 
cmdlöe_Àn
, 
modifõd_cmdlöe_Àn
;

101 
uöt64_t
 
max_addr
, 
hﬁe_addr
;

102 *
£g_buf
 = 
NULL
;

103 
off_t
 
£g_size
 = 0;

104 
mem_phdr
 *
phdr
;

105 
size_t
 
size
;

106 #ifde‡
NEED_RESERVE_DTB


107 
uöt64_t
 *
rsvm≠_±r
;

108 
boŸblock
 *
bb_±r
;

110 
i
;

111 
ªsu…
, 
›t
;

112 
uöt64_t
 
my_kî√l
, 
my_dt_off£t
;

113 
uöt64_t
 
my_›Æ_ba£
 = 0, 
my_›Æ_íåy
 = 0;

114 
my_∑nic_kî√l
;

115 
uöt64_t
 
my_°ack
, 
my_backup_°¨t
;

116 
uöt64_t
 
toc_addr
;

117 
uöt32_t
 
my_run_©_lﬂd
;

118 
¶ave_code
[256/ ()], 
ma°î_íåy
;

121 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

122 
KEXEC_ARCH_OPTIONS


123 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 },

124 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 },

125 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 },

126 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 },

127 { "devi˚åìblob", 1, 
NULL
, 
OPT_DEVICETREEBLOB
 },

128 { "dtb", 1, 
NULL
, 
OPT_DEVICETREEBLOB
 },

129 { "¨gs-löux", 0, 
NULL
, 
OPT_ARGS_IGNORE
 },

130 { 0, 0, 
NULL
, 0 },

133 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_OPT_STR
 "";

136 
öôrd_ba£
 = 0;

137 
öôrd_size
 = 0;

138 
cmdlöe
 = 0;

139 
ømdisk
 = 0;

140 
devi˚åìblob
 = 0;

141 
max_addr
 = 0xFFFFFFFFFFFFFFFFULL;

142 
hﬁe_addr
 = 0;

144 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
,

145 
›ti⁄s
, 0)) != -1) {

146 
›t
) {

149 i‡(
›t
 < 
OPT_ARCH_MAX
)

151 
OPT_APPEND
:

152 
cmdlöe
 = 
›èrg
;

154 
OPT_RAMDISK
:

155 
ømdisk
 = 
›èrg
;

157 
OPT_DEVICETREEBLOB
:

158 
devi˚åìblob
 = 
›èrg
;

160 
OPT_ARGS_IGNORE
:

165 
cmdlöe_Àn
 = 0;

166 i‡(
cmdlöe
)

167 
cmdlöe_Àn
 = 
	`°æí
(
cmdlöe
) + 1;

169 
	`Ârötf
(
°dout
, "Warning:áppend= option isÇotÖassed. UsingÅhe first kernelÑootÖartition\n");

171 i‡(
ømdisk
 && 
ªu£_öôrd
)

172 
	`dõ
("Can't specify --ramdisk or --initrd with --reuseinitrd\n");

177 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

178 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

179 
	`mem£t
((*)
modifõd_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

180 i‡(
cmdlöe
) {

181 
	`°∫˝y
(
modifõd_cmdlöe
, 
cmdlöe
, 
COMMAND_LINE_SIZE
);

182 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

184 
modifõd_cmdlöe_Àn
 = 
	`°æí
(
modifõd_cmdlöe
);

188 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

189 i‡(
ªsu…
 < 0) {

190 
	`‰ì_ñf_öfo
(&
ehdr
);

191  
ªsu…
;

199 
phdr
 = &
ehdr
.
e_phdr
[0];

200 
size
 = 
phdr
->
p_fûesz
;

201 i‡(
size
 > 
phdr
->
p_memsz
)

202 
size
 = 
phdr
->
p_memsz
;

204 
my_kî√l
 = 
hﬁe_addr
 = 
	`loˇã_hﬁe
(
öfo
, 
size
, 0, 0, 
max_addr
, 1);

205 
ehdr
.
e_phdr
[0].
p_∑ddr
 = 
hﬁe_addr
;

206 
ªsu…
 = 
	`ñf_exec_lﬂd
(&
ehdr
, 
öfo
);

207 i‡(
ªsu…
 < 0) {

208 
	`‰ì_ñf_öfo
(&
ehdr
);

209  
ªsu…
;

215 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

216 
ªsu…
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
,

217 
max_addr
, 0);

218 i‡(
ªsu…
 < 0)

221 
cmdlöe
 = 
modifõd_cmdlöe
;

222 
cmdlöe_Àn
 = 
	`°æí
(
modifõd_cmdlöe
) + 1;

226 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
,

227 
purg©‹y_size
, 0, 
max_addr
, 1, 0);

232 i‡(
ømdisk
) {

233 i‡(
devi˚åìblob
) {

234 
	`Ârötf
(
°dîr
,

238 
£g_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
£g_size
);

239 
hﬁe_addr
 = 
	`add_buf„r
(
öfo
, 
£g_buf
, 
£g_size
, seg_size,

240 0, 0, 
max_addr
, 1);

241 
öôrd_ba£
 = 
hﬁe_addr
;

242 
öôrd_size
 = 
£g_size
;

245 i‡(
devi˚åìblob
) {

247 
£g_buf
 = 
	`¶uΩ_fûe
(
devi˚åìblob
, &
£g_size
);

250 
	`¸óã_Ê©ãn_åì
(&
£g_buf
, &
£g_size
, 
cmdlöe
);

252 
my_dt_off£t
 = 
	`add_buf„r
(
öfo
, 
£g_buf
, 
£g_size
, seg_size,

253 0, 0, 
max_addr
, -1);

255 #ifde‡
NEED_RESERVE_DTB


260 
bb_±r
 = (
boŸblock
 *)(
£g_buf
);

261 
rsvm≠_±r
 = (
uöt64_t
 *)(
£g_buf
 + 
	`be32_to_˝u
(
bb_±r
->
off_mem_rsvm≠
));

262 *
rsvm≠_±r
 || *(rsvmap_ptr+1))

263 
rsvm≠_±r
 += 2;

264 
rsvm≠_±r
 -= 2;

265 *
rsvm≠_±r
 = 
	`˝u_to_be64
(
my_dt_off£t
);

266 
rsvm≠_±r
++;

267 *
rsvm≠_±r
 = 
	`˝u_to_be64
((
uöt64_t
)
	`be32_to_˝u
(
bb_±r
->
tŸÆsize
));

270 i‡(
	`ªad_¥›
("/proc/device-tree/ibm,opal/opal-base-address",

271 &
my_›Æ_ba£
, (my_opal_base)) == 0) {

272 
my_›Æ_ba£
 = 
	`be64_to_˝u
(my_opal_base);

273 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "opal_base",

274 &
my_›Æ_ba£
, (my_opal_base));

277 i‡(
	`ªad_¥›
("/proc/device-tree/ibm,opal/opal-entry-address",

278 &
my_›Æ_íåy
, (my_opal_entry)) == 0) {

279 
my_›Æ_íåy
 = 
	`be64_to_˝u
(my_opal_entry);

280 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "opal_entry",

281 &
my_›Æ_íåy
, (my_opal_entry));

285 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "kî√l", &
my_kî√l
, (my_kernel));

288 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "dt_off£t", &
my_dt_off£t
,

289 (
my_dt_off£t
));

292 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "purg©‹y_°¨t", 
¶ave_code
,

293 (
¶ave_code
));

294 
ma°î_íåy
 = 
¶ave_code
[0];

295 
	`mem˝y
(
¶ave_code
, 
phdr
->
p_d©a
, (slave_code));

296 
¶ave_code
[0] = 
ma°î_íåy
;

297 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "purg©‹y_°¨t", 
¶ave_code
,

298 (
¶ave_code
));

300 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

301 
my_∑nic_kî√l
 = 1;

303 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "panic_kernel",

304 &
my_∑nic_kî√l
, (my_panic_kernel));

307 
my_backup_°¨t
 = 
öfo
->
backup_°¨t
;

308 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_start",

309 &
my_backup_°¨t
, (my_backup_start));

315 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "run_©_lﬂd", &
my_run_©_lﬂd
,

316 (
my_run_©_lﬂd
));

317 i‡(
my_run_©_lﬂd
 =
KERNEL_RUN_AT_ZERO_MAGIC
)

318 
my_run_©_lﬂd
 = 1;

320 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "run_©_lﬂd", &
my_run_©_lﬂd
,

321 (
my_run_©_lﬂd
));

325 
my_°ack
 = 
	`loˇã_hﬁe
(
öfo
, 16*1024, 0, 0, 
max_addr
, 1);

326 
my_°ack
 += 16*1024;

327 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "°ack", &
my_°ack
, (my_stack));

330 
toc_addr
 = 
	`my_r2
(&
öfo
->
rhdr
);

331 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "my_toc", &
toc_addr
, (toc_addr));

334 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "debug", &
my_debug
, (my_debug));

336 
my_kî√l
 = 0;

337 
my_dt_off£t
 = 0;

338 
my_∑nic_kî√l
 = 0;

339 
my_backup_°¨t
 = 0;

340 
my_°ack
 = 0;

341 
toc_addr
 = 0;

342 
my_run_©_lﬂd
 = 0;

343 
my_debug
 = 0;

344 
my_›Æ_ba£
 = 0;

345 
my_›Æ_íåy
 = 0;

347 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "›Æ_ba£", &
my_›Æ_ba£
,

348 (
my_›Æ_ba£
));

349 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "›Æ_íåy", &
my_›Æ_íåy
,

350 (
my_›Æ_íåy
));

351 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "kî√l", &
my_kî√l
, (my_kernel));

352 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "dt_off£t", &
my_dt_off£t
,

353 (
my_dt_off£t
));

354 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "run_©_lﬂd", &
my_run_©_lﬂd
,

355 (
my_run_©_lﬂd
));

356 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "∑nic_kî√l", &
my_∑nic_kî√l
,

357 (
my_∑nic_kî√l
));

358 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "backup_°¨t", &
my_backup_°¨t
,

359 (
my_backup_°¨t
));

360 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "°ack", &
my_°ack
, (my_stack));

361 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "my_toc", &
toc_addr
,

362 (
toc_addr
));

363 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "debug", &
my_debug
, (my_debug));

365 
	`dbg¥ötf
("öfo->íåy i†%p\n", 
öfo
->
íåy
);

366 
	`dbg¥ötf
("kî√»i†%Œx\n", ()
my_kî√l
);

367 
	`dbg¥ötf
("dt_offset is %llx\n",

368 ()
my_dt_off£t
);

369 
	`dbg¥ötf
("run_©_lﬂd fœg i†%x\n", 
my_run_©_lﬂd
);

370 
	`dbg¥ötf
("∑nic_kî√»i†%x\n", 
my_∑nic_kî√l
);

371 
	`dbg¥ötf
("backup_start is %llx\n",

372 ()
my_backup_°¨t
);

373 
	`dbg¥ötf
("°ack i†%Œx\n", ()
my_°ack
);

374 
	`dbg¥ötf
("toc_add∏i†%Œx\n", ()
toc_addr
);

375 
	`dbg¥ötf
("purg©‹y sizêi†%zu\n", 
purg©‹y_size
);

376 
	`dbg¥ötf
("debug i†%d\n", 
my_debug
);

377 
	`dbg¥ötf
("›Æ_ba£ i†%Œx\n", (Ë
my_›Æ_ba£
);

378 
	`dbg¥ötf
("›Æ_íåy i†%Œx\n", (Ë
my_›Æ_íåy
);

380 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++)

381 
	`Ârötf
(
°dîr
, "£gmít[%d].mem:%∞memsz:%zu\n", 
i
,

382 
öfo
->
£gmít
[
i
].
mem
, info->£gmít[i].
memsz
);

385 
	}
}

387 
	$ñf_µc64_ußge
()

389 
	`Ârötf
(
°dîr
, " --command-line=<CommandÜine> commandÜineÅoáppend.\n");

390 
	`Ârötf
(
°dîr
, " --append=<CommandÜine> sameás --command-line.\n");

391 
	`Ârötf
(
°dîr
, " --ramdisk=<filename> Initial RAM disk.\n");

392 
	`Ârötf
(
°dîr
, " --initrd=<filename> sameás --ramdisk.\n");

393 
	`Ârötf
(
°dîr
, " --devicetreeblob=<filename> Specify deviceÅree blob file.\n");

394 
	`Ârötf
(
°dîr
, " --dtb=<filename> sameás --devicetreeblob.\n");

396 
	`Ârötf
(
°dîr
, "elf support is still broken\n");

397 
	}
}

	@kexec/arch/ppc64/kexec-elf-rel-ppc64.c

1 
	~<°dio.h
>

2 
	~<ñf.h
>

3 
	~<°rög.h
>

4 
	~"../../kexec.h
"

5 
	~"../../kexec-ñf.h
"

6 
	~"kexec-µc64.h
"

8 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

10 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS64
) {

13 i‡(
ehdr
->
e_machöe
 !
EM_PPC64
) {

18 
	}
}

20 
mem_shdr
 *
	$toc_£˘i⁄
(c⁄° 
mem_ehdr
 *
ehdr
)

22 
mem_shdr
 *
shdr
, *
shdr_íd
;

23 *
°πab
;

25 
°πab
 = (*)
ehdr
->
e_shdr
[ehdr->
e_sh°∫dx
].
sh_d©a
;

26 
shdr_íd
 = &
ehdr
->
e_shdr
[ehdr->
e_shnum
];

27 
shdr
 = 
ehdr
->
e_shdr
; shd∏!
shdr_íd
; shdr++) {

28 i‡(
shdr
->
sh_size
 &&

29 
	`°rcmp
((*)&
°πab
[
shdr
->
sh_«me
], ".toc") == 0) {

30  
shdr
;

34  
NULL
;

35 
	}
}

40 
	$my_r2
(c⁄° 
mem_ehdr
 *
ehdr
)

42 
mem_shdr
 *
shdr
;

44 
shdr
 = 
	`toc_£˘i⁄
(
ehdr
);

45 i‡(!
shdr
) {

46 
	`dõ
("TOCÑeloc withoutáÅoc section?");

49  
shdr
->
sh_addr
 + 0x8000;

50 
	}
}

52 
	$do_ªœtive_toc
(
vÆue
, 
uöt16_t
 *
loˇti⁄
,

53 
mask
, 
com∂aö_sig√d
)

55 i‡(
com∂aö_sig√d
 && (
vÆue
 + 0x8000 > 0xffff)) {

56 
	`dõ
("TOC16Ññoˇti⁄ ovîÊow†(%lu)\n", 
vÆue
);

59 i‡((~
mask
 & 0xffffË& 
vÆue
) {

60 
	`dõ
("bad TOC16Ññoˇti⁄ (%lu)\n", 
vÆue
);

63 *
loˇti⁄
 = (*loˇti⁄ & ~
mask
Ë| (
vÆue
 & mask);

64 
	}
}

66 
	$machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
ehdr
, 
r_ty≥
,

67 *
loˇti⁄
, 
addªss
, 
vÆue
)

69 
r_ty≥
) {

70 
R_PPC64_ADDR32
:

72 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
;

75 
R_PPC64_ADDR64
:

76 
R_PPC64_REL64
:

78 *(
uöt64_t
 *)
loˇti⁄
 = 
vÆue
;

81 
R_PPC64_REL32
:

82 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
 - (uöt32_t)(
uöt64_t
)location;

85 
R_PPC64_TOC
:

86 *(
uöt64_t
 *)
loˇti⁄
 = 
	`my_r2
(
ehdr
);

89 
R_PPC64_TOC16
:

90 
	`do_ªœtive_toc
(
vÆue
 - 
	`my_r2
(
ehdr
), 
loˇti⁄
, 0xffff, 1);

93 
R_PPC64_TOC16_DS
:

94 
	`do_ªœtive_toc
(
vÆue
 - 
	`my_r2
(
ehdr
), 
loˇti⁄
, 0xfffc, 1);

97 
R_PPC64_TOC16_LO
:

98 
	`do_ªœtive_toc
(
vÆue
 - 
	`my_r2
(
ehdr
), 
loˇti⁄
, 0xffff, 0);

101 
R_PPC64_TOC16_LO_DS
:

102 
	`do_ªœtive_toc
(
vÆue
 - 
	`my_r2
(
ehdr
), 
loˇti⁄
, 0xfffc, 0);

105 
R_PPC64_TOC16_HI
:

106 
	`do_ªœtive_toc
((
vÆue
 - 
	`my_r2
(
ehdr
)Ë>> 16, 
loˇti⁄
,

110 
R_PPC64_TOC16_HA
:

111 
	`do_ªœtive_toc
((
vÆue
 - 
	`my_r2
(
ehdr
Ë+ 0x8000Ë>> 16, 
loˇti⁄
,

115 
R_PPC64_REL24
:

117 
vÆue
 -
addªss
;

118 i‡(
vÆue
 + 0x2000000 > 0x3ffffff || (value & 3) != 0) {

119 
	`dõ
("REL24 %lòouào‡ønge!\n", ()
vÆue
);

123 *(
uöt32_t
 *)
loˇti⁄
 = (*(uint32_t *)location & ~0x03fffffc) |

124 (
vÆue
 & 0x03fffffc);

127 
R_PPC64_ADDR16_LO
:

128 *(
uöt16_t
 *)
loˇti⁄
 = 
vÆue
 & 0xffff;

131 
R_PPC64_ADDR16_HI
:

132 *(
uöt16_t
 *)
loˇti⁄
 = (
vÆue
 >> 16) & 0xffff;

135 
R_PPC64_ADDR16_HA
:

136 *(
uöt16_t
 *)
loˇti⁄
 = (((
vÆue
 + 0x8000) >> 16) & 0xffff);

139 
R_PPC64_ADDR16_HIGHER
:

140 *(
uöt16_t
 *)
loˇti⁄
 = (((
uöt64_t
)
vÆue
 >> 32) & 0xffff);

143 
R_PPC64_ADDR16_HIGHEST
:

144 *(
uöt16_t
 *)
loˇti⁄
 = (((
uöt64_t
)
vÆue
 >> 48) & 0xffff);

156 
R_PPC64_REL16_HA
:

158 i‡(((*(
uöt32_t
*)
loˇti⁄
) & 0xffff0000) != 0x3c4c0000)

159 
	`dõ
("Unexpected instruction for R_PPC64_REL16_HA");

160 
vÆue
 +
	`my_r2
(
ehdr
);

162 *(
uöt32_t
 *)
loˇti⁄
 = 0x3c400000 + ((
vÆue
 >> 16) & 0xffff);

165 
R_PPC64_REL16_LO
:

167 i‡(((*(
uöt32_t
*)
loˇti⁄
) & 0xffff0000) != 0x38420000)

168 
	`dõ
("Unexpected instruction for R_PPC64_REL16_LO");

170 
vÆue
 +
	`my_r2
(
ehdr
) - 4;

171 *(
uöt16_t
 *)
loˇti⁄
 = 
vÆue
 & 0xffff;

175 
	`dõ
("Unknow¿ªœÑñoˇti⁄: %lu\n", 
r_ty≥
);

178 
	}
}

	@kexec/arch/ppc64/kexec-ppc64.c

21 
	~<°ddef.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<î∫o.h
>

25 
	~<°döt.h
>

26 
	~<°rög.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<dúít.h
>

30 
	~<gë›t.h
>

31 
	~"../../kexec.h
"

32 
	~"../../kexec-sysˇŒ.h
"

33 
	~"kexec-µc64.h
"

34 
	~"../../fs2dt.h
"

35 
	~"¸ashdump-µc64.h
"

36 
	~<¨ch/›ti⁄s.h
>

38 
mem‹y_ønge
 *
	gex˛ude_ønge
 = 
NULL
;

39 
mem‹y_ønge
 *
	gmem‹y_ønge
 = 
NULL
;

40 
mem‹y_ønge
 *
	gba£_mem‹y_ønge
 = 
NULL
;

41 
uöt64_t
 
	grmo_t›
;

42 
uöt64_t
 
	gmem‹y_max
 = 0;

43 
uöt64_t
 
	gmem‹y_limô
;

44 
	gƒ_mem‹y_ønges
, 
	gƒ_ex˛ude_ønges
;

45 
uöt64_t
 
	g¸ash_ba£
, 
	g¸ash_size
;

46 
	gπas_ba£
, 
	gπas_size
;

47 
uöt64_t
 
	g›Æ_ba£
, 
	g›Æ_size
;

48 
	gmax_mem‹y_ønges
;

50 
	$˛ónup_mem‹y_ønges
()

52 i‡(
mem‹y_ønge
)

53 
	`‰ì
(
mem‹y_ønge
);

54 i‡(
ba£_mem‹y_ønge
)

55 
	`‰ì
(
ba£_mem‹y_ønge
);

56 i‡(
ex˛ude_ønge
)

57 
	`‰ì
(
ex˛ude_ønge
);

58 i‡(
ußbÀmem_rgns
.
ønges
)

59 
	`‰ì
(
ußbÀmem_rgns
.
ønges
);

60 
	}
}

66 
	$Æloc_mem‹y_ønges
()

68 
mem‹y_ønge_Àn
;

70 
mem‹y_ønge_Àn
 = (
mem‹y_ønge
Ë* 
max_mem‹y_ønges
;

72 
mem‹y_ønge
 = (mem‹y_øngê*Ë
	`mÆloc
(
mem‹y_ønge_Àn
);

73 i‡(!
mem‹y_ønge
)

76 
ba£_mem‹y_ønge
 = (
mem‹y_ønge
 *Ë
	`mÆloc
(
mem‹y_ønge_Àn
);

77 i‡(!
ba£_mem‹y_ønge
)

78 
îr1
;

80 
ex˛ude_ønge
 = (
mem‹y_ønge
 *Ë
	`mÆloc
(
mem‹y_ønge_Àn
);

81 i‡(!
ex˛ude_ønge
)

82 
îr1
;

84 
ußbÀmem_rgns
.
ønges
 = (
mem‹y_ønge
 *)

85 
	`mÆloc
(
mem‹y_ønge_Àn
);

86 i‡(!(
ußbÀmem_rgns
.
ønges
))

87 
îr1
;

89 
	`mem£t
(
mem‹y_ønge
, 0, 
mem‹y_ønge_Àn
);

90 
	`mem£t
(
ba£_mem‹y_ønge
, 0, 
mem‹y_ønge_Àn
);

91 
	`mem£t
(
ex˛ude_ønge
, 0, 
mem‹y_ønge_Àn
);

92 
	`mem£t
(
ußbÀmem_rgns
.
ønges
, 0, 
mem‹y_ønge_Àn
);

95 
îr1
:

96 
	`Ârötf
(
°dîr
, "memoryÑange structureállocation failure\n");

97 
	`˛ónup_mem‹y_ønges
();

100 
	}
}

102 
	$ªÆloc_mem‹y_ønges
()

104 
size_t
 
mem‹y_ønge_Àn
;

106 
max_mem‹y_ønges
++;

107 
mem‹y_ønge_Àn
 = (
mem‹y_ønge
Ë* 
max_mem‹y_ønges
;

109 
mem‹y_ønge
 = (mem‹y_øngê*Ë
	`ªÆloc
(mem‹y_ønge, 
mem‹y_ønge_Àn
);

110 i‡(!
mem‹y_ønge
)

111 
îr
;

113 
ba£_mem‹y_ønge
 = (
mem‹y_ønge
 *Ë
	`ªÆloc
(ba£_mem‹y_ønge, 
mem‹y_ønge_Àn
);

114 i‡(!
ba£_mem‹y_ønge
)

115 
îr
;

117 
ex˛ude_ønge
 = (
mem‹y_ønge
 *Ë
	`ªÆloc
”x˛ude_ønge, 
mem‹y_ønge_Àn
);

118 i‡(!
ex˛ude_ønge
)

119 
îr
;

121 
ußbÀmem_rgns
.
ønges
 = (
mem‹y_ønge
 *)

122 
	`ªÆloc
(
ußbÀmem_rgns
.
ønges
, 
mem‹y_ønge_Àn
);

123 i‡(!(
ußbÀmem_rgns
.
ønges
))

124 
îr
;

128 
îr
:

129 
	`Ârötf
(
°dîr
, "memoryÑange structureÑe-allocation failure\n");

131 
	}
}

134 
	$add_ba£_mem‹y_ønge
(
uöt64_t
 
°¨t
, uöt64_à
íd
)

136 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
].
°¨t
 = start;

137 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
].
íd
 =Énd;

138 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
].
ty≥
 = 
RANGE_RAM
;

139 
ƒ_mem‹y_ønges
++;

140 i‡(
ƒ_mem‹y_ønges
 >
max_mem‹y_ønges
)

141 
	`ªÆloc_mem‹y_ønges
();

143 
	`dbg¥ötf
("%016llx-%016llx : %x\n",

144 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
-1].
°¨t
,

145 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
-1].
íd
,

146 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
-1].
ty≥
);

147 
	}
}

149 
	$gë_dyn_ªc⁄f_ba£_ønges
()

151 
uöt64_t
 
°¨t
, 
íd
;

152 
‚ame
[128], 
buf
[32];

153 
FILE
 *
fûe
;

154 
i
;

155 
n
;

157 
	`°r˝y
(
‚ame
, "/proc/device-tree/");

158 
	`°rˇt
(
‚ame
, "ibm,dynamic-reconfiguration-memory/ibm,lmb-size");

159 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

160 
	`≥º‹
(
‚ame
);

163 i‡(
	`‰ód
(
buf
, 1, 8, 
fûe
) != 8) {

164 
	`≥º‹
(
‚ame
);

165 
	`f˛o£
(
fûe
);

172 
lmb_size
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[0]);

173 
	`f˛o£
(
fûe
);

175 
	`°r˝y
(
‚ame
, "/proc/device-tree/");

176 
	`°rˇt
(
‚ame
,

178 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

179 
	`≥º‹
(
‚ame
);

183 i‡(
	`‰ód
(
buf
, 1, 4, 
fûe
) != 4) {

184 
	`≥º‹
(
‚ame
);

185 
	`f˛o£
(
fûe
);

188 
num_of_lmbs
 = 
	`be32_to_˝u
(((*)
buf
)[0]);

190 
i
 = 0; i < 
num_of_lmbs
; i++) {

191 i‡((
n
 = 
	`‰ód
(
buf
, 1, 24, 
fûe
)) < 0) {

192 
	`≥º‹
(
‚ame
);

193 
	`f˛o£
(
fûe
);

196 i‡(
ƒ_mem‹y_ønges
 >
max_mem‹y_ønges
)

199 
°¨t
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[0]);

200 
íd
 = 
°¨t
 + 
lmb_size
;

201 
	`add_ba£_mem‹y_ønge
(
°¨t
, 
íd
);

203 
	`f˛o£
(
fûe
);

205 
	}
}

210 
	$s‹t_ba£_ønges
()

212 
i
, 
j
;

213 
t°¨t
, 
ãnd
;

215 
i
 = 0; i < 
ƒ_mem‹y_ønges
 - 1; i++) {

216 
j
 = 0; j < 
ƒ_mem‹y_ønges
 - 
i
 - 1; j++) {

217 i‡(
ba£_mem‹y_ønge
[
j
].
°¨t
 > base_memory_range[j+1].start) {

218 
t°¨t
 = 
ba£_mem‹y_ønge
[
j
].
°¨t
;

219 
ãnd
 = 
ba£_mem‹y_ønge
[
j
].
íd
;

220 
ba£_mem‹y_ønge
[
j
].
°¨t
 = base_memory_range[j+1].start;

221 
ba£_mem‹y_ønge
[
j
].
íd
 = base_memory_range[j+1].end;

222 
ba£_mem‹y_ønge
[
j
+1].
°¨t
 = 
t°¨t
;

223 
ba£_mem‹y_ønge
[
j
+1].
íd
 = 
ãnd
;

228 
	}
}

231 
	$gë_ba£_ønges
()

233 
uöt64_t
 
°¨t
, 
íd
;

234 
devi˚_åì
[256] = "/proc/device-tree/";

235 
‚ame
[256];

236 
buf
[
MAXBYTES
];

237 
DIR
 *
dú
, *
dmem
;

238 
FILE
 *
fûe
;

239 
dúít
 *
díåy
, *
míåy
;

240 
n
;

242 i‡((
dú
 = 
	`›ídú
(
devi˚_åì
)Ë=
NULL
) {

243 
	`≥º‹
(
devi˚_åì
);

246 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

247 i‡(!
	`°∫cmp
(
díåy
->
d_«me
,

249 
	`gë_dyn_ªc⁄f_ba£_ønges
();

252 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) &&

253 
	`°rcmp
(
díåy
->
d_«me
, "memory"))

255 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

256 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

257 i‡((
dmem
 = 
	`›ídú
(
‚ame
)Ë=
NULL
) {

258 
	`≥º‹
(
‚ame
);

259 
	`˛o£dú
(
dú
);

262 (
míåy
 = 
	`ªaddú
(
dmem
)Ë!
NULL
) {

263 i‡(
	`°rcmp
(
míåy
->
d_«me
, "reg"))

265 
	`°rˇt
(
‚ame
, "/reg");

266 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

267 
	`≥º‹
(
‚ame
);

268 
	`˛o£dú
(
dmem
);

269 
	`˛o£dú
(
dú
);

272 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

273 
	`≥º‹
(
‚ame
);

274 
	`f˛o£
(
fûe
);

275 
	`˛o£dú
(
dmem
);

276 
	`˛o£dú
(
dú
);

279 i‡(
ƒ_mem‹y_ønges
 >
max_mem‹y_ønges
) {

280 i‡(
	`ªÆloc_mem‹y_ønges
() < 0)

283 
°¨t
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[0]);

284 
íd
 = 
°¨t
 + 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[1]);

285 
	`add_ba£_mem‹y_ønge
(
°¨t
, 
íd
);

286 
	`f˛o£
(
fûe
);

288 
	`˛o£dú
(
dmem
);

290 
	`˛o£dú
(
dú
);

291 
	`s‹t_ba£_ønges
();

292 
mem‹y_max
 = 
ba£_mem‹y_ønge
[
ƒ_mem‹y_ønges
 - 1].
íd
;

293 
	`dbg¥ötf
("gë ba£ mem‹yÑ™ges:%d\n", 
ƒ_mem‹y_ønges
);

296 
	}
}

299 
	$s‹t_ønges
()

301 
i
, 
j
;

302 
uöt64_t
 
t°¨t
, 
ãnd
;

303 
i
 = 0; i < 
ƒ_ex˛ude_ønges
 - 1; i++) {

304 
j
 = 0; j < 
ƒ_ex˛ude_ønges
 - 
i
 - 1; j++) {

305 i‡(
ex˛ude_ønge
[
j
].
°¨t
 >Éxclude_range[j+1].start) {

306 
t°¨t
 = 
ex˛ude_ønge
[
j
].
°¨t
;

307 
ãnd
 = 
ex˛ude_ønge
[
j
].
íd
;

308 
ex˛ude_ønge
[
j
].
°¨t
 =Éxclude_range[j+1].start;

309 
ex˛ude_ønge
[
j
].
íd
 =Éxclude_range[j+1].end;

310 
ex˛ude_ønge
[
j
+1].
°¨t
 = 
t°¨t
;

311 
ex˛ude_ønge
[
j
+1].
íd
 = 
ãnd
;

316 
	}
}

318 
	$sˇn_ª£rved_ønges
(
kexec_Êags
, *
ønge_ödex
)

320 
‚ame
[256], 
buf
[16];

321 
FILE
 *
fûe
;

322 
i
 = *
ønge_ödex
;

324 
	`°r˝y
(
‚ame
, "/proc/device-tree/reserved-ranges");

326 
fûe
 = 
	`f›í
(
‚ame
, "r");

327 i‡(
fûe
 =
NULL
) {

328 i‡(
î∫o
 !
ENOENT
) {

329 
	`≥º‹
(
‚ame
);

332 
î∫o
 = 0;

341 
	`‰ód
(
buf
, (
uöt64_t
Ë* 2, 1, 
fûe
) == 1) {

342 
uöt64_t
 
ba£
, 
size
;

344 
ba£
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[0]);

345 
size
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[1]);

347 
ex˛ude_ønge
[
i
].
°¨t
 = 
ba£
;

348 
ex˛ude_ønge
[
i
].
íd
 = 
ba£
 + 
size
;

349 
i
++;

350 i‡(
i
 >
max_mem‹y_ønges
)

351 
	`ªÆloc_mem‹y_ønges
();

353 
	`ª£rve
(
ba£
, 
size
);

355 
	`f˛o£
(
fûe
);

356 *
ønge_ödex
 = 
i
;

357 
	}
}

362 
	$gë_devåì_dëaûs
(
kexec_Êags
)

364 
uöt64_t
 
rmo_ba£
;

365 
uöt64_t
 
t˚_ba£
;

366 
t˚_size
;

367 
uöt64_t
 
hèb_ba£
, 
hèb_size
;

368 
uöt64_t
 
kî√l_íd
;

369 
uöt64_t
 
öôrd_°¨t
, 
öôrd_íd
;

370 
buf
[
MAXBYTES
];

371 
devi˚_åì
[256] = "/proc/device-tree/";

372 
‚ame
[256];

373 
DIR
 *
dú
, *
cdú
;

374 
FILE
 *
fûe
;

375 
dúít
 *
díåy
;

376 
°©
 
f°©
;

377 
n
, 
i
 = 0;

379 i‡((
dú
 = 
	`›ídú
(
devi˚_åì
)Ë=
NULL
) {

380 
	`≥º‹
(
devi˚_åì
);

384 
	`sˇn_ª£rved_ønges
(
kexec_Êags
, &
i
);

386 (
díåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

387 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "chosen", 6) &&

388 
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) &&

389 
	`°rcmp
(
díåy
->
d_«me
, "memory") &&

390 
	`°∫cmp
(
díåy
->
d_«me
, "pci@", 4) &&

391 
	`°∫cmp
(
díåy
->
d_«me
, "rtas", 4) &&

392 
	`°∫cmp
(
díåy
->
d_«me
, "ibm,opal", 8))

394 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

395 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

396 i‡((
cdú
 = 
	`›ídú
(
‚ame
)Ë=
NULL
) {

397 
	`≥º‹
(
‚ame
);

398 
îr‹_›ídú
;

401 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "chosen", 6) == 0) {

402 
	`°rˇt
(
‚ame
, "/linux,kernel-end");

403 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

404 
	`≥º‹
(
‚ame
);

405 
îr‹_›ícdú
;

407 i‡(
	`‰ód
(&
kî√l_íd
, (
uöt64_t
), 1, 
fûe
) != 1) {

408 
	`≥º‹
(
‚ame
);

409 
îr‹_›ífûe
;

411 
	`f˛o£
(
fûe
);

412 
kî√l_íd
 = 
	`be64_to_˝u
(kernel_end);

415 
ex˛ude_ønge
[
i
].
°¨t
 = 0x0UL;

416 
ex˛ude_ønge
[
i
].
íd
 = 
kî√l_íd
;

417 
i
++;

418 i‡(
i
 >
max_mem‹y_ønges
)

419 
	`ªÆloc_mem‹y_ønges
();

421 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

422 
	`mem£t
(
‚ame
, 0, (fname));

423 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

424 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

425 
	`°rˇt
(
‚ame
, "/linux,crashkernel-base");

426 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

427 
	`≥º‹
(
‚ame
);

428 
îr‹_›ícdú
;

430 i‡(
	`‰ód
(&
¸ash_ba£
, (
uöt64_t
), 1,

431 
fûe
) != 1) {

432 
	`≥º‹
(
‚ame
);

433 
îr‹_›ífûe
;

435 
	`f˛o£
(
fûe
);

436 
¸ash_ba£
 = 
	`be64_to_˝u
(crash_base);

438 
	`mem£t
(
‚ame
, 0, (fname));

439 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

440 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

441 
	`°rˇt
(
‚ame
, "/linux,crashkernel-size");

442 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

443 
	`≥º‹
(
‚ame
);

444 
îr‹_›ícdú
;

446 i‡(
	`‰ód
(&
¸ash_size
, (
uöt64_t
), 1,

447 
fûe
) != 1) {

448 
	`≥º‹
(
‚ame
);

449 
îr‹_›ífûe
;

451 
	`f˛o£
(
fûe
);

452 
¸ash_size
 = 
	`be64_to_˝u
(crash_size);

454 i‡(
¸ash_ba£
 > 
mem_mö
)

455 
mem_mö
 = 
¸ash_ba£
;

456 i‡(
¸ash_ba£
 + 
¸ash_size
 < 
mem_max
)

457 
mem_max
 = 
¸ash_ba£
 + 
¸ash_size
;

459 
	`add_ußbÀ_mem_rgns
(0, 
¸ash_ba£
 + 
¸ash_size
);

460 
	`ª£rve
(
KDUMP_BACKUP_LIMIT
, 
¸ash_ba£
-KDUMP_BACKUP_LIMIT);

468 
	`mem£t
(
‚ame
, 0, (fname));

469 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

470 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

471 
	`°rˇt
(
‚ame
, "/linux,memory-limit");

472 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

473 i‡(
î∫o
 !
ENOENT
) {

474 
	`≥º‹
(
‚ame
);

475 
îr‹_›ícdú
;

477 
î∫o
 = 0;

484 i‡(
	`‰ód
(&
mem‹y_limô
, (
uöt64_t
), 1,

485 
fûe
) != 1) {

486 
	`≥º‹
(
‚ame
);

487 
îr‹_›ífûe
;

489 
	`f˛o£
(
fûe
);

490 
mem‹y_limô
 = 
	`be64_to_˝u
(memory_limit);

493 
	`mem£t
(
‚ame
, 0, (fname));

494 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

495 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

496 
	`°rˇt
(
‚ame
, "/linux,htab-base");

497 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

498 
	`˛o£dú
(
cdú
);

499 i‡(
î∫o
 =
ENOENT
) {

501 
î∫o
 = 0;

504 
	`≥º‹
(
‚ame
);

505 
îr‹_›ídú
;

507 i‡(
	`‰ód
(&
hèb_ba£
, (
uöt64_t
), 1, 
fûe
) != 1) {

508 
	`≥º‹
(
‚ame
);

509 
îr‹_›ífûe
;

511 
	`f˛o£
(
fûe
);

512 
hèb_ba£
 = 
	`be64_to_˝u
(htab_base);

514 
	`mem£t
(
‚ame
, 0, (fname));

515 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

516 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

517 
	`°rˇt
(
‚ame
, "/linux,htab-size");

518 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

519 
	`≥º‹
(
‚ame
);

520 
îr‹_›ícdú
;

522 i‡(
	`‰ód
(&
hèb_size
, (
uöt64_t
), 1, 
fûe
) != 1) {

523 
	`≥º‹
(
‚ame
);

524 
îr‹_›ífûe
;

526 
	`f˛o£
(
fûe
);

527 
hèb_size
 = 
	`be64_to_˝u
(htab_size);

530 
ex˛ude_ønge
[
i
].
°¨t
 = 
hèb_ba£
;

531 
ex˛ude_ønge
[
i
].
íd
 = 
hèb_ba£
 + 
hèb_size
;

532 
i
++;

533 i‡(
i
 >
max_mem‹y_ønges
)

534 
	`ªÆloc_mem‹y_ønges
();

537 i‡(
ªu£_öôrd
) {

538 
	`mem£t
(
‚ame
, 0, (fname));

539 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

540 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

541 
	`°rˇt
(
‚ame
, "/linux,initrd-start");

542 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

543 
	`≥º‹
(
‚ame
);

544 
îr‹_›ícdú
;

547 i‡(
	`°©
(
‚ame
, &
f°©
) != 0) {

548 
	`≥º‹
(
‚ame
);

549 
îr‹_›ífûe
;

551 i‡(
	`‰ód
(&
öôrd_°¨t
, 
f°©
.
°_size
, 1, 
fûe
) != 1) {

552 
	`≥º‹
(
‚ame
);

553 
îr‹_›ífûe
;

555 
öôrd_°¨t
 = 
	`be64_to_˝u
(initrd_start);

556 
	`f˛o£
(
fûe
);

558 
	`mem£t
(
‚ame
, 0, (fname));

559 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

560 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

561 
	`°rˇt
(
‚ame
, "/linux,initrd-end");

562 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

563 
	`≥º‹
(
‚ame
);

564 
îr‹_›ícdú
;

567 i‡(
	`°©
(
‚ame
, &
f°©
) != 0) {

568 
	`≥º‹
(
‚ame
);

569 
îr‹_›ífûe
;

571 i‡(
	`‰ód
(&
öôrd_íd
, 
f°©
.
°_size
, 1, 
fûe
) != 1) {

572 
	`≥º‹
(
‚ame
);

573 
îr‹_›ífûe
;

575 
öôrd_íd
 = 
	`be64_to_˝u
(initrd_end);

576 
	`f˛o£
(
fûe
);

579 
ex˛ude_ønge
[
i
].
°¨t
 = 
öôrd_°¨t
;

580 
ex˛ude_ønge
[
i
].
íd
 = 
öôrd_íd
;

581 
i
++;

582 i‡(
i
 >
max_mem‹y_ønges
)

583 
	`ªÆloc_mem‹y_ønges
();

587 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "rtas", 4) == 0) {

588 
	`°rˇt
(
‚ame
, "/linux,rtas-base");

589 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

590 
	`≥º‹
(
‚ame
);

591 
îr‹_›ícdú
;

593 i‡(
	`‰ód
(&
πas_ba£
, (), 1, 
fûe
) != 1) {

594 
	`≥º‹
(
‚ame
);

595 
îr‹_›ífûe
;

597 
	`f˛o£
(
fûe
);

598 
πas_ba£
 = 
	`be32_to_˝u
(rtas_base);

599 
	`mem£t
(
‚ame
, 0, (fname));

600 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

601 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

602 
	`°rˇt
(
‚ame
, "/rtas-size");

603 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

604 
	`≥º‹
(
‚ame
);

605 
îr‹_›ícdú
;

607 i‡(
	`‰ód
(&
πas_size
, (), 1, 
fûe
) != 1) {

608 
	`≥º‹
(
‚ame
);

609 
îr‹_›ífûe
;

611 
	`f˛o£
(
fûe
);

612 
	`˛o£dú
(
cdú
);

613 
πas_size
 = 
	`be32_to_˝u
(rtas_size);

615 
ex˛ude_ønge
[
i
].
°¨t
 = 
πas_ba£
;

616 
ex˛ude_ønge
[
i
].
íd
 = 
πas_ba£
 + 
πas_size
;

617 
i
++;

618 i‡(
i
 >
max_mem‹y_ønges
)

619 
	`ªÆloc_mem‹y_ønges
();

620 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
)

621 
	`add_ußbÀ_mem_rgns
(
πas_ba£
, 
πas_size
);

624 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "ibm,opal", 8) == 0) {

625 
	`°rˇt
(
‚ame
, "/opal-base-address");

626 
fûe
 = 
	`f›í
(
‚ame
, "r");

627 i‡(
fûe
 =
NULL
) {

628 
	`≥º‹
(
‚ame
);

629 
îr‹_›ícdú
;

631 i‡(
	`‰ód
(&
›Æ_ba£
, (
uöt64_t
), 1, 
fûe
) != 1) {

632 
	`≥º‹
(
‚ame
);

633 
îr‹_›ífûe
;

635 
›Æ_ba£
 = 
	`be64_to_˝u
(opal_base);

636 
	`f˛o£
(
fûe
);

638 
	`mem£t
(
‚ame
, 0, (fname));

639 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

640 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

641 
	`°rˇt
(
‚ame
, "/opal-runtime-size");

642 
fûe
 = 
	`f›í
(
‚ame
, "r");

643 i‡(
fûe
 =
NULL
) {

644 
	`≥º‹
(
‚ame
);

645 
îr‹_›ícdú
;

647 i‡(
	`‰ód
(&
›Æ_size
, (
uöt64_t
), 1, 
fûe
) != 1) {

648 
	`≥º‹
(
‚ame
);

649 
îr‹_›ífûe
;

651 
	`f˛o£
(
fûe
);

652 
	`˛o£dú
(
cdú
);

653 
›Æ_size
 = 
	`be64_to_˝u
(opal_size);

655 
ex˛ude_ønge
[
i
].
°¨t
 = 
›Æ_ba£
;

656 
ex˛ude_ønge
[
i
].
íd
 = 
›Æ_ba£
 + 
›Æ_size
;

657 
i
++;

658 i‡(
i
 >
max_mem‹y_ønges
)

659 
	`ªÆloc_mem‹y_ønges
();

660 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
)

661 
	`add_ußbÀ_mem_rgns
(
›Æ_ba£
, 
›Æ_size
);

664 i‡(!
	`°∫cmp
(
díåy
->
d_«me
, "memory@", 7) ||

665 !
	`°rcmp
(
díåy
->
d_«me
, "memory")) {

666 
	`°rˇt
(
‚ame
, "/reg");

667 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

668 
	`≥º‹
(
‚ame
);

669 
îr‹_›ícdú
;

671 i‡((
n
 = 
	`‰ód
(
buf
, 1, 
MAXBYTES
, 
fûe
)) < 0) {

672 
	`≥º‹
(
‚ame
);

673 
îr‹_›ífûe
;

675 
rmo_ba£
 = 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[0]);

676 
rmo_t›
 = 
rmo_ba£
 + 
	`be64_to_˝u
(((
uöt64_t
 *)
buf
)[1]);

677 i‡(
rmo_t›
 > 0x30000000UL)

678 
rmo_t›
 = 0x30000000UL;

680 
	`f˛o£
(
fûe
);

681 
	`˛o£dú
(
cdú
);

684 i‡(
	`°∫cmp
(
díåy
->
d_«me
, "pci@", 4) == 0) {

685 
	`°rˇt
(
‚ame
, "/linux,tce-base");

686 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

687 
	`˛o£dú
(
cdú
);

688 i‡(
î∫o
 =
ENOENT
) {

690 
î∫o
 = 0;

693 
	`≥º‹
(
‚ame
);

694 
îr‹_›ídú
;

696 i‡(
	`‰ód
(&
t˚_ba£
, (
uöt64_t
), 1, 
fûe
) != 1) {

697 
	`≥º‹
(
‚ame
);

698 
îr‹_›ífûe
;

700 
	`f˛o£
(
fûe
);

701 
t˚_ba£
 = 
	`be64_to_˝u
(tce_base);

702 
	`mem£t
(
‚ame
, 0, (fname));

703 
	`°r˝y
(
‚ame
, 
devi˚_åì
);

704 
	`°rˇt
(
‚ame
, 
díåy
->
d_«me
);

705 
	`°rˇt
(
‚ame
, "/linux,tce-size");

706 i‡((
fûe
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

707 
	`≥º‹
(
‚ame
);

708 
îr‹_›ícdú
;

710 i‡(
	`‰ód
(&
t˚_size
, (), 1, 
fûe
) != 1) {

711 
	`≥º‹
(
‚ame
);

712 
îr‹_›ífûe
;

714 
	`f˛o£
(
fûe
);

715 
t˚_size
 = 
	`be32_to_˝u
(tce_size);

717 
ex˛ude_ønge
[
i
].
°¨t
 = 
t˚_ba£
;

718 
ex˛ude_ønge
[
i
].
íd
 = 
t˚_ba£
 + 
t˚_size
;

719 
i
++;

720 i‡(
i
 >
max_mem‹y_ønges
)

721 
	`ªÆloc_mem‹y_ønges
();

722 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
)

723 
	`add_ußbÀ_mem_rgns
(
t˚_ba£
, 
t˚_size
);

724 
	`˛o£dú
(
cdú
);

727 
	`˛o£dú
(
dú
);

729 
ƒ_ex˛ude_ønges
 = 
i
;

731 
	`s‹t_ønges
();

733 
k
;

734 
k
 = 0; k < 
i
; k++)

735 
	`dbg¥ötf
("exclude_range sortedÉxclude_range[%d] "

736 "°¨t:%Œx,Énd:%Œx\n", 
k
, 
ex˛ude_ønge
[k].
°¨t
,

737 
ex˛ude_ønge
[
k
].
íd
);

741 
îr‹_›ífûe
:

742 
	`f˛o£
(
fûe
);

743 
îr‹_›ícdú
:

744 
	`˛o£dú
(
cdú
);

745 
îr‹_›ídú
:

746 
	`˛o£dú
(
dú
);

748 
	}
}

751 
	$£tup_mem‹y_ønges
(
kexec_Êags
)

753 
i
, 
j
 = 0;

759 i‡(
	`gë_ba£_ønges
())

760 
out
;

761 i‡(
	`gë_devåì_dëaûs
(
kexec_Êags
))

762 
out
;

764 
i
 = 0; i < 
ƒ_ex˛ude_ønges
; i++) {

768 i‡(
i
 == 0) {

769 i‡(
ex˛ude_ønge
[
i
].
°¨t
 != 0) {

770 
mem‹y_ønge
[
j
].
°¨t
 = 0;

771 
mem‹y_ønge
[
j
].
íd
 = 
ex˛ude_ønge
[
i
].
°¨t
 - 1;

772 
mem‹y_ønge
[
j
].
ty≥
 = 
RANGE_RAM
;

773 
j
++;

774 i‡(
j
 >
max_mem‹y_ønges
)

775 
	`ªÆloc_mem‹y_ønges
();

782 i‡(
i
 =
ƒ_ex˛ude_ønges
 - 1) {

783 i‡(
ex˛ude_ønge
[
i
].
íd
 < 
mem‹y_max
) {

784 
mem‹y_ønge
[
j
].
°¨t
 = 
ex˛ude_ønge
[
i
].
íd
 + 1;

785 
mem‹y_ønge
[
j
].
íd
 = 
mem‹y_max
;

786 
mem‹y_ønge
[
j
].
ty≥
 = 
RANGE_RAM
;

787 
j
++;

788 i‡(
j
 >
max_mem‹y_ønges
)

789 
	`ªÆloc_mem‹y_ønges
();

791 i‡(
mem‹y_ønge
[
j
-1].
°¨t
 >
rmo_t›
) {

792 
j
--;

795 i‡((
mem‹y_ønge
[
j
-1].
°¨t
 < 
rmo_t›
) &&

796 (
mem‹y_ønge
[
j
-1].
íd
 >
rmo_t›
)) {

797 
mem‹y_ønge
[
j
-1].
íd
 = 
rmo_t›
;

804 i‡(
ex˛ude_ønge
[
i
+1].
°¨t
 =ex˛ude_ønge[i].
íd
 + 1)

806 
mem‹y_ønge
[
j
].
°¨t
 = 
ex˛ude_ønge
[
i
].
íd
 + 1;

807 
mem‹y_ønge
[
j
].
íd
 = 
ex˛ude_ønge
[
i
+1].
°¨t
 - 1;

808 
mem‹y_ønge
[
j
].
ty≥
 = 
RANGE_RAM
;

809 
j
++;

810 i‡(
j
 >
max_mem‹y_ønges
)

811 
	`ªÆloc_mem‹y_ønges
();

813 i‡(
mem‹y_ønge
[
j
-1].
°¨t
 >
rmo_t›
) {

814 
j
--;

817 i‡((
mem‹y_ønge
[
j
-1].
°¨t
 < 
rmo_t›
) &&

818 (
mem‹y_ønge
[
j
-1].
íd
 >
rmo_t›
)) {

819 
mem‹y_ønge
[
j
-1].
íd
 = 
rmo_t›
;

823 
ƒ_mem‹y_ønges
 = 
j
;

825 
k
;

826 
k
 = 0; k < 
j
; k++)

827 
	`dbg¥ötf
("setup_memory_ranges memory_range[%d] "

828 "°¨t:%Œx,Énd:%Œx\n", 
k
, 
mem‹y_ønge
[k].
°¨t
,

829 
mem‹y_ønge
[
k
].
íd
);

832 
out
:

833 
	`˛ónup_mem‹y_ønges
();

835 
	}
}

838 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

839 
kexec_Êags
)

842 
max_mem‹y_ønges
 = 1;

844 i‡(
	`Æloc_mem‹y_ønges
())

846 i‡(
	`£tup_mem‹y_ønges
(
kexec_Êags
))

853 *
ønge
 = 
	`ˇŒoc
((
mem‹y_ønge
), 
ƒ_mem‹y_ønges
);

854 i‡(*
ønge
 =
NULL
)

856 
	`memmove
(*
ønge
, 
mem‹y_ønge
,

857 (
mem‹y_ønge
Ë* 
ƒ_mem‹y_ønges
);

859 *
ønges
 = 
ƒ_mem‹y_ønges
;

860 
	`dbg¥ötf
("gë mem‹yÑ™ges:%d\n", 
ƒ_mem‹y_ønges
);

862 
	}
}

864 
fûe_ty≥
 
	gfûe_ty≥
[] = {

865 { "ñf-µc64", 
ñf_µc64_¥obe
, 
ñf_µc64_lﬂd
, 
ñf_µc64_ußge
 },

867 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

869 
	$¨ch_ußge
()

871 
	`Ârötf
(
°dîr
, " --elf64-core-headers Prepare core headers in ELF64 format\n");

872 
	}
}

874 
¨ch_›ti⁄s_t
 
	g¨ch_›ti⁄s
 = {

875 .
c‹e_hódî_ty≥
 = 
CORE_TYPE_ELF64
,

878 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

883 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

884 
KEXEC_ALL_OPTIONS


885 { 0, 0, 
NULL
, 0 },

887 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ALL_OPT_STR
;

888 
›t
;

890 
›ãº
 = 0;

891 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

892 
›t
) {

895 
OPT_ELF64_CORE
:

896 
¨ch_›ti⁄s
.
c‹e_hódî_ty≥
 = 
CORE_TYPE_ELF64
;

901 
›ãº
 = 1;

902 
›töd
 = 1;

904 
	}
}

906 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

910 { "µc64", 
KEXEC_ARCH_PPC64
 },

911 { "µc64À", 
KEXEC_ARCH_PPC64
 },

912 { 
NULL
, 0 },

915 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

918 
	}
}

920 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

922 
	}
}

	@kexec/arch/ppc64/kexec-ppc64.h

1 #i‚de‡
KEXEC_PPC64_H


2 
	#KEXEC_PPC64_H


	)

4 
	#MAXBYTES
 128

	)

5 
	#MAX_LINE
 160

	)

6 
	#CORE_TYPE_ELF32
 1

	)

7 
	#CORE_TYPE_ELF64
 2

	)

9 
	#BOOT_BLOCK_VERSION
 2

	)

10 
	#BOOT_BLOCK_LAST_COMP_VERSION
 2

	)

11 
	#NEED_STRUCTURE_BLOCK_EXTRA_PAD


	)

12 
	#HAVE_DYNAMIC_MEMORY


	)

13 
	#NEED_RESERVE_DTB


	)

15 
£tup_mem‹y_ønges
(
kexec_Êags
);

17 
ñf_µc64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

18 
ñf_µc64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

19 
kexec_öfo
 *
öfo
);

20 
ñf_µc64_ußge
();

22 
	gmem_ehdr
;

23 
my_r2
(c⁄° 
mem_ehdr
 *
ehdr
);

25 
uöt64_t
 
öôrd_ba£
, 
öôrd_size
;

26 
max_mem‹y_ønges
;

27 
ªu£_öôrd
;

29 
	s¨ch_›ti⁄s_t
 {

30 
	mc‹e_hódî_ty≥
;

33 
	smem_rgns
 {

34 
	msize
;

35 
mem‹y_ønge
 *
	mønges
;

36 } 
	tmem_rgns_t
;

38 
mem_rgns_t
 
ußbÀmem_rgns
;

	@kexec/arch/ppc64/kexec-zImage-ppc64.c

21 
	#_GNU_SOURCE


	)

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<f˙é.h
>

29 
	~<uni°d.h
>

30 
	~<gë›t.h
>

31 
	~<löux/ñf.h
>

32 
	~"../../kexec.h
"

34 
	#MAX_HEADERS
 32

	)

36 
	$zImage_µc64_¥obe
(
FILE
 *
fûe
)

38 
Elf32_Ehdr
 
ñf
;

39 
vÆid
;

41 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_SET
) < 0) {

42 
	`Ârötf
(
°dîr
, "seekÉrror: %s\n",

43 
	`°ªº‹
(
î∫o
));

46 i‡(
	`‰ód
(&
ñf
, (
Elf32_Ehdr
), 1, 
fûe
) != 1) {

47 
	`Ârötf
(
°dîr
, "readÉrror: %s\n",

48 
	`°ªº‹
(
î∫o
));

52 i‡(
ñf
.
e_machöe
 =
EM_PPC64
) {

53 
	`Ârötf
(
°dîr
, "Elf64Çot supported\n");

57 
vÆid
 = (
ñf
.
e_idít
[
EI_MAG0
] =
ELFMAG0
 &&

58 
ñf
.
e_idít
[
EI_MAG1
] =
ELFMAG1
 &&

59 
ñf
.
e_idít
[
EI_MAG2
] =
ELFMAG2
 &&

60 
ñf
.
e_idít
[
EI_MAG3
] =
ELFMAG3
 &&

61 
ñf
.
e_idít
[
EI_CLASS
] =
ELFCLASS32
 &&

62 
ñf
.
e_idít
[
EI_DATA
] =
ELFDATA2MSB
 &&

63 
ñf
.
e_ty≥
 =
ET_EXEC
 &&

64 
ñf
.
e_machöe
 =
EM_PPC
);

66  
vÆid
 ? 0 : -1;

67 
	}
}

69 
zImage_µc64_lﬂd
(
FILE
 *
fûe
, 
UNUSED
(
¨gc
), **UNUSED(
¨gv
),

70 **
ªt_íåy
, 
kexec_£gmít
 **
ªt_£gmíts
,

71 *
ªt_ƒ_£gmíts
)

73 
Elf32_Ehdr
 
	gñf
;

74 
Elf32_Phdr
 *
	gp
, *
	gph
;

75 
kexec_£gmít
 *
	g£gmít
;

76 
	gi
;

77 
	gmemsize
, 
	gfûesize
, 
	goff£t
, 
	glﬂd_loc
 = 0;

82 i‡(
f£ek
(
fûe
, 0, 
SEEK_SET
) < 0) {

83 
≥º‹
("seekÉrror:");

86 i‡(
‰ód
(&
ñf
, (
Elf32_Ehdr
), 1, 
fûe
) != 1) {

87 
≥º‹
("readÉrror: ");

90 i‡(
	gñf
.
	ge_phnum
 > 
	gMAX_HEADERS
) {

91 
Ârötf
(
°dîr
,

93 
MAX_HEADERS
);

98 
	gph
 = (
Elf32_Phdr
 *)
mÆloc
((Elf32_PhdrË* 
ñf
.
e_phnum
);

99 i‡(
	gph
 == 0) {

100 
≥º‹
("malloc failed: ");

103 i‡(
f£ek
(
fûe
, 
ñf
.
e_phoff
, 
SEEK_SET
) < 0) {

104 
≥º‹
("seek failed: ");

107 i‡(
‰ód
(
ph
, (
Elf32_Phdr
Ë* 
ñf
.
e_phnum
, 1, 
fûe
) != 1) {

108 
≥º‹
("readÉrror: ");

112 *
	gªt_£gmíts
 = 
mÆloc
(
ñf
.
e_phnum
 * (
kexec_£gmít
));

113 i‡(*
	gªt_£gmíts
 == 0) {

114 
Ârötf
(
°dîr
, "malloc failed: %s\n",

115 
°ªº‹
(
î∫o
));

118 
	g£gmít
 = 
ªt_£gmíts
[0];

121 
	gmemsize
 = 
fûesize
 = 
off£t
 = 0;

122 
	gp
 = 
ph
;

123 
	gi
 = 0; i < 
	gñf
.
	ge_phnum
; ++i, ++
	gp
) {

124 i‡(
	gp
->
	gp_ty≥
 !
PT_LOAD
 || 
p
->
p_off£t
 == 0)

126 i‡(
	gmemsize
 == 0) {

127 
off£t
 = 
p
->
p_off£t
;

128 
	gmemsize
 = 
p
->
p_memsz
;

129 
	gfûesize
 = 
p
->
p_fûesz
;

130 
	glﬂd_loc
 = 
p
->
p_vaddr
;

132 
	gmemsize
 = 
p
->
p_off£t
 +Ö->
p_memsz
 - 
off£t
;

133 
	gfûesize
 = 
p
->
p_off£t
 +Ö->
p_fûesz
 - 
off£t
;

136 i‡(
	gmemsize
 == 0) {

137 
Ârötf
(
°dîr
, "Can't findáÜoadable segment.\n");

142 
	gp
 = 
ph
;

143 
	g£gmít
->
	gbuf
 = 
mÆloc
(
fûesize
);

144 i‡(
	g£gmít
->
	gbuf
 == 0) {

145 
≥º‹
("malloc failed: ");

148 
	gi
 = 0; i < 
	gñf
.
	ge_phnum
; ++i, ++
	gp
) {

149 
	gmem_off£t
;

150 i‡(
	gp
->
	gp_ty≥
 !
PT_LOAD
 || 
p
->
p_off£t
 == 0)

154 i‡(
f£ek
(
fûe
, 
p
->
p_off£t
, 
SEEK_SET
) < 0) {

155 
≥º‹
("seekÉrror: ");

158 
	gmem_off£t
 = 
p
->
p_vaddr
 - 
lﬂd_loc
;

159 i‡(
‰ód
((*)
£gmít
->
buf
+
mem_off£t
, 
p
->
p_fûesz
, 1,

160 
fûe
) != 1) {

161 
≥º‹
("readÉrror: ");

165 
	g£gmít
->
	gmem
 = (*Ë
lﬂd_loc
;

166 
	g£gmít
->
	gmemsz
 = 
memsize
;

167 
	g£gmít
->
	gbufsz
 = 
fûesize
;

168 *
	gªt_íåy
 = (*)(
uöçå_t
)
ñf
.
e_íåy
;

169 *
	gªt_ƒ_£gmíts
 = 
i
 - 1;

170 
‰ì
(
ph
);

174 
	$zImage_µc64_ußge
()

176 
	`Ârötf
(
°dîr
, "zImage support is still broken\n");

177 
	}
}

	@kexec/arch/s390/crashdump-s390.c

9 #ifde‡
__s390x__


10 
	#_GNU_SOURCE


	)

12 
	~<°dio.h
>

13 
	~<ñf.h
>

14 
	~<limôs.h
>

15 
	~<°rög.h
>

16 
	~"../../kexec.h
"

17 
	~"../../kexec-sysˇŒ.h
"

18 
	~"../../kexec/¸ashdump.h
"

19 
	~"kexec-s390.h
"

24 
	$¸óã_ñf_hódî
(
kexec_öfo
 *
öfo
, 
¸ash_ba£
,

25 
¸ash_íd
)

27 #ifde‡
WITH_ELF_HEADER


28 
mem‹y_ønge
 
¸ash_mem‹y_ønge
[
MAX_MEMORY_RANGES
];

29 
ñfc‹ehdr
, 
ñfc‹ehdr_size
, 
bufsz
;

30 
¸ash_ñf_öfo
 
ñf_öfo
;

31 
°r
[
COMMAND_LINESIZE
];

32 
ønges
;

33 *
tmp
;

35 
	`mem£t
(&
ñf_öfo
, 0, (elf_info));

37 
ñf_öfo
.
d©a
 = 
ELFDATA2MSB
;

38 
ñf_öfo
.
machöe
 = 
EM_S390
;

39 
ñf_öfo
.
˛ass
 = 
ELFCLASS64
;

40 
ñf_öfo
.
gë_nŸe_öfo
 = 
gë_¸ash_nŸes_≥r_˝u
;

42 i‡(
	`gë_mem‹y_ønges_s390
(
¸ash_mem‹y_ønge
, &
ønges
, 0))

45 i‡(
	`¸ash_¸óã_ñf64_hódîs
(
öfo
, &
ñf_öfo
, 
¸ash_mem‹y_ønge
,

46 
ønges
, &
tmp
, &
bufsz
,

47 
ELF_CORE_HEADER_ALIGN
))

50 
ñfc‹ehdr
 = 
	`add_buf„r
(
öfo
, 
tmp
, 
bufsz
, bufsz, 1024,

51 
¸ash_ba£
, 
¸ash_íd
, -1);

52 
ñfc‹ehdr_size
 = 
bufsz
;

53 
	`¢¥ötf
(
°r
, (str), "Élfcorehdr=%ld@%ldK\n",

54 
ñfc‹ehdr_size
, 
ñfc‹ehdr
 / 1024);

55 
	`comm™d_löe_add
(
°r
);

58 
	}
}

63 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, 
¸ash_ba£
,

64 
¸ash_íd
)

66 
¸ash_size
 = cøsh_sizê
¸ash_íd
 - 
¸ash_ba£
 + 1;

68 i‡(
	`¸óã_ñf_hódî
(
öfo
, 
¸ash_ba£
, 
¸ash_íd
))

70 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, (c⁄° *Ë
purg©‹y
,

71 
purg©‹y_size
, 
¸ash_ba£
 + 0x2000,

72 
¸ash_ba£
 + 0x10000, -1, 0);

73 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "¸ash_ba£", &
¸ash_ba£
,

74 (
¸ash_ba£
));

75 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "¸ash_size", &
¸ash_size
,

76 (
¸ash_size
));

77 
öfo
->
íåy
 = (*Ë
	`ñf_ªl_gë_addr
(&öfo->
rhdr
, "purgatory_start");

79 
	}
}

84 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, 
¸ash_ba£
,

85 
¸ash_íd
)

88 
	}
}

	@kexec/arch/s390/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_S390_OPTIONS_H


2 
	#KEXEC_ARCH_S390_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

5 
	#OPT_APPEND
 
OPT_MAX
+0

	)

6 
	#OPT_RAMDISK
 
OPT_MAX
+1

	)

11 
	#KEXEC_ARCH_OPTIONS
 \

12 
KEXEC_OPTIONS
 \

13 

	)

14 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

30 
	#KEXEC_ALL_OPTIONS
 \

31 
KEXEC_ARCH_OPTIONS
 \

32 {"comm™d-löe", 1, 0, 
OPT_APPEND
}, \

33 {"≠≥nd", 1, 0, 
OPT_APPEND
}, \

34 {"öôrd", 1, 0, 
OPT_RAMDISK
},

	)

36 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/s390/kexec-elf-rel-s390.c

10 
	~<°dio.h
>

11 
	~<ñf.h
>

12 
	~"../../kexec.h
"

13 
	~"../../kexec-ñf.h
"

15 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

17 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2MSB
)

19 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS64
)

21 i‡(
ehdr
->
e_machöe
 !
EM_S390
)

24 
	}
}

26 
	$machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
ehdr
,

27 
r_ty≥
,

28 *
loc
,

29 
addªss
,

30 
vÆ
)

32 
r_ty≥
) {

33 
R_390_8
:

34 
R_390_12
:

35 
R_390_16
:

36 
R_390_20
:

37 
R_390_32
:

38 
R_390_64
:

39 i‡(
r_ty≥
 =
R_390_8
)

40 *(*Ë
loc
 = 
vÆ
;

41 i‡(
r_ty≥
 =
R_390_12
)

42 *(*Ë
loc
 = (
vÆ
 & 0xfff) |

43 (*(*Ë
loc
 & 0xf000);

44 i‡(
r_ty≥
 =
R_390_16
)

45 *(*Ë
loc
 = 
vÆ
;

46 i‡(
r_ty≥
 =
R_390_20
)

47 *(*Ë
loc
 =

48 (*(*Ë
loc
 & 0xf00000ff) |

49 (
vÆ
 & 0xfff) << 16 | (val & 0xff000) >> 4;

50 i‡(
r_ty≥
 =
R_390_32
)

51 *(*Ë
loc
 = 
vÆ
;

52 i‡(
r_ty≥
 =
R_390_64
)

53 *(*Ë
loc
 = 
vÆ
;

55 
R_390_PC16
:

56 
R_390_PC16DBL
:

57 
R_390_PC32DBL
:

58 
R_390_PC32
:

59 
R_390_PC64
:

60 
vÆ
 -
addªss
;

61 i‡(
r_ty≥
 =
R_390_PC16
)

62 *(*Ë
loc
 = 
vÆ
;

63 i‡(
r_ty≥
 =
R_390_PC16DBL
)

64 *(*Ë
loc
 = 
vÆ
 >> 1;

65 i‡(
r_ty≥
 =
R_390_PC32DBL
)

66 *(*Ë
loc
 = 
vÆ
 >> 1;

67 i‡(
r_ty≥
 =
R_390_PC32
)

68 *(*Ë
loc
 = 
vÆ
;

69 i‡(
r_ty≥
 =
R_390_PC64
)

70 *(*Ë
loc
 = 
vÆ
;

73 
	`dõ
("Unknow¿ªœÑñoˇti⁄: 0x%lx 0x%lx\n", 
r_ty≥
, 
addªss
);

76 
	}
}

	@kexec/arch/s390/kexec-image.c

11 
	#_GNU_SOURCE


	)

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<°dlib.h
>

15 
	~<î∫o.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<uni°d.h
>

19 
	~<gë›t.h
>

20 
	~"../../kexec.h
"

21 
	~"../../kexec-sysˇŒ.h
"

22 
	~"../../kexec/¸ashdump.h
"

23 
	~"kexec-s390.h
"

24 
	~<¨ch/›ti⁄s.h
>

26 
uöt64_t
 
	g¸ash_ba£
, 
	g¸ash_íd
;

27 
	gcomm™d_löe
[
COMMAND_LINESIZE
];

29 
	$add_£gmít_check
(
kexec_öfo
 *
öfo
, c⁄° *
buf
,

30 
size_t
 
bufsz
, 
ba£
, size_à
memsz
)

32 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
)

33 i‡(
ba£
 + 
memsz
 > 
¸ash_íd
 - 
¸ash_ba£
)

34 
	`dõ
("NotÉnough crashkernel memoryÅoÜoad segments\n");

35 
	`add_£gmít
(
öfo
, 
buf
, 
bufsz
, 
¸ash_ba£
 + 
ba£
, 
memsz
);

36 
	}
}

38 
	$comm™d_löe_add
(c⁄° *
°r
)

40 i‡(
	`°æí
(
comm™d_löe
Ë+ såÀn(
°r
Ë+ 1 > 
COMMAND_LINESIZE
) {

41 
	`Ârötf
(
°dîr
, "CommandÜineÅooÜong.\n");

44 
	`°rˇt
(
comm™d_löe
, 
°r
);

46 
	}
}

49 
	$image_s390_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
kî√l_buf
,

50 
off_t
 
kî√l_size
, 
kexec_öfo
 *
öfo
)

52 *
k∫l_buf„r
;

53 *
rd_buf„r
;

54 c⁄° *
ømdisk
;

55 
off_t
 
ømdisk_Àn
;

56 
ømdisk_‹igö
;

57 
›t
;

59 c⁄° 
›ti⁄
 
›ti⁄s
[] =

61 
KEXEC_OPTIONS


62 {"comm™d-löe", 1, 0, 
OPT_APPEND
},

63 {"≠≥nd", 1, 0, 
OPT_APPEND
},

64 {"öôrd", 1, 0, 
OPT_RAMDISK
},

67 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_OPT_STR
 "";

69 
ømdisk
 = 
NULL
;

70 
ømdisk_Àn
 = 0;

71 
ømdisk_‹igö
 = 0;

73 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
,
¨gv
,
sh‹t_›ti⁄s
,
›ti⁄s
,0)) != -1) {

74 
›t
) {

75 
OPT_APPEND
:

76 i‡(
	`comm™d_löe_add
(
›èrg
))

79 
OPT_RAMDISK
:

80 
ømdisk
 = 
›èrg
;

85 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

86 i‡(
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
¸ash_ba£
,

87 &
¸ash_íd
))

92 
	`add_£gmít_check
(
öfo
, 
kî√l_buf
 + 
IMAGE_READ_OFFSET
,

93 
kî√l_size
 - 
IMAGE_READ_OFFSET
, IMAGE_READ_OFFSET,

94 
kî√l_size
 - 
IMAGE_READ_OFFSET
);

97 
k∫l_buf„r
 = (*Ë
kî√l_buf
 + 
IMAGE_READ_OFFSET
;

103 i‡(
ømdisk
) {

104 
rd_buf„r
 = 
	`¶uΩ_fûe
(
ømdisk
, &
ømdisk_Àn
);

105 i‡(
rd_buf„r
 =
NULL
) {

106 
	`Ârötf
(
°dîr
, "CouldÇotÑeadÑamdisk.\n");

109 
ømdisk_‹igö
 = 
	`MAX
(
RAMDISK_ORIGIN_ADDR
, 
kî√l_size
);

110 
ømdisk_‹igö
 = 
	`_ALIGN_UP
(ramdisk_origin, 0x100000);

111 
	`add_£gmít_check
(
öfo
, 
rd_buf„r
, 
ømdisk_Àn
,

112 
ømdisk_‹igö
, 
ømdisk_Àn
);

114 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

115 i‡(
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
¸ash_ba£
, 
¸ash_íd
))

118 
öfo
->
íåy
 = (*Ë
IMAGE_READ_OFFSET
;

123 *
tmp
;

125 
tmp
 = 
k∫l_buf„r
 + 
INITRD_START_OFFS
;

126 *
tmp
 = (Ë
ømdisk_‹igö
;

128 
tmp
 = 
k∫l_buf„r
 + 
INITRD_SIZE_OFFS
;

129 *
tmp
 = (Ë
ømdisk_Àn
;

131 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

132 
tmp
 = 
k∫l_buf„r
 + 
OLDMEM_BASE_OFFS
;

133 *
tmp
 = 
¸ash_ba£
;

135 
tmp
 = 
k∫l_buf„r
 + 
OLDMEM_SIZE_OFFS
;

136 *
tmp
 = 
¸ash_íd
 - 
¸ash_ba£
 + 1;

143 i‡(
	`°æí
(
comm™d_löe
) != 0) {

144 
	`mem£t
(
k∫l_buf„r
 + 
COMMAND_LINE_OFFS
, 0, 
COMMAND_LINESIZE
);

145 
	`mem˝y
(
k∫l_buf„r
 + 
COMMAND_LINE_OFFS
, 
comm™d_löe
, 
	`°æí
(command_line));

148 
	}
}

151 
image_s390_¥obe
(c⁄° *
UNUSED
(
kî√l_buf
), 
off_t
 
	$UNUSED
(
kî√l_size
))

158 
	}
}

161 
	$image_s390_ußge
()

163 
	`¥ötf
("--command-line=STRING SetÅhe kernel commandÜineÅo STRING.\n"

167 
	}
}

	@kexec/arch/s390/kexec-s390.c

11 
	#_GNU_SOURCE


	)

12 
	~<°ddef.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<î∫o.h
>

16 
	~<°döt.h
>

17 
	~<°rög.h
>

18 
	~<gë›t.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<dúít.h
>

21 
	~"../../kexec.h
"

22 
	~"../../kexec-sysˇŒ.h
"

23 
	~"kexec-s390.h
"

24 
	~<¨ch/›ti⁄s.h
>

26 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

31 
	$ªad_°r
(*
°rög
, c⁄° *
∑th
, 
size_t
 
Àn
)

33 
size_t
 
rc
;

34 
FILE
 *
fh
;

36 
fh
 = 
	`f›í
(
∑th
, "rb");

37 i‡(
fh
 =
NULL
)

38 
	`dõ
("CouldÇŸ o≥¿\"%s\"", 
∑th
);

39 
rc
 = 
	`‰ód
(
°rög
, 1, 
Àn
 - 1, 
fh
);

40 i‡(
rc
 =0 && 
	`„º‹
(
fh
))

41 
	`dõ
("CouldÇŸÑód \"%s\"", 
∑th
);

42 
	`f˛o£
(
fh
);

43 
°rög
[
rc
] = 0;

44 i‡(
°rög
[
	`°æí
(string) - 1] == '\n')

45 
°rög
[
	`°æí
(string) - 1] = 0;

46 
	}
}

51 
	$mem‹y_ønge_˙t
(
mem‹y_ønge
 
chunks
[])

53 
i
;

55 
i
 = 0; i < 
MAX_MEMORY_RANGES
; i++) {

56 i‡(
chunks
[
i
].
íd
 == 0)

59  
i
;

60 
	}
}

67 
	$add_mem_hﬁe
(
mem‹y_ønge
 
chunks
[], 
addr
,

68 
size
)

70 
lh_°¨t
, 
lh_íd
, 
lh_size
, 
chunk_˙t
;

71 
i
;

73 
chunk_˙t
 = 
	`mem‹y_ønge_˙t
(
chunks
);

75 
i
 = 0; i < 
chunk_˙t
; i++) {

76 i‡(
addr
 + 
size
 <
chunks
[
i
].
°¨t
)

78 i‡(
addr
 > 
chunks
[
i
].
íd
)

80 
lh_°¨t
 = 
	`MAX
(
addr
, 
chunks
[
i
].
°¨t
);

81 
lh_íd
 = 
	`MIN
(
addr
 + 
size
 - 1, 
chunks
[
i
].
íd
);

82 
lh_size
 = 
lh_íd
 - 
lh_°¨t
 + 1;

83 i‡(
lh_°¨t
 =
chunks
[
i
].
°¨t
 && 
lh_íd
 =chunks[i].
íd
) {

85 
	`memmove
(&
chunks
[
i
], &chunks[i + 1],

86 (
mem‹y_ønge
) *

87 (
MAX_MEMORY_RANGES
 - (
i
 + 1)));

88 
	`mem£t
(&
chunks
[
MAX_MEMORY_RANGES
 - 1], 0,

89 (
mem‹y_ønge
));

90 
chunk_˙t
--;

91 
i
--;

92 } i‡(
lh_°¨t
 =
chunks
[
i
].
°¨t
) {

94 
chunks
[
i
].
°¨t
 = chunks[i].°¨à+ 
lh_size
;

96 } i‡(
lh_íd
 =
chunks
[
i
].
íd
) {

98 
chunks
[
i
].
íd
 = 
lh_°¨t
 - 1;

101 i‡(
chunk_˙t
 >
MAX_MEMORY_RANGES
)

102 
	`dõ
("U«bÀÅÿ¸óã mem‹y hﬁe: %i", 
i
);

103 
	`memmove
(&
chunks
[
i
 + 1], &chunks[i],

104 (
mem‹y_ønge
) *

105 (
MAX_MEMORY_RANGES
 - (
i
 + 1)));

106 
chunks
[
i
 + 1].
°¨t
 = 
lh_°¨t
 + 
lh_size
;

107 
chunks
[
i
].
íd
 = 
lh_°¨t
 - 1;

111 
	}
}

116 
	$ªmove_ofÊöe_mem‹y
(
mem‹y_ønge
 memory_range[])

118 
block_size
, 
chunk_ƒ
;

119 
dúít
 *dirent;

120 
∑th
[
PATH_MAX
];

121 
°r
[64];

122 
DIR
 *
dú
;

124 
	`ªad_°r
(
°r
, "/sys/devices/system/memory/block_size_bytes",

125 (
°r
));

126 
	`ssˇnf
(
°r
, "%lx", &
block_size
);

128 
dú
 = 
	`›ídú
("/sys/devices/system/memory");

129 i‡(!
dú
)

130 
	`dõ
("CouldÇotÑead \"/sys/devices/system/memory\"");

131 (
dúít
 = 
	`ªaddú
(
dú
))) {

132 i‡(
	`ssˇnf
(
dúít
->
d_«me
, "mem‹y%ld\n", &
chunk_ƒ
) != 1)

134 
	`•rötf
(
∑th
, "/sys/devices/system/memory/%s/state",

135 
dúít
->
d_«me
);

136 
	`ªad_°r
(
°r
, 
∑th
, (str));

137 i‡(
	`°∫cmp
(
°r
, "offline", 6) != 0)

139 
	`add_mem_hﬁe
(
mem‹y_ønge
, 
chunk_ƒ
 * 
block_size
, block_size);

141 
	`˛o£dú
(
dú
);

142 
	}
}

148 
	$gë_mem‹y_ønges_s390
(
mem‹y_ønge
 mem‹y_ønge[], *
ønges
,

149 
wôh_¸ashk
)

151 
¸ash_kî√l
[] = "Crash kernel\n";

152 
sys_øm
[] = "System RAM\n";

153 c⁄° *
iomem
 = 
	`¥oc_iomem
();

154 
FILE
 *
Â
;

155 
löe
[80];

156 
cuºít_ønge
 = 0;

158 
Â
 = 
	`f›í
(
iomem
,"r");

159 if(
Â
 == 0) {

160 
	`Ârötf
(
°dîr
,"U«bÀÅÿ›í %s: %s\n",
iomem
,
	`°ªº‹
(
î∫o
));

165 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

166 
°¨t
, 
íd
;

167 
c⁄s
;

168 *
°r
;

170 i‡(
cuºít_ønge
 =
MAX_MEMORY_RANGES
)

173 
	`ssˇnf
(
löe
,"%Lx-%Lx : %n", &
°¨t
, &
íd
, &
c⁄s
);

174 
°r
 = 
löe
+
c⁄s
;

175 i‡((
	`memcmp
(
°r
, 
sys_øm
, 
	`°æí
(sys_ram)) == 0) ||

176 ((
	`memcmp
(
°r
, 
¸ash_kî√l
, 
	`°æí
(crash_kernel)) == 0) &&

177 
wôh_¸ashk
)) {

178 
mem‹y_ønge
[
cuºít_ønge
].
°¨t
 = start;

179 
mem‹y_ønge
[
cuºít_ønge
].
íd
 =Énd;

180 
mem‹y_ønge
[
cuºít_ønge
].
ty≥
 = 
RANGE_RAM
;

181 
cuºít_ønge
++;

187 
	`f˛o£
(
Â
);

188 
	`ªmove_ofÊöe_mem‹y
(
mem‹y_ønge
);

189 *
ønges
 = 
	`mem‹y_ønge_˙t
(
mem‹y_ønge
);

191 
	}
}

207 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

208 
Êags
)

210 
uöt64_t
 
°¨t
, 
íd
;

212 i‡(
	`gë_mem‹y_ønges_s390
(
mem‹y_ønge
, 
ønges
,

213 
Êags
 & 
KEXEC_ON_CRASH
))

215 *
ønge
 = 
mem‹y_ønge
;

216 i‡((
Êags
 & 
KEXEC_ON_CRASH
Ë&& !(Êag†& 
KEXEC_PRESERVE_CONTEXT
)) {

217 i‡(
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
))

219 i‡(
°¨t
 > 
mem_mö
)

220 
mem_mö
 = 
°¨t
;

221 i‡(
íd
 < 
mem_max
)

222 
mem_max
 = 
íd
;

225 
	}
}

228 
fûe_ty≥
 
	gfûe_ty≥
[] = {

229 { "image", 
image_s390_¥obe
, 
image_s390_lﬂd
, 
image_s390_ußge
},

231 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

234 
	$¨ch_ußge
()

236 
	}
}

238 
¨ch_¥o˚ss_›ti⁄s
(
UNUSED
(
¨gc
), **
	$UNUSED
(
¨gv
))

241 
	}
}

243 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

244 { "s390", 
KEXEC_ARCH_S390
 },

245 { "s390x", 
KEXEC_ARCH_S390
 },

246 { 
NULL
, 0 },

249 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

252 
	}
}

254 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

256 
	}
}

258 
	$is_¸ashkî√l_mem_ª£rved
()

260 
uöt64_t
 
°¨t
, 
íd
;

262  
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
) == 0 ?

263 (
°¨t
 !
íd
) : 0;

264 
	}
}

	@kexec/arch/s390/kexec-s390.h

10 #i‚de‡
KEXEC_S390_H


11 
	#KEXEC_S390_H


	)

13 
	#IMAGE_READ_OFFSET
 0x10000

	)

15 
	#RAMDISK_ORIGIN_ADDR
 0x800000

	)

16 
	#INITRD_START_OFFS
 0x408

	)

17 
	#INITRD_SIZE_OFFS
 0x410

	)

18 
	#OLDMEM_BASE_OFFS
 0x418

	)

19 
	#OLDMEM_SIZE_OFFS
 0x420

	)

20 
	#COMMAND_LINE_OFFS
 0x480

	)

21 
	#COMMAND_LINESIZE
 896

	)

22 
	#MAX_MEMORY_RANGES
 1024

	)

24 
	#MAX
(
x
, 
y
Ë((xË> (yË? (xË: (y))

	)

25 
	#MIN
(
x
, 
y
Ë((xË< (yË? (xË: (y))

	)

27 
image_s390_lﬂd
(, **, c⁄° *, 
off_t
, 
kexec_öfo
 *);

28 
image_s390_¥obe
(c⁄° *, 
off_t
);

29 
image_s390_ußge
();

30 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
,

31 
¸ash_ba£
,

32 
¸ash_íd
);

33 
gë_mem‹y_ønges_s390
(
mem‹y_ønge
 
ønge
[], *
ønges
,

34 
wôh_¸ashk
);

35 
comm™d_löe_add
(c⁄° *
°r
);

	@kexec/arch/sh/crashdump-sh.c

13 
	#_GNU_SOURCE


	)

14 
	~<°ddef.h
>

15 
	~<°dio.h
>

16 
	~<î∫o.h
>

17 
	~<°döt.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<gë›t.h
>

21 
	~<ñf.h
>

22 
	~"../../kexec.h
"

23 
	~"../../kexec-ñf.h
"

24 
	~"../../kexec-ñf-boŸ.h
"

25 
	~"../../kexec-sysˇŒ.h
"

26 
	~"../../¸ashdump.h
"

27 
	~"kexec-sh.h
"

28 
	~"¸ashdump-sh.h
"

29 
	~<¨ch/›ti⁄s.h
>

31 
	#CRASH_MAX_MEMORY_RANGES
 64

	)

32 
mem‹y_ønge
 
	g¸ash_mem‹y_ønge
[
CRASH_MAX_MEMORY_RANGES
];

34 
	g¸ash_sh_ønge_ƒ
;

35 
¸ash_sh_mem‹y_ønge_ˇŒback
(*
UNUSED
(
d©a
), UNUSED(
ƒ
),

36 *
°r
,

37 
ba£
,

38 
Àngth
)

41 
mem‹y_ønge
 *
	gønge
 = 
¸ash_mem‹y_ønge
;

42 
mem‹y_ønge
 *
	gønge2
 = 
¸ash_mem‹y_ønge
;

44 
	gønge
 +
¸ash_sh_ønge_ƒ
;

46 i‡(
	g¸ash_sh_ønge_ƒ
 >
CRASH_MAX_MEMORY_RANGES
) {

50 i‡(
°∫cmp
(
°r
, "System RAM\n", 11) == 0) {

51 
ønge
->
°¨t
 = 
ba£
;

52 
	gønge
->
	gíd
 = 
ba£
 + 
Àngth
 - 1;

53 
	gønge
->
	gty≥
 = 
RANGE_RAM
;

54 
	g¸ash_sh_ønge_ƒ
++;

57 i‡(
°∫cmp
(
°r
, "Crash kernel\n", 13) == 0) {

58 i‡(!
¸ash_sh_ønge_ƒ
)

59 
dõ
("Unsupported /proc/iomem format\n");

61 
	gønge2
 = 
ønge
 - 1;

62 i‡((
	gba£
 + 
	gÀngth
 - 1Ë< 
	gønge2
->
	gíd
) {

63 
	gønge
->
	g°¨t
 = 
ba£
 + 
Àngth
;

64 
	gønge
->
	gíd
 = 
ønge2
->
íd
;

65 
	gønge
->
	gty≥
 = 
RANGE_RAM
;

66 
	g¸ash_sh_ønge_ƒ
++;

68 
	gønge2
->
	gíd
 = 
ba£
 - 1;

75 
	$¸ash_gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
)

77 
¸ash_sh_ønge_ƒ
 = 0;

79 
	`kexec_iomem_f‹_óch_löe
(
NULL
, 
¸ash_sh_mem‹y_ønge_ˇŒback
, NULL);

80 *
ønge
 = 
¸ash_mem‹y_ønge
;

81 *
ønges
 = 
¸ash_sh_ønge_ƒ
;

83 
	}
}

85 
¸ash_ñf_öfo
 
	gñf_öfo32
 =

87 
˛ass
: 
ELFCLASS32
,

88 
d©a
: 
ELFDATA2LSB
,

89 
machöe
: 
EM_SH
,

90 
∑ge_off£t
: 
PAGE_OFFSET
,

94 
	$u…ﬂ
(
i
, *
°r
)

96 
j
 = 0, 
k
;

97 
tmp
;

100 
°r
[
j
++] = 
i
 % 10 + '0';

101 } (
i
 /=10) > 0);

102 
°r
[
j
] = '\0';

105 
j
 = 0, 
k
 = 
	`°æí
(
°r
) - 1; j < k; j++, k--) {

106 
tmp
 = 
°r
[
k
];

107 
°r
[
k
] = så[
j
];

108 
°r
[
j
] = 
tmp
;

110 
	}
}

112 
	$add_cmdlöe_∑øm
(*
cmdlöe
, 
uöt64_t
 
addr
, *
cmd°r
,

113 *
byã
)

115 
cmdÀn
, 
Àn
, 
Æign
 = 1024;

116 
°r
[
COMMAND_LINE_SIZE
], *
±r
;

119 
byã
[0]) {

121 i‡(
addr
%
Æign
)

123 
addr
 =áddr/
Æign
;

126 
addr
 =áddr/(
Æign
 *align);

129 
±r
 = 
°r
;

130 
	`°r˝y
(
°r
, 
cmd°r
);

131 
±r
 +
	`°æí
(
°r
);

132 
	`u…ﬂ
(
addr
, 
±r
);

133 
	`°rˇt
(
°r
, 
byã
);

134 
Àn
 = 
	`°æí
(
°r
);

135 
cmdÀn
 = 
	`°æí
(
cmdlöe
Ë+ 
Àn
;

136 i‡(
cmdÀn
 > (
COMMAND_LINE_SIZE
 - 1))

137 
	`dõ
("CommandÜine overflow\n");

138 
	`°rˇt
(
cmdlöe
, 
°r
);

140 
	`dbg¥ötf
("Comm™dÜöêa·îáddögÉlfc‹ehdr: %s\n", 
cmdlöe
);

143 
	}
}

148 
	$lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, * 
mod_cmdlöe
)

150 *
tmp
;

151 
sz
, 
ñfc‹ehdr
;

152 
ƒ_ønges
;

153 
mem‹y_ønge
 *
mem_ønge
;

155 i‡(
	`¸ash_gë_mem‹y_ønges
(&
mem_ønge
, &
ƒ_ønges
) < 0)

158 i‡(
	`¸ash_¸óã_ñf32_hódîs
(
öfo
, &
ñf_öfo32
,

159 
mem_ønge
, 
ƒ_ønges
,

160 &
tmp
, &
sz
,

161 
ELF_CORE_HEADER_ALIGN
) < 0)

164 
ñfc‹ehdr
 = 
	`add_buf„r_phys_vút
(
öfo
, 
tmp
, 
sz
, sz, 1024,

167 
	`dbg¥ötf
("Cª©edÉl‡hódî segmíà© 0x%lx\n", 
ñfc‹ehdr
);

168 
	`add_cmdlöe_∑øm
(
mod_cmdlöe
, 
ñfc‹ehdr
, "Élfcorehdr=", "K");

169 
	`add_cmdlöe_∑øm
(
mod_cmdlöe
, 
ñfc‹ehdr
 - 
mem_mö
, " mem=", "K");

172 
	}
}

174 
	$is_¸ashkî√l_mem_ª£rved
()

176 
uöt64_t
 
°¨t
, 
íd
;

178  
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
) == 0 ?

179 (
°¨t
 !
íd
) : 0;

180 
	}
}

	@kexec/arch/sh/crashdump-sh.h

1 #i‚de‡
CRASHDUMP_SH_H


2 
	#CRASHDUMP_SH_H


	)

4 
	gkexec_öfo
;

5 
lﬂd_¸ashdump_£gmíts
(
kexec_öfo
 *
öfo
, * 
mod_cmdlöe
);

7 
	#PAGE_OFFSET
 0x80000000

	)

	@kexec/arch/sh/include/arch/options.h

1 #i‚de‡
KEXEC_ARCH_SH_OPTIONS_H


2 
	#KEXEC_ARCH_SH_OPTIONS_H


	)

4 
	#OPT_ARCH_MAX
 (
OPT_MAX
+0)

	)

5 
	#OPT_APPEND
 (
OPT_ARCH_MAX
+1)

	)

6 
	#OPT_EMPTYZERO
 (
OPT_ARCH_MAX
+2)

	)

7 
	#OPT_NBSD_HOWTO
 (
OPT_ARCH_MAX
+3)

	)

8 
	#OPT_NBSD_MROOT
 (
OPT_ARCH_MAX
+4)

	)

11 
	#KEXEC_ARCH_OPTIONS
 \

12 
KEXEC_OPTIONS
 \

13 {"comm™d-löe", 1, 0, 
OPT_APPEND
}, \

14 {"≠≥nd", 1, 0, 
OPT_APPEND
}, \

15 {"em±y-zîo", 1, 0, 
OPT_APPEND
}, \

16 {"howto", 1, 0, 
OPT_NBSD_HOWTO
}, \

17 {"möúoŸ", 1, 0, 
OPT_NBSD_MROOT
},

	)

23 
	#KEXEC_ARCH_OPT_STR
 
KEXEC_OPT_STR
 ""

	)

39 
	#KEXEC_ALL_OPTIONS
 
KEXEC_ARCH_OPTIONS


	)

40 
	#KEXEC_ALL_OPT_STR
 
KEXEC_ARCH_OPT_STR


	)

	@kexec/arch/sh/kexec-elf-rel-sh.c

13 
	~<°dio.h
>

14 
	~<ñf.h
>

15 
	~"../../kexec.h
"

16 
	~"../../kexec-ñf.h
"

18 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

23 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS32
)

25 i‡(
ehdr
->
e_machöe
 !
EM_SH
)

29 
	}
}

31 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

32 *
‹ig_loc
, 
UNUSED
(
addªss
), 
ªloˇti⁄
)

34 
uöt32_t
 *
	gloˇti⁄
 = 
‹ig_loc
;

35 
uöt32_t
 
	gvÆue
;

37 
	gr_ty≥
) {

38 
	gR_SH_DIR32
:

39 
vÆue
 = 
gë_u«lig√d
(
loˇti⁄
);

40 
	gvÆue
 +
ªloˇti⁄
;

41 
put_u«lig√d
(
vÆue
, 
loˇti⁄
);

43 
	gR_SH_REL32
:

44 
ªloˇti⁄
 = (ªloˇti⁄ - (
uöt32_t
)
loˇti⁄
);

45 
	gvÆue
 = 
gë_u«lig√d
(
loˇti⁄
);

46 
	gvÆue
 +
ªloˇti⁄
;

47 
put_u«lig√d
(
vÆue
, 
loˇti⁄
);

50 
dõ
("Unknow¿ªœÑñoˇti⁄: %lu\n", 
r_ty≥
);

	@kexec/arch/sh/kexec-elf-sh.c

23 
	#_GNU_SOURCE


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

27 
	~<î∫o.h
>

28 
	~<limôs.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<f˙é.h
>

32 
	~<uni°d.h
>

33 
	~<gë›t.h
>

34 
	~<ñf.h
>

35 
	~"../../kexec.h
"

36 
	~"../../kexec-sysˇŒ.h
"

37 
	~"../../kexec-ñf.h
"

38 
	~"../../kexec-ñf-boŸ.h
"

39 
	~<¨ch/›ti⁄s.h
>

40 
	~"¸ashdump-sh.h
"

41 
	~"kexec-sh.h
"

43 
	$ñf_sh_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

45 
mem_ehdr
 
ehdr
;

46 
ªsu…
;

47 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

48 i‡(
ªsu…
 < 0)

49 
out
;

52 i‡(
ehdr
.
e_machöe
 !
EM_SH
) {

53 
ªsu…
 = -1;

54 
out
;

57 
ªsu…
 = 0;

58 
out
:

59 
	`‰ì_ñf_öfo
(&
ehdr
);

60  
ªsu…
;

61 
	}
}

63 
	$ñf_sh_ußge
()

65 
	`¥ötf
(" --append=STRING SetÅhe kernel commandÜineÅo STRING\n"

67 
	}
}

69 
	$ñf_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

70 
kexec_öfo
 *
öfo
)

72 
mem_ehdr
 
ehdr
;

73 *
comm™d_löe
;

74 *
modifõd_cmdlöe
;

75 
mem_sym
 
sym
;

76 
›t
, 
rc
;

77 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

78 
KEXEC_ARCH_OPTIONS


82 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_OPT_STR
 "";

87 
comm™d_löe
 = 
modifõd_cmdlöe
 = 0;

88 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

89 
›t
) {

92 i‡(
›t
 < 
OPT_ARCH_MAX
) {

95 
OPT_APPEND
:

96 
comm™d_löe
 = 
›èrg
;

104 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
 | 
KEXEC_PRESERVE_CONTEXT
)) {

105 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

106 
	`mem£t
((*)
modifõd_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

107 i‡(
comm™d_löe
) {

108 
	`°∫˝y
(
modifõd_cmdlöe
, 
comm™d_löe
,

109 
COMMAND_LINE_SIZE
);

110 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

115 
	`ñf_exec_buûd_lﬂd
(
öfo
, &
ehdr
, 
buf
, 
Àn
, 0);

116 
öfo
->
íåy
 = (*)
	`vút_to_phys
(
ehdr
.
e_íåy
);

120 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
 | 
KEXEC_PRESERVE_CONTEXT
)) {

121 
rc
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
);

122 i‡(
rc
 < 0)

125 
comm™d_löe
 = 
modifõd_cmdlöe
;

129 i‡(
	`ñf_ªl_föd_symbﬁ
(&
ehdr
, "em±y_zîo_∑ge", &
sym
) == 0) {

130 *
zp
 = (*)
ehdr
.
e_shdr
[
sym
.
°_shndx
].
sh_d©a
;

132 
	`kexec_sh_£tup_zîo_∑ge
(
zp
, 4096, 
comm™d_löe
);

136 
	}
}

	@kexec/arch/sh/kexec-netbsd-sh.c

9 
	#_GNU_SOURCE


	)

10 
	~<°ddef.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

15 
	~<°döt.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<f˙é.h
>

19 
	~<uni°d.h
>

20 
	~<gë›t.h
>

21 
	~<ñf.h
>

22 
	~<boŸ/ñf_boŸ.h
>

23 
	~<ù_checksum.h
>

24 
	~"../../kexec.h
"

25 
	~"../../kexec-ñf.h
"

26 
	~<¨ch/›ti⁄s.h
>

28 c⁄° 
	g¥obe_debug
 = 0;

29 c⁄° 
√tbsd_boŸî
[];

36 
√tbsd_sh_¥obe
(c⁄° *
buf
, 
off_t
 
	$UNUSED
(
Àn
))

38 
Elf32_Ehdr
 *
ehdr
;

40 
ehdr
 = (
Elf32_Ehdr
 *)
buf
;

41 if(
	`memcmp
(
buf
, 
ELFMAG
, 
SELFMAG
) != 0){

44 i‡(
ehdr
->
e_machöe
 !
EM_SH
) {

48 
	}
}

50 
	$√tbsd_sh_ußge
()

52 
	`¥ötf
(

55 
	}
}

57 
√tbsd_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
UNUSED
(
Àn
),

58 
kexec_öfo
 *
öfo
)

60 c⁄° *
	ghowto
, *
	gmöúoŸ
;

61 
	gíåy
, 
	g°¨t
, 
	gsize
, 
	gpsz
;

62 *
	gmöúoŸ_buf
;

63 
off_t
 
	gmöúoŸ_Àngth
;

64 
	ghowto_vÆue
;

65 *
	g∑øm
;

66 *
	g∑øml
;

67 *
	gimg
;

69 
	g›t
;

71 c⁄° 
›ti⁄
 
	g›ti⁄s
[] = {

72 
KEXEC_ARCH_OPTIONS


76 c⁄° 
	gsh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "";

78 
	ghowto
 = 
möúoŸ
 = 0;

79 (
	g›t
 = 
gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

80 
›t
) {

83 i‡(
›t
 < 
OPT_ARCH_MAX
) {

86 
	gOPT_NBSD_HOWTO
:

87 
howto
 = 
›èrg
;

89 
	gOPT_NBSD_MROOT
:

90 
möúoŸ
 = 
›èrg
;

96 
	ghowto_vÆue
 = 0;

97 if(
	ghowto
){

98 
	ghowto_vÆue
 = 
°πﬁ
(
howto
, 
NULL
, 0);

101 
	gpsz
 = 
gë∑gesize
();

105 
Elf32_Ehdr
 *
	gehdr
;

106 
Elf32_Phdr
 *
	gphdr
;

107 
	gbbs
;

108 
	gehdr
 = (
Elf32_Ehdr
 *)
buf
;

109 
	gphdr
 = (
Elf32_Phdr
 *)&
buf
[
ehdr
->
e_phoff
];

111 
	gíåy
 = 
ehdr
->
e_íåy
;

112 
	gimg
 = (*)&
buf
[
phdr
->
p_off£t
];

113 
	g°¨t
 = (
phdr
->
p_∑ddr
) & 0x1fffffff;

114 
	gbbs
 = 
phdr
->
p_fûesz
;

115 
	gsize
 = 
phdr
->
p_memsz
;

117 if(
	gsize
 < 
	gbbs
){

118 
	gsize
 = 
bbs
;

121 
	gsize
 = 
_ALIGN
(
size
, 
psz
);

122 
mem£t
(&
img
[
bbs
], 0, 
size
-bbs);

123 
add_£gmít
(
öfo
, 
img
, 
size
, 
°¨t
, size);

124 
	g°¨t
 +
size
;

128 
	gmöúoŸ_buf
 = 0;

129 i‡(
	gmöúoŸ
) {

130 
	gmöúoŸ_buf
 = 
¶uΩ_fûe
(
möúoŸ
, &
möúoŸ_Àngth
);

131 
	ghowto_vÆue
 |= 0x200;

132 
	gsize
 = 
_ALIGN
(
möúoŸ_Àngth
, 
psz
);

133 
add_£gmít
(
öfo
, 
möúoŸ_buf
, 
size
, 
°¨t
, size);

134 
	g°¨t
 +
size
;

138 
	g∑øm
 = 
xmÆloc
(4096);

139 
mem£t
(
∑øm
, 0, 4096);

140 
	g∑øml
 = (*Ë&
∑øm
[256];

141 
mem˝y
(
∑øm
, 
√tbsd_boŸî
, 256);

142 
	g∑øml
[0] = 
íåy
;

143 
	g∑øml
[1] = 
howto_vÆue
;

144 
add_£gmít
(
öfo
, 
∑øm
, 4096, 
°¨t
, 4096);

147 
	göfo
->
	gíåy
 = (*Ë(
°¨t
 | 0xa0000000);

	@kexec/arch/sh/kexec-sh.c

9 
	#_GNU_SOURCE


	)

10 
	~<°ddef.h
>

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	~<°döt.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<gë›t.h
>

17 
	~"../../kexec.h
"

18 
	~"../../kexec-sysˇŒ.h
"

19 
	~"kexec-sh.h
"

20 
	~<¨ch/›ti⁄s.h
>

22 
	#MAX_MEMORY_RANGES
 64

	)

23 
mem‹y_ønge
 
	gmem‹y_ønge
[
MAX_MEMORY_RANGES
];

25 
kexec_sh_mem‹y_ønge_ˇŒback
(*
UNUSED
(
d©a
), 
ƒ
,

26 *
UNUSED
(
°r
),

27 
ba£
,

28 
Àngth
)

30 i‡(
	gƒ
 < 
	gMAX_MEMORY_RANGES
) {

31 
	gmem‹y_ønge
[
ƒ
].
	g°¨t
 = 
ba£
;

32 
	gmem‹y_ønge
[
ƒ
].
	gíd
 = 
ba£
 + 
Àngth
 - 1;

33 
	gmem‹y_ønge
[
ƒ
].
	gty≥
 = 
RANGE_RAM
;

41 
	$gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

42 
kexec_Êags
)

44 
ƒ
, 
ªt
;

45 
ƒ
 = 
	`kexec_iomem_f‹_óch_löe
("System RAM\n",

46 
kexec_sh_mem‹y_ønge_ˇŒback
, 
NULL
);

47 *
ønge
 = 
mem‹y_ønge
;

48 *
ønges
 = 
ƒ
;

56 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

57 
°¨t
, 
íd
;

59 
ªt
 = 
	`∑r£_iomem_sögÀ
("Cøsh kî√l\n", &
°¨t
, &
íd
);

60 i‡(
ªt
 != 0) {

61 
	`Ârötf
(
°dîr
, "parse_iomem_single failed.\n");

65 i‡(
°¨t
 > 
mem_mö
)

66 
mem_mö
 = 
°¨t
;

67 i‡(
íd
 < 
mem_max
)

68 
mem_max
 = 
íd
;

72 
	}
}

75 
fûe_ty≥
 
	gfûe_ty≥
[] = {

78 { "uImage-sh", 
uImage_sh_¥obe
, 
uImage_sh_lﬂd
, 
zImage_sh_ußge
 },

79 { "zImage-sh", 
zImage_sh_¥obe
, 
zImage_sh_lﬂd
, 
zImage_sh_ußge
 },

80 { "ñf-sh", 
ñf_sh_¥obe
, 
ñf_sh_lﬂd
, 
ñf_sh_ußge
 },

81 { "√tbsd-sh", 
√tbsd_sh_¥obe
, 
√tbsd_sh_lﬂd
, 
√tbsd_sh_ußge
 },

83 
	gfûe_ty≥s
 = (
fûe_ty≥
) / (file_type[0]);

86 
	$¨ch_ußge
()

89 
	`¥ötf
(

94 ,
	`gë_≠≥nd
());

96 
	}
}

98 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

105 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

106 
KEXEC_ALL_OPTIONS


107 { 0, 0, 
NULL
, 0 },

109 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
;

110 
›t
;

112 
›ãº
 = 0;

113 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

114 
›t
) {

117 i‡(
›t
 < 
OPT_MAX
) {

120 
OPT_APPEND
:

121 
OPT_NBSD_HOWTO
:

122 
OPT_NBSD_MROOT
:

127 
›ãº
 = 1;

128 
›töd
 = 1;

130 
	}
}

132 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

136 { "sh3", 
KEXEC_ARCH_DEFAULT
 },

137 { "sh4", 
KEXEC_ARCH_DEFAULT
 },

138 { "sh4a", 
KEXEC_ARCH_DEFAULT
 },

139 { "sh4Æ-d•", 
KEXEC_ARCH_DEFAULT
 },

140 { 
NULL
, 0 },

143 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

146 
	}
}

148 
¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

150 
	}
}

152 
	g≠≥nd_buf
[256];

154 *
	$gë_≠≥nd
()

156 
FILE
 *
Â
;

157 
Àn
;

158 if((
Â
 = 
	`f›í
("/¥oc/cmdlöe", "r")Ë=
NULL
){

159 
	`dõ
("/proc/cmdline file openÉrror !!\n");

161 
	`fgës
(
≠≥nd_buf
, 256, 
Â
);

162 
Àn
 = 
	`°æí
(
≠≥nd_buf
);

163 
≠≥nd_buf
[
Àn
-1] = 0;

164 
	`f˛o£
(
Â
);

165  
≠≥nd_buf
;

166 
	}
}

168 
	$kexec_sh_£tup_zîo_∑ge
(*
zîo_∑ge_buf
, 
size_t
 
zîo_∑ge_size
,

169 *
cmd_löe
)

171 
size_t
 
n
 = 
zîo_∑ge_size
 - 0x100;

173 
	`mem£t
(
zîo_∑ge_buf
, 0, 
zîo_∑ge_size
);

175 i‡(
cmd_löe
) {

176 i‡(
n
 > 
	`°æí
(
cmd_löe
))

177 
n
 = 
	`°æí
(
cmd_löe
);

179 
	`mem˝y
(
zîo_∑ge_buf
 + 0x100, 
cmd_löe
, 
n
);

180 
zîo_∑ge_buf
[0x100 + 
n
] = '\0';

182 
	}
}

184 
	$is_32bô
()

186 c⁄° *
˝uöfo
 = "/proc/cpuinfo";

187 
löe
[
MAX_LINE
];

188 
FILE
 *
Â
;

189 
°©us
 = 0;

191 
Â
 = 
	`f›í
(
˝uöfo
, "r");

192 i‡(!
Â
)

193 
	`dõ
("C™nŸ o≥¿%s\n", 
˝uöfo
);

195 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

196 c⁄° *
key
 = "address sizes";

197 c⁄° *
vÆue
 = " 32 bitsÖhysical";

198 *
p
;

199 i‡(
	`°∫cmp
(
löe
, 
key
, 
	`°æí
(key)))

201 
p
 = 
	`°rchr
(
löe
 + 
	`°æí
(
key
), ':');

202 i‡(!
p
)

204 i‡(!
	`°∫cmp
(
p
 + 1, 
vÆue
, 
	`°æí
(value)))

205 
°©us
 = 1;

209 
	`f˛o£
(
Â
);

211  
°©us
;

212 
	}
}

214 
	$vút_to_phys
(
addr
)

216 
£g
 = 
addr
 & 0xe0000000;

217 
°¨t
 = 0;

218 
have_32bô
 = 
	`is_32bô
();

220 i‡(
£g
 !0x80000000 && (
have_32bô
 || seg != 0xc0000000))

221 
	`dõ
("VútuÆáddªs†%∞i†nŸ i¿P1%s\n", (*)
addr
,

222 
have_32bô
 ? "" : " or P2");

226 i‡(
have_32bô
) {

227 
íd
;

228 
ªt
;

231 
ªt
 = 
	`∑r£_iomem_sögÀ
("Sy°em RAM\n", &
°¨t
, &
íd
);

232 i‡(
ªt
)

233 
	`dõ
("CouldÇotÖarse System RAMÑegion "

237  
addr
 - 
£g
 + 
°¨t
;

238 
	}
}

243 
	$add_£gmít
(
kexec_öfo
 *
öfo
, c⁄° *
buf
, 
size_t
 
bufsz
,

244 
ba£
, 
size_t
 
memsz
)

246 
	`add_£gmít_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
ba£
, 
memsz
, 1);

247 
	}
}

252 
	$add_buf„r
(
kexec_öfo
 *
öfo
, c⁄° *
buf
,

253 
bufsz
, 
memsz
,

254 
buf_Æign
, 
buf_mö
,

255 
buf_max
, 
buf_íd
)

257  
	`add_buf„r_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
memsz
, 
buf_Æign
,

258 
buf_mö
, 
buf_max
, 
buf_íd
, 1);

259 
	}
}

	@kexec/arch/sh/kexec-sh.h

1 #i‚de‡
KEXEC_SH_H


2 
	#KEXEC_SH_H


	)

4 
	#COMMAND_LINE_SIZE
 2048

	)

6 
uImage_sh_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

7 
uImage_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

8 
kexec_öfo
 *
öfo
);

10 
zImage_sh_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

11 
zImage_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

12 
kexec_öfo
 *
öfo
);

13 
zImage_sh_ußge
();

15 
ñf_sh_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

16 
ñf_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

17 
kexec_öfo
 *
öfo
);

18 
ñf_sh_ußge
();

20 
√tbsd_sh_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

21 
√tbsd_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

22 
kexec_öfo
 *
öfo
);

23 
√tbsd_sh_ußge
();

25 *
gë_≠≥nd
();

26 
kexec_sh_£tup_zîo_∑ge
(*
zîo_∑ge_buf
, 
size_t
 
zîo_∑ge_size
,

27 *
cmd_löe
);

	@kexec/arch/sh/kexec-uImage-sh.c

6 
	~<°döt.h
>

7 
	~<°rög.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<image.h
>

10 
	~<kexec-uImage.h
>

11 
	~"../../kexec.h
"

12 
	~"kexec-sh.h
"

14 
	$uImage_sh_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

16  
	`uImage_¥obe_kî√l
(
buf
, 
Àn
, 
IH_ARCH_SH
);

17 
	}
}

19 
	$uImage_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

20 
kexec_öfo
 *
öfo
)

22  
	`zImage_sh_lﬂd
(
¨gc
, 
¨gv
, 
buf
 + (
image_hódî
),

23 
Àn
 - (
image_hódî
), 
öfo
);

24 
	}
}

	@kexec/arch/sh/kexec-zImage-sh.c

9 
	#_GNU_SOURCE


	)

10 
	~<°ddef.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

15 
	~<°döt.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<f˙é.h
>

19 
	~<uni°d.h
>

20 
	~<gë›t.h
>

21 
	~<ñf.h
>

22 
	~<boŸ/ñf_boŸ.h
>

23 
	~<ù_checksum.h
>

24 
	~"../../kexec.h
"

25 
	~"../../kexec-ñf.h
"

26 
	~<¨ch/›ti⁄s.h
>

27 
	~"kexec-sh.h
"

29 c⁄° 
	g¥obe_debug
 = 0;

31 
	#HEAD32_KERNEL_START_ADDR
 0

	)

32 
	#HEAD32_DECOMPRESS_KERNEL_ADDR
 1

	)

33 
	#HEAD32_INIT_STACK_ADDR
 2

	)

34 
	#HEAD32_INIT_SR
 3

	)

35 
	#HEAD32_INIT_SR_VALUE
 0x400000F0

	)

37 
	$zImage_hód32
(c⁄° *
buf
, 
offs
)

39 *
vÆues
 = (*)
buf
;

40 
k
;

42 
k
 = (0x200 / 4) - 1; k > 0; k--)

43 i‡(
vÆues
[
k
] != 0x00090009)

44  
vÆues
[
k
 - 
offs
];

47 
	}
}

54 
zImage_sh_¥obe
(c⁄° *
buf
, 
off_t
 
	$UNUSED
(
Àn
))

56 i‡(
	`memcmp
(&
buf
[0x202], "HdrS", 4) != 0)

59 i‡(
	`zImage_hód32
(
buf
, 
HEAD32_INIT_SR
Ë!
HEAD32_INIT_SR_VALUE
)

63 
	}
}

65 
	$zImage_sh_ußge
()

67 
	`¥ötf
(

71 
	}
}

73 
	$zImage_sh_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

74 
kexec_öfo
 *
öfo
)

76 *
comm™d_löe
;

77 
›t
;

78 
em±y_zîo
, 
zîo_∑ge_ba£
, 
zîo_∑ge_size
, 
k
;

79 
image_ba£
;

80 *
∑øm
;

82 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

83 
KEXEC_ARCH_OPTIONS


87 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "";

89 
comm™d_löe
 = 0;

90 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

91 
›t
) {

94 i‡(
›t
 < 
OPT_ARCH_MAX
) {

97 
OPT_APPEND
:

98 
comm™d_löe
 = 
›èrg
;

103 i‡(!
comm™d_löe
)

104 
comm™d_löe
 = 
	`gë_≠≥nd
();

112 
em±y_zîo
 = 
	`zImage_hód32
(
buf
, 
HEAD32_KERNEL_START_ADDR
);

114 
zîo_∑ge_size
 = 0x10000;

115 
zîo_∑ge_ba£
 = 
	`vút_to_phys
(
em±y_zîo
 - 
zîo_∑ge_size
);

117 !
	`vÆid_mem‹y_ønge
(
öfo
, 
zîo_∑ge_ba£
,

118 
zîo_∑ge_ba£
 + 
zîo_∑ge_size
 - 1)) {

119 
zîo_∑ge_ba£
 += 0x1000;

120 
zîo_∑ge_size
 -= 0x1000;

121 i‡(
zîo_∑ge_size
 == 0)

122 
	`dõ
("UnableÅo determine zeroÖage size from %p \n",

123 (*)
em±y_zîo
);

126 
∑øm
 = 
	`xmÆloc
(
zîo_∑ge_size
);

127 
k
 = 0; k < (
zîo_∑ge_size
 / 0x1000); k++)

128 
	`kexec_sh_£tup_zîo_∑ge
(
∑øm
 + (
k
 * 0x1000), 0x1000,

129 
comm™d_löe
);

131 
	`add_£gmít
(
öfo
, 
∑øm
, 
zîo_∑ge_size
,

132 0x80000000 | 
zîo_∑ge_ba£
, 
zîo_∑ge_size
);

138 
image_ba£
 = 
	`_ALIGN
(
em±y_zîo
, 0x10000);

139 
	`add_£gmít
(
öfo
, 
buf
, 
Àn
, 
image_ba£
,Üen);

140 
öfo
->
íåy
 = (*)
	`vút_to_phys
(
image_ba£
);

142 
	}
}

	@kexec/arch/x86_64/kexec-bzImage64.c

20 
	#_GNU_SOURCE


	)

21 
	~<°ddef.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<limôs.h
>

25 
	~<°dlib.h
>

26 
	~<î∫o.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

29 
	~<f˙é.h
>

30 
	~<uni°d.h
>

31 
	~<gë›t.h
>

32 
	~<ñf.h
>

33 
	~<boŸ/ñf_boŸ.h
>

34 
	~<ù_checksum.h
>

35 
	~<x86/x86-löux.h
>

36 
	~"../../kexec.h
"

37 
	~"../../kexec-ñf.h
"

38 
	~"../../kexec-sysˇŒ.h
"

39 
	~"kexec-x86_64.h
"

40 
	~"../i386/x86-löux-£tup.h
"

41 
	~"../i386/¸ashdump-x86.h
"

42 
	~<¨ch/›ti⁄s.h
>

44 c⁄° 
	g¥obe_debug
 = 0;

45 
	gbzImage_suµ‹t_efi_boŸ
;

47 
	$bzImage64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

49 c⁄° 
x86_löux_hódî
 *
hódî
;

51 i‡((
uötmax_t
)
Àn
 < (uintmax_t)(2 * 512)) {

52 i‡(
¥obe_debug
)

53 
	`Ârötf
(
°dîr
, "File isÅoo shortÅo beá bzImage!\n");

56 
hódî
 = (c⁄° 
x86_löux_hódî
 *)
buf
;

57 i‡(
	`memcmp
(
hódî
->
hódî_magic
, "HdrS", 4) != 0) {

58 i‡(
¥obe_debug
)

59 
	`Ârötf
(
°dîr
, "Notá bzImage\n");

62 i‡(
hódî
->
boŸ_£˘‹_magic
 != 0xAA55) {

63 i‡(
¥obe_debug
)

64 
	`Ârötf
(
°dîr
, "No x86 boot sectorÖresent\n");

68 i‡(
hódî
->
¥Ÿocﬁ_vîsi⁄
 < 0x020C) {

69 i‡(
¥obe_debug
)

70 
	`Ârötf
(
°dîr
, "Must beátÜeastÖrotocol version 2.12\n");

74 i‡((
hódî
->
lﬂdÊags
 & 1) == 0) {

75 i‡(
¥obe_debug
)

76 
	`Ârötf
(
°dîr
, "zImageÇotá bzImage\n");

80 i‡((
hódî
->
xlﬂdÊags
 & 3) != 3) {

81 i‡(
¥obe_debug
)

82 
	`Ârötf
(
°dîr
, "NotáÑelocatable bzImage64\n");

87 
	#XLF_EFI_KEXEC
 (1 << 4)

	)

88 i‡((
hódî
->
xlﬂdÊags
 & 
XLF_EFI_KEXEC
) == XLF_EFI_KEXEC)

89 
bzImage_suµ‹t_efi_boŸ
 = 1;

92 i‡(
¥obe_debug
)

93 
	`Ârötf
(
°dîr
, "It'sáÑelocatable bzImage64\n");

95 
	}
}

97 
	$bzImage64_ußge
()

99 
	`¥ötf
( " --entry-32bit UseÅhe kernels 32bitÉntryÖoint.\n"

107 
	}
}

109 
	$do_bzImage64_lﬂd
(
kexec_öfo
 *
öfo
,

110 c⁄° *
kî√l
, 
off_t
 
kî√l_Àn
,

111 c⁄° *
comm™d_löe
, 
off_t
 
comm™d_löe_Àn
,

112 c⁄° *
öôrd
, 
off_t
 
öôrd_Àn
)

114 
x86_löux_hódî
 
£tup_hódî
;

115 
x86_löux_∑øm_hódî
 *
ªÆ_mode
;

116 
£tup_£˘s
;

117 
size_t
 
size
;

118 
kîn16_size
;

119 
£tup_ba£
, 
£tup_size
, 
£tup_hódî_size
;

120 
íåy64_ªgs
 
ªgs64
;

121 *
modifõd_cmdlöe
;

122 
cmdlöe_íd
;

123 
Æign
, 
addr
, 
k_size
;

124 
kîn16_size_√eded
;

129 i‡((
uötmax_t
)
kî√l_Àn
 < (uintmax_t)(2 * 512))

132 
	`mem˝y
(&
£tup_hódî
, 
kî√l
, (setup_header));

133 
£tup_£˘s
 = 
£tup_hódî
.setup_sects;

134 i‡(
£tup_£˘s
 == 0)

135 
£tup_£˘s
 = 4;

136 
kîn16_size
 = (
£tup_£˘s
 + 1) * 512;

137 i‡(
kî√l_Àn
 < 
kîn16_size
) {

138 
	`Ârötf
(
°dîr
, "BzImageÅruncated?\n");

142 i‡((
uötmax_t
)
comm™d_löe_Àn
 > (uötmax_t)
£tup_hódî
.
cmdlöe_size
) {

143 
	`dbg¥ötf
("Kernel commandÜineÅooÜong for kernel!\n");

150 i‡(
öfo
->
kexec_Êags
 & (
KEXEC_ON_CRASH
 | 
KEXEC_PRESERVE_CONTEXT
)) {

151 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

152 
	`mem£t
((*)
modifõd_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

153 i‡(
comm™d_löe
) {

154 
	`°∫˝y
(
modifõd_cmdlöe
, 
comm™d_löe
,

155 
COMMAND_LINE_SIZE
);

156 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

165 i‡(
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
, -1, 0) < 0)

169 
comm™d_löe
 = 
modifõd_cmdlöe
;

170 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

174 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
,

176 
	`dbg¥ötf
("LﬂdedÖurg©‹yáàadd∏0x%lx\n", 
öfo
->
rhdr
.
ªl_addr
);

178 
kîn16_size_√eded
 = 
kîn16_size
;

179 i‡(
kîn16_size_√eded
 < 4096)

180 
kîn16_size_√eded
 = 4096;

181 
£tup_size
 = 
kîn16_size_√eded
 + 
comm™d_löe_Àn
 +

182 
PURGATORY_CMDLINE_SIZE
;

183 
ªÆ_mode
 = 
	`xmÆloc
(
£tup_size
);

184 
	`mem£t
(
ªÆ_mode
, 0, 
£tup_size
);

187 
£tup_hódî_size
 = 
kî√l
[0x201] + 0x202 - 0x1f1;

188 i‡(
£tup_hódî_size
 > 0x7f)

189 
£tup_hódî_size
 = 0x7f;

190 
	`mem˝y
((*)
ªÆ_mode
 + 0x1f1, 
kî√l
 + 0x1f1,

191 
£tup_hódî_size
);

196 
£tup_ba£
 = 
	`add_buf„r
(
öfo
, 
ªÆ_mode
, 
£tup_size
, setup_size,

199 
	`dbg¥ötf
("LoadedÑeal_mode_dataánd commandÜineát 0x%lx\n",

200 
£tup_ba£
);

203 
k_size
 = 
kî√l_Àn
 - 
kîn16_size
;

205 
	`dbg¥ötf
("kî√»öô_sizê0x%x\n", 
ªÆ_mode
->
öô_size
);

206 
size
 = 
	`_ALIGN
(
ªÆ_mode
->
öô_size
, 4096);

207 
Æign
 = 
ªÆ_mode
->
kî√l_Æignmít
;

208 
addr
 = 
	`add_buf„r
(
öfo
, 
kî√l
 + 
kîn16_size
, 
k_size
,

209 
size
, 
Æign
, 0x100000, -1, -1);

210 i‡(
addr
 =
ULONG_MAX
)

211 
	`dõ
("canÇotÜoad bzImage64");

212 
	`dbg¥ötf
("Lﬂded 64bô kî√»© 0x%lx\n", 
addr
);

215 
	`£tup_löux_boŸlﬂdî_∑ømëîs_high
(
öfo
, 
ªÆ_mode
, 
£tup_ba£
,

216 
kîn16_size_√eded
, 
comm™d_löe
, 
comm™d_löe_Àn
,

217 
öôrd
, 
öôrd_Àn
, 1);

219 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy64_ªgs", &
ªgs64
,

220 (
ªgs64
));

221 
ªgs64
.
rbx
 = 0;

222 
ªgs64
.
rsi
 = 
£tup_ba£
;

223 
ªgs64
.
rù
 = 
addr
 + 0x200;

224 
ªgs64
.
r•
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_end");

225 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy64_ªgs", &
ªgs64
,

226 (
ªgs64
));

228 
cmdlöe_íd
 = 
£tup_ba£
 + 
kîn16_size_√eded
 + 
comm™d_löe_Àn
 - 1;

229 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "cmdlöe_íd", &
cmdlöe_íd
,

233 
	`£tup_löux_sy°em_∑ømëîs
(
öfo
, 
ªÆ_mode
);

236 
	}
}

238 
	$bzImage64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

239 
kexec_öfo
 *
öfo
)

241 *
comm™d_löe
 = 
NULL
, *
tmp_cmdlöe
 = NULL;

242 c⁄° *
ømdisk
 = 
NULL
, *
≠≥nd
 = NULL;

243 *
ømdisk_buf
;

244 
off_t
 
ømdisk_Àngth
 = 0;

245 
comm™d_löe_Àn
;

246 
íåy_16bô
 = 0, 
íåy_32bô
 = 0;

247 
›t
;

248 
ªsu…
;

251 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

252 
KEXEC_ARCH_OPTIONS


253 { "comm™d-löe", 1, 0, 
OPT_APPEND
 },

254 { "≠≥nd", 1, 0, 
OPT_APPEND
 },

255 { "ªu£-cmdlöe", 0, 0, 
OPT_REUSE_CMDLINE
 },

256 { "öôrd", 1, 0, 
OPT_RAMDISK
 },

257 { "ømdisk", 1, 0, 
OPT_RAMDISK
 },

258 { "ªÆ-mode", 0, 0, 
OPT_REAL_MODE
 },

259 { "íåy-32bô", 0, 0, 
OPT_ENTRY_32BIT
 },

262 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "d";

264 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

265 
›t
) {

268 i‡(
›t
 < 
OPT_ARCH_MAX
)

270 
OPT_APPEND
:

271 
≠≥nd
 = 
›èrg
;

273 
OPT_REUSE_CMDLINE
:

274 
tmp_cmdlöe
 = 
	`gë_comm™d_löe
();

276 
OPT_RAMDISK
:

277 
ømdisk
 = 
›èrg
;

279 
OPT_REAL_MODE
:

280 
íåy_16bô
 = 1;

282 
OPT_ENTRY_32BIT
:

283 
íåy_32bô
 = 1;

287 
comm™d_löe
 = 
	`c⁄ˇt_cmdlöe
(
tmp_cmdlöe
, 
≠≥nd
);

288 i‡(
tmp_cmdlöe
)

289 
	`‰ì
(
tmp_cmdlöe
);

290 
comm™d_löe_Àn
 = 0;

291 i‡(
comm™d_löe
) {

292 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) + 1;

294 
comm™d_löe
 = 
	`°rdup
("\0");

295 
comm™d_löe_Àn
 = 1;

297 
ømdisk_buf
 = 0;

298 i‡(
ømdisk
)

299 
ømdisk_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
ømdisk_Àngth
);

301 i‡(
íåy_16bô
 || 
íåy_32bô
)

302 
ªsu…
 = 
	`do_bzImage_lﬂd
(
öfo
, 
buf
, 
Àn
, 
comm™d_löe
,

303 
comm™d_löe_Àn
, 
ømdisk_buf
,

304 
ømdisk_Àngth
, 
íåy_16bô
);

306 
ªsu…
 = 
	`do_bzImage64_lﬂd
(
öfo
, 
buf
, 
Àn
, 
comm™d_löe
,

307 
comm™d_löe_Àn
, 
ømdisk_buf
,

308 
ømdisk_Àngth
);

310 
	`‰ì
(
comm™d_löe
);

311  
ªsu…
;

312 
	}
}

	@kexec/arch/x86_64/kexec-elf-rel-x86_64.c

1 
	~<°dio.h
>

2 
	~<ñf.h
>

3 
	~"../../kexec.h
"

4 
	~"../../kexec-ñf.h
"

6 
	$machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
)

8 i‡(
ehdr
->
ei_d©a
 !
ELFDATA2LSB
) {

11 i‡(
ehdr
->
ei_˛ass
 !
ELFCLASS64
) {

14 i‡(
ehdr
->
e_machöe
 !
EM_X86_64
) {

18 
	}
}

20 c⁄° *
	$ªloc_«me
(
r_ty≥
)

22 c⁄° *
r_«me
[] = {

48 
buf
[100];

49 c⁄° *
«me
;

50 i‡(
r_ty≥
 < ((
r_«me
)/(r_name[0]))){

51 
«me
 = 
r_«me
[
r_ty≥
];

54 
	`•rötf
(
buf
, "R_X86_64_%lu", 
r_ty≥
);

55 
«me
 = 
buf
;

57  
«me
;

58 
	}
}

60 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
UNUSED
(
ehdr
), 
r_ty≥
,

61 *
loˇti⁄
, 
addªss
, 
vÆue
)

63 
dbg¥ötf
("%s\n", 
ªloc_«me
(
r_ty≥
));

64 
	gr_ty≥
) {

65 
	gR_X86_64_NONE
:

67 
	gR_X86_64_64
:

68 *(
uöt64_t
 *)
loˇti⁄
 = 
vÆue
;

70 
	gR_X86_64_32
:

71 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
;

72 i‡(
	gvÆue
 !*(
uöt32_t
 *)
loˇti⁄
)

73 
ovîÊow
;

75 
	gR_X86_64_32S
:

76 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
;

77 i‡((
	göt64_t
)
	gvÆue
 !*(
öt32_t
 *)
loˇti⁄
)

78 
ovîÊow
;

80 
	gR_X86_64_PC32
:

81 *(
uöt32_t
 *)
loˇti⁄
 = 
vÆue
 - 
addªss
;

84 
dõ
("Unh™dÀdÑñ®ªloˇti⁄: %s\n", 
ªloc_«me
(
r_ty≥
));

88 
	govîÊow
:

89 
dõ
("overflow inÑelocationÅype %s val %lx\n",

90 
ªloc_«me
(
r_ty≥
), 
vÆue
);

	@kexec/arch/x86_64/kexec-elf-x86_64.c

20 
	#_GNU_SOURCE


	)

21 
	~<°ddef.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<limôs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

29 
	~<f˙é.h
>

30 
	~<uni°d.h
>

31 
	~<gë›t.h
>

32 
	~<ñf.h
>

33 
	~<x86/x86-löux.h
>

34 
	~"../../kexec.h
"

35 
	~"../../kexec-sysˇŒ.h
"

36 
	~"../../kexec-ñf.h
"

37 
	~"../../kexec-ñf-boŸ.h
"

38 
	~"../i386/x86-löux-£tup.h
"

39 
	~"kexec-x86_64.h
"

40 
	~"../i386/¸ashdump-x86.h
"

41 
	~<¨ch/›ti⁄s.h
>

43 c⁄° 
	g¥obe_debug
 = 0;

45 
	$ñf_x86_64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
)

48 
mem_ehdr
 
ehdr
;

49 
ªsu…
;

50 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, &
ehdr
, 0);

51 i‡(
ªsu…
 < 0) {

52 i‡(
¥obe_debug
) {

53 
	`Ârötf
(
°dîr
, "Notán ELFÉxecutable\n");

55 
out
;

59 i‡(
ehdr
.
e_machöe
 !
EM_X86_64
) {

61 i‡(
¥obe_debug
) {

62 
	`Ârötf
(
°dîr
, "Not x86_64 ELFÉxecutable\n");

64 
ªsu…
 = -1;

65 
out
;

67 
ªsu…
 = 0;

68 
out
:

69 
	`‰ì_ñf_öfo
(&
ehdr
);

70  
ªsu…
;

71 
	}
}

73 
	$ñf_x86_64_ußge
()

75 
	`¥ötf
( " --command-line=STRING SetÅhe kernel commandÜineÅo STRING\n"

84 
	}
}

86 
	$ñf_x86_64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

87 
kexec_öfo
 *
öfo
)

89 
mem_ehdr
 
ehdr
;

90 c⁄° *
≠≥nd
 = 
NULL
;

91 *
comm™d_löe
 = 
NULL
, *
modifõd_cmdlöe
;

92 *
tmp_cmdlöe
 = 
NULL
;

93 
comm™d_löe_Àn
;

94 c⁄° *
ømdisk
;

95 
íåy
, 
max_addr
;

96 
¨g_°yÀ
;

97 
	#ARG_STYLE_ELF
 0

	)

98 
	#ARG_STYLE_LINUX
 1

	)

99 
	#ARG_STYLE_NONE
 2

	)

100 
›t
;

101 
ªsu…
 = 0;

102 *
îr‹_msg
 = 
NULL
;

105 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

106 
KEXEC_ARCH_OPTIONS


107 { "comm™d-löe", 1, 
NULL
, 
OPT_APPEND
 },

108 { "≠≥nd", 1, 
NULL
, 
OPT_APPEND
 },

109 { "ªu£-cmdlöe", 0, 
NULL
, 
OPT_REUSE_CMDLINE
 },

110 { "öôrd", 1, 
NULL
, 
OPT_RAMDISK
 },

111 { "ømdisk", 1, 
NULL
, 
OPT_RAMDISK
 },

112 { "¨gs-ñf", 0, 
NULL
, 
OPT_ARGS_ELF
 },

113 { "¨gs-löux", 0, 
NULL
, 
OPT_ARGS_LINUX
 },

114 { "¨gs-n⁄e", 0, 
NULL
, 
OPT_ARGS_NONE
 },

115 { 0, 0, 
NULL
, 0 },

118 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ARCH_OPT_STR
 "";

123 
¨g_°yÀ
 = 
ARG_STYLE_ELF
;

124 
modifõd_cmdlöe
 = 0;

125 
ømdisk
 = 0;

126 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

127 
›t
) {

130 i‡(
›t
 < 
OPT_ARCH_MAX
) {

133 
	`Ârötf
(
°dîr
, "Unknow¿›ti⁄: o±: %d\n", 
›t
);

134 
OPT_APPEND
:

135 
≠≥nd
 = 
›èrg
;

137 
OPT_REUSE_CMDLINE
:

138 
tmp_cmdlöe
 = 
	`gë_comm™d_löe
();

140 
OPT_RAMDISK
:

141 
ømdisk
 = 
›èrg
;

143 
OPT_ARGS_ELF
:

144 
¨g_°yÀ
 = 
ARG_STYLE_ELF
;

146 
OPT_ARGS_LINUX
:

147 
¨g_°yÀ
 = 
ARG_STYLE_LINUX
;

149 
OPT_ARGS_NONE
:

150 #ifde‡
__x86_64__


151 
¨g_°yÀ
 = 
ARG_STYLE_NONE
;

153 
	`dõ
("--args-none only works onárch x86_64\n");

158 
comm™d_löe
 = 
	`c⁄ˇt_cmdlöe
(
tmp_cmdlöe
, 
≠≥nd
);

159 i‡(
tmp_cmdlöe
)

160 
	`‰ì
(
tmp_cmdlöe
);

161 
comm™d_löe_Àn
 = 0;

162 i‡(
comm™d_löe
) {

163 
comm™d_löe_Àn
 = 
	`°æí
(
comm™d_löe
) +1;

169 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

170 
modifõd_cmdlöe
 = 
	`xmÆloc
(
COMMAND_LINE_SIZE
);

171 
	`mem£t
((*)
modifõd_cmdlöe
, 0, 
COMMAND_LINE_SIZE
);

172 i‡(
comm™d_löe
) {

173 
	`°∫˝y
(
modifõd_cmdlöe
, 
comm™d_löe
,

174 
COMMAND_LINE_SIZE
);

175 
modifõd_cmdlöe
[
COMMAND_LINE_SIZE
 - 1] = '\0';

180 
	`ñf_exec_buûd_lﬂd
(
öfo
, &
ehdr
, 
buf
, 
Àn
, 0);

182 
íåy
 = 
ehdr
.
e_íåy
;

183 
max_addr
 = 
	`ñf_max_addr
(&
ehdr
);

186 i‡(
¨g_°yÀ
 !
ARG_STYLE_NONE
) {

188 
	`ñf_ªl_buûd_lﬂd
(
öfo
, &öfo->
rhdr
, 
purg©‹y
, 
purg©‹y_size
,

189 0, 
ULONG_MAX
, 1, 0);

191 i‡(
¨g_°yÀ
 =
ARG_STYLE_NONE
) {

192 
öfo
->
íåy
 = (*)entry;

195 i‡(
¨g_°yÀ
 =
ARG_STYLE_ELF
) {

196 
nŸe_ba£
;

197 
íåy64_ªgs
 
ªgs
;

200 
nŸe_ba£
 = 
	`ñf_boŸ_nŸes
(
öfo
, 
max_addr
, 
comm™d_löe
, 
comm™d_löe_Àn
);

203 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy64_ªgs", &
ªgs
, (regs));

204 
ªgs
.
rdi
 = 
nŸe_ba£
;

205 
ªgs
.
rù
 = 
íåy
;

206 
ªgs
.
r•
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_end");

207 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy64_ªgs", &
ªgs
, (regs));

209 i‡(
ømdisk
) {

210 
îr‹_msg
 = "RamdisksÇot supported with genericÉlfárguments";

211 
out
;

214 i‡(
¨g_°yÀ
 =
ARG_STYLE_LINUX
) {

215 
x86_löux_Áked_∑øm_hódî
 *
hdr
;

216 
∑øm_ba£
;

217 *
ømdisk_buf
;

218 
off_t
 
ømdisk_Àngth
;

219 
íåy64_ªgs
 
ªgs
;

220 
rc
=0;

223 
hdr
 = 
	`xmÆloc
((*hdr));

224 
∑øm_ba£
 = 
	`add_buf„r
(
öfo
, 
hdr
, (*hdr), (*hdr),

225 16, 0, 
max_addr
, 1);

228 
	`mem£t
(
hdr
, 0, (*hdr));

229 
	`öô_löux_∑ømëîs
(&
hdr
->hdr);

232 
ømdisk_buf
 = 0;

233 
ømdisk_Àngth
 = 0;

234 i‡(
ømdisk
) {

235 
ømdisk_buf
 = 
	`¶uΩ_fûe
(
ømdisk
, &
ømdisk_Àngth
);

240 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

241 
rc
 = 
	`lﬂd_¸ashdump_£gmíts
(
öfo
, 
modifõd_cmdlöe
,

242 
max_addr
, 0);

243 i‡(
rc
 < 0) {

244 
ªsu…
 = -1;

245 
out
;

248 
	`‰ì
(
comm™d_löe
);

249 
comm™d_löe
 = 
modifõd_cmdlöe
;

250 
comm™d_löe_Àn
 = 
	`°æí
(
modifõd_cmdlöe
) + 1;

251 
modifõd_cmdlöe
 = 
NULL
;

255 
	`£tup_löux_boŸlﬂdî_∑ømëîs
(
öfo
, &
hdr
->hdr, 
∑øm_ba£
,

256 
	`off£tof
(
x86_löux_Áked_∑øm_hódî
, 
comm™d_löe
),

257 
comm™d_löe
, 
comm™d_löe_Àn
,

258 
ømdisk_buf
, 
ømdisk_Àngth
);

261 
	`£tup_löux_sy°em_∑ømëîs
(
öfo
, &
hdr
->hdr);

264 
	`ñf_ªl_gë_symbﬁ
(&
öfo
->
rhdr
, "íåy64_ªgs", &
ªgs
, (regs));

265 
ªgs
.
rbx
 = 0;

266 
ªgs
.
rsi
 = 
∑øm_ba£
;

267 
ªgs
.
rù
 = 
íåy
;

268 
ªgs
.
r•
 = 
	`ñf_ªl_gë_addr
(&
öfo
->
rhdr
, "stack_end");

269 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "íåy64_ªgs", &
ªgs
, (regs));

272 
îr‹_msg
 = "Unknownárgument style\n";

275 
out
:

276 
	`‰ì
(
comm™d_löe
);

277 
	`‰ì
(
modifõd_cmdlöe
);

278 i‡(
îr‹_msg
)

279 
	`dõ
(
îr‹_msg
);

280  
ªsu…
;

281 
	}
}

	@kexec/arch/x86_64/kexec-x86_64.c

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<î∫o.h
>

23 
	~<°döt.h
>

24 
	~<°rög.h
>

25 
	~<limôs.h
>

26 
	~<°dlib.h
>

27 
	~<gë›t.h
>

28 
	~"../../kexec.h
"

29 
	~"../../kexec-ñf.h
"

30 
	~"../../kexec-sysˇŒ.h
"

31 
	~"kexec-x86_64.h
"

32 
	~"../i386/¸ashdump-x86.h
"

33 
	~<¨ch/›ti⁄s.h
>

35 
fûe_ty≥
 
	gfûe_ty≥
[] = {

36 { "ñf-x86_64", 
ñf_x86_64_¥obe
, 
ñf_x86_64_lﬂd
, 
ñf_x86_64_ußge
 },

37 { "mu…iboŸ-x86", 
mu…iboŸ_x86_¥obe
, 
mu…iboŸ_x86_lﬂd
,

38 
mu…iboŸ_x86_ußge
 },

39 { "ñf-x86", 
ñf_x86_¥obe
, 
ñf_x86_lﬂd
, 
ñf_x86_ußge
 },

40 { "bzImage64", 
bzImage64_¥obe
, 
bzImage64_lﬂd
, 
bzImage64_ußge
 },

41 { "bzImage", 
bzImage_¥obe
, 
bzImage_lﬂd
, 
bzImage_ußge
 },

42 { "beoboŸ-x86", 
beoboŸ_¥obe
, 
beoboŸ_lﬂd
, 
beoboŸ_ußge
 },

43 { "nbi-x86", 
nbi_¥obe
, 
nbi_lﬂd
, 
nbi_ußge
 },

45 
	gfûe_ty≥s
 = (
fûe_ty≥
)/(file_type[0]);

48 
	$¨ch_ußge
()

50 
	`¥ötf
(

59 
	}
}

61 
¨ch_›ti⁄s_t
 
	g¨ch_›ti⁄s
 = {

62 .
ª£t_vga
 = 0,

63 .
	g£rül_ba£
 = 0x3f8,

64 .
	g£rül_baud
 = 0,

65 .
	gc⁄sﬁe_vga
 = 0,

66 .
	gc⁄sﬁe_£rül
 = 0,

67 .
	gc‹e_hódî_ty≥
 = 
CORE_TYPE_ELF64
,

68 .
	g∑ss_memm≠_cmdlöe
 = 0,

69 .
	gn€fi
 = 0,

72 
	$¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
)

74 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

75 
KEXEC_ALL_OPTIONS


76 { 0, 0, 
NULL
, 0 },

78 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ALL_OPT_STR
;

79 
›t
;

80 
vÆue
;

81 *
íd
;

83 
›ãº
 = 0;

84 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
›ti⁄s
, 0)) != -1) {

85 
›t
) {

88 
OPT_RESET_VGA
:

89 
¨ch_›ti⁄s
.
ª£t_vga
 = 1;

91 
OPT_CONSOLE_VGA
:

92 
¨ch_›ti⁄s
.
c⁄sﬁe_vga
 = 1;

94 
OPT_CONSOLE_SERIAL
:

95 
¨ch_›ti⁄s
.
c⁄sﬁe_£rül
 = 1;

97 
OPT_SERIAL
:

98 
vÆue
 = 
ULONG_MAX
;

99 i‡(
	`°rcmp
(
›èrg
, "ttyS0") == 0) {

100 
vÆue
 = 0x3f8;

102 i‡(
	`°rcmp
(
›èrg
, "ttyS1") == 0) {

103 
vÆue
 = 0x2f8;

105 i‡(
	`°∫cmp
(
›èrg
, "0x", 2) == 0) {

106 
vÆue
 = 
	`°πoul
(
›èrg
 +2, &
íd
, 16);

107 i‡(*
íd
 != '\0') {

108 
vÆue
 = 
ULONG_MAX
;

111 i‡(
vÆue
 >= 65536) {

112 
	`Ârötf
(
°dîr
, "Bad serialÖort base '%s'\n",

113 
›èrg
);

114 
	`ußge
();

118 
¨ch_›ti⁄s
.
£rül_ba£
 = 
vÆue
;

120 
OPT_SERIAL_BAUD
:

121 
vÆue
 = 
	`°πoul
(
›èrg
, &
íd
, 0);

122 i‡((
vÆue
 > 115200) || ((115200 %value) != 0) ||

123 (
vÆue
 < 9600Ë|| (*
íd
))

125 
	`Ârötf
(
°dîr
, "Bad serialÖort baudÑate '%s'\n",

126 
›èrg
);

127 
	`ußge
();

131 
¨ch_›ti⁄s
.
£rül_baud
 = 
vÆue
;

133 
OPT_PASS_MEMMAP_CMDLINE
:

134 
¨ch_›ti⁄s
.
∑ss_memm≠_cmdlöe
 = 1;

136 
OPT_NOEFI
:

137 
¨ch_›ti⁄s
.
n€fi
 = 1;

142 
›ãº
 = 1;

143 
›töd
 = 1;

145 
	}
}

147 c⁄° 
¨ch_m≠_íåy
 
	g¨ches
[] = {

148 { "x86_64", 
KEXEC_ARCH_X86_64
 },

149 { 
NULL
, 0 },

152 
¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

155 
	}
}

157 
	$¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
öfo
)

159 
uöt8_t
 
∑nic_kî√l
 = 0;

161 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "reset_vga",

162 &
¨ch_›ti⁄s
.
ª£t_vga
, (arch_options.reset_vga));

163 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "serial_base",

164 &
¨ch_›ti⁄s
.
£rül_ba£
, (arch_options.serial_base));

165 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "serial_baud",

166 &
¨ch_›ti⁄s
.
£rül_baud
, (arch_options.serial_baud));

167 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "console_vga",

168 &
¨ch_›ti⁄s
.
c⁄sﬁe_vga
, (arch_options.console_vga));

169 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "console_serial",

170 &
¨ch_›ti⁄s
.
c⁄sﬁe_£rül
, (arch_options.console_serial));

171 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_src_start",

172 &
öfo
->
backup_§c_°¨t
, (info->backup_src_start));

173 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_src_size",

174 &
öfo
->
backup_§c_size
, (info->backup_src_size));

176 i‡(
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
) {

177 
∑nic_kî√l
 = 1;

178 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "backup_start",

179 &
öfo
->
backup_°¨t
, (info->backup_start));

181 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "panic_kernel",

182 &
∑nic_kî√l
, (panic_kernel));

183 
	}
}

	@kexec/arch/x86_64/kexec-x86_64.h

1 #i‚de‡
KEXEC_X86_64_H


2 
	#KEXEC_X86_64_H


	)

4 
	~"../i386/kexec-x86.h
"

6 
	síåy64_ªgs
 {

7 
uöt64_t
 
	møx
;

8 
uöt64_t
 
	mrbx
;

9 
uöt64_t
 
	mrcx
;

10 
uöt64_t
 
	mrdx
;

11 
uöt64_t
 
	mrsi
;

12 
uöt64_t
 
	mrdi
;

13 
uöt64_t
 
	mr•
;

14 
uöt64_t
 
	mrbp
;

15 
uöt64_t
 
	mr8
;

16 
uöt64_t
 
	mr9
;

17 
uöt64_t
 
	mr10
;

18 
uöt64_t
 
	mr11
;

19 
uöt64_t
 
	mr12
;

20 
uöt64_t
 
	mr13
;

21 
uöt64_t
 
	mr14
;

22 
uöt64_t
 
	mr15
;

23 
uöt64_t
 
	mrù
;

26 
ñf_x86_64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

27 
ñf_x86_64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

28 
kexec_öfo
 *
öfo
);

29 
ñf_x86_64_ußge
();

31 
bzImage64_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
);

32 
bzImage64_lﬂd
(
¨gc
, **
¨gv
, c⁄° *
buf
, 
off_t
 
Àn
,

33 
kexec_öfo
 *
öfo
);

34 
bzImage64_ußge
();

	@kexec/arch_reuse_initrd.c

1 
	~"kexec.h
"

3 
	gªu£_öôrd
 = 0;

5 
	$¨ch_ªu£_öôrd
()

7 
	`dõ
("--reuseinitrdÇot implemented onÅhisárchitecture\n");

8 
	}
}

	@kexec/crashdump-elf.c

2 #i‡!
deföed
(
FUNC
Ë|| !deföed(
EHDR
Ë|| !deföed(
PHDR
)

3 #îr‹ 
FUNC
, 
EHDR
 
™d
 
PHDR
 
mu°
 
be
 
deföed


6 #i‡(
ELF_WIDTH
 == 64)

7 
	#dbg¥ötf_phdr
(
¥efix
, 
phdr
) \

9 
	`dbg¥ötf
("%s:Ö_type = %u,Ö_offset = 0x%llxÖ_paddr = 0x%llx " \

11 (
¥efix
), (
phdr
)->
p_ty≥
, \

12 ()((
phdr
)->
p_off£t
), \

13 ()((
phdr
)->
p_∑ddr
), \

14 ()((
phdr
)->
p_vaddr
), \

15 ()((
phdr
)->
p_fûesz
), \

16 ()((
phdr
)->
p_memsz
)); \

17 } 0)

	)

19 
	#dbg¥ötf_phdr
(
¥efix
, 
phdr
) \

21 
	`dbg¥ötf
("%s:Ö_type = %u,Ö_offset = 0x%x " "p_paddr = 0x%x " \

23 (
¥efix
), (
phdr
)->
p_ty≥
, (phdr)->
p_off£t
, (phdr)->
p_∑ddr
, \

24 (
phdr
)->
p_vaddr
, (phdr)->
p_fûesz
, (phdr)->
p_memsz
); \

25 } 0)

	)

29 
	$FUNC
(
kexec_öfo
 *
öfo
,

30 
¸ash_ñf_öfo
 *
ñf_öfo
,

31 
mem‹y_ønge
 *
ønge
, 
ønges
,

32 **
buf
, *
size
, 
Æign
)

34 
EHDR
 *
ñf
;

35 
PHDR
 *
phdr
;

36 
i
;

37 
sz
;

38 *
buÂ
;

39 
ƒ_˝us
 = 0;

40 
uöt64_t
 
nŸes_addr
, 
nŸes_Àn
;

41 
uöt64_t
 
vmc‹eöfo_addr
, 
vmc‹eöfo_Àn
;

42 
has_vmc‹eöfo
 = 0;

43 (*
gë_nŸe_öfo
)(
˝u
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
);

44 
cou¡_˝u
;

46 i‡(
	`xí_¥e£¡
())

47 
ƒ_˝us
 = 
	`xí_gë_ƒ_phys_˝us
();

49 
ƒ_˝us
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

51 i‡(
ƒ_˝us
 < 0) {

55 i‡(
	`xí_¥e£¡
()) {

56 i‡(!
	`gë_xí_vmc‹eöfo
(&
vmc‹eöfo_addr
, &
vmc‹eöfo_Àn
))

57 
has_vmc‹eöfo
 = 1;

59 i‡(!
	`gë_kî√l_vmc‹eöfo
(&
vmc‹eöfo_addr
, &
vmc‹eöfo_Àn
))

60 
has_vmc‹eöfo
 = 1;

62 
sz
 = (
EHDR
Ë+ (
ƒ_˝us
 + 
has_vmc‹eöfo
Ë* (
PHDR
) +

63 
ønges
 * (
PHDR
);

85 i‡(
ñf_öfo
->
kîn_size
 && !
	`xí_¥e£¡
()) {

86 
sz
 +(
PHDR
);

96 i‡(
Æign
 % 
ELF_CORE_HEADER_ALIGN
) {

100 
sz
 = 
	`_ALIGN
(sz, 
Æign
);

102 
buÂ
 = 
	`xmÆloc
(
sz
);

103 
	`mem£t
(
buÂ
, 0, 
sz
);

105 *
buf
 = 
buÂ
;

106 *
size
 = 
sz
;

109 
ñf
 = (
EHDR
 *Ë
buÂ
;

110 
buÂ
 +(
EHDR
);

111 
	`mem˝y
(
ñf
->
e_idít
, 
ELFMAG
, 
SELFMAG
);

112 
ñf
->
e_idít
[
EI_CLASS
] = 
ñf_öfo
->
˛ass
;

113 
ñf
->
e_idít
[
EI_DATA
] = 
ñf_öfo
->
d©a
;

114 
ñf
->
e_idít
[
EI_VERSION
]
EV_CURRENT
;

115 
ñf
->
e_idít
[
EI_OSABI
] = 
ELFOSABI_NONE
;

116 
	`mem£t
(
ñf
->
e_idít
+
EI_PAD
, 0, 
EI_NIDENT
-EI_PAD);

117 
ñf
->
e_ty≥
 = 
ET_CORE
;

118 
ñf
->
e_machöe
 = 
	`¸ash_¨chôe˘uª
(
ñf_öfo
);

119 
ñf
->
e_vîsi⁄
 = 
EV_CURRENT
;

120 
ñf
->
e_íåy
 = 0;

121 
ñf
->
e_phoff
 = (
EHDR
);

122 
ñf
->
e_shoff
 = 0;

123 
ñf
->
e_Êags
 = 0;

124 
ñf
->
e_ehsize
 = (
EHDR
);

125 
ñf
->
e_phítsize
(
PHDR
);

126 
ñf
->
e_phnum
 = 0;

127 
ñf
->
e_shítsize
= 0;

128 
ñf
->
e_shnum
 = 0;

129 
ñf
->
e_sh°∫dx
 = 0;

133 
gë_nŸe_öfo
 = 
ñf_öfo
->get_note_info;

134 i‡(!
gë_nŸe_öfo
)

135 
gë_nŸe_öfo
 = 
gë_¸ash_nŸes_≥r_˝u
;

137 i‡(
	`xí_¥e£¡
())

138 
gë_nŸe_öfo
 = 
xí_gë_nŸe
;

142 
cou¡_˝u
 = 
ƒ_˝us
;

143 
i
 = 0; 
cou¡_˝u
 > 0; i++) {

144 i‡(
	`gë_nŸe_öfo
(
i
, &
nŸes_addr
, &
nŸes_Àn
) < 0) {

148 
cou¡_˝u
--;

150 
phdr
 = (
PHDR
 *Ë
buÂ
;

151 
buÂ
 +(
PHDR
);

152 
phdr
->
p_ty≥
 = 
PT_NOTE
;

153 
phdr
->
p_Êags
 = 0;

154 
phdr
->
p_off£t
 =Öhdr->
p_∑ddr
 = 
nŸes_addr
;

155 
phdr
->
p_vaddr
 = 0;

156 
phdr
->
p_fûesz
 =Öhdr->
p_memsz
 = 
nŸes_Àn
;

158 
phdr
->
p_Æign
 = 0;

161 (
ñf
->
e_phnum
)++;

162 
	`dbg¥ötf_phdr
("El‡hódî", 
phdr
);

165 i‡(
has_vmc‹eöfo
 && !(
öfo
->
kexec_Êags
 & 
KEXEC_PRESERVE_CONTEXT
)) {

166 
phdr
 = (
PHDR
 *Ë
buÂ
;

167 
buÂ
 +(
PHDR
);

168 
phdr
->
p_ty≥
 = 
PT_NOTE
;

169 
phdr
->
p_Êags
 = 0;

170 
phdr
->
p_off£t
 =Öhdr->
p_∑ddr
 = 
vmc‹eöfo_addr
;

171 
phdr
->
p_vaddr
 = 0;

172 
phdr
->
p_fûesz
 =Öhdr->
p_memsz
 = 
vmc‹eöfo_Àn
;

174 
phdr
->
p_Æign
 = 0;

176 (
ñf
->
e_phnum
)++;

177 
	`dbg¥ötf_phdr
("vmc‹eöfÿhódî", 
phdr
);

184 i‡(
ñf_öfo
->
kîn_size
 && !
	`xí_¥e£¡
()) {

185 
phdr
 = (
PHDR
 *Ë
buÂ
;

186 
buÂ
 +(
PHDR
);

187 
phdr
->
p_ty≥
 = 
PT_LOAD
;

188 
phdr
->
p_Êags
 = 
PF_R
|
PF_W
|
PF_X
;

189 
phdr
->
p_off£t
 =Öhdr->
p_∑ddr
 = 
ñf_öfo
->
kîn_∑ddr_°¨t
;

190 
phdr
->
p_vaddr
 = 
ñf_öfo
->
kîn_vaddr_°¨t
;

191 
phdr
->
p_fûesz
 =Öhdr->
p_memsz
 = 
ñf_öfo
->
kîn_size
;

192 
phdr
->
p_Æign
 = 0;

193 (
ñf
->
e_phnum
)++;

194 
	`dbg¥ötf_phdr
("Kî√»ãxàEl‡hódî", 
phdr
);

199 
i
 = 0; i < 
ønges
; i++, 
ønge
++) {

200 
m°¨t
, 
míd
;

201 i‡(
ønge
->
ty≥
 !
RANGE_RAM
)

203 
m°¨t
 = 
ønge
->
°¨t
;

204 
míd
 = 
ønge
->
íd
;

205 i‡(!
m°¨t
 && !
míd
)

207 
phdr
 = (
PHDR
 *Ë
buÂ
;

208 
buÂ
 +(
PHDR
);

209 
phdr
->
p_ty≥
 = 
PT_LOAD
;

210 
phdr
->
p_Êags
 = 
PF_R
|
PF_W
|
PF_X
;

211 
phdr
->
p_off£t
 = 
m°¨t
;

213 i‡(
m°¨t
 =
öfo
->
backup_§c_°¨t


214 && (
míd
 - 
m°¨t
 + 1Ë=
öfo
->
backup_§c_size
)

215 
phdr
->
p_off£t
 = 
öfo
->
backup_°¨t
;

221 
phdr
->
p_∑ddr
 = 
m°¨t
;

222 
phdr
->
p_vaddr
 = 
	`phys_to_vút
(
ñf_öfo
, 
m°¨t
);

223 
phdr
->
p_fûesz
 =Öhdr->
p_memsz
 = 
míd
 - 
m°¨t
 + 1;

225 
phdr
->
p_Æign
 = 0;

229 i‡(
ñf_öfo
->
lowmem_limô


230 && (
míd
 > (
ñf_öfo
->
lowmem_limô
 - 1)))

231 
phdr
->
p_vaddr
 = -1;

234 (
ñf
->
e_phnum
)++;

235 
	`dbg¥ötf_phdr
("El‡hódî", 
phdr
);

238 
	}
}

240 #unde‡
dbg¥ötf_phdr


	@kexec/crashdump-xen.c

1 
	#_GNU_SOURCE


	)

2 
	~<°dio.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

6 
	~<ñf.h
>

7 
	~<î∫o.h
>

8 
	~<limôs.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<£tjmp.h
>

14 
	~<sig«l.h
>

15 
	~"kexec.h
"

16 
	~"¸ashdump.h
"

17 
	~"kexec-sysˇŒ.h
"

19 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_LIBXENCTRL


22 
	~<xí˘æ.h
>

25 
	s¸ash_nŸe_öfo
 {

26 
	mba£
;

27 
	mÀngth
;

30 
	gxí_phys_˝us
;

31 
¸ash_nŸe_öfo
 *
	gxí_phys_nŸes
;

34 
	gis_dom0
;

35 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

36 
jmp_buf
 
	gxí_sigûl_jmp
;

37 
	$xí_sigûl_h™dÀr
(
sig
)

39 
	`l⁄gjmp
(
xí_sigûl_jmp
, 1);

40 
	}
}

42 
	$xí_˝uid
(
uöt32_t
 
idx
, uöt32_à*
ªgs
, 
pv_c⁄ãxt
)

44 #ifde‡
__i386__


46 
asm
 volatile (

52 : : "a" (
idx
), "c" (
pv_c⁄ãxt
), "S" (
ªgs
) : "memory" );

54 
asm
 volatile (

56 : "˜" (
ªgs
[0]), "=b" (regs[1]), "=c" (regs[2]), "=d" (regs[3])

57 : "0" (
idx
), "1" (
pv_c⁄ãxt
), "2" (0) );

59 
	}
}

61 
	$check_f‹_xí
(
pv_c⁄ãxt
)

63 
uöt32_t
 
ªgs
[4];

64 
sig«tuª
[13];

65 
uöt32_t
 
ba£
;

67 
ba£
 = 0x40000000; base < 0x40010000; base += 0x100)

69 
	`xí_˝uid
(
ba£
, 
ªgs
, 
pv_c⁄ãxt
);

71 *(
uöt32_t
 *)(
sig«tuª
 + 0Ë
ªgs
[1];

72 *(
uöt32_t
 *)(
sig«tuª
 + 4Ë
ªgs
[2];

73 *(
uöt32_t
 *)(
sig«tuª
 + 8Ë
ªgs
[3];

74 
sig«tuª
[12] = '\0';

76 i‡(
	`°rcmp
("XíVMMXíVMM", 
sig«tuª
Ë=0 && 
ªgs
[0] >(
ba£
 + 2))

77 
found
;

82 
found
:

83 
	`xí_˝uid
(
ba£
 + 1, 
ªgs
, 
pv_c⁄ãxt
);

84  
ªgs
[0];

85 
	}
}

87 
	$xí_dëe˘_pv_gue°
()

89 
siga˘i⁄
 
a˘
, 
ﬁda˘
;

90 
is_pv
 = -1;

92 i‡(
	`£tjmp
(
xí_sigûl_jmp
))

93  
is_pv
;

95 
	`mem£t
(&
a˘
, 0, (act));

96 
a˘
.
ß_h™dÀr
 = 
xí_sigûl_h™dÀr
;

97 
	`sigem±y£t
 (&
a˘
.
ß_mask
);

98 i‡(
	`siga˘i⁄
(
SIGILL
, &
a˘
, &
ﬁda˘
))

99  
is_pv
;

100 i‡(
	`check_f‹_xí
(1))

101 
is_pv
 = 1;

102 
	`siga˘i⁄
(
SIGILL
, &
ﬁda˘
, 
NULL
);

103  
is_pv
;

104 
	}
}

106 
	$xí_dëe˘_pv_gue°
()

109 
	}
}

117 
	$xí_¥e£¡
()

119 i‡(!
is_dom0
) {

120 i‡(
	`ac˚ss
("/¥oc/xí", 
F_OK
) == 0)

121 
is_dom0
 = 
	`xí_dëe˘_pv_gue°
();

123 
is_dom0
 = -1;

125  
is_dom0
 > 0;

126 
	}
}

128 
	$xí_¨chôe˘uª
(
¸ash_ñf_öfo
 *
ñf_öfo
)

130 
machöe
 = 
ñf_öfo
->machine;

131 #ifde‡
HAVE_LIBXENCTRL


132 
rc
;

133 
xí_ˇ∑bûôõs_öfo_t
 
ˇ∑bûôõs
;

134 
xc_öãrÁ˚
 *
xc
;

136 i‡(!
	`xí_¥e£¡
())

137 
out
;

139 
	`mem£t
(
ˇ∑bûôõs
, '0', 
XEN_CAPABILITIES_INFO_LEN
);

141 
xc
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

142 i‡–!
xc
 ) {

143 
	`Ârötf
(
°dîr
, "failedÅo open xen control interface.\n");

144 
out
;

147 
rc
 = 
	`xc_vîsi⁄
(
xc
, 
XENVER_ˇ∑bûôõs
, &
ˇ∑bûôõs
[0]);

148 i‡–
rc
 == -1 ) {

149 
	`Ârötf
(
°dîr
, "failedÅo make Xen version hypercall.\n");

150 
out_˛o£
;

153 i‡(
	`°r°r
(
ˇ∑bûôõs
, "xen-3.0-x86_64"))

154 
machöe
 = 
EM_X86_64
;

155 i‡(
	`°r°r
(
ˇ∑bûôõs
, "xen-3.0-x86_32"))

156 
machöe
 = 
EM_386
;

158 
out_˛o£
:

159 
	`xc_öãrÁ˚_˛o£
(
xc
);

161 
out
:

163  
machöe
;

164 
	}
}

166 #ifde‡
HAVE_LIBXENCTRL


167 
	$gë_xí_vmc‹eöfo
(
uöt64_t
 *
addr
, uöt64_à*
Àn
)

169 
xc_öãrÁ˚
 *
xc
;

170 
ªt
 = 0;

172 
xc
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

173 i‡(!
xc
) {

174 
	`Ârötf
(
°dîr
, "failedÅo open xen control interface.\n");

178 
ªt
 = 
	`xc_kexec_gë_ønge
(
xc
, 
KEXEC_RANGE_MA_VMCOREINFO
, 0, 
Àn
, 
addr
);

180 
	`xc_öãrÁ˚_˛o£
(
xc
);

182 i‡(
ªt
 < 0)

185 
	}
}

187 
	$xí_gë_ƒ_phys_˝us
()

189 
xc_öãrÁ˚
 *
xc
;

190 
max_˝us
;

191 
˝u
 = -1;

193 i‡(
xí_phys_˝us
)

194  
xí_phys_˝us
;

196 
xc
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

197 i‡(!
xc
) {

198 
	`Ârötf
(
°dîr
, "failedÅo open xen control interface.\n");

202 
max_˝us
 = 
	`xc_gë_max_˝us
(
xc
);

203 i‡(
max_˝us
 <= 0)

204 
out
;

206 
xí_phys_nŸes
 = 
	`ˇŒoc
(
max_˝us
, (*xen_phys_notes));

207 i‡(
xí_phys_nŸes
 =
NULL
)

208 
out
;

210 
˝u
 = 0; cpu < 
max_˝us
; cpu++) {

211 
uöt64_t
 
size
, 
°¨t
;

212 
ªt
;

214 
ªt
 = 
	`xc_kexec_gë_ønge
(
xc
, 
KEXEC_RANGE_MA_CPU
, 
˝u
, &
size
, &
°¨t
);

215 i‡(
ªt
 < 0)

218 
xí_phys_nŸes
[
˝u
].
ba£
 = 
°¨t
;

219 
xí_phys_nŸes
[
˝u
].
Àngth
 = 
size
;

222 
xí_phys_˝us
 = 
˝u
;

224 
out
:

225 
	`xc_öãrÁ˚_˛o£
(
xc
);

226  
˝u
;

227 
	}
}

229 
	$gë_xí_vmc‹eöfo
(
uöt64_t
 *
addr
, uöt64_à*
Àn
)

232 
	}
}

234 
	$xí_gë_ƒ_phys_˝us
()

237 
	}
}

241 
	$xí_gë_nŸe
(
˝u
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
)

243 
¸ash_nŸe_öfo
 *
nŸe
;

245 i‡(
xí_phys_˝us
 <= 0)

248 
nŸe
 = 
xí_phys_nŸes
 + 
˝u
;

250 *
addr
 = 
nŸe
->
ba£
;

251 *
Àn
 = 
nŸe
->
Àngth
;

254 
	}
}

256 #ifde‡
HAVE_LIBXENCTRL


257 
	$xí_gë_¸ashkî√l_ªgi⁄
(
uöt64_t
 *
°¨t
, uöt64_à*
íd
)

259 
uöt64_t
 
size
;

260 
xc_öãrÁ˚
 *
xc
;

261 
rc
 = -1;

263 
xc
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

264 i‡(!
xc
) {

265 
	`Ârötf
(
°dîr
, "failedÅo open xen control interface.\n");

266 
out
;

269 
rc
 = 
	`xc_kexec_gë_ønge
(
xc
, 
KEXEC_RANGE_MA_CRASH
, 0, &
size
, 
°¨t
);

270 i‡(
rc
 < 0) {

271 
	`Ârötf
(
°dîr
, "failedÅo get crashÑegion from hypervisor.\n");

272 
out_˛o£
;

275 *
íd
 = *
°¨t
 + 
size
 - 1;

277 
out_˛o£
:

278 
	`xc_öãrÁ˚_˛o£
(
xc
);

280 
out
:

281  
rc
;

282 
	}
}

284 
	$xí_gë_¸ashkî√l_ªgi⁄
(
uöt64_t
 *
°¨t
, uöt64_à*
íd
)

287 
	}
}

	@kexec/crashdump.c

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

24 
	~<limôs.h
>

25 
	~<löux/limôs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<uni°d.h
>

29 
	~<ñf.h
>

30 
	~"kexec.h
"

31 
	~"¸ashdump.h
"

32 
	~"kexec-sysˇŒ.h
"

36 
	#ELF_WIDTH
 64

	)

37 
	#FUNC
 
¸ash_¸óã_ñf64_hódîs


	)

38 
	#EHDR
 
Elf64_Ehdr


	)

39 
	#PHDR
 
Elf64_Phdr


	)

40 
	~"¸ashdump-ñf.c
"

41 #unde‡
ELF_WIDTH


42 #unde‡
PHDR


43 #unde‡
EHDR


44 #unde‡
FUNC


46 
	#ELF_WIDTH
 32

	)

47 
	#FUNC
 
¸ash_¸óã_ñf32_hódîs


	)

48 
	#EHDR
 
Elf32_Ehdr


	)

49 
	#PHDR
 
Elf32_Phdr


	)

50 
	~"¸ashdump-ñf.c
"

51 #unde‡
ELF_WIDTH


52 #unde‡
PHDR


53 #unde‡
EHDR


54 #unde‡
FUNC


56 
	$¸ash_¨chôe˘uª
(
¸ash_ñf_öfo
 *
ñf_öfo
)

58 i‡(
	`xí_¥e£¡
())

59  
	`xí_¨chôe˘uª
(
ñf_öfo
);

61  
ñf_öfo
->
machöe
;

62 
	}
}

65 
	$gë_¸ash_nŸes_≥r_˝u
(
˝u
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
)

67 
¸ash_nŸes
[
PATH_MAX
];

68 
¸ash_nŸes_size
[
PATH_MAX
];

69 
löe
[
MAX_LINE
];

70 
FILE
 *
Â
;

71 
°©
 
˝u_°©
;

72 
cou¡
;

73 
ãmp
;

74 
f›í_î∫o
;

75 
°©_î∫o
;

77 *
addr
 = 0;

78 *
Àn
 = 0;

80 
	`•rötf
(
¸ash_nŸes
, "/sys/devi˚s/sy°em/˝u/˝u%d/¸ash_nŸes", 
˝u
);

81 
Â
 = 
	`f›í
(
¸ash_nŸes
, "r");

82 i‡(!
Â
) {

83 
f›í_î∫o
 = 
î∫o
;

84 i‡(
f›í_î∫o
 !
ENOENT
)

85 
	`dõ
("CouldÇŸ o≥¿\"%s\": %s\n", 
¸ash_nŸes
,

86 
	`°ªº‹
(
f›í_î∫o
));

87 i‡(
	`°©
("/sys/devi˚s", &
˝u_°©
)) {

88 
°©_î∫o
 = 
î∫o
;

89 i‡(
°©_î∫o
 =
ENOENT
)

90 
	`dõ
("\"/sys/devices\" doesÇotÉxist. "

93 
	`dõ
("CouldÇot open \"/sys/devices\": %s\n",

94 
	`°ªº‹
(
°©_î∫o
));

99 i‡(!
	`fgës
(
löe
, ÷öe), 
Â
))

100 
	`dõ
("C™nŸÖ¨£ %s: %s\n", 
¸ash_nŸes
, 
	`°ªº‹
(
î∫o
));

101 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx", &
ãmp
);

102 i‡(
cou¡
 != 1)

103 
	`dõ
("C™nŸÖ¨£ %s: %s\n", 
¸ash_nŸes
, 
	`°ªº‹
(
î∫o
));

104 *
addr
 = (
uöt64_t
Ë
ãmp
;

105 
	`f˛o£
(
Â
);

107 *
Àn
 = 
MAX_NOTE_BYTES
;

108 
	`•rötf
(
¸ash_nŸes_size
,

109 "/sys/devi˚s/sy°em/˝u/˝u%d/¸ash_nŸes_size", 
˝u
);

110 
Â
 = 
	`f›í
(
¸ash_nŸes_size
, "r");

111 i‡(
Â
) {

112 i‡(!
	`fgës
(
löe
, ÷öe), 
Â
))

113 
	`dõ
("CannotÖarse %s: %s\n",

114 
¸ash_nŸes_size
, 
	`°ªº‹
(
î∫o
));

115 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lu", &
ãmp
);

116 i‡(
cou¡
 != 1)

117 
	`dõ
("CannotÖarse %s: %s\n",

118 
¸ash_nŸes_size
, 
	`°ªº‹
(
î∫o
));

119 *
Àn
 = (
uöt64_t
Ë
ãmp
;

120 
	`f˛o£
(
Â
);

123 
	`dbg¥ötf
("%s: cøsh_nŸe†add∏%Lx, sizê%Lu\n", 
__FUNCTION__
,

124 ()*
addr
, ()*
Àn
);

127 
	}
}

129 
	$gë_vmc‹eöfo
(c⁄° *
kdump_öfo
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
)

131 
löe
[
MAX_LINE
];

132 
cou¡
;

133 
FILE
 *
Â
;

134 
ãmp
, 
ãmp2
;

136 *
addr
 = 0;

137 *
Àn
 = 0;

139 i‡(!(
Â
 = 
	`f›í
(
kdump_öfo
, "r")))

142 i‡(!
	`fgës
(
löe
, ÷öe), 
Â
))

143 
	`dõ
("C™nŸÖ¨£ %s: %s\n", 
kdump_öfo
, 
	`°ªº‹
(
î∫o
));

144 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx %Lx", &
ãmp
, &
ãmp2
);

145 i‡(
cou¡
 != 2)

146 
	`dõ
("C™nŸÖ¨£ %s: %s\n", 
kdump_öfo
, 
	`°ªº‹
(
î∫o
));

148 *
addr
 = (
uöt64_t
Ë
ãmp
;

149 *
Àn
 = (
uöt64_t
Ë
ãmp2
;

151 
	`f˛o£
(
Â
);

153 
	}
}

156 
	$gë_kî√l_vmc‹eöfo
(
uöt64_t
 *
addr
, uöt64_à*
Àn
)

158  
	`gë_vmc‹eöfo
("/sys/kî√l/vmc‹eöfo", 
addr
, 
Àn
);

159 
	}
}

	@kexec/crashdump.h

1 #i‚de‡
CRASHDUMP_H


2 
	#CRASHDUMP_H


	)

4 
gë_¸ashkî√l_ªgi⁄
(
uöt64_t
 *
°¨t
, uöt64_à*
íd
);

5 
gë_¸ash_nŸes_≥r_˝u
(
˝u
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
);

6 
gë_kî√l_vmc‹eöfo
(
uöt64_t
 *
addr
, uöt64_à*
Àn
);

7 
gë_xí_vmc‹eöfo
(
uöt64_t
 *
addr
, uöt64_à*
Àn
);

10 
	#MAX_NOTE_BYTES
 1024

	)

12 
	#KCORE_ELF_HEADERS_SIZE
 32768

	)

18 
	#ELF_CORE_HEADER_ALIGN
 1024

	)

22 
	s¸ash_ñf_öfo
 {

23 
	m˛ass
;

24 
	md©a
;

25 
	mmachöe
;

27 
	m∑ge_off£t
;

28 
	mkîn_vaddr_°¨t
;

29 
	mkîn_∑ddr_°¨t
;

30 
	mkîn_size
;

31 
	mlowmem_limô
;

33 (*
	mgë_nŸe_öfo
)(
	m˝u
, 
uöt64_t
 *
	maddr
, uöt64_à*
	mÀn
);

36 (*
	t¸ash_¸óã_ñf_hódîs_func
)(
	tkexec_öfo
 *
	töfo
,

37 
	t¸ash_ñf_öfo
 *
	tñf_öfo
,

38 
	tmem‹y_ønge
 *
	tønge
,

39 
	tønges
,

40 **
	tbuf
, *
	tsize
,

41 
	tÆign
);

43 
	`¸ash_¸óã_ñf32_hódîs
(
kexec_öfo
 *
öfo
,

44 
¸ash_ñf_öfo
 *
ñf_öfo
,

45 
mem‹y_ønge
 *
ønge
, 
ønges
,

46 **
buf
, *
size
,

47 
Æign
);

49 
	`¸ash_¸óã_ñf64_hódîs
(
kexec_öfo
 *
öfo
,

50 
¸ash_ñf_öfo
 *
ñf_öfo
,

51 
mem‹y_ønge
 *
ønge
, 
ønges
,

52 **
buf
, *
size
,

53 
Æign
);

55 
	`¸ash_¨chôe˘uª
(
¸ash_ñf_öfo
 *
ñf_öfo
);

57 
	`phys_to_vút
(
¸ash_ñf_öfo
 *
ñf_öfo
,

58 
∑ddr
);

60 
	`xí_¨chôe˘uª
(
¸ash_ñf_öfo
 *
ñf_öfo
);

61 
	`xí_gë_ƒ_phys_˝us
();

62 
	`xí_gë_nŸe
(
˝u
, 
uöt64_t
 *
addr
, uöt64_à*
Àn
);

63 
	`xí_gë_¸ashkî√l_ªgi⁄
(
uöt64_t
 *
°¨t
, uöt64_à*
íd
);

	@kexec/firmware_memmap.c

20 
	#_GNU_SOURCE


	)

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<dúít.h
>

25 
	~<uni°d.h
>

26 
	~<limôs.h
>

27 
	~<î∫o.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"fúmw¨e_memm≠.h
"

32 
	~"kexec.h
"

37 #i‚de‡
ULLONG_MAX


38 
	#ULLONG_MAX
 (~0ULL)

	)

41 #i‚de‡
LLONG_MAX


42 
	#LLONG_MAX
 (~0ULL >> 1)

	)

49 
	#FIRMWARE_MEMMAP_DIR
 "/sys/fúmw¨e/memm≠"

	)

57 
	$∑r£_numîic_sysfs
(c⁄° *
fûíame
)

59 
FILE
 *
Â
;

60 
löebuf„r
[
BUFSIZ
];

61 
ªtvÆ
 = 
ULLONG_MAX
;

63 
Â
 = 
	`f›í
(
fûíame
, "r");

64 i‡(!
Â
) {

65 
	`Ârötf
(
°dîr
, "Opening \"%s\" failed: %s\n",

66 
fûíame
, 
	`°ªº‹
(
î∫o
));

67  
ULLONG_MAX
;

70 i‡(!
	`fgës
(
löebuf„r
, 
BUFSIZ
, 
Â
))

71 
îr
;

73 
löebuf„r
[
BUFSIZ
-1] = 0;

76 
ªtvÆ
 = 
	`°πﬁl
(
löebuf„r
, 
NULL
, 0);

78 
îr
:

79 
	`f˛o£
(
Â
);

81  
ªtvÆ
;

82 
	}
}

93 *
	$∑r£_°rög_sysfs
(c⁄° *
fûíame
)

95 
FILE
 *
Â
;

96 
löebuf„r
[
BUFSIZ
];

97 *
íd
;

99 
Â
 = 
	`f›í
(
fûíame
, "r");

100 i‡(!
Â
) {

101 
	`Ârötf
(
°dîr
, "Opening \"%s\" failed: %s\n",

102 
fûíame
, 
	`°ªº‹
(
î∫o
));

103  
NULL
;

106 i‡(!
	`fgës
(
löebuf„r
, 
BUFSIZ
, 
Â
)) {

107 
	`f˛o£
(
Â
);

108  
NULL
;

111 
löebuf„r
[
BUFSIZ
-1] = 0;

114 
íd
 = 
löebuf„r
 + 
	`°æí
(linebuffer) - 1;

115 *
íd
 == '\n')

116 *
íd
-- = 0;

118 
	`f˛o£
(
Â
);

120  
löebuf„r
;

122 
	}
}

124 
	$∑r£_memm≠_íåy
(c⁄° *
íåy
, 
mem‹y_ønge
 *
ønge
)

126 
fûíame
[
PATH_MAX
];

127 *
ty≥
;

132 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
íåy
, "start");

133 
fûíame
[
PATH_MAX
-1] = 0;

135 
ønge
->
°¨t
 = 
	`∑r£_numîic_sysfs
(
fûíame
);

136 i‡(
ønge
->
°¨t
 =
ULLONG_MAX
)

142 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
íåy
, "end");

143 
fûíame
[
PATH_MAX
-1] = 0;

145 
ønge
->
íd
 = 
	`∑r£_numîic_sysfs
(
fûíame
);

146 i‡(
ønge
->
íd
 =
ULLONG_MAX
)

152 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "%s/%s", 
íåy
, "type");

153 
fûíame
[
PATH_MAX
-1] = 0;

155 
ty≥
 = 
	`∑r£_°rög_sysfs
(
fûíame
);

156 i‡(!
ty≥
)

159 i‡(
	`°rcmp
(
ty≥
, "System RAM") == 0)

160 
ønge
->
ty≥
 = 
RANGE_RAM
;

161 i‡(
	`°rcmp
(
ty≥
, "ACPI Tables") == 0)

162 
ønge
->
ty≥
 = 
RANGE_ACPI
;

163 i‡(
	`°rcmp
(
ty≥
, "Unusable memory") == 0)

164 
ønge
->
ty≥
 = 
RANGE_RESERVED
;

165 i‡(
	`°rcmp
(
ty≥
, "reserved") == 0)

166 
ønge
->
ty≥
 = 
RANGE_RESERVED
;

167 i‡(
	`°rcmp
(
ty≥
, "ACPI Non-volatile Storage") == 0)

168 
ønge
->
ty≥
 = 
RANGE_ACPI_NVS
;

169 i‡(
	`°rcmp
(
ty≥
, "Uncached RAM") == 0)

170 
ønge
->
ty≥
 = 
RANGE_UNCACHED
;

172 
	`Ârötf
(
°dîr
, "UnknownÅype (%s) whileÖarsing %s. Please "

174 
ty≥
, 
fûíame
);

175 
ønge
->
ty≥
 = 
RANGE_RESERVED
;

179 
	}
}

182 
	$com∑ª_ønges
(c⁄° *
fú°
, c⁄° *
£c⁄d
)

184 c⁄° 
mem‹y_ønge
 *
fú°_ønge
 = 
fú°
;

185 c⁄° 
mem‹y_ønge
 *
£c⁄d_ønge
 = 
£c⁄d
;

191 i‡(
fú°_ønge
->
°¨t
 > 
£c⁄d_ønge
->start)

193 i‡(
fú°_ønge
->
°¨t
 < 
£c⁄d_ønge
->start)

197 
	}
}

200 
	$have_sys_fúmw¨e_memm≠
()

202 
ªt
;

203 
°©
 
my°©
;

205 
ªt
 = 
	`°©
(
FIRMWARE_MEMMAP_DIR
, &
my°©
);

206 i‡(
ªt
 != 0)

209  
	`S_ISDIR
(
my°©
.
°_mode
);

210 
	}
}

213 
	$gë_fúmw¨e_memm≠_ønges
(
mem‹y_ønge
 *
ønge
, 
size_t
 *
ønges
)

215 
DIR
 *
fúmw¨e_memm≠_dú
 = 
NULL
;

216 
dúít
 *dirent;

217 
i
 = 0;

220 i‡(!
ønge
 || !
ønges
) {

221 
	`Ârötf
(
°dîr
, "%s: InvÆidárgumíts.\n", 
__FUNCTION__
);

226 
fúmw¨e_memm≠_dú
 = 
	`›ídú
(
FIRMWARE_MEMMAP_DIR
);

227 i‡(!
fúmw¨e_memm≠_dú
) {

228 
	`≥º‹
("CouldÇŸ o≥¿\"" 
FIRMWARE_MEMMAP_DIR
 "\"");

229 
îr‹
;

233 (
dúít
 = 
	`ªaddú
(
fúmw¨e_memm≠_dú
)Ë!
NULL
) {

234 
ªt
;

235 
fuŒ_∑th
[
PATH_MAX
];

238 i‡((
size_t
)
i
 >*
ønges
) {

239 
	`Ârötf
(
°dîr
, "The firmwareÖrovides moreÉntries "

241 *
ønges
);

242 
îr‹
;

246 i‡(
dúít
->
d_«me
[0] && dirent->d_name[0] == '.') {

250 
	`¢¥ötf
(
fuŒ_∑th
, 
PATH_MAX
, "%s/%s", 
FIRMWARE_MEMMAP_DIR
,

251 
dúít
->
d_«me
);

252 
fuŒ_∑th
[
PATH_MAX
-1] = 0;

253 
ªt
 = 
	`∑r£_memm≠_íåy
(
fuŒ_∑th
, &
ønge
[
i
]);

254 i‡(
ªt
 < 0) {

255 
îr‹
;

258 
i
++;

262 
	`˛o£dú
(
fúmw¨e_memm≠_dú
);

265 *
ønges
 = 
i
;

268 
	`qs‹t
(
ønge
, *
ønges
, (
mem‹y_ønge
), 
com∑ª_ønges
);

272 
îr‹
:

273 i‡(
fúmw¨e_memm≠_dú
) {

274 
	`˛o£dú
(
fúmw¨e_memm≠_dú
);

277 
	}
}

	@kexec/firmware_memmap.h

20 #i‚de‡
FIRMWARE_MEMMAP_H


21 
	#FIRMWARE_MEMMAP_H


	)

23 
	~"kexec.h
"

52 
com∑ª_ønges
(c⁄° *
fú°
, c⁄° *
£c⁄d
);

61 
have_sys_fúmw¨e_memm≠
();

73 
gë_fúmw¨e_memm≠_ønges
(
mem‹y_ønge
 *
ønge
, 
size_t
 *
ønges
);

	@kexec/fs2dt.c

21 
	#_GNU_SOURCE


	)

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

26 
	~<f˙é.h
>

27 
	~<dúít.h
>

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<î∫o.h
>

32 
	~<°dio.h
>

33 
	~"kexec.h
"

34 
	~"fs2dt.h
"

36 
	#MAXPATH
 1024

	)

37 
	#NAMESPACE
 16384

	)

38 
	#INIT_TREE_WORDS
 65536

	)

39 
	#MEMRESERVE
 256

	)

40 
	#MEM_RANGE_CHUNK_SZ
 2048

	)

42 
	g∑th«me
[
MAXPATH
], *
	g∑th°¨t
;

43 
	g¥›«mes
[
NAMESPACE
] = { 0 };

44 *
	gdt_ba£
, *
	gdt
;

45 
	gdt_cur_size
;

46 
	gmem_r§v
[2*
MEMRESERVE
] = { 0ULL, 0ULL };

48 
	g¸ash_∑øm
 = 0;

49 
	gloˇl_cmdlöe
[
COMMAND_LINE_SIZE
] = { "" };

51 
ªu£_öôrd
;

55 
	gmy_debug
;

58 
	$∑d_°ru˘uª_block
(
size_t
 
Àn
) {

59 #ifde‡
NEED_STRUCTURE_BLOCK_EXTRA_PAD


60 i‡((
Àn
 >8Ë&& (()
dt
 & 0x4))

61 
dt
++;

63 
	}
}

69 
	$dt_ª£rve
(**
dt_±r
, 
w‹ds
)

71 
sz
 = 
INIT_TREE_WORDS
;

73 i‡(
sz
 < 
w‹ds
)

74 
sz
 = 
w‹ds
;

76 i‡(((*
dt_±r
 - 
dt_ba£
Ë+ 
w‹ds
Ë>
dt_cur_size
) {

77 
off£t
;

78 
√w_size
 = 
dt_cur_size
 + 
sz
;

79 *
√w_dt
 = 
	`ªÆloc
(
dt_ba£
, 
√w_size
*4);

81 i‡(!
√w_dt
)

82 
	`dõ
("unrecoverableÉrror: Can'tÑealloc %d bytes for "

83 "devi˚Åªe\n", 
√w_size
*4);

84 
off£t
 = *
dt_±r
 - 
dt_ba£
;

85 
dt_ba£
 = 
√w_dt
;

86 
dt_cur_size
 = 
√w_size
;

87 *
dt_±r
 = 
dt_ba£
 + 
off£t
;

88 
	`mem£t
(*
dt_±r
, 0, (
√w_size
 - 
off£t
)*4);

90 
	}
}

92 
	$ª£rve
(
whîe
, 
Àngth
)

94 
size_t
 
off£t
;

96 
off£t
 = 0; 
	`be64_to_˝u
(
mem_r§v
[offset + 1]); offset += 2)

99 i‡(
off£t
 + 4 >2 * 
MEMRESERVE
)

100 
	`dõ
("unrecoverableÉrror:ÉxhasutedÑeservation meta data\n");

102 
mem_r§v
[
off£t
] = 
	`˝u_to_be64
(
whîe
);

103 
mem_r§v
[
off£t
 + 1] = 
	`˝u_to_be64
(
Àngth
);

104 
mem_r§v
[
off£t
 + 2] = mem_r§v[off£à+ 3] = 
	`˝u_to_be64
(0);

105 
	}
}

108 
	$check¥›
(*
«me
, *
d©a
, 
Àn
)

110 
ba£
, 
size
, 
íd
;

112 i‡((
d©a
 =
NULL
Ë&& (
ba£
 || 
size
 || 
íd
))

113 
	`dõ
("unrecoverableÉrror:ÇoÖroperty data");

114 i‡(!
	`°rcmp
(
«me
, "linux,rtas-base"))

115 
ba£
 = 
	`be32_to_˝u
(*
d©a
);

116 i‡(!
	`°rcmp
(
«me
, "opal-base-address"))

117 
ba£
 = 
	`be64_to_˝u
(*(*)
d©a
);

118 i‡(!
	`°rcmp
(
«me
, "opal-runtime-size"))

119 
size
 = 
	`be64_to_˝u
(*(*)
d©a
);

120 i‡(!
	`°rcmp
(
«me
, "linux,tce-base"))

121 
ba£
 = 
	`be64_to_˝u
(*(*Ë
d©a
);

122 i‡(!
	`°rcmp
(
«me
, "rtas-size") ||

123 !
	`°rcmp
(
«me
, "linux,tce-size"))

124 
size
 = 
	`be32_to_˝u
(*
d©a
);

125 i‡(
ªu£_öôrd
 && !
	`°rcmp
(
«me
, "linux,initrd-start"))

126 i‡(
Àn
 == 8)

127 
ba£
 = 
	`be64_to_˝u
(*(*Ë
d©a
);

129 
ba£
 = 
	`be32_to_˝u
(*
d©a
);

130 i‡(
ªu£_öôrd
 && !
	`°rcmp
(
«me
, "linux,initrd-end"))

131 i‡(
Àn
 == 8)

132 
íd
 = 
	`be64_to_˝u
(*(*Ë
d©a
);

134 
íd
 = 
	`be32_to_˝u
(*
d©a
);

136 i‡(
size
 && 
íd
)

137 
	`dõ
("unrecoverableÉrror: sizeándÉnd setát sameÅime\n");

138 i‡(
ba£
 && 
size
) {

139 
	`ª£rve
(
ba£
, 
size
);

140 
ba£
 = 
size
 = 0;

142 i‡(
ba£
 && 
íd
) {

143 
	`ª£rve
(
ba£
, 
íd
-base);

144 
ba£
 = 
íd
 = 0;

146 
	}
}

152 
	$¥›num
(c⁄° *
«me
)

154 
off£t
 = 0;

156 
¥›«mes
[
off£t
])

157 i‡(
	`°rcmp
(
«me
, 
¥›«mes
+
off£t
))

158 
off£t
 +
	`°æí
(
¥›«mes
+offset)+1;

160  
off£t
;

162 i‡(
NAMESPACE
 - 
off£t
 < 
	`°æí
(
«me
) + 1)

163 
	`dõ
("unrecoverableÉrror:Öropnames overrun\n");

165 
	`°r˝y
(
¥›«mes
+
off£t
, 
«me
);

167  
off£t
;

168 
	}
}

170 #ifde‡
HAVE_DYNAMIC_MEMORY


171 
	$add_dyn_ªc⁄f_ußbÀ_mem_¥›îty__
(
fd
)

173 
‚ame
[
MAXPATH
], *
b«me
;

174 
uöt64_t
 
buf
[32];

175 
uöt64_t
 *
ønges
;

176 
ønges_size
 = 
MEM_RANGE_CHUNK_SZ
;

177 
uöt64_t
 
ba£
, 
íd
, 
loc_ba£
, 
loc_íd
;

178 
size_t
 
i
, 
∫gs_˙t
, 
ønge
;

179 
æí
 = 0;

180 
tmp_ödx
;

182 
	`°r˝y
(
‚ame
, 
∑th«me
);

183 
b«me
 = 
	`°ºchr
(
‚ame
, '/');

184 
b«me
[0] = '\0';

185 
b«me
 = 
	`°ºchr
(
‚ame
, '/');

186 i‡(
	`°∫cmp
(
b«me
, "/ibm,dynamic-reconfiguration-memory", 36))

189 i‡(
	`l£ek
(
fd
, 4, 
SEEK_SET
) < 0)

190 
	`dõ
("unrecoverableÉrror:Érror seeking in \"%s\": %s\n",

191 
∑th«me
, 
	`°ªº‹
(
î∫o
));

193 
ønges
 = 
	`mÆloc
(
ønges_size
*8);

194 i‡(!
ønges
)

195 
	`dõ
("unrecoverableÉrror: can'tálloc %d bytes forÑanges.\n",

196 
ønges_size
*8);

198 
æí
 = 0;

199 
i
 = 0; i < 
num_of_lmbs
; i++) {

200 i‡(
	`ªad
(
fd
, 
buf
, 24) < 0)

201 
	`dõ
("unrecoverableÉrror:ÉrrorÑeading \"%s\": %s\n",

202 
∑th«me
, 
	`°ªº‹
(
î∫o
));

204 
ba£
 = 
	`be64_to_˝u
((
uöt64_t
Ë
buf
[0]);

205 
íd
 = 
ba£
 + 
lmb_size
;

206 i‡(~0ULL - 
ba£
 < 
íd
)

207 
	`dõ
("unrecoverableÉrror: memÖroperty overflow\n");

209 
tmp_ödx
 = 
æí
++;

211 
∫gs_˙t
 = 0;

212 
ønge
 = 0;Ñ™gê< 
ußbÀmem_rgns
.
size
;Ñange++) {

213 
add
 = 0;

214 
loc_ba£
 = 
ußbÀmem_rgns
.
ønges
[
ønge
].
°¨t
;

215 
loc_íd
 = 
ußbÀmem_rgns
.
ønges
[
ønge
].
íd
;

216 i‡(
loc_ba£
 >
ba£
 && 
loc_íd
 <
íd
) {

217 
add
 = 1;

218 } i‡(
ba£
 < 
loc_íd
 && 
íd
 > 
loc_ba£
) {

219 i‡(
loc_ba£
 < 
ba£
)

220 
loc_ba£
 = 
ba£
;

221 i‡(
loc_íd
 > 
íd
)

222 
loc_íd
 = 
íd
;

223 
add
 = 1;

226 i‡(
add
) {

227 i‡(
æí
 >(
ønges_size
-2)) {

228 
ønges_size
 +
MEM_RANGE_CHUNK_SZ
;

229 
ønges
 = 
	`ªÆloc
‘™ges, 
ønges_size
*8);

230 i‡(!
ønges
)

231 
	`dõ
("unrecoverableÉrror: can't"

234 
ønges_size
*8);

236 
ønges
[
æí
++] = 
	`˝u_to_be64
(
loc_ba£
);

237 
ønges
[
æí
++] = 
	`˝u_to_be64
(
loc_íd
 - 
loc_ba£
);

238 
∫gs_˙t
++;

241 i‡(
∫gs_˙t
 == 0) {

246 
ønges
[
tmp_ödx
] = 0;

251 i‡(
æí
 >(
ønges_size
-1)) {

252 
ønges_size
 +
MEM_RANGE_CHUNK_SZ
;

253 
ønges
 = 
	`ªÆloc
‘™ges, 
ønges_size
*8);

254 i‡(!
ønges
)

255 
	`dõ
("unrecoverableÉrror: can't"

258 
ønges_size
*8);

262 
ønges
[
tmp_ödx
] = 
	`˝u_to_be64
((
uöt64_t
Ë
∫gs_˙t
);

266 
æí
 =ÑÀ¿* (
uöt64_t
);

270 
	`dt_ª£rve
(&
dt
, 4+((
æí
 + 3)/4));

271 *
dt
++ = 
	`˝u_to_be32
(3);

272 *
dt
++ = 
	`˝u_to_be32
(
æí
);

273 *
dt
++ = 
	`˝u_to_be32
(
	`¥›num
("linux,drconf-usable-memory"));

274 
	`∑d_°ru˘uª_block
(
æí
);

275 
	`mem˝y
(
dt
, 
ønges
, 
æí
);

276 
	`‰ì
(
ønges
);

277 
dt
 +(
æí
 + 3)/4;

278 
	}
}

280 
	$add_dyn_ªc⁄f_ußbÀ_mem_¥›îty
(
dúít
 *
dp
, 
fd
)

282 i‡(!
	`°rcmp
(
dp
->
d_«me
, "ibm,dy«mic-mem‹y"Ë&& 
ußbÀmem_rgns
.
size
)

283 
	`add_dyn_ªc⁄f_ußbÀ_mem_¥›îty__
(
fd
);

284 
	}
}

286 
	$add_dyn_ªc⁄f_ußbÀ_mem_¥›îty
(
dúít
 *
dp
, 
fd
Ë{
	}
}

289 
	$add_ußbÀ_mem_¥›îty
(
fd
, 
size_t
 
Àn
)

291 
‚ame
[
MAXPATH
], *
b«me
;

292 
uöt64_t
 
buf
[2];

293 
uöt64_t
 *
ønges
;

294 
ønges_size
 = 
MEM_RANGE_CHUNK_SZ
;

295 
uöt64_t
 
ba£
, 
íd
, 
loc_ba£
, 
loc_íd
;

296 
size_t
 
ønge
;

297 
æí
 = 0;

299 
	`°r˝y
(
‚ame
, 
∑th«me
);

300 
b«me
 = 
	`°ºchr
(
‚ame
,'/');

301 
b«me
[0] = '\0';

302 
b«me
 = 
	`°ºchr
(
‚ame
,'/');

303 i‡(
	`°∫cmp
(
b«me
, "/mem‹y@", 8Ë&& 
	`°rcmp
(bname, "/memory"))

306 i‡(
Àn
 < (
buf
))

307 
	`dõ
("unrecoverableÉrror:ÇotÉnough data for memÖroperty\n");

309 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) < 0)

310 
	`dõ
("unrecoverableÉrror:Érror seeking in \"%s\": %s\n",

311 
∑th«me
, 
	`°ªº‹
(
î∫o
));

312 i‡(
	`ªad
(
fd
, 
buf
, (buf)) != (buf))

313 
	`dõ
("unrecoverableÉrror:ÉrrorÑeading \"%s\": %s\n",

314 
∑th«me
, 
	`°ªº‹
(
î∫o
));

316 
ba£
 = 
	`be64_to_˝u
(
buf
[0]);

317 
íd
 = 
	`be64_to_˝u
(
buf
[1]);

318 i‡(~0ULL - 
ba£
 < 
íd
)

319 
	`dõ
("unrecoverableÉrror: memÖroperty overflow\n");

320 
íd
 +
ba£
;

322 
ønges
 = 
	`mÆloc
(
ønges_size
 * (*ranges));

323 i‡(!
ønges
)

324 
	`dõ
("unrecoverableÉrror: can'tálloc %d bytes forÑanges.\n",

325 
ønges_size
 * (*
ønges
));

327 
ønge
 = 0;Ñ™gê< 
ußbÀmem_rgns
.
size
;Ñange++) {

328 
add
 = 0;

329 
loc_ba£
 = 
ußbÀmem_rgns
.
ønges
[
ønge
].
°¨t
;

330 
loc_íd
 = 
ußbÀmem_rgns
.
ønges
[
ønge
].
íd
;

331 i‡(
loc_ba£
 >
ba£
 && 
loc_íd
 <
íd
) {

332 
add
 = 1;

333 } i‡(
ba£
 < 
loc_íd
 && 
íd
 > 
loc_ba£
) {

334 i‡(
loc_ba£
 < 
ba£
)

335 
loc_ba£
 = 
ba£
;

336 i‡(
loc_íd
 > 
íd
)

337 
loc_íd
 = 
íd
;

338 
add
 = 1;

340 i‡(
add
) {

341 i‡(
æí
 >(
ønges_size
-2)) {

342 
ønges_size
 +
MEM_RANGE_CHUNK_SZ
;

343 
ønges
 = 
	`ªÆloc
‘™ges, 
ønges_size
 *

344 (*
ønges
));

345 i‡(!
ønges
)

346 
	`dõ
("unrecoverableÉrror: can'tÑealloc"

348 
ønges_size
*(*
ønges
));

350 
ønges
[
æí
++] = 
	`˝u_to_be64
(
loc_ba£
);

351 
ønges
[
æí
++] = 
	`˝u_to_be64
(
loc_íd
 - 
loc_ba£
);

355 i‡(!
æí
) {

361 
ønges
[
æí
++] = 0;

362 
ønges
[
æí
++] = 0;

365 
æí
 =ÑÀ¿* (*
ønges
);

369 
	`dt_ª£rve
(&
dt
, 4+((
æí
 + 3)/4));

370 *
dt
++ = 
	`˝u_to_be32
(3);

371 *
dt
++ = 
	`˝u_to_be32
(
æí
);

372 *
dt
++ = 
	`˝u_to_be32
(
	`¥›num
("linux,usable-memory"));

373 
	`∑d_°ru˘uª_block
(
æí
);

374 
	`mem˝y
(
dt
, 
ønges
, 
æí
);

375 
	`‰ì
(
ønges
);

376 
dt
 +(
æí
 + 3)/4;

377 
	}
}

380 
	$puçr›s
(*
‚
, 
dúít
 **
∆i°
, 
numli°
)

382 
dúít
 *
dp
;

383 
i
 = 0, 
fd
;

384 
size_t
 
Àn
;

385 
ssize_t
 
¶í
;

386 
°©
 
°©buf
;

388 
i
 = 0; i < 
numli°
; i++) {

389 
dp
 = 
∆i°
[
i
];

390 
	`°r˝y
(
‚
, 
dp
->
d_«me
);

392 i‡(!
	`°rcmp
(
dp
->
d_«me
, ".") || !strcmp(dp->d_name, ".."))

398 i‡(!
	`°rcmp
(
dp
->
d_«me
, "name"))

401 i‡(
	`l°©
(
∑th«me
, &
°©buf
))

402 
	`dõ
("unrecoverableÉrror: couldÇot stat \"%s\": %s\n",

403 
∑th«me
, 
	`°ªº‹
(
î∫o
));

405 i‡(!
¸ash_∑øm
 && !
	`°rcmp
(
‚
,"linux,crashkernel-base"))

408 i‡(!
¸ash_∑øm
 && !
	`°rcmp
(
‚
,"linux,crashkernel-size"))

415 i‡(!
	`°rcmp
(
dp
->
d_«me
, "linux,pci-domain") ||

416 !
	`°rcmp
(
dp
->
d_«me
, "linux,htab-base") ||

417 !
	`°rcmp
(
dp
->
d_«me
, "linux,htab-size") ||

418 !
	`°rcmp
(
dp
->
d_«me
, "linux,kernel-end"))

424 i‡((!
	`°rcmp
(
dp
->
d_«me
, "linux,initrd-start") ||

425 !
	`°rcmp
(
dp
->
d_«me
, "linux,initrd-end")) &&

426 !
ªu£_öôrd
)

432 i‡(!
	`°rcmp
(
dp
->
d_«me
, "bootargs"))

435 i‡(! 
	`S_ISREG
(
°©buf
.
°_mode
))

438 
Àn
 = 
°©buf
.
°_size
;

440 
	`dt_ª£rve
(&
dt
, 4+((
Àn
 + 3)/4));

441 *
dt
++ = 
	`˝u_to_be32
(3);

442 *
dt
++ = 
	`˝u_to_be32
(
Àn
);

443 *
dt
++ = 
	`˝u_to_be32
(
	`¥›num
(
‚
));

444 
	`∑d_°ru˘uª_block
(
Àn
);

446 
fd
 = 
	`›í
(
∑th«me
, 
O_RDONLY
);

447 i‡(
fd
 == -1)

448 
	`dõ
("unrecoverableÉrror: couldÇot open \"%s\": %s\n",

449 
∑th«me
, 
	`°ªº‹
(
î∫o
));

451 
¶í
 = 
	`ªad
(
fd
, 
dt
, 
Àn
);

452 i‡(
¶í
 < 0)

453 
	`dõ
("unrecoverableÉrror: couldÇotÑead \"%s\": %s\n",

454 
∑th«me
, 
	`°ªº‹
(
î∫o
));

455 i‡((
size_t
)
¶í
 !
Àn
)

456 
	`dõ
("unrecoverableÉrror: shortÑead from\"%s\"\n",

457 
∑th«me
);

459 
	`check¥›
(
‚
, 
dt
, 
Àn
);

461 
dt
 +(
Àn
 + 3)/4;

463 i‡(!
	`°rcmp
(
dp
->
d_«me
, "ªg"Ë&& 
ußbÀmem_rgns
.
size
)

464 
	`add_ußbÀ_mem_¥›îty
(
fd
, 
Àn
);

465 
	`add_dyn_ªc⁄f_ußbÀ_mem_¥›îty
(
dp
, 
fd
);

466 
	`˛o£
(
fd
);

469 
‚
[0] = '\0';

470 
	`check¥›
(
∑th«me
, 
NULL
, 0);

471 
	}
}

477 
	$com∑ªfunc
(c⁄° 
dúít
 **
díåy1
,

478 c⁄° 
dúít
 **
díåy2
)

480 *
°r1
 = (*(
dúít
 **)
díåy1
)->
d_«me
;

481 *
°r2
 = (*(
dúít
 **)
díåy2
)->
d_«me
;

489 i‡(
	`°rchr
(
°r1
, '@'Ë&& såchr(
°r2
, '@') &&

490 (
	`°æí
(
°r1
Ë> såÀn(
°r2
)))

493  
	`°rcmp
(
°r1
, 
°r2
);

494 
	}
}

500 
	$puäode
()

502 *
dn
;

503 
dúít
 *
dp
;

504 *
ba£«me
;

505 
dúít
 **
«mñi°
;

506 
numli°
, 
i
;

507 
°©
 
°©buf
;

508 
∂í
;

510 
numli°
 = 
	`sˇndú
(
∑th«me
, &
«mñi°
, 0, 
com∑ªfunc
);

511 i‡(
numli°
 < 0)

512 
	`dõ
("unrecoverableÉrror: couldÇot scan \"%s\": %s\n",

513 
∑th«me
, 
	`°ªº‹
(
î∫o
));

514 i‡(
numli°
 == 0)

515 
	`dõ
("unrecoverableÉrror:Ço directoryÉntries in \"%s\"",

516 
∑th«me
);

518 
ba£«me
 = 
	`°ºchr
(
∑th«me
,'/') + 1;

520 
∂í
 = *
ba£«me
 ? 
	`°æí
(basename) : 0;

525 
	`dt_ª£rve
(&
dt
, 1+((
∂í
 + 4)/4));

526 *
dt
++ = 
	`˝u_to_be32
(1);

527 
	`°r˝y
((*)
dt
, *
ba£«me
 ? basename : "");

528 
dt
 +((
∂í
 + 4)/4);

530 
	`°rˇt
(
∑th«me
, "/");

531 
dn
 = 
∑th«me
 + 
	`°æí
(pathname);

533 
	`puçr›s
(
dn
, 
«mñi°
, 
numli°
);

536 i‡(
öôrd_ba£
 && 
öôrd_size
 && !
	`°rcmp
(
ba£«me
,"chosen/")) {

537 
Àn
 = 8;

538 
uöt64_t
 
bevÆue
;

540 
	`dt_ª£rve
(&
dt
, 12);

541 *
dt
++ = 
	`˝u_to_be32
(3);

542 *
dt
++ = 
	`˝u_to_be32
(
Àn
);

543 *
dt
++ = 
	`˝u_to_be32
(
	`¥›num
("linux,initrd-start"));

544 
	`∑d_°ru˘uª_block
(
Àn
);

546 
bevÆue
 = 
	`˝u_to_be64
(
öôrd_ba£
);

547 
	`mem˝y
(
dt
, &
bevÆue
, 
Àn
);

548 
dt
 +(
Àn
 + 3)/4;

550 
Àn
 = 8;

551 *
dt
++ = 
	`˝u_to_be32
(3);

552 *
dt
++ = 
	`˝u_to_be32
(
Àn
);

553 *
dt
++ = 
	`˝u_to_be32
(
	`¥›num
("linux,initrd-end"));

555 
bevÆue
 = 
	`˝u_to_be64
(
öôrd_ba£
 + 
öôrd_size
);

556 
	`∑d_°ru˘uª_block
(
Àn
);

558 
	`mem˝y
(
dt
, &
bevÆue
, 
Àn
);

559 
dt
 +(
Àn
 + 3)/4;

561 
	`ª£rve
(
öôrd_ba£
, 
öôrd_size
);

566 i‡(!
	`°rcmp
(
ba£«me
,"chosen/")) {

567 
size_t
 
ªsu…
;

568 
size_t
 
cmd_Àn
 = 0;

569 *
∑øm
 = 
NULL
;

570 
fûíame
[
MAXPATH
];

571 *
buff
;

572 
fd
;

574 
cmd_Àn
 = 
	`°æí
(
loˇl_cmdlöe
);

575 i‡(
cmd_Àn
 != 0) {

576 
∑øm
 = 
	`°r°r
(
loˇl_cmdlöe
, "crashkernel=");

577 i‡(
∑øm
)

578 
¸ash_∑øm
 = 1;

580 
∑øm
 = 
	`°r°r
(
loˇl_cmdlöe
, "root=");

584 i‡(!
∑øm
) {

585 
FILE
 *
Â
;

586 *
œ°_cmdlöe
 = 
NULL
;

587 *
ﬁd_∑øm
;

589 
	`°r˝y
(
fûíame
, 
∑th«me
);

590 
	`°rˇt
(
fûíame
, "bootargs");

591 
Â
 = 
	`f›í
(
fûíame
, "r");

592 i‡(
Â
) {

593 i‡(
	`gëlöe
(&
œ°_cmdlöe
, &
cmd_Àn
, 
Â
) == -1)

594 
	`dõ
("u«bÀÅÿªad %s\n", 
fûíame
);

596 
∑øm
 = 
	`°r°r
(
œ°_cmdlöe
, "root=");

597 i‡(
∑øm
) {

598 
ﬁd_∑øm
 = 
	`°πok
(
∑øm
, " ");

599 i‡(
cmd_Àn
 != 0)

600 
	`°rˇt
(
loˇl_cmdlöe
, " ");

601 
	`°rˇt
(
loˇl_cmdlöe
, 
ﬁd_∑øm
);

604 i‡(
œ°_cmdlöe
)

605 
	`‰ì
(
œ°_cmdlöe
);

607 
	`°rˇt
(
loˇl_cmdlöe
, " ");

608 
cmd_Àn
 = 
	`°æí
(
loˇl_cmdlöe
);

609 
cmd_Àn
 = cmd_len + 1;

612 
	`dt_ª£rve
(&
dt
, 4+((
cmd_Àn
+3)/4));

613 *
dt
++ = 
	`˝u_to_be32
(3);

614 *
dt
++ = 
	`˝u_to_be32
(
cmd_Àn
);

615 *
dt
++ = 
	`˝u_to_be32
(
	`¥›num
("bootargs"));

616 
	`∑d_°ru˘uª_block
(
cmd_Àn
);

617 
	`mem˝y
(
dt
, 
loˇl_cmdlöe
,
cmd_Àn
);

618 
dt
 +(
cmd_Àn
 + 3)/4;

620 
	`Ârötf
(
°dîr
, "Modifõd cmdlöe:%s\n", 
loˇl_cmdlöe
);

627 
	`¢¥ötf
(
fûíame
, 
MAXPATH
, "%¶öux,°dout-∑th", 
∑th«me
);

628 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

629 i‡(
fd
 == -1) {

630 
	`¥ötf
("UnableÅo find %s,Örinting fromÖurgatory is diabled\n",

631 
fûíame
);

632 
no_debug
;

634 i‡(
	`f°©
(
fd
, &
°©buf
)) {

635 
	`¥ötf
("UnableÅo stat %s,Örinting fromÖurgatory is diabled\n",

636 
fûíame
);

637 
	`˛o£
(
fd
);

638 
no_debug
;

642 
buff
 = 
	`mÆloc
(
°©buf
.
°_size
);

643 i‡(!
buff
) {

644 
	`¥ötf
("CanÇotállocate memory for buff\n");

645 
	`˛o£
(
fd
);

646 
no_debug
;

648 
ªsu…
 = 
	`ªad
(
fd
, 
buff
, 
°©buf
.
°_size
);

649 
	`˛o£
(
fd
);

650 i‡(
ªsu…
 <= 0) {

651 
	`¥ötf
("UnableÅoÑead %s,Örinting fromÖurgatory is diabled\n",

652 
fûíame
);

653 
no_debug
;

655 
	`¢¥ötf
(
fûíame
, 
MAXPATH
, "/¥oc/devi˚-åì/%s/com∑tibÀ", 
buff
);

656 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

657 i‡(
fd
 == -1) {

658 
	`¥ötf
("UnableÅo find %sÖrinting fromÖurgatory is diabled\n",

659 
fûíame
);

660 
no_debug
;

662 i‡(
	`f°©
(
fd
, &
°©buf
)) {

663 
	`¥ötf
("UnableÅo stat %sÖrinting fromÖurgatory is diabled\n",

664 
fûíame
);

665 
	`˛o£
(
fd
);

666 
no_debug
;

668 
buff
 = 
	`ªÆloc
(buff, 
°©buf
.
°_size
);

669 i‡(!
buff
) {

670 
	`¥ötf
("CanÇotállocate memory for buff\n");

671 
	`˛o£
(
fd
);

672 
no_debug
;

674 
ªsu…
 = 
	`ªad
(
fd
, 
buff
, 
°©buf
.
°_size
);

675 i‡(
ªsu…
 && (!
	`°rcmp
(
buff
, "hvterm1")

676 || !
	`°rcmp
(
buff
, "hvterm-protocol")))

677 
my_debug
 = 1;

678 
	`˛o£
(
fd
);

679 
	`‰ì
(
buff
);

682 
no_debug
:

683 
i
=0; i < 
numli°
; i++) {

684 
dp
 = 
«mñi°
[
i
];

685 
	`°r˝y
(
dn
, 
dp
->
d_«me
);

686 
	`‰ì
(
«mñi°
[
i
]);

688 i‡(!
	`°rcmp
(
dn
, ".") || !strcmp(dn, ".."))

691 i‡(
	`l°©
(
∑th«me
, &
°©buf
))

692 
	`dõ
("unrecoverableÉrror: couldÇot stat \"%s\": %s\n",

693 
∑th«me
, 
	`°ªº‹
(
î∫o
));

695 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
))

696 
	`puäode
();

699 
	`dt_ª£rve
(&
dt
, 1);

700 *
dt
++ = 
	`˝u_to_be32
(2);

701 
dn
[-1] = '\0';

702 
	`‰ì
(
«mñi°
);

703 
	}
}

705 
boŸblock
 
	gbb
[1];

707 
	$add_boŸ_block
(**
buÂ
, 
off_t
 *
sizï
)

709 
Àn
;

710 
éí
, 
toff
;

711 *
buf
;

713 
Àn
 = 
	`_ALIGN
((
bb
[0]), 8);

715 
bb
->
off_mem_rsvm≠
 = 
	`˝u_to_be32
(
Àn
);

717 
Àn
 = 1; 
	`be64_to_˝u
(
mem_r§v
[len]);Üen += 2)

719 
Àn
++;

720 #ifde‡
NEED_RESERVE_DTB


721 
Àn
+= 3;

723 
Àn
 *(
mem_r§v
[0]);

725 
bb
->
off_dt_°ru˘
 = 
	`˝u_to_be32
(
	`be32_to_˝u
(bb->
off_mem_rsvm≠
Ë+ 
Àn
);

727 
Àn
 = 
dt
 - 
dt_ba£
;

728 
Àn
 *= ();

729 #i‡(
BOOT_BLOCK_VERSION
 >= 17)

730 
bb
->
dt_°ru˘_size
 = 
	`˝u_to_be32
(
Àn
);

732 
bb
->
off_dt_°rögs
 = 
	`˝u_to_be32
(
	`be32_to_˝u
(bb->
off_dt_°ru˘
Ë+ 
Àn
);

734 
Àn
 = 
	`¥›num
("");

735 
bb
->
dt_°rögs_size
 = 
	`˝u_to_be32
(
Àn
);

736 
Àn
 = 
	`_ALIGN
(len, 4);

737 
bb
->
tŸÆsize
 = 
	`˝u_to_be32
(
	`be32_to_˝u
(bb->
off_dt_°rögs
Ë+ 
Àn
);

739 
bb
->
magic
 = 
	`˝u_to_be32
(0xd00dfeed);

740 
bb
->
vîsi⁄
 = 
	`˝u_to_be32
(
BOOT_BLOCK_VERSION
);

741 
bb
->
œ°_comp_vîsi⁄
 = 
	`˝u_to_be32
(
BOOT_BLOCK_LAST_COMP_VERSION
);

743 #ifde‡
NEED_RESERVE_DTB


744 
	`ª£rve
(0, 
	`be32_to_˝u
(
bb
->
tŸÆsize
));

747 
buf
 = 
	`mÆloc
(
	`be32_to_˝u
(
bb
->
tŸÆsize
));

748 *
buÂ
 = 
buf
;

750 
éí
 = 
	`be32_to_˝u
(
bb
->
off_mem_rsvm≠
);

751 
	`mem˝y
(
buf
, 
bb
, 
éí
);

753 
toff
 = 
	`be32_to_˝u
(
bb
->
off_mem_rsvm≠
);

754 
éí
 = 
	`be32_to_˝u
(
bb
->
off_dt_°ru˘
Ë- be32_to_˝u(bb->
off_mem_rsvm≠
);

755 
	`mem˝y
(
buf
 + 
toff
, 
mem_r§v
, 
éí
);

757 
toff
 +
	`be32_to_˝u
(
bb
->
off_dt_°ru˘
Ë- be32_to_˝u(bb->
off_mem_rsvm≠
);

758 
éí
 = 
	`be32_to_˝u
(
bb
->
off_dt_°rögs
Ë- be32_to_˝u(bb->
off_dt_°ru˘
);

759 
	`mem˝y
(
buf
 + 
toff
, 
dt_ba£
, 
éí
);

761 
toff
 +
	`be32_to_˝u
(
bb
->
off_dt_°rögs
Ë- be32_to_˝u(bb->
off_dt_°ru˘
);

762 
éí
 = 
	`be32_to_˝u
(
bb
->
tŸÆsize
Ë- be32_to_˝u(bb->
off_dt_°rögs
);

763 
	`mem˝y
(
buf
 + 
toff
, 
¥›«mes
, 
éí
);

765 *
sizï
 = 
toff
 + 
	`be32_to_˝u
(
bb
->
tŸÆsize
) -

766 
	`be32_to_˝u
(
bb
->
off_dt_°rögs
);

767 
	}
}

769 
	$¸óã_Ê©ãn_åì
(**
buÂ
, 
off_t
 *
sizï
, c⁄° *
cmdlöe
)

771 
	`°r˝y
(
∑th«me
, "/proc/device-tree/");

773 
∑th°¨t
 = 
∑th«me
 + 
	`°æí
(pathname);

775 
dt_cur_size
 = 
INIT_TREE_WORDS
;

776 
dt_ba£
 = 
	`mÆloc
(
dt_cur_size
*4);

777 i‡(!
dt_ba£
) {

778 
	`dõ
("C™'àmÆlo¯%d byã†f‹ dà°ru˘!\n", 
dt_cur_size
*4);

780 
	`mem£t
(
dt_ba£
, 0, 
dt_cur_size
*4);

782 
dt
 = 
dt_ba£
;

784 i‡(
cmdlöe
)

785 
	`°r˝y
(
loˇl_cmdlöe
, 
cmdlöe
);

787 
	`puäode
();

788 
	`dt_ª£rve
(&
dt
, 1);

789 *
dt
++ = 
	`˝u_to_be32
(9);

791 
	`add_boŸ_block
(
buÂ
, 
sizï
);

792 
	`‰ì
(
dt_ba£
);

793 
	}
}

	@kexec/fs2dt.h

1 #i‚de‡
FS2DT_H


2 
	#FS2DT_H


	)

4 #i‡(
BOOT_BLOCK_VERSION
 != 2 && BOOT_BLOCK_VERSION != 17)

5 #îr‹ 
PÀa£
 
add
 
‹
 
c‹ª˘
 
deföôi⁄
 
of
 
BOOT_BLOCK_VERSION


9 
	sboŸblock
 {

10 
	mmagic
;

11 
	mtŸÆsize
;

12 
	moff_dt_°ru˘
;

13 
	moff_dt_°rögs
;

14 
	moff_mem_rsvm≠
;

15 
	mvîsi⁄
;

16 
	mœ°_comp_vîsi⁄
;

17 #i‡(
BOOT_BLOCK_VERSION
 >= 2)

19 
	mboŸ_physid
;

21 
	mdt_°rögs_size
;

22 #i‡(
BOOT_BLOCK_VERSION
 >= 17)

24 
	mdt_°ru˘_size
;

29 
boŸblock
 
bb
[1];

33 
	gmy_debug
;

35 
ª£rve
(
whîe
, 
Àngth
);

36 
¸óã_Ê©ãn_åì
(**, 
off_t
 *, const *);

	@kexec/ifdown.c

6 *
	gv_ifdown
 = "@(#)ifdown.c 1.11 02-Jun-1998 miquels@cistron.nl";

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<time.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

15 
	~<sys/io˘l.h
>

16 
	~<sys/sockë.h
>

17 
	~<sys/time.h
>

19 
	~<√t/if.h
>

20 
	~<√töë/ö.h
>

28 
	$ifdown
()

30 
if_«meödex
 *
iÁ
, *
iÂ
;

31 
i‰eq
 
i‰
;

32 
fd
, 
sh≠î
;

34 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

35 
	`Ârötf
(
°dîr
, "ifdown: ");

36 
	`≥º‹
("socket");

40 i‡((
iÁ
 = 
	`if_«meödex
()Ë=
NULL
) {

41 
	`Ârötf
(
°dîr
, "ifdown: ");

42 
	`≥º‹
("if_nameindex");

46 
sh≠î
 = 1; shaper >= 0; shaper--) {

47 
iÂ
 = 
iÁ
; iÂ->
if_ödex
; ifp++) {

49 i‡((
	`°∫cmp
(
iÂ
->
if_«me
, "shaper", 6) == 0)

50 !
sh≠î
) ;

51 i‡(
	`°rcmp
(
iÂ
->
if_«me
, "lo") == 0)

53 i‡(
	`°rchr
(
iÂ
->
if_«me
, ':'Ë!
NULL
)

56 
	`°∫˝y
(
i‰
.
i‰_«me
, 
iÂ
->
if_«me
, 
IFNAMSIZ
);

57 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

58 
	`Ârötf
(
°dîr
, "ifdown: shutdown ");

59 
	`≥º‹
(
iÂ
->
if_«me
);

62 
i‰
.
i‰_Êags
 &~(
IFF_UP
);

63 i‡(
	`io˘l
(
fd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

64 
	`Ârötf
(
°dîr
, "ifdown: shutdown ");

65 
	`≥º‹
(
iÂ
->
if_«me
);

71 
	`˛o£
(
fd
);

74 
	}
}

	@kexec/kernel_version.c

1 
	~"kexec.h
"

2 
	~<î∫o.h
>

3 
	~<°rög.h
>

4 
	~<sys/ut¢ame.h
>

5 
	~<°rög.h
>

6 
	~<limôs.h
>

7 
	~<°dlib.h
>

9 
	$kî√l_vîsi⁄
()

11 
ut¢ame
 utsname;

12 
maj‹
, 
mö‹
, 
∑tch
;

13 *
p
;

15 i‡(
	`u«me
(&
ut¢ame
) < 0) {

16 
	`Ârötf
(
°dîr
, "u«mêÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

20 
p
 = 
ut¢ame
.
ªÀa£
;

21 
maj‹
 = 
	`°πoul
(
p
, &p, 10);

22 i‡(
maj‹
 =
ULONG_MAX
) {

23 
	`Ârötf
(
°dîr
, "°πou»Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

27 i‡(*
p
++ != '.') {

28 
	`Ârötf
(
°dîr
, "Unsupported utsname.release: %s\n",

29 
ut¢ame
.
ªÀa£
);

33 
mö‹
 = 
	`°πoul
(
p
, &p, 10);

34 i‡(
mö‹
 =
ULONG_MAX
) {

35 
	`Ârötf
(
°dîr
, "°πou»Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

40 i‡(*
p
++ == '.') {

41 
∑tch
 = 
	`°πoul
(
p
, &p, 10);

42 i‡(
∑tch
 =
ULONG_MAX
) {

43 
	`Ârötf
(
°dîr
, "°πou»Áûed: %s\n",
	`°ªº‹
(
î∫o
));

47 
∑tch
 = 0;

50 i‡(
maj‹
 >256 || 
mö‹
 >256 || 
∑tch
 >= 256) {

51 
	`Ârötf
(
°dîr
, "Unsupported utsname.release: %s\n",

52 
ut¢ame
.
ªÀa£
);

56  
	`KERNEL_VERSION
(
maj‹
, 
mö‹
, 
∑tch
);

57 
	}
}

	@kexec/kexec-elf-boot.c

20 
	#_GNU_SOURCE


	)

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<î∫o.h
>

25 
	~<ñf.h
>

26 
	~<boŸ/ñf_boŸ.h
>

27 
	~<ù_checksum.h
>

28 
	~<x86/x86-löux.h
>

29 
	~"kexec.h
"

30 
	~"kexec-ñf.h
"

31 
	~"kexec-ñf-boŸ.h
"

34 
	#UPSZ
(
X
Ë
	`_ALIGN_UP
((X), 4)

	)

36 
	sboŸ_nŸes
 {

37 
Elf_Bhdr
 
	mhdr
;

38 
Elf_Nhdr
 
	mbl_hdr
;

39 
	mbl_desc
[
UPSZ
(
BOOTLOADER
)];

40 
Elf_Nhdr
 
	mblv_hdr
;

41 
	mblv_desc
[
UPSZ
(
BOOTLOADER_VERSION
)];

42 
Elf_Nhdr
 
	mcmd_hdr
;

43 
	mcomm™d_löe
[0];

44 } 
	gboŸ_nŸes
 = {

45 .
hdr
 = {

46 .
b_sig«tuª
 = 
ELF_BOOT_MAGIC
,

47 .
	gb_size
 = (
boŸ_nŸes
),

48 .
	gb_checksum
 = 0,

49 .
	gb_ªc‹ds
 = 3,

51 .
	gbl_hdr
 = {

52 .
n_«mesz
 = 0,

53 .
	gn_descsz
 = (
BOOTLOADER
),

54 .
	gn_ty≥
 = 
EBN_BOOTLOADER_NAME
,

56 .
	gbl_desc
 = 
BOOTLOADER
,

57 .
	gblv_hdr
 = {

58 .
n_«mesz
 = 0,

59 .
	gn_descsz
 = (
BOOTLOADER_VERSION
),

60 .
	gn_ty≥
 = 
EBN_BOOTLOADER_VERSION
,

62 .
	gblv_desc
 = 
BOOTLOADER_VERSION
,

63 .
	gcmd_hdr
 = {

64 .
n_«mesz
 = 0,

65 .
	gn_descsz
 = 0,

66 .
	gn_ty≥
 = 
EBN_COMMAND_LINE
,

70 
	$ñf_boŸ_nŸes
(

71 
kexec_öfo
 *
öfo
, 
max_addr
,

72 c⁄° *
cmdlöe
, 
cmdlöe_Àn
)

74 
nŸe_byãs
;

75 
nŸe_ba£
;

76 
boŸ_nŸes
 *
nŸes
;

77 
nŸe_byãs
 = (*
nŸes
Ë+ 
	`_ALIGN
(
cmdlöe_Àn
, 4);

78 
nŸes
 = 
	`xmÆloc
(
nŸe_byãs
);

79 
	`mem˝y
(
nŸes
, &
boŸ_nŸes
, (boot_notes));

80 
	`mem˝y
(
nŸes
->
comm™d_löe
, 
cmdlöe
, 
cmdlöe_Àn
);

81 
nŸes
->
hdr
.
b_size
 = 
nŸe_byãs
;

82 
nŸes
->
cmd_hdr
.
n_descsz
 = 
cmdlöe_Àn
;

83 
nŸes
->
hdr
.
b_checksum
 = 
	`compuã_ù_checksum
“Ÿes, 
nŸe_byãs
);

85 
nŸe_ba£
 = 
	`add_buf„r
(
öfo
, 
nŸes
, 
nŸe_byãs
,Çote_bytes,

86 4, 0, 
max_addr
, 1);

88  
nŸe_ba£
;

89 
	}
}

	@kexec/kexec-elf-boot.h

1 #i‚de‡
KEXEC_ELF_BOOT_H


2 
	#KEXEC_ELF_BOOT_H


	)

4 
ñf_boŸ_nŸes
(

5 
kexec_öfo
 *
öfo
, 
max_addr
,

6 c⁄° *
cmdlöe
, 
cmdlöe_Àn
);

	@kexec/kexec-elf-core.c

1 
	~<°dio.h
>

2 
	~<°döt.h
>

3 
	~<î∫o.h
>

4 
	~<°dlib.h
>

5 
	~"ñf.h
"

6 
	~"kexec-ñf.h
"

9 
	$buûd_ñf_c‹e_öfo
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

10 
uöt32_t
 
Êags
)

12 
ªsu…
;

13 
ªsu…
 = 
	`buûd_ñf_öfo
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

14 i‡(
ªsu…
 < 0) {

15  
ªsu…
;

17 i‡((
ehdr
->
e_ty≥
 !
ET_CORE
)) {

19 
	`Ârötf
(
°dîr
, "Not ELFÅype ET_CORE\n");

22 i‡(!
ehdr
->
e_phdr
) {

24 
	`Ârötf
(
°dîr
, "No ELFÖrogram header\n");

29 
	}
}

	@kexec/kexec-elf-exec.c

1 
	~<limôs.h
>

2 
	~<°döt.h
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~<î∫o.h
>

6 
	~<°dlib.h
>

7 
	~"ñf.h
"

8 
	~<boŸ/ñf_boŸ.h
>

9 
	~"kexec.h
"

10 
	~"kexec-ñf.h
"

12 c⁄° 
	g¥obe_debug
 = 0;

14 
	$buûd_ñf_exec_öfo
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

15 
uöt32_t
 
Êags
)

17 
mem_phdr
 *
phdr
, *
íd_phdr
;

18 
ªsu…
;

19 
ªsu…
 = 
	`buûd_ñf_öfo
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

20 i‡(
ªsu…
 < 0) {

21  
ªsu…
;

23 i‡((
ehdr
->
e_ty≥
 !
ET_EXEC
Ë&& (ehdr->e_ty≥ !
ET_DYN
) &&

24 (
ehdr
->
e_ty≥
 !
ET_CORE
)) {

26 i‡(
¥obe_debug
) {

27 
	`Ârötf
(
°dîr
, "Not ELFÅype ET_EXEC or ET_DYN\n");

31 i‡(!
ehdr
->
e_phdr
) {

33 
	`Ârötf
(
°dîr
, "No ELFÖrogram header\n");

36 
íd_phdr
 = &
ehdr
->
e_phdr
[ehdr->
e_phnum
];

37 
phdr
 = 
ehdr
->
e_phdr
;Öhd∏!
íd_phdr
;Öhdr++) {

42 i‡(
phdr
->
p_ty≥
 =
PT_INTERP
) {

43 
	`Ârötf
(
°dîr
, "Requiresán ELF interpreter\n");

49 
	}
}

52 
	$ñf_exec_lﬂd
(
mem_ehdr
 *
ehdr
, 
kexec_öfo
 *
öfo
)

54 
ba£
;

55 
ªsu…
;

56 
size_t
 
i
;

58 i‡(!
ehdr
->
e_phdr
) {

59 
	`Ârötf
(
°dîr
, "NoÖrogram header?\n");

60 
ªsu…
 = -1;

61 
out
;

67 
ba£
 = 0;

68 i‡(
ehdr
->
e_ty≥
 =
ET_DYN
) {

69 
fú°
, 
œ°
, 
Æign
;

70 
fú°
 = 
ULONG_MAX
;

71 
œ°
 = 0;

72 
Æign
 = 0;

73 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

74 
°¨t
, 
°›
;

75 
mem_phdr
 *
phdr
;

76 
phdr
 = &
ehdr
->
e_phdr
[
i
];

77 i‡((
phdr
->
p_ty≥
 !
PT_LOAD
) ||

78 (
phdr
->
p_memsz
 == 0))

82 
°¨t
 = 
phdr
->
p_∑ddr
;

83 
°›
 = 
°¨t
 + 
phdr
->
p_memsz
;

84 i‡(
fú°
 > 
°¨t
) {

85 
fú°
 = 
°¨t
;

87 i‡(
œ°
 < 
°›
) {

88 
œ°
 = 
°›
;

90 i‡(
Æign
 < 
phdr
->
p_Æign
) {

91 
Æign
 = 
phdr
->
p_Æign
;

97 i‡(!
	`vÆid_mem‹y_ønge
(
öfo
, 
fú°
, 
œ°
)) {

98 
hﬁe
;

99 
hﬁe
 = 
	`loˇã_hﬁe
(
öfo
,

100 
œ°
 - 
fú°
 + 1, 
Æign
,

101 0, 
	`ñf_max_addr
(
ehdr
), 1);

102 i‡(
hﬁe
 =
ULONG_MAX
) {

103 
ªsu…
 = -1;

104 
out
;

110 
ba£
 = 
hﬁe
 - 
fú°
;

116 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

117 
mem_phdr
 *
phdr
;

118 
size_t
 
size
;

119 
phdr
 = &
ehdr
->
e_phdr
[
i
];

120 i‡(
phdr
->
p_ty≥
 !
PT_LOAD
) {

123 
size
 = 
phdr
->
p_fûesz
;

124 i‡(
size
 > 
phdr
->
p_memsz
) {

125 
size
 = 
phdr
->
p_memsz
;

127 
	`add_£gmít
(
öfo
,

128 
phdr
->
p_d©a
, 
size
,

129 
phdr
->
p_∑ddr
 + 
ba£
,Öhdr->
p_memsz
);

133 
ehdr
->
e_íåy
 +
ba£
;

135 
ªsu…
 = 0;

136 
out
:

137  
ªsu…
;

138 
	}
}

140 
	$ñf_exec_buûd_lﬂd
(
kexec_öfo
 *
öfo
, 
mem_ehdr
 *
ehdr
,

141 c⁄° *
buf
, 
off_t
 
Àn
, 
uöt32_t
 
Êags
)

143 
ªsu…
;

145 
ªsu…
 = 
	`buûd_ñf_exec_öfo
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

146 i‡(
ªsu…
 < 0) {

147 
	`dõ
("ELFÉxecÖarse failed\n");

151 
ªsu…
 = 
	`ñf_exec_lﬂd
(
ehdr
, 
öfo
);

152 i‡(
ªsu…
 < 0) {

153 
	`dõ
("ELFÉxecÜoad failed\n");

155 
	}
}

	@kexec/kexec-elf-rel.c

1 
	~<limôs.h
>

2 
	~<°döt.h
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~<î∫o.h
>

6 
	~<°dlib.h
>

7 
	~"ñf.h
"

8 
	~<boŸ/ñf_boŸ.h
>

9 
	~"kexec.h
"

10 
	~"kexec-ñf.h
"

12 c⁄° 
	g¥obe_debug
 = 0;

14 
size_t
 
	$ñf_sym_size
(
mem_ehdr
 *
ehdr
)

16 
size_t
 
sym_size
 = 0;

17 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

18 
sym_size
 = (
Elf32_Sym
);

20 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

21 
sym_size
 = (
Elf64_Sym
);

24 
	`dõ
("BadÉlf class");

26  
sym_size
;

27 
	}
}

29 
size_t
 
	$ñf_ªl_size
(
mem_ehdr
 *
ehdr
)

31 
size_t
 
ªl_size
 = 0;

32 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

33 
ªl_size
 = (
Elf32_Rñ
);

35 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

36 
ªl_size
 = (
Elf64_Rñ
);

39 
	`dõ
("BadÉlf class");

41  
ªl_size
;

42 
	}
}

44 
size_t
 
	$ñf_ªœ_size
(
mem_ehdr
 *
ehdr
)

46 
size_t
 
ªl_size
 = 0;

47 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

48 
ªl_size
 = (
Elf32_Rña
);

50 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

51 
ªl_size
 = (
Elf64_Rña
);

54 
	`dõ
("BadÉlf class");

56  
ªl_size
;

57 
	}
}

59 
mem_sym
 
	$ñf_sym
(
mem_ehdr
 *
ehdr
, c⁄° *
±r
)

61 
mem_sym
 
sym
 = { 0, 0, 0, 0, 0, 0 };

62 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

63 
Elf32_Sym
 
lsym
;

64 
	`mem˝y
(&
lsym
, 
±r
, (lsym));

65 
sym
.
°_«me
 = 
	`ñf32_to_˝u
(
ehdr
, 
lsym
.st_name);

66 
sym
.
°_vÆue
 = 
	`ñf32_to_˝u
(
ehdr
, 
lsym
.st_value);

67 
sym
.
°_size
 = 
	`ñf32_to_˝u
(
ehdr
, 
lsym
.st_size);

68 
sym
.
°_öfo
 = 
lsym
.st_info;

69 
sym
.
°_Ÿhî
 = 
lsym
.st_other;

70 
sym
.
°_shndx
 = 
	`ñf16_to_˝u
(
ehdr
, 
lsym
.st_shndx);

72 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

73 
Elf64_Sym
 
lsym
;

74 
	`mem˝y
(&
lsym
, 
±r
, (lsym));

75 
sym
.
°_«me
 = 
	`ñf32_to_˝u
(
ehdr
, 
lsym
.st_name);

76 
sym
.
°_vÆue
 = 
	`ñf64_to_˝u
(
ehdr
, 
lsym
.st_value);

77 
sym
.
°_size
 = 
	`ñf64_to_˝u
(
ehdr
, 
lsym
.st_size);

78 
sym
.
°_öfo
 = 
lsym
.st_info;

79 
sym
.
°_Ÿhî
 = 
lsym
.st_other;

80 
sym
.
°_shndx
 = 
	`ñf16_to_˝u
(
ehdr
, 
lsym
.st_shndx);

83 
	`dõ
("BadÉlf class");

85  
sym
;

86 
	}
}

88 
mem_ªœ
 
	$ñf_ªl
(
mem_ehdr
 *
ehdr
, c⁄° *
±r
)

90 
mem_ªœ
 
ªœ
 = { 0, 0, 0, 0 };

91 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

92 
Elf32_Rñ
 
Ãñ
;

93 
	`mem˝y
(&
Ãñ
, 
±r
, (lrel));

94 
ªœ
.
r_off£t
 = 
	`ñf32_to_˝u
(
ehdr
, 
Ãñ
.r_offset);

95 
ªœ
.
r_sym
 = 
	`ELF32_R_SYM
(
	`ñf32_to_˝u
(
ehdr
, 
Ãñ
.
r_öfo
));

96 
ªœ
.
r_ty≥
 = 
	`ELF32_R_TYPE
(
	`ñf32_to_˝u
(
ehdr
, 
Ãñ
.
r_öfo
));

97 
ªœ
.
r_addíd
 = 0;

99 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

100 
Elf64_Rñ
 
Ãñ
;

101 
	`mem˝y
(&
Ãñ
, 
±r
, (lrel));

102 
ªœ
.
r_off£t
 = 
	`ñf64_to_˝u
(
ehdr
, 
Ãñ
.r_offset);

103 
ªœ
.
r_sym
 = 
	`ELF64_R_SYM
(
	`ñf64_to_˝u
(
ehdr
, 
Ãñ
.
r_öfo
));

104 
ªœ
.
r_ty≥
 = 
	`ELF64_R_TYPE
(
	`ñf64_to_˝u
(
ehdr
, 
Ãñ
.
r_öfo
));

105 
ªœ
.
r_addíd
 = 0;

108 
	`dõ
("BadÉlf class");

110  
ªœ
;

111 
	}
}

113 
mem_ªœ
 
	$ñf_ªœ
(
mem_ehdr
 *
ehdr
, c⁄° *
±r
)

115 
mem_ªœ
 
ªœ
 = { 0, 0, 0, 0 };

116 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

117 
Elf32_Rña
 
Ãña
;

118 
	`mem˝y
(&
Ãña
, 
±r
, (lrela));

119 
ªœ
.
r_off£t
 = 
	`ñf32_to_˝u
(
ehdr
, 
Ãña
.r_offset);

120 
ªœ
.
r_sym
 = 
	`ELF32_R_SYM
(
	`ñf32_to_˝u
(
ehdr
, 
Ãña
.
r_öfo
));

121 
ªœ
.
r_ty≥
 = 
	`ELF32_R_TYPE
(
	`ñf32_to_˝u
(
ehdr
, 
Ãña
.
r_öfo
));

122 
ªœ
.
r_addíd
 = 
	`ñf32_to_˝u
(
ehdr
, 
Ãña
.r_addend);

124 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

125 
Elf64_Rña
 
Ãña
;

126 
	`mem˝y
(&
Ãña
, 
±r
, (lrela));

127 
ªœ
.
r_off£t
 = 
	`ñf64_to_˝u
(
ehdr
, 
Ãña
.r_offset);

128 
ªœ
.
r_sym
 = 
	`ELF64_R_SYM
(
	`ñf64_to_˝u
(
ehdr
, 
Ãña
.
r_öfo
));

129 
ªœ
.
r_ty≥
 = 
	`ELF64_R_TYPE
(
	`ñf64_to_˝u
(
ehdr
, 
Ãña
.
r_öfo
));

130 
ªœ
.
r_addíd
 = 
	`ñf64_to_˝u
(
ehdr
, 
Ãña
.r_addend);

133 
	`dõ
("BadÉlf class");

135  
ªœ
;

136 
	}
}

138 
	$buûd_ñf_ªl_öfo
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

139 
uöt32_t
 
Êags
)

141 
ªsu…
;

142 
ªsu…
 = 
	`buûd_ñf_öfo
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

143 i‡(
ªsu…
 < 0) {

144  
ªsu…
;

146 i‡(
ehdr
->
e_ty≥
 !
ET_REL
) {

148 i‡(
¥obe_debug
) {

149 
	`Ârötf
(
°dîr
, "Not ELFÅype ET_REL\n");

150 
	`Ârötf
(
°dîr
, "ELF Ty≥: %x\n", 
ehdr
->
e_ty≥
);

154 i‡(!
ehdr
->
e_shdr
) {

156 i‡(
¥obe_debug
) {

157 
	`Ârötf
(
°dîr
, "No ELF section headers\n");

161 i‡(!
	`machöe_vîify_ñf_ªl
(
ehdr
)) {

163 i‡(
¥obe_debug
) {

164 
	`Ârötf
(
°dîr
, "ELFárchitecture constraint failure\n");

169 
	}
}

172 
	$ñf_ªl_lﬂd
(
mem_ehdr
 *
ehdr
, 
kexec_öfo
 *
öfo
,

173 
mö
, 
max
, 
íd
)

175 
mem_shdr
 *
shdr
, *
shdr_íd
, *
íåy_shdr
;

176 
íåy
;

177 
ªsu…
;

178 *
buf
;

179 
buf_Æign
, 
bufsz
, 
bss_Æign
, 
bsssz
, 
bss_∑d
;

180 
buf_addr
, 
d©a_addr
, 
bss_addr
;

182 i‡(
max
 > 
	`ñf_max_addr
(
ehdr
)) {

183 
max
 = 
	`ñf_max_addr
(
ehdr
);

185 i‡(!
ehdr
->
e_shdr
) {

186 
	`Ârötf
(
°dîr
, "No section header?\n");

187 
ªsu…
 = -1;

188 
out
;

190 
shdr_íd
 = &
ehdr
->
e_shdr
[ehdr->
e_shnum
];

193 
íåy_shdr
 = 
NULL
;

194 
íåy
 = 
ehdr
->
e_íåy
;

195 
shdr
 = 
ehdr
->
e_shdr
; shd∏!
shdr_íd
; shdr++) {

196 i‡(!(
shdr
->
sh_Êags
 & 
SHF_ALLOC
)) {

199 i‡(!(
shdr
->
sh_Êags
 & 
SHF_EXECINSTR
)) {

203 i‡((
shdr
->
sh_addr
 <
ehdr
->
e_íåy
) &&

204 ((
shdr
->
sh_addr
 + shdr->
sh_size
Ë> 
ehdr
->
e_íåy
)) {

205 
íåy_shdr
 = 
shdr
;

206 
íåy
 -
shdr
->
sh_addr
;

212 
buf_Æign
 = 1;

213 
bss_Æign
 = 1;

214 
bufsz
 = 0;

215 
bsssz
 = 0;

216 
shdr
 = 
ehdr
->
e_shdr
; shd∏!
shdr_íd
; shdr++) {

217 i‡(!(
shdr
->
sh_Êags
 & 
SHF_ALLOC
)) {

220 i‡(
shdr
->
sh_ty≥
 !
SHT_NOBITS
) {

221 
Æign
;

222 
Æign
 = 
shdr
->
sh_addølign
;

224 i‡(
buf_Æign
 < 
Æign
) {

225 
buf_Æign
 = 
Æign
;

228 
bufsz
 = 
	`_ALIGN
(bufsz, 
Æign
);

230 
bufsz
 +
shdr
->
sh_size
;

233 
Æign
;

234 
Æign
 = 
shdr
->
sh_addølign
;

236 i‡(
bss_Æign
 < 
Æign
) {

237 
bss_Æign
 = 
Æign
;

240 
bsssz
 = 
	`_ALIGN
(bsssz, 
Æign
);

242 
bsssz
 +
shdr
->
sh_size
;

245 i‡(
buf_Æign
 < 
bss_Æign
) {

246 
buf_Æign
 = 
bss_Æign
;

248 
bss_∑d
 = 0;

249 i‡(
bufsz
 & (
bss_Æign
 - 1)) {

250 
bss_∑d
 = 
bss_Æign
 - (
bufsz
 & (bss_align - 1));

254 
buf
 = 
	`xmÆloc
(
bufsz
);

255 
buf_addr
 = 
	`add_buf„r
(
öfo
, 
buf
, 
bufsz
, bufsz + 
bss_∑d
 + 
bsssz
,

256 
buf_Æign
, 
mö
, 
max
, 
íd
);

257 
ehdr
->
ªl_addr
 = 
buf_addr
;

258 
ehdr
->
ªl_size
 = 
bufsz
 + 
bss_∑d
 + 
bsssz
;

261 
d©a_addr
 = 
buf_addr
;

262 
bss_addr
 = 
buf_addr
 + 
bufsz
 + 
bss_∑d
;

263 
shdr
 = 
ehdr
->
e_shdr
; shd∏!
shdr_íd
; shdr++) {

264 
Æign
;

265 i‡(!(
shdr
->
sh_Êags
 & 
SHF_ALLOC
)) {

268 
Æign
 = 
shdr
->
sh_addølign
;

269 i‡(
shdr
->
sh_ty≥
 !
SHT_NOBITS
) {

270 
off
;

272 
d©a_addr
 = 
	`_ALIGN
(d©a_addr, 
Æign
);

275 
off
 = 
d©a_addr
 - 
buf_addr
;

276 
	`mem˝y
(
buf
 + 
off
, 
shdr
->
sh_d©a
, shdr->
sh_size
);

277 
shdr
->
sh_addr
 = 
d©a_addr
;

278 
shdr
->
sh_d©a
 = 
buf
 + 
off
;

281 
d©a_addr
 +
shdr
->
sh_size
;

284 
bss_addr
 = 
	`_ALIGN
(bss_addr, 
Æign
);

287 
shdr
->
sh_addr
 = 
bss_addr
;

290 
bss_addr
 +
shdr
->
sh_size
;

294 i‡(
íåy_shdr
) {

295 
íåy
 +
íåy_shdr
->
sh_addr
;

296 
ehdr
->
e_íåy
 = 
íåy
;

298 
öfo
->
íåy
 = (*)entry;

301 
shdr
 = 
ehdr
->
e_shdr
; shd∏!
shdr_íd
; shdr++) {

302 
mem_shdr
 *
£˘i⁄
, *
symèb
;

303 c⁄° *
°πab
;

304 
size_t
 
ªl_size
;

305 c⁄° *
±r
, *
ªl_íd
;

306 i‡((
shdr
->
sh_ty≥
 !
SHT_RELA
Ë&& (shdr->sh_ty≥ !
SHT_REL
)) {

309 i‡((
shdr
->
sh_öfo
 > 
ehdr
->
e_shnum
) ||

310 (
shdr
->
sh_lök
 > 
ehdr
->
e_shnum
))

312 
	`dõ
("Invalid sectionÇumber\n");

314 
£˘i⁄
 = &
ehdr
->
e_shdr
[
shdr
->
sh_öfo
];

315 
symèb
 = &
ehdr
->
e_shdr
[
shdr
->
sh_lök
];

317 i‡(!(
£˘i⁄
->
sh_Êags
 & 
SHF_ALLOC
)) {

321 i‡(
symèb
->
sh_lök
 > 
ehdr
->
e_shnum
) {

325 
°πab
 = 
ehdr
->
e_shdr
[
symèb
->
sh_lök
].
sh_d©a
;

327 
ªl_size
 = 0;

328 i‡(
shdr
->
sh_ty≥
 =
SHT_REL
) {

329 
ªl_size
 = 
	`ñf_ªl_size
(
ehdr
);

331 i‡(
shdr
->
sh_ty≥
 =
SHT_RELA
) {

332 
ªl_size
 = 
	`ñf_ªœ_size
(
ehdr
);

335 
	`dõ
("Cannot findÉlfÑel size\n");

337 
ªl_íd
 = 
shdr
->
sh_d©a
 + shdr->
sh_size
;

338 
±r
 = 
shdr
->
sh_d©a
;Öå < 
ªl_íd
;Öå +
ªl_size
) {

339 
mem_ªœ
 
ªl
 = {0};

340 
mem_sym
 
sym
;

341 c⁄° *
loˇti⁄
;

342 c⁄° *
«me
;

343 
addªss
, 
vÆue
, 
£c_ba£
;

344 i‡(
shdr
->
sh_ty≥
 =
SHT_REL
) {

345 
ªl
 = 
	`ñf_ªl
(
ehdr
, 
±r
);

347 i‡(
shdr
->
sh_ty≥
 =
SHT_RELA
) {

348 
ªl
 = 
	`ñf_ªœ
(
ehdr
, 
±r
);

351 
loˇti⁄
 = 
£˘i⁄
->
sh_d©a
 + 
ªl
.
r_off£t
;

354 
addªss
 = 
£˘i⁄
->
sh_addr
 + 
ªl
.
r_off£t
;

357 
sym
 = 
	`ñf_sym
(
ehdr
, 
symèb
->
sh_d©a
 + (
ªl
.
r_sym
 * 
	`ñf_sym_size
(ehdr)));

359 i‡(
sym
.
°_«me
) {

360 
«me
 = 
°πab
 + 
sym
.
°_«me
;

363 
«me
 = 
ehdr
->
e_shdr
[ehdr->
e_sh°∫dx
].
sh_d©a
;

364 
«me
 +
ehdr
->
e_shdr
[
sym
.
°_shndx
].
sh_«me
;

367 
	`dbg¥ötf
("sym: %10s info: %02x other: %02x shndx: %x value: %llx size: %llx\n",

368 
«me
,

369 
sym
.
°_öfo
,

370 
sym
.
°_Ÿhî
,

371 
sym
.
°_shndx
,

372 
sym
.
°_vÆue
,

373 
sym
.
°_size
);

375 i‡(
sym
.
°_shndx
 =
STN_UNDEF
) {

386 i‡(
	`ELF32_ST_TYPE
(
sym
.
°_öfo
Ë!
STT_NOTYPE
)

387 
	`dõ
("Undeföed symbﬁ: %s\n", 
«me
);

389 
£c_ba£
 = 0;

390 i‡(
sym
.
°_shndx
 =
SHN_COMMON
) {

391 
	`dõ
("symbol: '%s' in common section\n",

392 
«me
);

394 i‡(
sym
.
°_shndx
 =
SHN_ABS
) {

395 
£c_ba£
 = 0;

397 i‡(
sym
.
°_shndx
 > 
ehdr
->
e_shnum
) {

398 
	`dõ
("Invalid section: %d for symbol %s\n",

399 
sym
.
°_shndx
, 
«me
);

402 
£c_ba£
 = 
ehdr
->
e_shdr
[
sym
.
°_shndx
].
sh_addr
;

404 
vÆue
 = 
sym
.
°_vÆue
;

405 
vÆue
 +
£c_ba£
;

406 
vÆue
 +
ªl
.
r_addíd
;

408 
	`dbg¥ötf
("sym: %s value: %lxáddr: %lx\n",

409 
«me
, 
vÆue
, 
addªss
);

411 
	`machöe_≠∂y_ñf_ªl
(
ehdr
, 
ªl
.
r_ty≥
,

412 (*)
loˇti⁄
, 
addªss
, 
vÆue
);

415 
ªsu…
 = 0;

416 
out
:

417  
ªsu…
;

418 
	}
}

420 
	$ñf_ªl_buûd_lﬂd
(
kexec_öfo
 *
öfo
, 
mem_ehdr
 *
ehdr
,

421 c⁄° *
buf
, 
off_t
 
Àn
, 
mö
, 
max
,

422 
íd
, 
uöt32_t
 
Êags
)

424 
ªsu…
;

427 
ªsu…
 = 
	`buûd_ñf_ªl_öfo
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

428 i‡(
ªsu…
 < 0) {

429 
	`dõ
("ELFÑelÖarse failed\n");

432 
ªsu…
 = 
	`ñf_ªl_lﬂd
(
ehdr
, 
öfo
, 
mö
, 
max
, 
íd
);

433 i‡(
ªsu…
 < 0) {

434 
	`dõ
("ELFÑelÜoad failed\n");

436 
	}
}

438 
	$ñf_ªl_föd_symbﬁ
(
mem_ehdr
 *
ehdr
,

439 c⁄° *
«me
, 
mem_sym
 *
ªt_sym
)

441 
mem_shdr
 *
shdr
, *
shdr_íd
;

443 i‡(!
ehdr
->
e_shdr
) {

448 
shdr_íd
 = &
ehdr
->
e_shdr
[ehdr->
e_shnum
];

449 
shdr
 = 
ehdr
->
e_shdr
; shd∏!
shdr_íd
; shdr++) {

450 c⁄° *
°πab
;

451 
size_t
 
sym_size
;

452 c⁄° *
±r
, *
sym_íd
;

453 i‡(
shdr
->
sh_ty≥
 !
SHT_SYMTAB
) {

456 i‡(
shdr
->
sh_lök
 > 
ehdr
->
e_shnum
) {

460 
°πab
 = (*)
ehdr
->
e_shdr
[
shdr
->
sh_lök
].
sh_d©a
;

462 
sym_size
 = 
	`ñf_sym_size
(
ehdr
);

463 
sym_íd
 = 
shdr
->
sh_d©a
 + shdr->
sh_size
;

464 
±r
 = 
shdr
->
sh_d©a
;Öå < 
sym_íd
;Öå +
sym_size
) {

465 
mem_sym
 
sym
;

466 
sym
 = 
	`ñf_sym
(
ehdr
, 
±r
);

467 i‡(
	`ELF32_ST_BIND
(
sym
.
°_öfo
Ë!
STB_GLOBAL
) {

470 i‡(
	`°rcmp
(
°πab
 + 
sym
.
°_«me
, 
«me
) != 0) {

473 i‡((
sym
.
°_shndx
 =
STN_UNDEF
) ||

474 (
sym
.
°_shndx
 > 
ehdr
->
e_shnum
))

476 
	`dõ
("Symbol: %s has Bad section index %d\n",

477 
«me
, 
sym
.
°_shndx
);

479 *
ªt_sym
 = 
sym
;

486 
	}
}

488 
	$ñf_ªl_gë_addr
(
mem_ehdr
 *
ehdr
, c⁄° *
«me
)

490 
mem_shdr
 *
shdr
;

491 
mem_sym
 
sym
;

492 
ªsu…
;

493 
ªsu…
 = 
	`ñf_ªl_föd_symbﬁ
(
ehdr
, 
«me
, &
sym
);

494 i‡(
ªsu…
 < 0) {

495 
	`dõ
("Symbol: %sÇot found cannotÑetrive it'sáddress\n",

496 
«me
);

498 
shdr
 = &
ehdr
->
e_shdr
[
sym
.
°_shndx
];

499  
shdr
->
sh_addr
 + 
sym
.
°_vÆue
;

500 
	}
}

502 
	$ñf_ªl_£t_symbﬁ
(
mem_ehdr
 *
ehdr
,

503 c⁄° *
«me
, c⁄° *
buf
, 
size_t
 
size
)

505 *
sym_buf
;

506 
mem_shdr
 *
shdr
;

507 
mem_sym
 
sym
;

508 
ªsu…
;

510 
ªsu…
 = 
	`ñf_ªl_föd_symbﬁ
(
ehdr
, 
«me
, &
sym
);

511 i‡(
ªsu…
 < 0) {

512 
	`dõ
("Symbol: %sÇot found cannot set\n",

513 
«me
);

515 i‡(
sym
.
°_size
 !
size
) {

516 
	`dõ
("Symbol: %s has size: %lldÇot %zd\n",

517 
«me
, 
sym
.
°_size
, 
size
);

519 
shdr
 = &
ehdr
->
e_shdr
[
sym
.
°_shndx
];

520 i‡(
shdr
->
sh_ty≥
 =
SHT_NOBITS
) {

521 
	`dõ
("Symbﬁ: %†i†öá bs†£˘i⁄ c™nŸ së\n", 
«me
);

523 
sym_buf
 = (*)(
shdr
->
sh_d©a
 + 
sym
.
°_vÆue
);

524 
	`mem˝y
(
sym_buf
, 
buf
, 
size
);

525 
	}
}

527 
	$ñf_ªl_gë_symbﬁ
(
mem_ehdr
 *
ehdr
,

528 c⁄° *
«me
, *
buf
, 
size_t
 
size
)

530 c⁄° *
sym_buf
;

531 
mem_shdr
 *
shdr
;

532 
mem_sym
 
sym
;

533 
ªsu…
;

535 
ªsu…
 = 
	`ñf_ªl_föd_symbﬁ
(
ehdr
, 
«me
, &
sym
);

536 i‡(
ªsu…
 < 0) {

537 
	`dõ
("Symbﬁ: %†nŸ found c™nŸ gë\n", 
«me
);

539 i‡(
sym
.
°_size
 !
size
) {

540 
	`dõ
("Symbol: %s has size: %lldÇot %zd\n",

541 
«me
, 
sym
.
°_size
, 
size
);

543 
shdr
 = &
ehdr
->
e_shdr
[
sym
.
°_shndx
];

544 i‡(
shdr
->
sh_ty≥
 =
SHT_NOBITS
) {

545 
	`dõ
("Symbﬁ: %†i†öá bs†£˘i⁄ c™nŸ së\n", 
«me
);

547 
sym_buf
 = 
shdr
->
sh_d©a
 + 
sym
.
°_vÆue
;

548 
	`mem˝y
(
buf
, 
sym_buf
,
size
);

549 
	}
}

	@kexec/kexec-elf.c

1 
	~<limôs.h
>

2 
	~<°döt.h
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~<î∫o.h
>

6 
	~<°dlib.h
>

7 
	~"ñf.h
"

8 
	~<boŸ/ñf_boŸ.h
>

9 
	~"kexec.h
"

10 
	~"kexec-ñf.h
"

11 
	~"¸ashdump.h
"

13 c⁄° 
	g¥obe_debug
 = 0;

15 
uöt16_t
 
	$ñf16_to_˝u
(c⁄° 
mem_ehdr
 *
ehdr
, 
uöt16_t
 
vÆue
)

17 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2LSB
) {

18 
vÆue
 = 
	`À16_to_˝u
(value);

20 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2MSB
) {

21 
vÆue
 = 
	`be16_to_˝u
(value);

23  
vÆue
;

24 
	}
}

26 
uöt32_t
 
	$ñf32_to_˝u
(c⁄° 
mem_ehdr
 *
ehdr
, 
uöt32_t
 
vÆue
)

28 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2LSB
) {

29 
vÆue
 = 
	`À32_to_˝u
(value);

31 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2MSB
) {

32 
vÆue
 = 
	`be32_to_˝u
(value);

34  
vÆue
;

35 
	}
}

37 
uöt64_t
 
	$ñf64_to_˝u
(c⁄° 
mem_ehdr
 *
ehdr
, 
uöt64_t
 
vÆue
)

39 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2LSB
) {

40 
vÆue
 = 
	`À64_to_˝u
(value);

42 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2MSB
) {

43 
vÆue
 = 
	`be64_to_˝u
(value);

45  
vÆue
;

46 
	}
}

48 
uöt16_t
 
	$˝u_to_ñf16
(c⁄° 
mem_ehdr
 *
ehdr
, 
uöt16_t
 
vÆue
)

50 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2LSB
) {

51 
vÆue
 = 
	`˝u_to_À16
(value);

53 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2MSB
) {

54 
vÆue
 = 
	`˝u_to_be16
(value);

56  
vÆue
;

57 
	}
}

59 
uöt32_t
 
	$˝u_to_ñf32
(c⁄° 
mem_ehdr
 *
ehdr
, 
uöt32_t
 
vÆue
)

61 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2LSB
) {

62 
vÆue
 = 
	`˝u_to_À32
(value);

64 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2MSB
) {

65 
vÆue
 = 
	`˝u_to_be32
(value);

67  
vÆue
;

68 
	}
}

70 
uöt64_t
 
	$˝u_to_ñf64
(c⁄° 
mem_ehdr
 *
ehdr
, 
uöt64_t
 
vÆue
)

72 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2LSB
) {

73 
vÆue
 = 
	`˝u_to_À64
(value);

75 i‡(
ehdr
->
ei_d©a
 =
ELFDATA2MSB
) {

76 
vÆue
 = 
	`˝u_to_be64
(value);

78  
vÆue
;

79 
	}
}

81 
	#ELF32_MAX
 0xffffffff

	)

82 
	#ELF64_MAX
 0xffffffffffffffff

	)

83 #i‡
ELF64_MAX
 > 
ULONG_MAX


84 #unde‡
ELF64_MAX


85 
	#ELF64_MAX
 
ULONG_MAX


	)

88 
	$ñf_max_addr
(c⁄° 
mem_ehdr
 *
ehdr
)

90 
max_addr
 = 0;

91 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

92 
max_addr
 = 
ELF32_MAX
;

94 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

95 
max_addr
 = 
ELF64_MAX
;

97  
max_addr
;

98 
	}
}

99 
	$buûd_mem_ñf32_ehdr
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
)

101 
Elf32_Ehdr
 
Àhdr
;

102 i‡((
uötmax_t
)
Àn
 < (uötmax_t)(
Àhdr
)) {

104 i‡(
¥obe_debug
) {

105 
	`Ârötf
(
°dîr
, "Buffer isÅo smallÅo hold ELF header\n");

109 
	`mem˝y
(&
Àhdr
, 
buf
, (lehdr));

110 i‡(
	`ñf16_to_˝u
(
ehdr
, 
Àhdr
.
e_ehsize
Ë!(
Elf32_Ehdr
)) {

112 i‡(
¥obe_debug
) {

113 
	`Ârötf
(
°dîr
, "Bad ELF header size\n");

117 i‡(
	`ñf32_to_˝u
(
ehdr
, 
Àhdr
.
e_íåy
Ë> 
UINT32_MAX
) {

119 i‡(
¥obe_debug
) {

120 
	`Ârötf
(
°dîr
, "ELFÉ_entryÅoÜarge\n");

124 i‡(
	`ñf32_to_˝u
(
ehdr
, 
Àhdr
.
e_phoff
Ë> 
UINT32_MAX
) {

126 i‡(
¥obe_debug
) {

127 
	`Ârötf
(
°dîr
, "ELFÉ_phoffÅoÜarge\n");

131 i‡(
	`ñf32_to_˝u
(
ehdr
, 
Àhdr
.
e_shoff
Ë> 
UINT32_MAX
) {

133 i‡(
¥obe_debug
) {

134 
	`Ârötf
(
°dîr
, "ELFÉ_shoffÅoÜarge\n");

138 
ehdr
->
e_ty≥
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_type);

139 
ehdr
->
e_machöe
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_machine);

140 
ehdr
->
e_vîsi⁄
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_version);

141 
ehdr
->
e_íåy
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_entry);

142 
ehdr
->
e_phoff
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_phoff);

143 
ehdr
->
e_shoff
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_shoff);

144 
ehdr
->
e_Êags
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_flags);

145 
ehdr
->
e_phnum
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_phnum);

146 
ehdr
->
e_shnum
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_shnum);

147 
ehdr
->
e_sh°∫dx
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_shstrndx);

149 i‡((
ehdr
->
e_phnum
 > 0) &&

150 (
	`ñf16_to_˝u
(
ehdr
, 
Àhdr
.
e_phítsize
Ë!(
Elf32_Phdr
)))

153 i‡(
¥obe_debug
) {

154 
	`Ârötf
(
°dîr
, "ELF badÖrogram header size\n");

158 i‡((
ehdr
->
e_shnum
 > 0) &&

159 (
	`ñf16_to_˝u
(
ehdr
, 
Àhdr
.
e_shítsize
Ë!(
Elf32_Shdr
)))

162 i‡(
¥obe_debug
) {

163 
	`Ârötf
(
°dîr
, "ELF bad section header size\n");

169 
	}
}

171 
	$buûd_mem_ñf64_ehdr
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
)

173 
Elf64_Ehdr
 
Àhdr
;

174 i‡((
uötmax_t
)
Àn
 < (uötmax_t)(
Àhdr
)) {

176 i‡(
¥obe_debug
) {

177 
	`Ârötf
(
°dîr
, "Buffer isÅo smallÅo hold ELF header\n");

181 
	`mem˝y
(&
Àhdr
, 
buf
, (lehdr));

182 i‡(
	`ñf16_to_˝u
(
ehdr
, 
Àhdr
.
e_ehsize
Ë!(
Elf64_Ehdr
)) {

184 i‡(
¥obe_debug
) {

185 
	`Ârötf
(
°dîr
, "Bad ELF header size\n");

189 i‡(
	`ñf32_to_˝u
(
ehdr
, 
Àhdr
.
e_íåy
Ë> 
UINT32_MAX
) {

191 i‡(
¥obe_debug
) {

192 
	`Ârötf
(
°dîr
, "ELFÉ_entryÅoÜarge\n");

196 i‡(
	`ñf32_to_˝u
(
ehdr
, 
Àhdr
.
e_phoff
Ë> 
UINT32_MAX
) {

198 i‡(
¥obe_debug
) {

199 
	`Ârötf
(
°dîr
, "ELFÉ_phoffÅoÜarge\n");

203 i‡(
	`ñf32_to_˝u
(
ehdr
, 
Àhdr
.
e_shoff
Ë> 
UINT32_MAX
) {

205 i‡(
¥obe_debug
) {

206 
	`Ârötf
(
°dîr
, "ELFÉ_shoffÅoÜarge\n");

210 
ehdr
->
e_ty≥
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_type);

211 
ehdr
->
e_machöe
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_machine);

212 
ehdr
->
e_vîsi⁄
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_version);

213 
ehdr
->
e_íåy
 = 
	`ñf64_to_˝u
”hdr, 
Àhdr
.e_entry);

214 
ehdr
->
e_phoff
 = 
	`ñf64_to_˝u
”hdr, 
Àhdr
.e_phoff);

215 
ehdr
->
e_shoff
 = 
	`ñf64_to_˝u
”hdr, 
Àhdr
.e_shoff);

216 
ehdr
->
e_Êags
 = 
	`ñf32_to_˝u
”hdr, 
Àhdr
.e_flags);

217 
ehdr
->
e_phnum
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_phnum);

218 
ehdr
->
e_shnum
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_shnum);

219 
ehdr
->
e_sh°∫dx
 = 
	`ñf16_to_˝u
”hdr, 
Àhdr
.e_shstrndx);

221 i‡((
ehdr
->
e_phnum
 > 0) &&

222 (
	`ñf16_to_˝u
(
ehdr
, 
Àhdr
.
e_phítsize
Ë!(
Elf64_Phdr
)))

225 i‡(
¥obe_debug
) {

226 
	`Ârötf
(
°dîr
, "ELF badÖrogram header size\n");

230 i‡((
ehdr
->
e_shnum
 > 0) &&

231 (
	`ñf16_to_˝u
(
ehdr
, 
Àhdr
.
e_shítsize
Ë!(
Elf64_Shdr
)))

234 i‡(
¥obe_debug
) {

235 
	`Ârötf
(
°dîr
, "ELF bad section header size\n");

241 
	}
}

243 
	$buûd_mem_ehdr
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
)

245 
e_idít
[
EI_NIDENT
];

246 
ªsu…
;

247 
	`mem£t
(
ehdr
, 0, (*ehdr));

248 i‡((
uötmax_t
)
Àn
 < (uötmax_t)(
e_idít
)) {

250 i‡(
¥obe_debug
) {

251 
	`Ârötf
(
°dîr
, "Buffer isÅo smallÅo hold ELFÉ_ident\n");

255 
	`mem˝y
(
e_idít
, 
buf
, (e_ident));

256 i‡(
	`memcmp
(
e_idít
, 
ELFMAG
, 
SELFMAG
) != 0) {

258 i‡(
¥obe_debug
) {

259 
	`Ârötf
(
°dîr
, "NO ELF header magic\n");

263 
ehdr
->
ei_˛ass
 = 
e_idít
[
EI_CLASS
];

264 
ehdr
->
ei_d©a
 = 
e_idít
[
EI_DATA
];

265 i‡–(
ehdr
->
ei_˛ass
 !
ELFCLASS32
) &&

266 (
ehdr
->
ei_˛ass
 !
ELFCLASS64
))

269 i‡(
¥obe_debug
) {

270 
	`Ârötf
(
°dîr
, "Notá supported ELF class\n");

274 i‡–(
ehdr
->
ei_d©a
 !
ELFDATA2LSB
) &&

275 (
ehdr
->
ei_d©a
 !
ELFDATA2MSB
))

278 i‡(
¥obe_debug
) {

279 
	`Ârötf
(
°dîr
, "Notá supported ELF data format\n");

284 
ªsu…
 = -1;

285 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

286 
ªsu…
 = 
	`buûd_mem_ñf32_ehdr
(
buf
, 
Àn
, 
ehdr
);

288 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

289 
ªsu…
 = 
	`buûd_mem_ñf64_ehdr
(
buf
, 
Àn
, 
ehdr
);

291 i‡(
ªsu…
 < 0) {

292  
ªsu…
;

294 i‡((
e_idít
[
EI_VERSION
] !
EV_CURRENT
) ||

295 (
ehdr
->
e_vîsi⁄
 !
EV_CURRENT
))

297 i‡(
¥obe_debug
) {

298 
	`Ârötf
(
°dîr
, "Unknown ELF version\n");

304 
	}
}

306 
	$buûd_mem_ñf32_phdr
(c⁄° *
buf
, 
mem_ehdr
 *
ehdr
, 
idx
)

308 
mem_phdr
 *
phdr
;

309 c⁄° *
pbuf
;

310 
Elf32_Phdr
 
Õhdr
;

311 
pbuf
 = 
buf
 + 
ehdr
->
e_phoff
 + (
idx
 * (
Õhdr
));

312 
phdr
 = &
ehdr
->
e_phdr
[
idx
];

313 
	`mem˝y
(&
Õhdr
, 
pbuf
, (lphdr));

315 i‡–(
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.
p_fûesz
Ë> 
UINT32_MAX
) ||

316 (
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.
p_memsz
Ë> 
UINT32_MAX
) ||

317 (
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.
p_off£t
Ë> 
UINT32_MAX
) ||

318 (
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.
p_∑ddr
Ë> 
UINT32_MAX
) ||

319 (
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.
p_vaddr
Ë> 
UINT32_MAX
) ||

320 (
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.
p_Æign
Ë> 
UINT32_MAX
))

322 
	`Ârötf
(
°dîr
, "Program segment size out ofÑange\n");

326 
phdr
->
p_ty≥
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_type);

327 
phdr
->
p_∑ddr
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_paddr);

328 
phdr
->
p_vaddr
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_vaddr);

329 
phdr
->
p_fûesz
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_filesz);

330 
phdr
->
p_memsz
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_memsz);

331 
phdr
->
p_off£t
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_offset);

332 
phdr
->
p_Êags
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_flags);

333 
phdr
->
p_Æign
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_align);

336 
	}
}

338 
	$buûd_mem_ñf64_phdr
(c⁄° *
buf
, 
mem_ehdr
 *
ehdr
, 
idx
)

340 
mem_phdr
 *
phdr
;

341 c⁄° *
pbuf
;

342 
Elf64_Phdr
 
Õhdr
;

343 
pbuf
 = 
buf
 + 
ehdr
->
e_phoff
 + (
idx
 * (
Õhdr
));

344 
phdr
 = &
ehdr
->
e_phdr
[
idx
];

345 
	`mem˝y
(&
Õhdr
, 
pbuf
, (lphdr));

347 i‡–(
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.
p_fûesz
Ë> 
UINT64_MAX
) ||

348 (
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.
p_memsz
Ë> 
UINT64_MAX
) ||

349 (
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.
p_off£t
Ë> 
UINT64_MAX
) ||

350 (
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.
p_∑ddr
Ë> 
UINT64_MAX
) ||

351 (
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.
p_vaddr
Ë> 
UINT64_MAX
) ||

352 (
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.
p_Æign
Ë> 
UINT64_MAX
))

354 
	`Ârötf
(
°dîr
, "Program segment size out ofÑange\n");

358 
phdr
->
p_ty≥
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_type);

359 
phdr
->
p_∑ddr
 = 
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.p_paddr);

360 
phdr
->
p_vaddr
 = 
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.p_vaddr);

361 
phdr
->
p_fûesz
 = 
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.p_filesz);

362 
phdr
->
p_memsz
 = 
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.p_memsz);

363 
phdr
->
p_off£t
 = 
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.p_offset);

364 
phdr
->
p_Êags
 = 
	`ñf32_to_˝u
(
ehdr
, 
Õhdr
.p_flags);

365 
phdr
->
p_Æign
 = 
	`ñf64_to_˝u
(
ehdr
, 
Õhdr
.p_align);

368 
	}
}

370 
	$buûd_mem_phdrs
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

371 
uöt32_t
 
Êags
)

373 
size_t
 
phdr_size
, 
mem_phdr_size
, 
i
;

379 
phdr_size
 = 0;

380 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

381 
phdr_size
 = (
Elf32_Phdr
);

383 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

384 
phdr_size
 = (
Elf64_Phdr
);

387 
	`Ârötf
(
°dîr
, "InvalidÉi_class?\n");

390 
phdr_size
 *
ehdr
->
e_phnum
;

391 i‡((
uötmax_t
)(
ehdr
->
e_phoff
 + 
phdr_size
Ë> (uötmax_t)
Àn
) {

393 i‡(
¥obe_debug
 || (
Êags
 & 
ELF_SKIP_FILESZ_CHECK
)) {

394 
	`Ârötf
(
°dîr
, "ELFÖrogram headersÅruncated"

396 (
uötmax_t
)
Àn
,

397 (
uötmax_t
)(
ehdr
->
e_phoff
 + 
phdr_size
));

403 
mem_phdr_size
 = (
ehdr
->
e_phdr
[0]Ë*Éhdr->
e_phnum
;

404 
ehdr
->
e_phdr
 = 
	`xmÆloc
(
mem_phdr_size
);

406 
i
 = 0; i < 
ehdr
->
e_phnum
; i++) {

407 
mem_phdr
 *
phdr
;

408 
ªsu…
;

409 
ªsu…
 = -1;

410 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

411 
ªsu…
 = 
	`buûd_mem_ñf32_phdr
(
buf
, 
ehdr
, 
i
);

414 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

415 
ªsu…
 = 
	`buûd_mem_ñf64_phdr
(
buf
, 
ehdr
, 
i
);

417 i‡(
ªsu…
 < 0) {

418  
ªsu…
;

425 
phdr
 = &
ehdr
->
e_phdr
[
i
];

426 i‡(!(
Êags
 & 
ELF_SKIP_FILESZ_CHECK
)

427 && (
uötmax_t
)(
phdr
->
p_off£t
 +Öhdr->
p_fûesz
) >

428 (
uötmax_t
)
Àn
) {

430 i‡(
¥obe_debug
) {

431 
	`Ârötf
(
°dîr
, "ELF segmentÇot in file\n");

435 i‡((
phdr
->
p_∑ddr
 +Öhdr->
p_memsz
) <Öhdr->p_paddr) {

437 i‡(
¥obe_debug
) {

438 
	`Ârötf
(
°dîr
, "ELFáddress wrapáround\n");

443 
phdr
->
p_d©a
 = 
buf
 +Öhdr->
p_off£t
;

446 
	}
}

448 
	$buûd_mem_ñf32_shdr
(c⁄° *
buf
, 
mem_ehdr
 *
ehdr
, 
idx
)

450 
mem_shdr
 *
shdr
;

451 c⁄° *
sbuf
;

452 
size_ok
;

453 
Elf32_Shdr
 
lshdr
;

454 
sbuf
 = 
buf
 + 
ehdr
->
e_shoff
 + (
idx
 * (
lshdr
));

455 
shdr
 = &
ehdr
->
e_shdr
[
idx
];

456 
	`mem˝y
(&
lshdr
, 
sbuf
, (lshdr));

458 i‡–(
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.
sh_Êags
Ë> 
UINT32_MAX
) ||

459 (
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.
sh_addr
Ë> 
UINT32_MAX
) ||

460 (
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.
sh_off£t
Ë> 
UINT32_MAX
) ||

461 (
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.
sh_size
Ë> 
UINT32_MAX
) ||

462 (
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.
sh_addølign
Ë> 
UINT32_MAX
) ||

463 (
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.
sh_ítsize
Ë> 
UINT32_MAX
))

465 
	`Ârötf
(
°dîr
, "Program section size out ofÑange\n");

469 
shdr
->
sh_«me
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_name);

470 
shdr
->
sh_ty≥
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_type);

471 
shdr
->
sh_Êags
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_flags);

472 
shdr
->
sh_addr
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_addr);

473 
shdr
->
sh_off£t
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_offset);

474 
shdr
->
sh_size
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_size);

475 
shdr
->
sh_lök
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_link);

476 
shdr
->
sh_öfo
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_info);

477 
shdr
->
sh_addølign
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_addralign);

478 
shdr
->
sh_ítsize
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_entsize);

481 
size_ok
 = 0;

482 
shdr
->
sh_ty≥
) {

483 
SHT_SYMTAB
:

484 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf32_Sym
);

486 
SHT_RELA
:

487 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf32_Rña
);

489 
SHT_DYNAMIC
:

490 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf32_Dyn
);

492 
SHT_REL
:

493 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf32_Rñ
);

495 
SHT_NOTE
:

496 
SHT_NULL
:

497 
SHT_PROGBITS
:

498 
SHT_HASH
:

499 
SHT_NOBITS
:

506 
size_ok
 = 1;

509 i‡(!
size_ok
) {

510 
	`Ârötf
(
°dîr
, "Bad section header(%x)Éntsize: %lld\n",

511 
shdr
->
sh_ty≥
, shdr->
sh_ítsize
);

515 
	}
}

517 
	$buûd_mem_ñf64_shdr
(c⁄° *
buf
, 
mem_ehdr
 *
ehdr
, 
idx
)

519 
mem_shdr
 *
shdr
;

520 c⁄° *
sbuf
;

521 
size_ok
;

522 
Elf64_Shdr
 
lshdr
;

523 
sbuf
 = 
buf
 + 
ehdr
->
e_shoff
 + (
idx
 * (
lshdr
));

524 
shdr
 = &
ehdr
->
e_shdr
[
idx
];

525 
	`mem˝y
(&
lshdr
, 
sbuf
, (lshdr));

527 i‡–(
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.
sh_Êags
Ë> 
UINT64_MAX
) ||

528 (
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.
sh_addr
Ë> 
UINT64_MAX
) ||

529 (
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.
sh_off£t
Ë> 
UINT64_MAX
) ||

530 (
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.
sh_size
Ë> 
UINT64_MAX
) ||

531 (
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.
sh_addølign
Ë> 
UINT64_MAX
) ||

532 (
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.
sh_ítsize
Ë> 
UINT64_MAX
))

534 
	`Ârötf
(
°dîr
, "Program section size out ofÑange\n");

538 
shdr
->
sh_«me
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_name);

539 
shdr
->
sh_ty≥
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_type);

540 
shdr
->
sh_Êags
 = 
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.sh_flags);

541 
shdr
->
sh_addr
 = 
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.sh_addr);

542 
shdr
->
sh_off£t
 = 
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.sh_offset);

543 
shdr
->
sh_size
 = 
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.sh_size);

544 
shdr
->
sh_lök
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_link);

545 
shdr
->
sh_öfo
 = 
	`ñf32_to_˝u
(
ehdr
, 
lshdr
.sh_info);

546 
shdr
->
sh_addølign
 = 
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.sh_addralign);

547 
shdr
->
sh_ítsize
 = 
	`ñf64_to_˝u
(
ehdr
, 
lshdr
.sh_entsize);

550 
size_ok
 = 0;

551 
shdr
->
sh_ty≥
) {

552 
SHT_SYMTAB
:

553 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf64_Sym
);

555 
SHT_RELA
:

556 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf64_Rña
);

558 
SHT_DYNAMIC
:

559 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf64_Dyn
);

561 
SHT_REL
:

562 
size_ok
 = 
shdr
->
sh_ítsize
 =(
Elf64_Rñ
);

564 
SHT_NOTE
:

565 
SHT_NULL
:

566 
SHT_PROGBITS
:

567 
SHT_HASH
:

568 
SHT_NOBITS
:

575 
size_ok
 = 1;

578 i‡(!
size_ok
) {

579 
	`Ârötf
(
°dîr
, "Bad section header(%x)Éntsize: %lld\n",

580 
shdr
->
sh_ty≥
, shdr->
sh_ítsize
);

584 
	}
}

586 
	$buûd_mem_shdrs
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

587 
uöt32_t
 
Êags
)

589 
size_t
 
shdr_size
, 
mem_shdr_size
, 
i
;

595 
shdr_size
 = 0;

596 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

597 
shdr_size
 = (
Elf32_Shdr
);

599 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

600 
shdr_size
 = (
Elf64_Shdr
);

603 
	`Ârötf
(
°dîr
, "InvalidÉi_class?\n");

606 
shdr_size
 *
ehdr
->
e_shnum
;

607 i‡((
uötmax_t
)(
ehdr
->
e_shoff
 + 
shdr_size
Ë> (uötmax_t)
Àn
) {

609 i‡(
¥obe_debug
) {

610 
	`Ârötf
(
°dîr
, "ELF section header doesÇot fit in file\n");

616 
mem_shdr_size
 = (
ehdr
->
e_shdr
[0]Ë*Éhdr->
e_shnum
;

617 
ehdr
->
e_shdr
 = 
	`xmÆloc
(
mem_shdr_size
);

619 
i
 = 0; i < 
ehdr
->
e_shnum
; i++) {

620 
mem_shdr
 *
shdr
;

621 
ªsu…
;

622 
ªsu…
 = -1;

623 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS32
) {

624 
ªsu…
 = 
	`buûd_mem_ñf32_shdr
(
buf
, 
ehdr
, 
i
);

626 i‡(
ehdr
->
ei_˛ass
 =
ELFCLASS64
) {

627 
ªsu…
 = 
	`buûd_mem_ñf64_shdr
(
buf
, 
ehdr
, 
i
);

629 i‡(
ªsu…
 < 0) {

630  
ªsu…
;

636 
shdr
 = &
ehdr
->
e_shdr
[
i
];

637 i‡(!(
Êags
 & 
ELF_SKIP_FILESZ_CHECK
)

638 && (
shdr
->
sh_ty≥
 !
SHT_NOBITS
)

639 && (
uötmax_t
)(
shdr
->
sh_off£t
 + shdr->
sh_size
) >

640 (
uötmax_t
)
Àn
) {

642 i‡(
¥obe_debug
) {

643 
	`Ârötf
(
°dîr
, "ELF section %zdÇot in file\n",

644 
i
);

648 i‡((
shdr
->
sh_addr
 + shdr->
sh_size
) < shdr->sh_addr) {

650 i‡(
¥obe_debug
) {

651 
	`Ârötf
(
°dîr
, "ELFáddress wrapáround\n");

656 
shdr
->
sh_d©a
 = (*)(
buf
 + shdr->
sh_off£t
);

659 
	}
}

661 
	$ªad_nhdr
(c⁄° 
mem_ehdr
 *
ehdr
,

662 
ElfNN_Nhdr
 *
hdr
, c⁄° *
nŸe
)

664 
	`mem˝y
(
hdr
, 
nŸe
, (*hdr));

665 
hdr
->
n_«mesz
 = 
	`ñf32_to_˝u
(
ehdr
, hdr->n_namesz);

666 
hdr
->
n_descsz
 = 
	`ñf32_to_˝u
(
ehdr
, hdr->n_descsz);

667 
hdr
->
n_ty≥
 = 
	`ñf32_to_˝u
(
ehdr
, hdr->n_type);

669 
	}
}

670 
	$buûd_mem_nŸes
(
mem_ehdr
 *
ehdr
)

672 c⁄° *
nŸe_°¨t
, *
nŸe_íd
, *
nŸe
;

673 
size_t
 
nŸe_size
, 
i
;

675 
nŸe_°¨t
 = 
nŸe_íd
 = 
NULL
;

676 
i
 = 0; !
nŸe_°¨t
 && (ò< 
ehdr
->
e_phnum
); i++) {

677 
mem_phdr
 *
phdr
 = &
ehdr
->
e_phdr
[
i
];

685 i‡(
phdr
->
p_ty≥
 =
PT_NOTE
 &&Öhdr->
p_off£t
) {

686 
nŸe_°¨t
 = (*)
phdr
->
p_d©a
;

687 
nŸe_íd
 = 
nŸe_°¨t
 + 
phdr
->
p_fûesz
;

690 
i
 = 0; !
nŸe_°¨t
 && (ò< 
ehdr
->
e_shnum
); i++) {

691 
mem_shdr
 *
shdr
 = &
ehdr
->
e_shdr
[
i
];

692 i‡(
shdr
->
sh_ty≥
 =
SHT_NOTE
) {

693 
nŸe_°¨t
 = 
shdr
->
sh_d©a
;

694 
nŸe_íd
 = 
nŸe_°¨t
 + 
shdr
->
sh_size
;

697 i‡(!
nŸe_°¨t
) {

702 
ehdr
->
e_nŸíum
 = 0;

703 
nŸe
 = 
nŸe_°¨t
;ÇŸê< 
nŸe_íd
;ÇŸe+
nŸe_size
) {

704 
ElfNN_Nhdr
 
hdr
;

705 
	`ªad_nhdr
(
ehdr
, &
hdr
, 
nŸe
);

706 
nŸe_size
 = (
hdr
);

707 
nŸe_size
 +
	`_ALIGN
(
hdr
.
n_«mesz
, 4);

708 
nŸe_size
 +
	`_ALIGN
(
hdr
.
n_descsz
, 4);

709 
ehdr
->
e_nŸíum
 += 1;

712 
ehdr
->
e_nŸe
 = 
	`xmÆloc
((*ehdr->e_nŸeË*Éhdr->
e_nŸíum
);

713 
i
 = 0, 
nŸe
 = 
nŸe_°¨t
;ÇŸê< 
nŸe_íd
;ÇŸe+
nŸe_size
, i++) {

714 c⁄° *
«me
, *
desc
;

715 
ElfNN_Nhdr
 
hdr
;

716 
	`ªad_nhdr
(
ehdr
, &
hdr
, 
nŸe
);

717 
nŸe_size
 = (
hdr
);

718 
«me
 = 
nŸe
 + 
nŸe_size
;

719 
nŸe_size
 +
	`_ALIGN
(
hdr
.
n_«mesz
, 4);

720 
desc
 = 
nŸe
 + 
nŸe_size
;

721 
nŸe_size
 +
	`_ALIGN
(
hdr
.
n_descsz
, 4);

723 i‡((
hdr
.
n_«mesz
 !0Ë&& (
«me
[hdr.n_namesz -1] != '\0')) {

730 
	`Ârötf
(
°dîr
, "Warning: Elf NoteÇame isÇotÇull "

733 
ehdr
->
e_nŸe
[
i
].
n_ty≥
 = 
hdr
.n_type;

734 
ehdr
->
e_nŸe
[
i
].
n_«me
 = (*)
«me
;

735 
ehdr
->
e_nŸe
[
i
].
n_desc
 = 
desc
;

736 
ehdr
->
e_nŸe
[
i
].
n_descsz
 = 
hdr
.n_descsz;

740 
	}
}

742 
	$‰ì_ñf_öfo
(
mem_ehdr
 *
ehdr
)

744 
	`‰ì
(
ehdr
->
e_phdr
);

745 
	`‰ì
(
ehdr
->
e_shdr
);

746 
	`mem£t
(
ehdr
, 0, (*ehdr));

747 
	}
}

749 
	$buûd_ñf_öfo
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

750 
uöt32_t
 
Êags
)

752 
ªsu…
;

753 
ªsu…
 = 
	`buûd_mem_ehdr
(
buf
, 
Àn
, 
ehdr
);

754 i‡(
ªsu…
 < 0) {

755  
ªsu…
;

757 i‡((
ehdr
->
e_phoff
 > 0Ë&& (ehdr->
e_phnum
 > 0)) {

758 
ªsu…
 = 
	`buûd_mem_phdrs
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

759 i‡(
ªsu…
 < 0) {

760 
	`‰ì_ñf_öfo
(
ehdr
);

761  
ªsu…
;

764 i‡((
ehdr
->
e_shoff
 > 0Ë&& (ehdr->
e_shnum
 > 0)) {

765 
ªsu…
 = 
	`buûd_mem_shdrs
(
buf
, 
Àn
, 
ehdr
, 
Êags
);

766 i‡(
ªsu…
 < 0) {

767 
	`‰ì_ñf_öfo
(
ehdr
);

768  
ªsu…
;

771 
ªsu…
 = 
	`buûd_mem_nŸes
(
ehdr
);

772 i‡(
ªsu…
 < 0) {

773 
	`‰ì_ñf_öfo
(
ehdr
);

774  
ªsu…
;

777 
	}
}

	@kexec/kexec-elf.h

1 #i‚de‡
KEXEC_ELF_H


2 
	#KEXEC_ELF_H


	)

4 
	~<°döt.h
>

5 
	~<sys/ty≥s.h
>

7 
	gkexec_öfo
;

9 
	smem_ehdr
 {

10 
	mei_˛ass
;

11 
	mei_d©a
;

12 
	me_ty≥
;

13 
	me_machöe
;

14 
	me_vîsi⁄
;

15 
	me_Êags
;

16 
	me_phnum
;

17 
	me_shnum
;

18 
	me_sh°∫dx
;

19 
	me_íåy
;

20 
	me_phoff
;

21 
	me_shoff
;

22 
	me_nŸíum
;

23 
mem_phdr
 *
	me_phdr
;

24 
mem_shdr
 *
	me_shdr
;

25 
mem_nŸe
 *
	me_nŸe
;

26 
	mªl_addr
, 
	mªl_size
;

29 
	smem_phdr
 {

30 
	mp_∑ddr
;

31 
	mp_vaddr
;

32 
	mp_fûesz
;

33 
	mp_memsz
;

34 
	mp_off£t
;

35 c⁄° *
	mp_d©a
;

36 
	mp_ty≥
;

37 
	mp_Êags
;

38 
	mp_Æign
;

41 
	smem_shdr
 {

42 
	msh_«me
;

43 
	msh_ty≥
;

44 
	msh_Êags
;

45 
	msh_addr
;

46 
	msh_off£t
;

47 
	msh_size
;

48 
	msh_lök
;

49 
	msh_öfo
;

50 
	msh_addølign
;

51 
	msh_ítsize
;

52 c⁄° *
	msh_d©a
;

55 
	smem_sym
 {

56 
	m°_«me
;

57 
	m°_öfo
;

58 
	m°_Ÿhî
;

59 
	m°_shndx
;

60 
	m°_vÆue
;

61 
	m°_size
;

64 
	smem_ªœ
 {

65 
	mr_off£t
;

66 
	mr_sym
;

67 
	mr_ty≥
;

68 
	mr_addíd
;

71 
	smem_nŸe
 {

72 
	mn_ty≥
;

73 
	mn_descsz
;

74 c⁄° *
	mn_«me
;

75 c⁄° *
	mn_desc
;

83 
uöt32_t
 
	mn_«mesz
;

84 
uöt32_t
 
	mn_descsz
;

85 
uöt32_t
 
	mn_ty≥
;

86 } 
	tElfNN_Nhdr
;

90 
	#ELF_SKIP_FILESZ_CHECK
 0x00000001

	)

92 
‰ì_ñf_öfo
(
mem_ehdr
 *
ehdr
);

93 
buûd_ñf_öfo
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

94 
uöt32_t
 
Êags
);

95 
buûd_ñf_exec_öfo
(c⁄° *
buf
, 
off_t
 
Àn
,

96 
mem_ehdr
 *
ehdr
, 
uöt32_t
 
Êags
);

97 
buûd_ñf_ªl_öfo
(c⁄° *
buf
, 
off_t
 
Àn
, 
mem_ehdr
 *
ehdr
,

98 
uöt32_t
 
Êags
);

100 
buûd_ñf_c‹e_öfo
(c⁄° *
buf
, 
off_t
 
Àn
,

101 
mem_ehdr
 *
ehdr
, 
uöt32_t
 
Êags
);

102 
ñf_exec_lﬂd
(
mem_ehdr
 *
ehdr
, 
kexec_öfo
 *
öfo
);

103 
ñf_ªl_lﬂd
(
mem_ehdr
 *
ehdr
, 
kexec_öfo
 *
öfo
,

104 
mö
, 
max
, 
íd
);

106 
ñf_exec_buûd_lﬂd
(
kexec_öfo
 *
öfo
, 
mem_ehdr
 *
ehdr
,

107 c⁄° *
buf
, 
off_t
 
Àn
, 
uöt32_t
 
Êags
);

108 
ñf_ªl_buûd_lﬂd
(
kexec_öfo
 *
öfo
, 
mem_ehdr
 *
ehdr
,

109 c⁄° *
buf
, 
off_t
 
Àn
, 
mö
, 
max
,

110 
íd
, 
uöt32_t
 
Êags
);

112 
ñf_ªl_föd_symbﬁ
(
mem_ehdr
 *
ehdr
,

113 c⁄° *
«me
, 
mem_sym
 *
ªt_sym
);

114 
ñf_ªl_gë_addr
(
mem_ehdr
 *
ehdr
, c⁄° *
«me
);

115 
ñf_ªl_£t_symbﬁ
(
mem_ehdr
 *
ehdr
,

116 c⁄° *
«me
, c⁄° *
buf
, 
size_t
 
size
);

117 
ñf_ªl_gë_symbﬁ
(
mem_ehdr
 *
ehdr
,

118 c⁄° *
«me
, *
buf
, 
size_t
 
size
);

120 
uöt16_t
 
ñf16_to_˝u
(c⁄° 
mem_ehdr
 *
ehdr
, uöt16_à
vÆue
);

121 
uöt32_t
 
ñf32_to_˝u
(c⁄° 
mem_ehdr
 *
ehdr
, uöt32_à
vÆue
);

122 
uöt64_t
 
ñf64_to_˝u
(c⁄° 
mem_ehdr
 *
ehdr
, uöt64_à
vÆue
);

124 
uöt16_t
 
˝u_to_ñf16
(c⁄° 
mem_ehdr
 *
ehdr
, uöt16_à
vÆue
);

125 
uöt32_t
 
˝u_to_ñf32
(c⁄° 
mem_ehdr
 *
ehdr
, uöt32_à
vÆue
);

126 
uöt64_t
 
˝u_to_ñf64
(c⁄° 
mem_ehdr
 *
ehdr
, uöt64_à
vÆue
);

128 
ñf_max_addr
(c⁄° 
mem_ehdr
 *
ehdr
);

131 
machöe_vîify_ñf_ªl
(
mem_ehdr
 *
ehdr
);

132 
machöe_≠∂y_ñf_ªl
(
mem_ehdr
 *
ehdr
, 
r_ty≥
,

133 *
loˇti⁄
, 
addªss
, 
vÆue
);

	@kexec/kexec-iomem.c

1 
	#_GNU_SOURCE


	)

2 
	~<°dio.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

6 
	~<î∫o.h
>

7 
	~<limôs.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<uni°d.h
>

11 
	~<f˙é.h
>

12 
	~"kexec.h
"

13 
	~"¸ashdump.h
"

25 
kexec_iomem_f‹_óch_löe
(*
m©ch
,

26 (*
ˇŒback
)(*
d©a
,

27 
ƒ
,

28 *
°r
,

29 
ba£
,

30 
Àngth
),

31 *
d©a
)

33 c⁄° *
iomem
 = 
	`¥oc_iomem
();

34 
löe
[
MAX_LINE
];

35 
FILE
 *
Â
;

36 
°¨t
, 
íd
, 
size
;

37 *
°r
;

38 
c⁄sumed
;

39 
cou¡
;

40 
ƒ
 = 0;

42 
Â
 = 
	`f›í
(
iomem
, "r");

43 i‡(!
Â
)

44 
	`dõ
("C™nŸ o≥¿%s\n", 
iomem
);

46 
	`fgës
(
löe
, ÷öe), 
Â
) != 0) {

47 
cou¡
 = 
	`ssˇnf
(
löe
, "%Lx-%Lx : %n", &
°¨t
, &
íd
, &
c⁄sumed
);

48 i‡(
cou¡
 != 2)

50 
°r
 = 
löe
 + 
c⁄sumed
;

51 
size
 = 
íd
 - 
°¨t
 + 1;

52 i‡(!
m©ch
 || 
	`memcmp
(
°r
, m©ch, 
	`°æí
(match)) == 0) {

53 i‡(
ˇŒback


54 && 
	`ˇŒback
(
d©a
, 
ƒ
, 
°r
, 
°¨t
, 
size
) < 0) {

57 
ƒ
++;

61 
	`f˛o£
(
Â
);

63  
ƒ
;

64 
	}
}

66 
kexec_iomem_sögÀ_ˇŒback
(*
d©a
, 
ƒ
,

67 *
UNUSED
(
°r
),

68 
ba£
,

69 
Àngth
)

71 
mem‹y_ønge
 *
	gønge
 = 
d©a
;

73 i‡(
	gƒ
 == 0) {

74 
ønge
->
°¨t
 = 
ba£
;

75 
	gønge
->
	gíd
 = 
ba£
 + 
Àngth
 - 1;

81 
	$∑r£_iomem_sögÀ
(*
°r
, 
uöt64_t
 *
°¨t
, uöt64_à*
íd
)

83 
mem‹y_ønge
 
ønge
;

84 
ªt
;

86 
	`mem£t
(&
ønge
, 0, (range));

88 
ªt
 = 
	`kexec_iomem_f‹_óch_löe
(
°r
,

89 
kexec_iomem_sögÀ_ˇŒback
, &
ønge
);

91 i‡(
ªt
 == 1) {

92 i‡(
°¨t
)

93 *
°¨t
 = 
ønge
.start;

94 i‡(
íd
)

95 *
íd
 = 
ønge
.end;

97 
ªt
 = 0;

100 
ªt
 = -1;

102  
ªt
;

103 
	}
}

	@kexec/kexec-lzma.h

1 #i‚de‡
__KEXEC_LZMA_H


2 
	#__KEXEC_LZMA_H


	)

4 
	~<sys/ty≥s.h
>

6 *
lzma_decom¥ess_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
);

	@kexec/kexec-sha256.h

1 #i‚de‡
KEXEC_SHA256_H


2 
	#KEXEC_SHA256_H


	)

4 
	ssha256_ªgi⁄
 {

5 
uöt64_t
 
	m°¨t
;

6 
uöt64_t
 
	mÀn
;

9 
	#SHA256_REGIONS
 16

	)

	@kexec/kexec-syscall.h

1 #i‚de‡
KEXEC_SYSCALL_H


2 
	#KEXEC_SYSCALL_H


	)

4 
	#__LIBRARY__


	)

5 
	~<sys/sysˇŒ.h
>

6 
	~<uni°d.h
>

8 
	#LINUX_REBOOT_CMD_KEXEC_OLD
 0x81726354

	)

9 
	#LINUX_REBOOT_CMD_KEXEC_OLD2
 0x18263645

	)

10 
	#LINUX_REBOOT_CMD_KEXEC
 0x45584543

	)

12 #i‚de‡
__NR_kexec_lﬂd


13 #ifde‡
__i386__


14 
	#__NR_kexec_lﬂd
 283

	)

16 #ifde‡
__sh__


17 
	#__NR_kexec_lﬂd
 283

	)

19 #ifde‡
__¸is__


20 #i‚de‡
__NR_kexec_lﬂd


21 
	#__NR_kexec_lﬂd
 283

	)

24 #ifde‡
__ü64__


25 
	#__NR_kexec_lﬂd
 1268

	)

27 #ifde‡
__powîpc64__


28 
	#__NR_kexec_lﬂd
 268

	)

30 #ifde‡
__powîpc__


31 
	#__NR_kexec_lﬂd
 268

	)

33 #ifde‡
__x86_64__


34 
	#__NR_kexec_lﬂd
 246

	)

36 #ifde‡
__s390x__


37 
	#__NR_kexec_lﬂd
 277

	)

39 #ifde‡
__s390__


40 
	#__NR_kexec_lﬂd
 277

	)

42 #ifde‡
__¨m__


43 
	#__NR_kexec_lﬂd
 
__NR_SYSCALL_BASE
 + 347

	)

45 #i‡
deföed
(
__mùs__
)

46 
	#__NR_kexec_lﬂd
 4311

	)

48 #ifde‡
__m68k__


49 
	#__NR_kexec_lﬂd
 313

	)

51 #i‚de‡
__NR_kexec_lﬂd


52 #îr‹ 
Unknown
 
¥o˚ss‹
 
¨chôe˘uª
. 
Nìds
 
a
 
kexec_lﬂd
 
sysˇŒ
 
numbî
.

56 
	gkexec_£gmít
;

58 
ölöe
 
	$kexec_lﬂd
(*
íåy
, 
ƒ_£gmíts
,

59 
kexec_£gmít
 *
£gmíts
, 
Êags
)

61  (Ë
	`sysˇŒ
(
__NR_kexec_lﬂd
, 
íåy
, 
ƒ_£gmíts
, 
£gmíts
, 
Êags
);

62 
	}
}

64 
	#KEXEC_ON_CRASH
 0x00000001

	)

65 
	#KEXEC_PRESERVE_CONTEXT
 0x00000002

	)

66 
	#KEXEC_ARCH_MASK
 0xffff0000

	)

71 
	#KEXEC_ARCH_DEFAULT
 ( 0 << 16)

	)

72 
	#KEXEC_ARCH_386
 ( 3 << 16)

	)

73 
	#KEXEC_ARCH_68K
 ( 4 << 16)

	)

74 
	#KEXEC_ARCH_X86_64
 (62 << 16)

	)

75 
	#KEXEC_ARCH_PPC
 (20 << 16)

	)

76 
	#KEXEC_ARCH_PPC64
 (21 << 16)

	)

77 
	#KEXEC_ARCH_IA_64
 (50 << 16)

	)

78 
	#KEXEC_ARCH_ARM
 (40 << 16)

	)

79 
	#KEXEC_ARCH_S390
 (22 << 16)

	)

80 
	#KEXEC_ARCH_SH
 (42 << 16)

	)

81 
	#KEXEC_ARCH_MIPS_LE
 (10 << 16)

	)

82 
	#KEXEC_ARCH_MIPS
 ( 8 << 16)

	)

83 
	#KEXEC_ARCH_CRIS
 (76 << 16)

	)

85 
	#KEXEC_MAX_SEGMENTS
 16

	)

87 #ifde‡
__i386__


88 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_386


	)

90 #ifde‡
__sh__


91 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_SH


	)

93 #ifde‡
__¸is__


94 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_CRIS


	)

96 #ifde‡
__ü64__


97 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_IA_64


	)

99 #ifde‡
__powîpc64__


100 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_PPC64


	)

102 #ifde‡
__powîpc__


103 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_PPC


	)

106 #ifde‡
__x86_64__


107 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_X86_64


	)

109 #ifde‡
__s390x__


110 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_S390


	)

112 #ifde‡
__s390__


113 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_S390


	)

115 #ifde‡
__¨m__


116 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_ARM


	)

118 #i‡
deföed
(
__mùs__
)

119 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_MIPS


	)

121 #ifde‡
__m68k__


122 
	#KEXEC_ARCH_NATIVE
 
KEXEC_ARCH_68K


	)

	@kexec/kexec-uImage.c

1 
	#_GNU_SOURCE


	)

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<image.h
>

7 
	~<gë›t.h
>

8 
	~<¨ch/›ti⁄s.h
>

9 
	~"kexec.h
"

10 
	~<kexec-uImage.h
>

12 #ifde‡
HAVE_LIBZ


13 
	~<zlib.h
>

27 
	$uImage_¥obe
(c⁄° *
buf
, 
off_t
 
Àn
, 
¨ch
)

29 
image_hódî
 
hódî
;

30 #ifde‡
HAVE_LIBZ


31 
¸c
;

32 
h¸c
;

35 i‡((
uötmax_t
)
Àn
 < (uötmax_t)(
hódî
))

38 
	`mem˝y
(&
hódî
, 
buf
, (header));

39 i‡(
	`be32_to_˝u
(
hódî
.
ih_magic
Ë!
IH_MAGIC
)

41 #ifde‡
HAVE_LIBZ


42 
h¸c
 = 
	`be32_to_˝u
(
hódî
.
ih_h¸c
);

43 
hódî
.
ih_h¸c
 = 0;

44 
¸c
 = 
	`¸c32
(0, (*)&
hódî
, (header));

45 i‡(
¸c
 !
h¸c
) {

46 
	`¥ötf
("Header checksum ofÅhe uImage doesÇot match\n");

50 
hódî
.
ih_ty≥
) {

51 
IH_TYPE_KERNEL
:

52 
IH_TYPE_KERNEL_NOLOAD
:

54 
IH_TYPE_RAMDISK
:

57 
	`¥ötf
("uImagêty≥ %d unsuµ‹ãd\n", 
hódî
.
ih_ty≥
);

61 i‡(
hódî
.
ih_os
 !
IH_OS_LINUX
) {

62 
	`¥ötf
("uImagêo†%d unsuµ‹ãd\n", 
hódî
.
ih_os
);

66 i‡(
hódî
.
ih_¨ch
 !
¨ch
) {

67 
	`¥ötf
("uImagê¨ch %d unsuµ‹ãd\n", 
hódî
.
ih_¨ch
);

71 
hódî
.
ih_comp
) {

72 
IH_COMP_NONE
:

73 #ifde‡
HAVE_LIBZ


74 
IH_COMP_GZIP
:

78 
	`¥ötf
("uImage uses unsupported compression method\n");

82 i‡(
	`be32_to_˝u
(
hódî
.
ih_size
Ë> 
Àn
 - (header)) {

83 
	`¥ötf
("uImage header claimsÅhat image has %d bytes\n",

84 
	`be32_to_˝u
(
hódî
.
ih_size
));

85 
	`¥ötf
("wêªad o∆y %ld byãs.\n", 
Àn
 - (
hódî
));

88 #ifde‡
HAVE_LIBZ


89 
¸c
 = 
	`¸c32
(0, (*)
buf
 + (
hódî
), 
	`be32_to_˝u
(hódî.
ih_size
));

90 i‡(
¸c
 !
	`be32_to_˝u
(
hódî
.
ih_d¸c
)) {

91 
	`¥ötf
("uImage: The data CRC doesÇot match. Computed: %08x "

92 "ex≥˘ed %08x\n", 
¸c
,

93 
	`be32_to_˝u
(
hódî
.
ih_d¸c
));

97  ()
hódî
.
ih_ty≥
;

98 
	}
}

111 
	$uImage_¥obe_kî√l
(c⁄° *
buf
, 
off_t
 
Àn
, 
¨ch
)

113 
ty≥
 = 
	`uImage_¥obe
(
buf
, 
Àn
, 
¨ch
);

114 i‡(
ty≥
 < 0)

117  !(
ty≥
 =
IH_TYPE_KERNEL
 ||Åy≥ =
IH_TYPE_KERNEL_NOLOAD
);

118 
	}
}

120 
	$uImage_¥obe_ømdisk
(c⁄° *
buf
, 
off_t
 
Àn
, 
¨ch
)

122 
ty≥
 = 
	`uImage_¥obe
(
buf
, 
Àn
, 
¨ch
);

124 i‡(
ty≥
 < 0)

126  !(
ty≥
 =
IH_TYPE_RAMDISK
);

127 
	}
}

129 #ifde‡
HAVE_LIBZ


131 
	#ASCII_FLAG
 0x01

	)

132 
	#HEAD_CRC
 0x02

	)

133 
	#EXTRA_FIELD
 0x04

	)

134 
	#ORIG_NAME
 0x08

	)

135 
	#COMMENT
 0x10

	)

136 
	#RESERVED
 0xE0

	)

138 
	$uImage_gz_lﬂd
(c⁄° *
buf
, 
off_t
 
Àn
,

139 
Image_öfo
 *
image
)

141 
ªt
;

142 
z_°ªam
 
°rm
;

143 
skù
;

144 
Êags
;

145 *
uncomp_buf
;

146 
mem_Æloc
;

148 
mem_Æloc
 = 10 * 1024 * 1024;

149 
uncomp_buf
 = 
	`mÆloc
(
mem_Æloc
);

150 i‡(!
uncomp_buf
)

153 
	`mem£t
(&
°rm
, 0, (strm));

156 
skù
 = 10;

159 i‡(
buf
[0] != 0x1f || buf[1] != 0x8b)

162 
Êags
 = 
buf
[3];

163 i‡(
buf
[2] !
Z_DEFLATED
 || (
Êags
 & 
RESERVED
) != 0) {

164 
	`puts
 ("Error: Bad gzipped data\n");

168 i‡(
Êags
 & 
EXTRA_FIELD
) {

169 
skù
 += 2;

170 
skù
 +
buf
[10];

171 
skù
 +
buf
[11] << 8;

173 i‡(
Êags
 & 
ORIG_NAME
) {

174 
buf
[
skù
++])

177 i‡(
Êags
 & 
COMMENT
) {

178 
buf
[
skù
++])

181 i‡(
Êags
 & 
HEAD_CRC
)

182 
skù
 += 2;

184 
°rm
.
avaû_ö
 = 
Àn
 - 
skù
;

185 
°rm
.
√xt_ö
 = (*)
buf
 + 
skù
;

188 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, -
MAX_WBITS
);

189 i‡(
ªt
 !
Z_OK
)

192 
°rm
.
√xt_out
 = 
uncomp_buf
;

193 
°rm
.
avaû_out
 = 
mem_Æloc
;

196 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_FINISH
);

197 i‡(
ªt
 =
Z_STREAM_END
)

200 i‡(
ªt
 =
Z_OK
 ||Ñë =
Z_BUF_ERROR
) {

201 *
√w_buf
;

202 
öc_buf
 = 5 * 1024 * 1024;

204 
mem_Æloc
 +
öc_buf
;

205 
√w_buf
 = 
	`ªÆloc
(
uncomp_buf
, 
mem_Æloc
);

206 i‡(!
√w_buf
) {

207 
	`öÊ©eEnd
(&
°rm
);

208 
	`‰ì
(
uncomp_buf
);

212 
°rm
.
√xt_out
 = 
uncomp_buf
 + 
mem_Æloc
 - 
öc_buf
;

213 
°rm
.
avaû_out
 = 
öc_buf
;

214 
uncomp_buf
 = 
√w_buf
;

216 
	`¥ötf
("Eº‹ durög decom¥essi⁄ %d\n", 
ªt
);

221 
	`öÊ©eEnd
(&
°rm
);

222 
image
->
buf
 = 
uncomp_buf
;

223 
image
->
Àn
 = 
mem_Æloc
 - 
°rm
.
avaû_out
;

225 
	}
}

227 
uImage_gz_lﬂd
(c⁄° *
UNUSED
(
buf
), 
off_t
 UNUSED(
Àn
),

228 
Image_öfo
 *
	$UNUSED
(
image
))

231 
	}
}

234 
	$uImage_lﬂd
(c⁄° *
buf
, 
off_t
 
Àn
, 
Image_öfo
 *
image
)

236 c⁄° 
image_hódî
 *
hódî
 = (c⁄° image_hódî *)
buf
;

237 c⁄° *
img_buf
 = 
buf
 + (
image_hódî
);

238 
off_t
 
img_Àn
 = 
hódî
->
ih_size
;

246 i‡(
img_Àn
 !(
Àn
 - (
image_hódî
))) {

247 
	`¥ötf
("Image size doesn't matchÅhe header\n");

251 
image
->
ba£
 = 
	`˝u_to_be32
(
hódî
->
ih_lﬂd
);

252 
image
->
ï
 = 
	`˝u_to_be32
(
hódî
->
ih_ï
);

253 
hódî
->
ih_comp
) {

254 
IH_COMP_NONE
:

255 
image
->
buf
 = 
img_buf
;

256 
image
->
Àn
 = 
img_Àn
;

260 
IH_COMP_GZIP
:

265 i‡(
hódî
->
ih_ty≥
 =
IH_TYPE_RAMDISK
) {

266 
image
->
buf
 = 
img_buf
;

267 
image
->
Àn
 = 
img_Àn
;

270  
	`uImage_gz_lﬂd
(
img_buf
, 
img_Àn
, 
image
);

276 
	}
}

	@kexec/kexec-xen.c

1 
	#_GNU_SOURCE


	)

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°dlib.h
>

5 
	~<ñf.h
>

6 
	~"kexec.h
"

7 
	~"kexec-sysˇŒ.h
"

8 
	~"¸ashdump.h
"

10 
	~"c⁄fig.h
"

12 #ifde‡
HAVE_LIBXENCTRL


13 
	~<xí˘æ.h
>

15 
	~"¸ashdump.h
"

17 
	$xí_kexec_lﬂd
(
kexec_öfo
 *
öfo
)

19 
uöt32_t
 
ƒ_£gmíts
 = 
öfo
->nr_segments;

20 
kexec_£gmít
 *
£gmíts
 = 
öfo
->
£gmít
;

21 
xc_öãrÁ˚
 *
xch
;

22 
xc_hy≥rˇŒ_buf„r_¨øy_t
 *
¨øy
 = 
NULL
;

23 
uöt8_t
 
ty≥
;

24 
uöt8_t
 
¨ch
;

25 
xí_kexec_£gmít_t
 *
xí_£gs
;

26 
s
;

27 
ªt
 = -1;

29 
xch
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

30 i‡(!
xch
)

33 
xí_£gs
 = 
	`ˇŒoc
(
ƒ_£gmíts
 + 1, (*xen_segs));

34 i‡(!
xí_£gs
)

35 
out
;

37 
¨øy
 = 
	`xc_hy≥rˇŒ_buf„r_¨øy_¸óã
(
xch
, 
ƒ_£gmíts
);

38 i‡(
¨øy
 =
NULL
)

39 
out
;

41 
s
 = 0; s < 
ƒ_£gmíts
; s++) {

42 
	`DECLARE_HYPERCALL_BUFFER
(, 
£g_buf
);

44 
£g_buf
 = 
	`xc_hy≥rˇŒ_buf„r_¨øy_Æloc
(
xch
, 
¨øy
, 
s
,

45 
£g_buf
, 
£gmíts
[
s
].
bufsz
);

46 i‡(
£g_buf
 =
NULL
)

47 
out
;

48 
	`mem˝y
(
£g_buf
, 
£gmíts
[
s
].
buf
, segmíts[s].
bufsz
);

50 
	`£t_xí_gue°_h™dÀ
(
xí_£gs
[
s
].
buf
.
h
, 
£g_buf
);

51 
xí_£gs
[
s
].
buf_size
 = 
£gmíts
[s].
bufsz
;

52 
xí_£gs
[
s
].
de°_maddr
 = (
uöt64_t
)
£gmíts
[s].
mem
;

53 
xí_£gs
[
s
].
de°_size
 = 
£gmíts
[s].
memsz
;

62 
	`£t_xí_gue°_h™dÀ
(
xí_£gs
[
s
].
buf
.
h
, 
HYPERCALL_BUFFER_NULL
);

63 
xí_£gs
[
s
].
buf_size
 = 0;

64 
xí_£gs
[
s
].
de°_maddr
 = 0;

65 
xí_£gs
[
s
].
de°_size
 = 1 * 1024 * 1024;

66 
ƒ_£gmíts
++;

68 
ty≥
 = (
öfo
->
kexec_Êags
 & 
KEXEC_ON_CRASH
Ë? 
KEXEC_TYPE_CRASH


69 : 
KEXEC_TYPE_DEFAULT
;

71 
¨ch
 = (
öfo
->
kexec_Êags
 & 
KEXEC_ARCH_MASK
) >> 16;

72 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

73 i‡(!
¨ch
)

74 
¨ch
 = 
EM_386
;

77 
ªt
 = 
	`xc_kexec_lﬂd
(
xch
, 
ty≥
, 
¨ch
, (
uöt64_t
)
öfo
->
íåy
,

78 
ƒ_£gmíts
, 
xí_£gs
);

80 
out
:

81 
	`xc_hy≥rˇŒ_buf„r_¨øy_de°roy
(
xch
, 
¨øy
);

82 
	`‰ì
(
xí_£gs
);

83 
	`xc_öãrÁ˚_˛o£
(
xch
);

85  
ªt
;

86 
	}
}

88 
	$xí_kexec_u∆ﬂd
(
uöt64_t
 
kexec_Êags
)

90 
xc_öãrÁ˚
 *
xch
;

91 
uöt8_t
 
ty≥
;

92 
ªt
;

94 
xch
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

95 i‡(!
xch
)

98 
ty≥
 = (
kexec_Êags
 & 
KEXEC_ON_CRASH
Ë? 
KEXEC_TYPE_CRASH


99 : 
KEXEC_TYPE_DEFAULT
;

101 
ªt
 = 
	`xc_kexec_u∆ﬂd
(
xch
, 
ty≥
);

103 
	`xc_öãrÁ˚_˛o£
(
xch
);

105  
ªt
;

106 
	}
}

108 
	$xí_kexec_exec
()

110 
xc_öãrÁ˚
 *
xch
;

112 
xch
 = 
	`xc_öãrÁ˚_›í
(
NULL
, NULL, 0);

113 i‡(!
xch
)

116 
	`xc_kexec_exec
(
xch
, 
KEXEC_TYPE_DEFAULT
);

118 
	`xc_öãrÁ˚_˛o£
(
xch
);

119 
	}
}

123 
xí_kexec_lﬂd
(
kexec_öfo
 *
	$UNUSED
(
öfo
))

126 
	}
}

128 
	$xí_kexec_u∆ﬂd
(
uöt64_t
 
kexec_Êags
)

131 
	}
}

133 
	$xí_kexec_exec
()

135 
	}
}

	@kexec/kexec-zlib.h

1 #i‚de‡
__KEXEC_ZLIB_H


2 
	#__KEXEC_ZLIB_H


	)

4 
	~<°dio.h
>

5 
	~<sys/ty≥s.h
>

7 
	~"c⁄fig.h
"

9 *
zlib_decom¥ess_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
);

	@kexec/kexec.c

22 
	#_GNU_SOURCE


	)

23 
	~<°dio.h
>

24 
	~<°d¨g.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

27 
	~<î∫o.h
>

28 
	~<limôs.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/ªboŸ.h
>

32 
	~<uni°d.h
>

33 
	~<f˙é.h
>

34 #i‚de‡
_O_BINARY


35 
	#_O_BINARY
 0

	)

37 
	~<gë›t.h
>

38 
	~<˘y≥.h
>

40 
	~"c⁄fig.h
"

42 
	~<sha256.h
>

43 
	~"kexec.h
"

44 
	~"kexec-sysˇŒ.h
"

45 
	~"kexec-ñf.h
"

46 
	~"kexec-sha256.h
"

47 
	~"kexec-zlib.h
"

48 
	~"kexec-lzma.h
"

49 
	~<¨ch/›ti⁄s.h
>

51 
	gmem_mö
 = 0;

52 
	gmem_max
 = 
ULONG_MAX
;

53 
	gkexec_Êags
 = 0;

54 
	gkexec_debug
 = 0;

56 
	$dbg¥öt_mem_ønge
(c⁄° *
¥efix
, 
mem‹y_ønge
 *
mr
, 
ƒ_mr
)

58 
i
;

59 
	`dbg¥ötf
("%s\n", 
¥efix
);

60 
i
 = 0; i < 
ƒ_mr
; i++) {

61 
	`dbg¥ötf
("%016Œx-%016Œx (%d)\n", 
mr
[
i
].
°¨t
,

62 
mr
[
i
].
íd
, mr[i].
ty≥
);

64 
	}
}

66 
	$dõ
(c⁄° *
fmt
, ...)

68 
va_li°
 
¨gs
;

69 
	`va_°¨t
(
¨gs
, 
fmt
);

70 
	`vÂrötf
(
°dîr
, 
fmt
, 
¨gs
);

71 
	`va_íd
(
¨gs
);

72 
	`fÊush
(
°dout
);

73 
	`fÊush
(
°dîr
);

74 
	`exô
(1);

75 
	}
}

77 *
	$x°rdup
(c⁄° *
°r
)

79 *
√w
 = 
	`°rdup
(
°r
);

80 i‡(!
√w
)

81 
	`dõ
("Cannot strdup \"%s\": %s\n",

82 
°r
, 
	`°ªº‹
(
î∫o
));

83  
√w
;

84 
	}
}

86 *
	$xmÆloc
(
size_t
 
size
)

88 *
buf
;

89 i‡(!
size
)

90  
NULL
;

91 
buf
 = 
	`mÆloc
(
size
);

92 i‡(!
buf
) {

93 
	`dõ
("Cannot malloc %ld bytes: %s\n",

94 
size
 + 0UL, 
	`°ªº‹
(
î∫o
));

96  
buf
;

97 
	}
}

99 *
	$xªÆloc
(*
±r
, 
size_t
 
size
)

101 *
buf
;

102 
buf
 = 
	`ªÆloc
(
±r
, 
size
);

103 i‡(!
buf
) {

104 
	`dõ
("CannotÑealloc %ld bytes: %s\n",

105 
size
 + 0UL, 
	`°ªº‹
(
î∫o
));

107  
buf
;

108 
	}
}

110 
	$vÆid_mem‹y_ønge
(
kexec_öfo
 *
öfo
,

111 
s°¨t
, 
£nd
)

113 
i
;

114 i‡(
s°¨t
 > 
£nd
) {

117 i‡((
£nd
 > 
mem_max
Ë|| (
s°¨t
 < 
mem_mö
)) {

120 
i
 = 0; i < 
öfo
->
mem‹y_ønges
; i++) {

121 
m°¨t
, 
míd
;

123 i‡(
öfo
->
mem‹y_ønge
[
i
].
ty≥
 !
RANGE_RAM
)

125 
m°¨t
 = 
öfo
->
mem‹y_ønge
[
i
].
°¨t
;

126 
míd
 = 
öfo
->
mem‹y_ønge
[
i
].
íd
;

127 i‡(
i
 < 
öfo
->
mem‹y_ønges
 - 1

128 && 
míd
 =
öfo
->
mem‹y_ønge
[
i
+1].
°¨t


129 && 
öfo
->
mem‹y_ønge
[
i
+1].
ty≥
 =
RANGE_RAM
)

130 
míd
 = 
öfo
->
mem‹y_ønge
[
i
+1].
íd
;

133 i‡((
m°¨t
 <
s°¨t
Ë&& (
míd
 >
£nd
)) {

138 
	}
}

140 
	$vÆid_mem‹y_£gmít
(
kexec_öfo
 *
öfo
,

141 
kexec_£gmít
 *
£gmít
)

143 
s°¨t
, 
£nd
;

144 
s°¨t
 = ()
£gmít
->
mem
;

145 
£nd
 = 
s°¨t
 + 
£gmít
->
memsz
 - 1;

147  
	`vÆid_mem‹y_ønge
(
öfo
, 
s°¨t
, 
£nd
);

148 
	}
}

150 
	$¥öt_£gmíts
(
FILE
 *
f
, 
kexec_öfo
 *
öfo
)

152 
i
;

154 
	`Ârötf
(
f
, "ƒ_£gmít†%d\n", 
öfo
->
ƒ_£gmíts
);

155 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++) {

156 
	`Ârötf
(
f
, "£gmít[%d].bu‡ = %p\n", 
i
,

157 
öfo
->
£gmít
[
i
].
buf
);

158 
	`Ârötf
(
f
, "£gmít[%d].bufsz = 0x%zx\n", 
i
,

159 
öfo
->
£gmít
[
i
].
bufsz
);

160 
	`Ârötf
(
f
, "£gmít[%d].mem = %p\n", 
i
,

161 
öfo
->
£gmít
[
i
].
mem
);

162 
	`Ârötf
(
f
, "£gmít[%d].memsz = 0x%zx\n", 
i
,

163 
öfo
->
£gmít
[
i
].
memsz
);

165 
	}
}

167 
	$s‹t_£gmíts
(
kexec_öfo
 *
öfo
)

169 
i
, 
j
;

170 *
íd
;

173 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++) {

174 
tidx
;

175 
kexec_£gmít
 
ãmp
;

176 
tidx
 = 
i
;

177 
j
 = 
i
 +1; j < 
öfo
->
ƒ_£gmíts
; j++) {

178 i‡(
öfo
->
£gmít
[
j
].
mem
 < info->£gmít[
tidx
].mem) {

179 
tidx
 = 
j
;

182 i‡(
tidx
 !
i
) {

183 
ãmp
 = 
öfo
->
£gmít
[
tidx
];

184 
öfo
->
£gmít
[
tidx
] = info->£gmít[
i
];

185 
öfo
->
£gmít
[
i
] = 
ãmp
;

189 
íd
 = 0;

190 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++) {

191 i‡(
íd
 > 
öfo
->
£gmít
[
i
].
mem
) {

192 
	`Ârötf
(
°dîr
, "Overlapping memory segmentsát %p\n",

193 
íd
);

196 
íd
 = ((*)
öfo
->
£gmít
[
i
].
mem
Ë+ info->£gmít[i].
memsz
;

199 
	}
}

201 
	$loˇã_hﬁe
(
kexec_öfo
 *
öfo
,

202 
hﬁe_size
, 
hﬁe_Æign
,

203 
hﬁe_mö
, 
hﬁe_max
,

204 
hﬁe_íd
)

206 
i
, 
j
;

207 
mem‹y_ønge
 *
mem_ønge
;

208 
max_mem_ønges
, 
mem_ønges
;

209 
hﬁe_ba£
;

211 i‡(
hﬁe_íd
 == 0) {

212 
	`dõ
("Invalid holeÉndárgument of 0 specifiedÅoÜocate_hole");

216 
hﬁe_ba£
 = 
ULONG_MAX
;

219 i‡(
hﬁe_Æign
 < ()
	`gë∑gesize
()) {

220 
hﬁe_Æign
 = 
	`gë∑gesize
();

224 
max_mem_ønges
 = 
öfo
->
mem‹y_ønges
 + info->
ƒ_£gmíts
;

225 
mem_ønge
 = 
	`xmÆloc
(
max_mem_ønges
 *(
mem‹y_ønge
));

226 
mem_ønges
 = 0;

229 
j
 = 0, 
i
 = 0; i < 
öfo
->
mem‹y_ønges
; i++) {

230 
s°¨t
, 
£nd
;

231 
m°¨t
, 
míd
;

232 
m°¨t
 = 
öfo
->
mem‹y_ønge
[
i
].
°¨t
;

233 
míd
 = 
öfo
->
mem‹y_ønge
[
i
].
íd
;

234 i‡(
öfo
->
mem‹y_ønge
[
i
].
ty≥
 !
RANGE_RAM
)

236 (
j
 < 
öfo
->
ƒ_£gmíts
) &&

237 ((()
öfo
->
£gmít
[
j
].
mem
Ë<
míd
)) {

238 
s°¨t
 = ()
öfo
->
£gmít
[
j
].
mem
;

239 
£nd
 = 
s°¨t
 + 
öfo
->
£gmít
[
j
].
memsz
 -1;

240 i‡(
m°¨t
 < 
s°¨t
) {

241 
mem_ønge
[
mem_ønges
].
°¨t
 = 
m°¨t
;

242 
mem_ønge
[
mem_ønges
].
íd
 = 
s°¨t
 -1;

243 
mem_ønge
[
mem_ønges
].
ty≥
 = 
RANGE_RAM
;

244 
mem_ønges
++;

246 
m°¨t
 = 
£nd
 +1;

247 
j
++;

249 i‡(
m°¨t
 < 
míd
) {

250 
mem_ønge
[
mem_ønges
].
°¨t
 = 
m°¨t
;

251 
mem_ønge
[
mem_ønges
].
íd
 = 
míd
;

252 
mem_ønge
[
mem_ønges
].
ty≥
 = 
RANGE_RAM
;

253 
mem_ønges
++;

257 
i
 = 0; i < 
mem_ønges
; i++) {

258 
°¨t
, 
íd
, 
size
;

259 
°¨t
 = 
mem_ønge
[
i
].start;

260 
íd
 = 
mem_ønge
[
i
].end;

264 i‡(
°¨t
 < 
mem_mö
) {

265 
°¨t
 = 
mem_mö
;

267 i‡(
°¨t
 < 
hﬁe_mö
) {

268 
°¨t
 = 
hﬁe_mö
;

270 
°¨t
 = 
	`_ALIGN
(°¨t, 
hﬁe_Æign
);

271 i‡(
íd
 > 
mem_max
) {

272 
íd
 = 
mem_max
;

274 i‡(
íd
 > 
hﬁe_max
) {

275 
íd
 = 
hﬁe_max
;

278 i‡((
°¨t
 >
íd
Ë|| (°¨à>
mem_max
Ë|| (íd <
mem_mö
)) {

282 
size
 = 
íd
 - 
°¨t
;

283 i‡(!
hﬁe_size
 || 
size
 >= hole_size - 1) {

284 i‡(
hﬁe_íd
 > 0) {

285 
hﬁe_ba£
 = 
°¨t
;

288 
hﬁe_ba£
 = 
	`_ALIGN_DOWN
(
íd
 - 
hﬁe_size
 + 1,

289 
hﬁe_Æign
);

293 
	`‰ì
(
mem_ønge
);

294 i‡(
hﬁe_ba£
 =
ULONG_MAX
) {

295 
	`Ârötf
(
°dîr
, "CouldÇot findá freeárea of memory of "

296 "0x%lx byãs...\n", 
hﬁe_size
);

297  
ULONG_MAX
;

299 i‡(
hﬁe_size
 && (
hﬁe_ba£
 + hﬁe_sizê- 1Ë> 
hﬁe_max
) {

300 
	`Ârötf
(
°dîr
, "CouldÇot findá freeárea of memory below: "

301 "0x%lx...\n", 
hﬁe_max
);

302  
ULONG_MAX
;

304  
hﬁe_ba£
;

305 
	}
}

307 
	$add_£gmít_phys_vút
(
kexec_öfo
 *
öfo
,

308 c⁄° *
buf
, 
size_t
 
bufsz
,

309 
ba£
, 
size_t
 
memsz
, 
phys
)

311 
œ°
;

312 
size_t
 
size
;

313 
∑gesize
;

315 i‡(
bufsz
 > 
memsz
) {

316 
bufsz
 = 
memsz
;

319 i‡(
memsz
 == 0) {

324 
∑gesize
 = 
	`gë∑gesize
();

325 
memsz
 = 
	`_ALIGN
(memsz, 
∑gesize
);

333 i‡(
ba£
 & (
∑gesize
 -1)) {

334 
	`dõ
("Ba£áddªss: 0x%lx i†nŸÖagêÆig√d\n", 
ba£
);

337 i‡(
phys
)

338 
ba£
 = 
	`vút_to_phys
(base);

340 
œ°
 = 
ba£
 + 
memsz
 -1;

341 i‡(!
	`vÆid_mem‹y_ønge
(
öfo
, 
ba£
, 
œ°
)) {

342 
	`dõ
("Invalid memory segment %p - %p\n",

343 (*)
ba£
, (*)
œ°
);

346 
size
 = (
öfo
->
ƒ_£gmíts
 + 1Ë* (öfo->
£gmít
[0]);

347 
öfo
->
£gmít
 = 
	`xªÆloc
(öfo->£gmít, 
size
);

348 
öfo
->
£gmít
[öfo->
ƒ_£gmíts
].
buf
 = buf;

349 
öfo
->
£gmít
[öfo->
ƒ_£gmíts
].
bufsz
 = bufsz;

350 
öfo
->
£gmít
[öfo->
ƒ_£gmíts
].
mem
 = (*)
ba£
;

351 
öfo
->
£gmít
[öfo->
ƒ_£gmíts
].
memsz
 = memsz;

352 
öfo
->
ƒ_£gmíts
++;

353 i‡(
öfo
->
ƒ_£gmíts
 > 
KEXEC_MAX_SEGMENTS
) {

354 
	`Ârötf
(
°dîr
, "Warning: kernel segmentÜimitÑeached. "

357 
	}
}

359 
	$add_buf„r_phys_vút
(
kexec_öfo
 *
öfo
,

360 c⁄° *
buf
, 
bufsz
, 
memsz
,

361 
buf_Æign
, 
buf_mö
, 
buf_max
,

362 
buf_íd
, 
phys
)

364 
ba£
;

365 
ªsu…
;

366 
∑gesize
;

368 
ªsu…
 = 
	`s‹t_£gmíts
(
öfo
);

369 i‡(
ªsu…
 < 0) {

370 
	`dõ
("sort_segments failed\n");

374 
∑gesize
 = 
	`gë∑gesize
();

375 
memsz
 = 
	`_ALIGN
(memsz, 
∑gesize
);

377 
ba£
 = 
	`loˇã_hﬁe
(
öfo
, 
memsz
, 
buf_Æign
, 
buf_mö
, 
buf_max
, 
buf_íd
);

378 i‡(
ba£
 =
ULONG_MAX
) {

379 
	`dõ
("locate_hole failed\n");

382 
	`add_£gmít_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
ba£
, 
memsz
, 
phys
);

383  
ba£
;

384 
	}
}

386 
	$add_buf„r_vút
(
kexec_öfo
 *
öfo
, c⁄° *
buf
,

387 
bufsz
, 
memsz
,

388 
buf_Æign
, 
buf_mö
,

389 
buf_max
, 
buf_íd
)

391  
	`add_buf„r_phys_vút
(
öfo
, 
buf
, 
bufsz
, 
memsz
, 
buf_Æign
,

392 
buf_mö
, 
buf_max
, 
buf_íd
, 0);

393 
	}
}

395 
	$föd_mem‹y_ønge
(
kexec_öfo
 *
öfo
,

396 *
ba£
, *
size
)

398 
i
;

399 
°¨t
, 
íd
;

401 
i
 = 0; i < 
öfo
->
mem‹y_ønges
; i++) {

402 i‡(
öfo
->
mem‹y_ønge
[
i
].
ty≥
 !
RANGE_RAM
)

404 
°¨t
 = 
öfo
->
mem‹y_ønge
[
i
].start;

405 
íd
 = 
öfo
->
mem‹y_ønge
[
i
].end;

406 i‡(
íd
 > *
ba£
 && 
°¨t
 < *ba£ + *
size
) {

407 i‡(
°¨t
 > *
ba£
) {

408 *
size
 = *
ba£
 + *sizê- 
°¨t
;

409 *
ba£
 = 
°¨t
;

411 i‡(
íd
 < *
ba£
 + *
size
)

412 *
size
 = 
íd
 - *
ba£
;

417 
	}
}

419 
	$föd_£gmít_hﬁe
(
kexec_öfo
 *
öfo
,

420 *
ba£
, *
size
)

422 
i
;

423 
£g_ba£
, 
£g_size
;

425 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++) {

426 
£g_ba£
 = ()
öfo
->
£gmít
[
i
].
mem
;

427 
£g_size
 = 
öfo
->
£gmít
[
i
].
memsz
;

429 i‡(
£g_ba£
 + 
£g_size
 <*
ba£
)

431 i‡(
£g_ba£
 >*
ba£
 + *
size
)

433 i‡(*
ba£
 < 
£g_ba£
) {

434 *
size
 = 
£g_ba£
 - *
ba£
;

436 } i‡(
£g_ba£
 + 
£g_size
 < *
ba£
 + *
size
) {

437 *
size
 = *
ba£
 + *sizê- (
£g_ba£
 + 
£g_size
);

438 *
ba£
 = 
£g_ba£
 + 
£g_size
;

440 *
size
 = 0;

444  *
size
;

445 
	}
}

447 
	$add_backup_£gmíts
(
kexec_öfo
 *
öfo
,

448 
backup_ba£
,

449 
backup_size
)

451 
mem_ba£
, 
mem_size
, 
bk£g_ba£
, 
bk£g_size
, 
°¨t
, 
íd
;

452 
∑gesize
;

454 
∑gesize
 = 
	`gë∑gesize
();

455 
backup_size
) {

456 
mem_ba£
 = 
backup_ba£
;

457 
mem_size
 = 
backup_size
;

458 i‡(!
	`föd_mem‹y_ønge
(
öfo
, &
mem_ba£
, &
mem_size
))

460 
backup_size
 = 
backup_ba£
 + backup_size - \

461 (
mem_ba£
 + 
mem_size
);

462 
backup_ba£
 = 
mem_ba£
 + 
mem_size
;

463 
mem_size
) {

464 
bk£g_ba£
 = 
mem_ba£
;

465 
bk£g_size
 = 
mem_size
;

466 i‡(
	`s‹t_£gmíts
(
öfo
) < 0)

468 i‡(!
	`föd_£gmít_hﬁe
(
öfo
, &
bk£g_ba£
, &
bk£g_size
))

470 
°¨t
 = 
	`_ALIGN
(
bk£g_ba£
, 
∑gesize
);

471 
íd
 = 
	`_ALIGN_DOWN
(
bk£g_ba£
 + 
bk£g_size
, 
∑gesize
);

472 
	`add_£gmít_phys_vút
(
öfo
, 
NULL
, 0,

473 
°¨t
, 
íd
-start, 0);

474 
mem_size
 = 
mem_ba£
 + mem_size - \

475 (
bk£g_ba£
 + 
bk£g_size
);

476 
mem_ba£
 = 
bk£g_ba£
 + 
bk£g_size
;

480 
	}
}

482 *
	$¶uΩ_fd
(
fd
, c⁄° *
fûíame
, 
off_t
 
size
, off_à*
ƒód
)

484 *
buf
;

485 
off_t
 
¥ogªss
;

486 
ssize_t
 
ªsu…
;

488 
buf
 = 
	`xmÆloc
(
size
);

489 
¥ogªss
 = 0;

490 
¥ogªss
 < 
size
) {

491 
ªsu…
 = 
	`ªad
(
fd
, 
buf
 + 
¥ogªss
, 
size
 -Örogress);

492 i‡(
ªsu…
 < 0) {

493 i‡((
î∫o
 =
EINTR
Ë|| (î∫ÿ=
EAGAIN
))

495 
	`Ârötf
(
°dîr
, "Ród o¿%†Áûed: %s\n", 
fûíame
,

496 
	`°ªº‹
(
î∫o
));

497 
	`‰ì
(
buf
);

498 
	`˛o£
(
fd
);

499  
NULL
;

501 i‡(
ªsu…
 == 0)

504 
¥ogªss
 +
ªsu…
;

506 
ªsu…
 = 
	`˛o£
(
fd
);

507 i‡(
ªsu…
 < 0)

508 
	`dõ
("Clo£ o‡%†Áûed: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

510 i‡(
ƒód
)

511 *
ƒód
 = 
¥ogªss
;

512  
buf
;

513 
	}
}

515 *
	$¶uΩ_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
)

517 
fd
;

518 *
buf
;

519 
off_t
 
size
, 
îr
, 
ƒód
;

520 
ssize_t
 
ªsu…
;

521 
°©
 
°©s
;

523 i‡(!
fûíame
) {

524 *
r_size
 = 0;

527 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
 | 
_O_BINARY
);

528 i‡(
fd
 < 0) {

529 
	`dõ
("Cannot open `%s': %s\n",

530 
fûíame
, 
	`°ªº‹
(
î∫o
));

532 
ªsu…
 = 
	`f°©
(
fd
, &
°©s
);

533 i‡(
ªsu…
 < 0) {

534 
	`dõ
("Cannot stat: %s: %s\n",

535 
fûíame
, 
	`°ªº‹
(
î∫o
));

542 i‡(
	`S_ISCHR
(
°©s
.
°_mode
)) {

544 
size
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

545 i‡(
size
 < 0)

546 
	`dõ
("C™ÇŸ sìk fûê%s: %s\n", 
fûíame
,

547 
	`°ªº‹
(
î∫o
));

549 
îr
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

550 i‡(
îr
 < 0)

551 
	`dõ
("CanÇot seekÅoÅhe begin of file %s: %s\n",

552 
fûíame
, 
	`°ªº‹
(
î∫o
));

554 
size
 = 
°©s
.
°_size
;

557 
buf
 = 
	`¶uΩ_fd
(
fd
, 
fûíame
, 
size
, &
ƒód
);

558 i‡(!
buf
)

559 
	`dõ
("C™nŸÑód %s", 
fûíame
);

561 i‡(
ƒód
 !
size
)

562 
	`dõ
("Ród o¿%†íded bef‹ê°© said iàshould\n", 
fûíame
);

564 *
r_size
 = 
size
;

565  
buf
;

566 
	}
}

571 *
	$¶uΩ_fûe_Àn
(c⁄° *
fûíame
, 
off_t
 
size
, off_à*
ƒód
)

573 
fd
;

575 i‡(!
fûíame
)

577 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
 | 
_O_BINARY
);

578 i‡(
fd
 < 0) {

579 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿%s: %s\n", 
fûíame
,

580 
	`°ªº‹
(
î∫o
));

584  
	`¶uΩ_fd
(
fd
, 
fûíame
, 
size
, 
ƒód
);

585 
	}
}

587 *
	$¶uΩ_decom¥ess_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
)

589 *
kî√l_buf
;

591 
kî√l_buf
 = 
	`zlib_decom¥ess_fûe
(
fûíame
, 
r_size
);

592 i‡(!
kî√l_buf
) {

593 
kî√l_buf
 = 
	`lzma_decom¥ess_fûe
(
fûíame
, 
r_size
);

594 i‡(!
kî√l_buf
)

595  
	`¶uΩ_fûe
(
fûíame
, 
r_size
);

597  
kî√l_buf
;

598 
	}
}

600 
	$upd©e_purg©‹y
(
kexec_öfo
 *
öfo
)

602 c⁄° 
uöt8_t
 
nuŒ_buf
[256];

603 
sha256_c⁄ãxt
 
˘x
;

604 
sha256_dige°_t
 
dige°
;

605 
sha256_ªgi⁄
 
ªgi⁄
[
SHA256_REGIONS
];

606 
i
, 
j
;

608 i‡(!
öfo
->
rhdr
.
e_shdr
) {

611 
	`¨ch_upd©e_purg©‹y
(
öfo
);

612 
	`mem£t
(
ªgi⁄
, 0, (region));

613 
	`sha256_°¨ts
(&
˘x
);

615 
j
 = 
i
 = 0; i < 
öfo
->
ƒ_£gmíts
; i++) {

616 
nuŒsz
;

622 i‡(
öfo
->
£gmít
[
i
].
mem
 =(*)öfo->
rhdr
.
ªl_addr
) {

625 
	`sha256_upd©e
(&
˘x
, 
öfo
->
£gmít
[
i
].
buf
,

626 
öfo
->
£gmít
[
i
].
bufsz
);

627 
nuŒsz
 = 
öfo
->
£gmít
[
i
].
memsz
 - info->£gmít[i].
bufsz
;

628 
nuŒsz
) {

629 
byãs
 = 
nuŒsz
;

630 i‡(
byãs
 > (
nuŒ_buf
)) {

631 
byãs
 = (
nuŒ_buf
);

633 
	`sha256_upd©e
(&
˘x
, 
nuŒ_buf
, 
byãs
);

634 
nuŒsz
 -
byãs
;

636 
ªgi⁄
[
j
].
°¨t
 = (Ë
öfo
->
£gmít
[
i
].
mem
;

637 
ªgi⁄
[
j
].
Àn
 = 
öfo
->
£gmít
[
i
].
memsz
;

638 
j
++;

640 
	`sha256_föish
(&
˘x
, 
dige°
);

641 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "sha256_ªgi⁄s", &
ªgi⁄
,

642 (
ªgi⁄
));

643 
	`ñf_ªl_£t_symbﬁ
(&
öfo
->
rhdr
, "sha256_dige°", &
dige°
,

644 (
dige°
));

645 
	}
}

650 
	$my_lﬂd
(c⁄° *
ty≥
, 
fûeöd
, 
¨gc
, **
¨gv
,

651 
kexec_Êags
, *
íåy
)

653 *
kî√l
;

654 *
kî√l_buf
;

655 
off_t
 
kî√l_size
;

656 
i
 = 0;

657 
ªsu…
;

658 
kexec_öfo
 
öfo
;

659 
«tive_¨ch
;

660 
guess_⁄ly
 = 0;

662 
	`mem£t
(&
öfo
, 0, (info));

663 
öfo
.
£gmít
 = 
NULL
;

664 
öfo
.
ƒ_£gmíts
 = 0;

665 
öfo
.
íåy
 = 
NULL
;

666 
öfo
.
backup_°¨t
 = 0;

667 
öfo
.
kexec_Êags
 = kexec_flags;

669 
ªsu…
 = 0;

670 i‡(
¨gc
 - 
fûeöd
 <= 0) {

671 
	`Ârötf
(
°dîr
, "No kernel specified\n");

672 
	`ußge
();

675 
kî√l
 = 
¨gv
[
fûeöd
];

677 
kî√l_buf
 = 
	`¶uΩ_decom¥ess_fûe
(
kî√l
, &
kî√l_size
);

679 
	`dbg¥ötf
("kernel: %p kernel_size: 0x%lx\n",

680 
kî√l_buf
, 
kî√l_size
);

682 i‡(
	`gë_mem‹y_ønges
(&
öfo
.
mem‹y_ønge
, &öfo.
mem‹y_ønges
,

683 
öfo
.
kexec_Êags
Ë< 0 || info.
mem‹y_ønges
 == 0) {

684 
	`Ârötf
(
°dîr
, "CouldÇot get memoryÜayout\n");

688 i‡(
ty≥
) {

689 
i
 = 0; i < 
fûe_ty≥s
; i++) {

690 i‡(
	`°rcmp
(
ty≥
, 
fûe_ty≥
[
i
].
«me
) == 0)

693 i‡(
i
 =
fûe_ty≥s
) {

694 
	`Ârötf
(
°dîr
, "Unsuµ‹ãd kî√»ty≥ %s\n", 
ty≥
);

698 i‡(
fûe_ty≥
[
i
].
	`¥obe
(
kî√l_buf
, 
kî√l_size
) < 0)

699 
guess_⁄ly
 = 1;

702 i‡(!
ty≥
 || 
guess_⁄ly
) {

703 
i
 = 0; i < 
fûe_ty≥s
; i++) {

704 i‡(
fûe_ty≥
[
i
].
	`¥obe
(
kî√l_buf
, 
kî√l_size
) == 0)

707 i‡(
i
 =
fûe_ty≥s
) {

708 
	`Ârötf
(
°dîr
, "Cannot determineÅhe fileÅype "

709 "o‡%s\n", 
kî√l
);

712 i‡(
guess_⁄ly
) {

713 
	`Ârötf
(
°dîr
, "Wrong fileÅype %s, "

715 
ty≥
, 
fûe_ty≥
[
i
].
«me
);

721 
«tive_¨ch
 = 
	`physiˇl_¨ch
();

722 i‡(
«tive_¨ch
 < 0) {

725 
öfo
.
kexec_Êags
 |
«tive_¨ch
;

727 
ªsu…
 = 
fûe_ty≥
[
i
].
	`lﬂd
(
¨gc
, 
¨gv
, 
kî√l_buf
, 
kî√l_size
, &
öfo
);

728 i‡(
ªsu…
 < 0) {

729 
ªsu…
) {

730 
ENOCRASHKERNEL
:

731 
	`Ârötf
(
°dîr
,

735 
EFAILED
:

737 
	`Ârötf
(
°dîr
, "C™nŸÜﬂd %s\n", 
kî√l
);

740  
ªsu…
;

743 i‡(
	`¨ch_com∑t_åampﬁöe
(&
öfo
) < 0) {

746 i‡(
öfo
.
kexec_Êags
 & 
KEXEC_PRESERVE_CONTEXT
) {

747 
	`add_backup_£gmíts
(&
öfo
, 
mem_mö
, 
mem_max
 - mem_min + 1);

750 
i
 = 0; i < 
öfo
.
ƒ_£gmíts
; i++) {

751 i‡(!
	`vÆid_mem‹y_£gmít
(&
öfo
, info.
£gmít
 +
i
)) {

752 
	`Ârötf
(
°dîr
, "Invalid memory segment %p - %p\n",

753 
öfo
.
£gmít
[
i
].
mem
,

754 ((*)
öfo
.
£gmít
[
i
].
mem
) +

755 
öfo
.
£gmít
[
i
].
memsz
);

760 i‡(
	`s‹t_£gmíts
(&
öfo
) < 0) {

764 
	`upd©e_purg©‹y
(&
öfo
);

765 i‡(
íåy
)

766 
öfo
.
íåy
 =Éntry;

768 
	`dbg¥ötf
("kexec_load:Éntry = %p flags = 0x%lx\n",

769 
öfo
.
íåy
, info.
kexec_Êags
);

770 i‡(
kexec_debug
)

771 
	`¥öt_£gmíts
(
°dîr
, &
öfo
);

773 i‡(
	`xí_¥e£¡
())

774 
ªsu…
 = 
	`xí_kexec_lﬂd
(&
öfo
);

776 
ªsu…
 = 
	`kexec_lﬂd
(
öfo
.
íåy
,

777 
öfo
.
ƒ_£gmíts
, info.
£gmít
,

778 
öfo
.
kexec_Êags
);

779 i‡(
ªsu…
 != 0) {

781 
	`Ârötf
(
°dîr
, "kexec_load failed: %s\n",

782 
	`°ªº‹
(
î∫o
));

783 
	`Ârötf
(
°dîr
, "entry = %p flags = 0x%lx\n",

784 
öfo
.
íåy
, info.
kexec_Êags
);

785 
	`¥öt_£gmíts
(
°dîr
, &
öfo
);

787  
ªsu…
;

788 
	}
}

790 
	$k_u∆ﬂd
 (
kexec_Êags
)

792 
ªsu…
;

793 
«tive_¨ch
;

796 
«tive_¨ch
 = 
	`physiˇl_¨ch
();

797 i‡(
«tive_¨ch
 < 0) {

800 
kexec_Êags
 |
«tive_¨ch
;

802 i‡(
	`xí_¥e£¡
())

803 
ªsu…
 = 
	`xí_kexec_u∆ﬂd
(
kexec_Êags
);

805 
ªsu…
 = 
	`kexec_lﬂd
(
NULL
, 0, NULL, 
kexec_Êags
);

806 i‡(
ªsu…
 != 0) {

808 
	`Ârötf
(
°dîr
, "kexec unload failed: %s\n",

809 
	`°ªº‹
(
î∫o
));

811  
ªsu…
;

812 
	}
}

817 
	$my_shutdown
()

819 *
¨gs
[] = {

823 
NULL


826 
	`execv
("/sbö/shutdown", 
¨gs
);

827 
	`execv
("/ëc/shutdown", 
¨gs
);

828 
	`execv
("/bö/shutdown", 
¨gs
);

830 
	`≥º‹
("shutdown");

832 
	}
}

837 
	$my_exec
()

839 i‡(
	`xí_¥e£¡
())

840 
	`xí_kexec_exec
();

842 
	`ªboŸ
(
LINUX_REBOOT_CMD_KEXEC
);

844 
	`Ârötf
(
°dîr
, "kexec failed: %s\n",

845 
	`°ªº‹
(
î∫o
));

847 
	}
}

849 
kexec_lﬂded
();

851 
	$lﬂd_jump_back_hñ≥r_image
(
kexec_Êags
, *
íåy
)

853 
ªsu…
;

854 
kexec_£gmít
 
£g
;

856 
	`mem£t
(&
£g
, 0, (seg));

857 
ªsu…
 = 
	`kexec_lﬂd
(
íåy
, 1, &
£g
, 
kexec_Êags
);

858  
ªsu…
;

859 
	}
}

864 
	$my_lﬂd_jump_back_hñ≥r
(
kexec_Êags
, *
íåy
)

866 
ªsu…
;

868 i‡(
	`kexec_lﬂded
()) {

869 
	`Ârötf
(
°dîr
, "There is kexec kernelÜoaded, make sure "

873 i‡(!
íåy
) {

874 
	`Ârötf
(
°dîr
, "Please specify jump backÉntry "

878 
ªsu…
 = 
	`lﬂd_jump_back_hñ≥r_image
(
kexec_Êags
, 
íåy
);

879 i‡(
ªsu…
) {

880 
	`Ârötf
(
°dîr
, "load jump back kernel failed: %s\n",

881 
	`°ªº‹
(
î∫o
));

882  
ªsu…
;

884  
ªsu…
;

885 
	}
}

887 
	$vîsi⁄
()

889 
	`¥ötf
(
PACKAGE_STRING
 "Ññó£d " 
PACKAGE_DATE
 "\n");

890 
	}
}

892 
	$ußge
()

894 
i
;

896 
	`vîsi⁄
();

897 
	`¥ötf
("Usage: kexec [OPTION]... [kernel]\n"

931 
i
 = 0; i < 
fûe_ty≥s
; i++) {

932 
	`¥ötf
("%s\n", 
fûe_ty≥
[
i
].
«me
);

933 
fûe_ty≥
[
i
].
	`ußge
();

935 
	`¥ötf
( "Architecture options: \n");

936 
	`¨ch_ußge
();

937 
	`¥ötf
("\n");

938 
	}
}

940 
	$kexec_lﬂded
()

942 
ªt
 = -1;

943 
FILE
 *
Â
;

944 *
p
;

945 
löe
[3];

948 i‡(
	`xí_¥e£¡
())

951 
Â
 = 
	`f›í
("/sys/kernel/kexec_loaded", "r");

952 i‡(
Â
 =
NULL
)

955 
p
 = 
	`fgës
(
löe
, ÷öe), 
Â
);

956 
	`f˛o£
(
Â
);

958 i‡(
p
 =
NULL
)

961 
ªt
 = 
	`°πﬁ
(
löe
, &
p
, 10);

964 i‡(
ªt
 > 
INT_MAX
)

968 i‡(
p
 =
löe
)

971  ()
ªt
;

972 
	}
}

977 
	$ªmove_∑ømëî
(*
löe
, c⁄° *
∑øm_«me
)

979 *
°¨t
, *
íd
;

981 
°¨t
 = 
	`°r°r
(
löe
, 
∑øm_«me
);

984 i‡(!
°¨t
)

991 i‡(
°¨t
 !
löe
 && !
	`is•a˚
(*(start-1)))

994 
íd
 = 
	`°r°r
(
°¨t
, " ");

995 i‡(!
íd
)

996 *
°¨t
 = 0;

998 
	`memmove
(
°¨t
, 
íd
+1, 
	`°æí
(end));

999 *(
íd
 + 
	`°æí
(end)) = 0;

1001 
	}
}

1016 *
	$gë_comm™d_löe
()

1018 
FILE
 *
Â
;

1019 *
löe
;

1020 c⁄° 
sizeof_löe
 = 2048;

1022 
löe
 = 
	`mÆloc
(
sizeof_löe
);

1023 i‡(
löe
 =
NULL
)

1024 
	`dõ
("CouldÇotállocate memoryÅoÑead /proc/cmdline.");

1026 
Â
 = 
	`f›í
("/proc/cmdline", "r");

1027 i‡(!
Â
)

1028 
	`dõ
("CouldÇot open /proc/cmdline.");

1030 i‡(
	`fgës
(
löe
, 
sizeof_löe
, 
Â
Ë=
NULL
)

1031 
	`dõ
("Can'tÑead /proc/cmdline.");

1033 
	`f˛o£
(
Â
);

1036 
löe
[
	`°æí
(line) - 1] = '\0';

1038 
	`ªmove_∑ømëî
(
löe
, "BOOT_IMAGE");

1039 i‡(
kexec_Êags
 & 
KEXEC_ON_CRASH
)

1040 
	`ªmove_∑ømëî
(
löe
, "crashkernel");

1042  
löe
;

1043 
	}
}

1046 
	$check_ªu£_öôrd
()

1048 *
°r
 = 
NULL
;

1049 *
löe
 = 
	`gë_comm™d_löe
();

1051 
°r
 = 
	`°r°r
(
löe
, "retain_initrd");

1052 
	`‰ì
(
löe
);

1054 i‡(
°r
 =
NULL
)

1055 
	`dõ
("unrecoverableÉrror: current boot didn't "

1057 
	}
}

1059 *
	$c⁄ˇt_cmdlöe
(c⁄° *
ba£
, c⁄° *
≠≥nd
)

1061 *
cmdlöe
;

1062 i‡(!
ba£
 && !
≠≥nd
)

1063  
NULL
;

1064 i‡(
≠≥nd
 && !
ba£
)

1065  
	`x°rdup
(
≠≥nd
);

1066 i‡(
ba£
 && !
≠≥nd
)

1067  
	`x°rdup
(
ba£
);

1068 
cmdlöe
 = 
	`xmÆloc
(
	`°æí
(
ba£
Ë+ 1 + såÀn(
≠≥nd
) + 1);

1069 
	`°r˝y
(
cmdlöe
, 
ba£
);

1070 
	`°rˇt
(
cmdlöe
, " ");

1071 
	`°rˇt
(
cmdlöe
, 
≠≥nd
);

1072  
cmdlöe
;

1073 
	}
}

1076 
	$maö
(
¨gc
, *
¨gv
[])

1078 
do_lﬂd
 = 1;

1079 
do_exec
 = 0;

1080 
do_lﬂd_jump_back_hñ≥r
 = 0;

1081 
do_shutdown
 = 1;

1082 
do_sync
 = 1;

1083 
do_ifdown
 = 0;

1084 
do_u∆ﬂd
 = 0;

1085 
do_ªu£_öôrd
 = 0;

1086 *
íåy
 = 0;

1087 *
ty≥
 = 0;

1088 *
íd±r
;

1089 
›t
;

1090 
ªsu…
 = 0;

1091 
fûeöd
;

1092 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

1093 
KEXEC_ALL_OPTIONS


1096 c⁄° 
sh‹t_›ti⁄s
[] = 
KEXEC_ALL_OPT_STR
;

1098 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
,

1099 
›ti⁄s
, 0)) != -1) {

1100 
›t
) {

1102 
OPT_HELP
:

1103 
	`ußge
();

1105 
OPT_VERSION
:

1106 
	`vîsi⁄
();

1108 
OPT_DEBUG
:

1109 
kexec_debug
 = 1;

1110 
OPT_NOIFDOWN
:

1111 
do_ifdown
 = 0;

1113 
OPT_FORCE
:

1114 
do_lﬂd
 = 1;

1115 
do_shutdown
 = 0;

1116 
do_sync
 = 1;

1117 
do_ifdown
 = 1;

1118 
do_exec
 = 1;

1120 
OPT_LOAD
:

1121 
do_lﬂd
 = 1;

1122 
do_exec
 = 0;

1123 
do_shutdown
 = 0;

1125 
OPT_UNLOAD
:

1126 
do_lﬂd
 = 0;

1127 
do_shutdown
 = 0;

1128 
do_sync
 = 0;

1129 
do_u∆ﬂd
 = 1;

1131 
OPT_EXEC
:

1132 
do_lﬂd
 = 0;

1133 
do_shutdown
 = 0;

1134 
do_sync
 = 1;

1135 
do_ifdown
 = 1;

1136 
do_exec
 = 1;

1138 
OPT_LOAD_JUMP_BACK_HELPER
:

1139 
do_lﬂd
 = 0;

1140 
do_shutdown
 = 0;

1141 
do_sync
 = 1;

1142 
do_ifdown
 = 1;

1143 
do_exec
 = 0;

1144 
do_lﬂd_jump_back_hñ≥r
 = 1;

1145 
kexec_Êags
 = 
KEXEC_PRESERVE_CONTEXT
;

1147 
OPT_ENTRY
:

1148 
íåy
 = (*)
	`°πoul
(
›èrg
, &
íd±r
, 0);

1149 i‡(*
íd±r
) {

1150 
	`Ârötf
(
°dîr
,

1152 
›èrg
);

1153 
	`ußge
();

1157 
OPT_LOAD_PRESERVE_CONTEXT
:

1158 
do_lﬂd
 = 1;

1159 
do_exec
 = 0;

1160 
do_shutdown
 = 0;

1161 
do_sync
 = 1;

1162 
kexec_Êags
 = 
KEXEC_PRESERVE_CONTEXT
;

1164 
OPT_TYPE
:

1165 
ty≥
 = 
›èrg
;

1167 
OPT_PANIC
:

1168 
do_lﬂd
 = 1;

1169 
do_exec
 = 0;

1170 
do_shutdown
 = 0;

1171 
do_sync
 = 0;

1172 
kexec_Êags
 = 
KEXEC_ON_CRASH
;

1174 
OPT_MEM_MIN
:

1175 
mem_mö
 = 
	`°πoul
(
›èrg
, &
íd±r
, 0);

1176 i‡(*
íd±r
) {

1177 
	`Ârötf
(
°dîr
,

1179 
›èrg
);

1180 
	`ußge
();

1184 
OPT_MEM_MAX
:

1185 
mem_max
 = 
	`°πoul
(
›èrg
, &
íd±r
, 0);

1186 i‡(*
íd±r
) {

1187 
	`Ârötf
(
°dîr
,

1189 
›èrg
);

1190 
	`ußge
();

1194 
OPT_REUSE_INITRD
:

1195 
do_ªu£_öôrd
 = 1;

1202 i‡(
do_lﬂd
 && (
kexec_Êags
 & 
KEXEC_ON_CRASH
) &&

1203 !
	`is_¸ashkî√l_mem_ª£rved
()) {

1204 
	`dõ
("Memory for crashkernel isÇotÑeserved\n"

1210 i‡(
do_lﬂd
 && (
kexec_Êags
 & 
KEXEC_PRESERVE_CONTEXT
) &&

1211 
mem_max
 =
ULONG_MAX
) {

1212 
	`dõ
("Please specify memoryÑange used by kexeced kernel\n"

1217 
fûeöd
 = 
›töd
;

1219 
›ãº
 = 1;

1220 
›töd
 = 1;

1222 
ªsu…
 = 
	`¨ch_¥o˚ss_›ti⁄s
(
¨gc
, 
¨gv
);

1225 i‡(!
do_lﬂd
) {

1226 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
,

1227 
›ti⁄s
, 0)) != -1) {

1228 i‡((
›t
 ='?'Ë|| (›à>
OPT_ARCH_MAX
)) {

1229 
	`ußge
();

1235 i‡(
do_ªu£_öôrd
){

1236 
	`check_ªu£_öôrd
();

1237 
	`¨ch_ªu£_öôrd
();

1240 i‡(
do_u∆ﬂd
) {

1241 
ªsu…
 = 
	`k_u∆ﬂd
(
kexec_Êags
);

1243 i‡(
do_lﬂd
 && (
ªsu…
 == 0)) {

1244 
ªsu…
 = 
	`my_lﬂd
(
ty≥
, 
fûeöd
, 
¨gc
, 
¨gv
, 
kexec_Êags
, 
íåy
);

1247 i‡((
ªsu…
 =0Ë&& (
do_shutdown
 || 
do_exec
Ë&& !
	`kexec_lﬂded
()) {

1248 
	`dõ
("Nothing has beenÜoaded!\n");

1250 i‡((
ªsu…
 =0Ë&& 
do_shutdown
) {

1251 
ªsu…
 = 
	`my_shutdown
();

1253 i‡((
ªsu…
 =0Ë&& 
do_sync
) {

1254 
	`sync
();

1256 i‡((
ªsu…
 =0Ë&& 
do_ifdown
) {

1257 
	`ifdown
();

1259 i‡((
ªsu…
 =0Ë&& 
do_exec
) {

1260 
ªsu…
 = 
	`my_exec
();

1262 i‡((
ªsu…
 =0Ë&& 
do_lﬂd_jump_back_hñ≥r
) {

1263 
ªsu…
 = 
	`my_lﬂd_jump_back_hñ≥r
(
kexec_Êags
, 
íåy
);

1266 
	`fÊush
(
°dout
);

1267 
	`fÊush
(
°dîr
);

1268  
ªsu…
;

1269 
	}
}

	@kexec/kexec.h

1 #i‚de‡
KEXEC_H


2 
	#KEXEC_H


	)

4 
	~"c⁄fig.h
"

6 
	~<sys/ty≥s.h
>

7 
	~<°dio.h
>

8 
	~<°döt.h
>

9 
	~<°rög.h
>

10 
	#USE_BSD


	)

11 
	~<byãsw≠.h
>

12 
	~<ídün.h
>

13 
	#_GNU_SOURCE


	)

15 
	~"kexec-ñf.h
"

16 
	~"unu£d.h
"

18 #i‚de‡
BYTE_ORDER


19 #îr‹ 
BYTE_ORDER
 
nŸ
 
deföed


22 #i‚de‡
LITTLE_ENDIAN


23 #îr‹ 
LITTLE_ENDIAN
 
nŸ
 
deföed


26 #i‚de‡
BIG_ENDIAN


27 #îr‹ 
BIG_ENDIAN
 
nŸ
 
deföed


30 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


31 
	#˝u_to_À16
(
vÆ
Ë(vÆ)

	)

32 
	#˝u_to_À32
(
vÆ
Ë(vÆ)

	)

33 
	#˝u_to_À64
(
vÆ
Ë(vÆ)

	)

34 
	#˝u_to_be16
(
vÆ
Ë
	`bsw≠_16
(vÆ)

	)

35 
	#˝u_to_be32
(
vÆ
Ë
	`bsw≠_32
(vÆ)

	)

36 
	#˝u_to_be64
(
vÆ
Ë
	`bsw≠_64
(vÆ)

	)

37 
	#À16_to_˝u
(
vÆ
Ë(vÆ)

	)

38 
	#À32_to_˝u
(
vÆ
Ë(vÆ)

	)

39 
	#À64_to_˝u
(
vÆ
Ë(vÆ)

	)

40 
	#be16_to_˝u
(
vÆ
Ë
	`bsw≠_16
(vÆ)

	)

41 
	#be32_to_˝u
(
vÆ
Ë
	`bsw≠_32
(vÆ)

	)

42 
	#be64_to_˝u
(
vÆ
Ë
	`bsw≠_64
(vÆ)

	)

43 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


44 
	#˝u_to_À16
(
vÆ
Ë
	`bsw≠_16
(vÆ)

	)

45 
	#˝u_to_À32
(
vÆ
Ë
	`bsw≠_32
(vÆ)

	)

46 
	#˝u_to_À64
(
vÆ
Ë
	`bsw≠_64
(vÆ)

	)

47 
	#˝u_to_be16
(
vÆ
Ë(vÆ)

	)

48 
	#˝u_to_be32
(
vÆ
Ë(vÆ)

	)

49 
	#˝u_to_be64
(
vÆ
Ë(vÆ)

	)

50 
	#À16_to_˝u
(
vÆ
Ë
	`bsw≠_16
(vÆ)

	)

51 
	#À32_to_˝u
(
vÆ
Ë
	`bsw≠_32
(vÆ)

	)

52 
	#À64_to_˝u
(
vÆ
Ë
	`bsw≠_64
(vÆ)

	)

53 
	#be16_to_˝u
(
vÆ
Ë(vÆ)

	)

54 
	#be32_to_˝u
(
vÆ
Ë(vÆ)

	)

55 
	#be64_to_˝u
(
vÆ
Ë(vÆ)

	)

57 #îr‹ 
unknw⁄
 
BYTE_ORDER


64 
	#EFAILED
 -1

	)

65 
	#ENOCRASHKERNEL
 -2

	)

72 
bad_u«lig√d_ac˚ss_Àngth
 ();

74 
	#gë_u«lig√d
(
loc
) \

76 
	`__ty≥of__
(*(
loc
)Ë
_v
; \

77 
size_t
 
size
 = (*(
loc
)); \

78 
size
) { \

80 
	`mem˝y
(&
_v
, (
loc
), 
size
); \

83 
_v
 = 
	`bad_u«lig√d_ac˚ss_Àngth
(); \

86 
_v
; \

87 })

	)

89 
	#put_u«lig√d
(
vÆue
, 
loc
) \

91 
size_t
 
size
 = (*(
loc
)); \

92 
	`__ty≥of__
(*(
loc
)Ë
_v
 = 
vÆue
; \

93 
size
) { \

95 
	`mem˝y
((
loc
), &
_v
, 
size
); \

98 
	`bad_u«lig√d_ac˚ss_Àngth
(); \

101 } 0)

	)

103 
	#_ALIGN_UP_MASK
(
addr
, 
mask
Ë((◊ddrË+ (mask)Ë& ~(mask))

	)

104 
	#_ALIGN_DOWN_MASK
(
addr
, 
mask
Ë(◊ddrË& ~(mask))

	)

107 
	#_ALIGN_UP
(
addr
, 
size
) \

108 
	`_ALIGN_UP_MASK
(
addr
, (
	`ty≥of
◊ddr))(
size
Ë- 1)

	)

109 
	#_ALIGN_DOWN
(
addr
, 
size
) \

110 
	`_ALIGN_DOWN_MASK
(
addr
, (
	`ty≥of
◊ddr))(
size
Ë- 1)

	)

113 
	#_ALIGN
(
addr
, 
size
Ë
	`_ALIGN_UP
◊ddr, size)

	)

115 
mem_mö
, 
mem_max
;

116 
kexec_debug
;

118 
	#dbg¥ötf
(...) \

120 i‡(
kexec_debug
) \

121 
	`Ârötf
(
°dîr
, 
__VA_ARGS__
); \

122 } 0)

	)

124 
	skexec_£gmít
 {

125 c⁄° *
	mbuf
;

126 
size_t
 
	mbufsz
;

127 c⁄° *
	mmem
;

128 
size_t
 
	mmemsz
;

131 
	smem‹y_ønge
 {

132 
	m°¨t
, 
	míd
;

133 
	mty≥
;

134 
	#RANGE_RAM
 0

	)

135 
	#RANGE_RESERVED
 1

	)

136 
	#RANGE_ACPI
 2

	)

137 
	#RANGE_ACPI_NVS
 3

	)

138 
	#RANGE_UNCACHED
 4

	)

141 
	smem‹y_ønges
 {

142 
	msize
;

143 
mem‹y_ønge
 *
	mønges
;

146 
	skexec_öfo
 {

147 
kexec_£gmít
 *
	m£gmít
;

148 
	mƒ_£gmíts
;

149 
mem‹y_ønge
 *
	mmem‹y_ønge
;

150 
	mmem‹y_ønges
;

151 
mem‹y_ønge
 *
	m¸ash_ønge
;

152 
	mƒ_¸ash_ønges
;

153 *
	míåy
;

154 
mem_ehdr
 
	mrhdr
;

155 
	mbackup_°¨t
;

156 
	mkexec_Êags
;

157 
	mbackup_§c_°¨t
;

158 
	mbackup_§c_size
;

161 
	s¨ch_m≠_íåy
 {

162 c⁄° *
	mmachöe
;

163 
	m¨ch
;

166 c⁄° 
¨ch_m≠_íåy
 
¨ches
[];

167 
physiˇl_¨ch
();

169 
	#KERNEL_VERSION
(
maj‹
, 
mö‹
, 
∑tch
) \

170 (((
maj‹
Ë<< 16Ë| ((
mö‹
Ë<< 8Ë| 
∑tch
)

	)

171 
kî√l_vîsi⁄
();

173 
ußge
();

174 
gë_mem‹y_ønges
(
mem‹y_ønge
 **
ønge
, *
ønges
,

175 
kexec_Êags
);

176 
vÆid_mem‹y_ønge
(
kexec_öfo
 *
öfo
,

177 
s°¨t
, 
£nd
);

178 
¥öt_£gmíts
(
FILE
 *
fûe
, 
kexec_öfo
 *
öfo
);

179 
s‹t_£gmíts
(
kexec_öfo
 *
öfo
);

180 
loˇã_hﬁe
(
kexec_öfo
 *
öfo
,

181 
hﬁe_size
, 
hﬁe_Æign
,

182 
hﬁe_mö
, 
hﬁe_max
,

183 
hﬁe_íd
);

185 (
	t¥obe_t
)(c⁄° *
	tkî√l_buf
, 
	toff_t
 
	tkî√l_size
);

186 (
	tlﬂd_t
 )(
	t¨gc
, **
	t¨gv
,

187 c⁄° *
	tkî√l_buf
, 
	toff_t
 
	tkî√l_size
,

188 
	tkexec_öfo
 *
	töfo
);

189 (
	tußge_t
)();

190 
	sfûe_ty≥
 {

191 c⁄° *
«me
;

192 
¥obe_t
 *
¥obe
;

193 
lﬂd_t
 *
lﬂd
;

194 
ußge_t
 *
ußge
;

197 
fûe_ty≥
 file_type[];

198 
fûe_ty≥s
;

200 
	#OPT_HELP
 'h'

	)

201 
	#OPT_VERSION
 'v'

	)

202 
	#OPT_DEBUG
 'd'

	)

203 
	#OPT_FORCE
 'f'

	)

204 
	#OPT_NOIFDOWN
 'x'

	)

205 
	#OPT_EXEC
 'e'

	)

206 
	#OPT_LOAD
 'l'

	)

207 
	#OPT_UNLOAD
 'u'

	)

208 
	#OPT_TYPE
 't'

	)

209 
	#OPT_PANIC
 'p'

	)

210 
	#OPT_MEM_MIN
 256

	)

211 
	#OPT_MEM_MAX
 257

	)

212 
	#OPT_REUSE_INITRD
 258

	)

213 
	#OPT_LOAD_PRESERVE_CONTEXT
 259

	)

214 
	#OPT_LOAD_JUMP_BACK_HELPER
 260

	)

215 
	#OPT_ENTRY
 261

	)

216 
	#OPT_MAX
 262

	)

217 
	#KEXEC_OPTIONS
 \

218 { "hñp", 0, 0, 
OPT_HELP
 
	}
}, \

219 { "vîsi⁄", 0, 0, 
OPT_VERSION
 }, \

220 { "f‹˚", 0, 0, 
OPT_FORCE
 }, \

221 { "no-ifdown", 0, 0, 
OPT_NOIFDOWN
 }, \

222 { "lﬂd", 0, 0, 
OPT_LOAD
 }, \

223 { "u∆ﬂd", 0, 0, 
OPT_UNLOAD
 }, \

224 { "exec", 0, 0, 
OPT_EXEC
 }, \

225 { "lﬂd-¥e£rve-c⁄ãxt", 0, 0, 
OPT_LOAD_PRESERVE_CONTEXT
}, \

226 { "lﬂd-jump-back-hñ≥r", 0, 0, 
OPT_LOAD_JUMP_BACK_HELPER
 }, \

227 { "íåy", 1, 0, 
OPT_ENTRY
 }, \

228 { "ty≥", 1, 0, 
OPT_TYPE
 }, \

229 { "lﬂd-∑nic", 0, 0, 
OPT_PANIC
 }, \

230 { "mem-mö", 1, 0, 
OPT_MEM_MIN
 }, \

231 { "mem-max", 1, 0, 
OPT_MEM_MAX
 }, \

232 { "ªu£öôrd", 0, 0, 
OPT_REUSE_INITRD
 }, \

233 { "debug", 0, 0, 
OPT_DEBUG
 }, \

234 

	)

235 
	#KEXEC_OPT_STR
 "h?vdfxluë:p"

	)

237 
dbg¥öt_mem_ønge
(c⁄° *
¥efix
, 
mem‹y_ønge
 *
mr
, 
ƒ_mr
);

238 
	$dõ
(c⁄° *
fmt
, ...)

239 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

240 *
	`xmÆloc
(
size_t
 
size
);

241 *
	`xªÆloc
(*
±r
, 
size_t
 
size
);

242 *
	`¶uΩ_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
);

243 *
	`¶uΩ_fûe_Àn
(c⁄° *
fûíame
, 
off_t
 
size
, off_à*
ƒód
);

244 *
	`¶uΩ_decom¥ess_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
);

245 
	`vút_to_phys
(
addr
);

246 
	`add_£gmít
(
kexec_öfo
 *
öfo
,

247 c⁄° *
buf
, 
size_t
 
bufsz
, 
ba£
, size_à
memsz
);

248 
	`add_£gmít_phys_vút
(
kexec_öfo
 *
öfo
,

249 c⁄° *
buf
, 
size_t
 
bufsz
, 
ba£
, size_à
memsz
,

250 
phys
);

251 
	`add_buf„r
(
kexec_öfo
 *
öfo
,

252 c⁄° *
buf
, 
bufsz
, 
memsz
,

253 
buf_Æign
, 
buf_mö
, 
buf_max
,

254 
buf_íd
);

255 
	`add_buf„r_vút
(
kexec_öfo
 *
öfo
,

256 c⁄° *
buf
, 
bufsz
, 
memsz
,

257 
buf_Æign
, 
buf_mö
, 
buf_max
,

258 
buf_íd
);

259 
	`add_buf„r_phys_vút
(
kexec_öfo
 *
öfo
,

260 c⁄° *
buf
, 
bufsz
, 
memsz
,

261 
buf_Æign
, 
buf_mö
, 
buf_max
,

262 
buf_íd
, 
phys
);

263 
	`¨ch_ªu£_öôrd
();

265 
	`ifdown
();

267 
purg©‹y
[];

268 
size_t
 
purg©‹y_size
;

270 
	#BOOTLOADER
 "kexec"

	)

271 
	#BOOTLOADER_VERSION
 
PACKAGE_VERSION


	)

273 
	`¨ch_ußge
();

274 
	`¨ch_¥o˚ss_›ti⁄s
(
¨gc
, **
¨gv
);

275 
	`¨ch_com∑t_åampﬁöe
(
kexec_öfo
 *
öfo
);

276 
	`¨ch_upd©e_purg©‹y
(
kexec_öfo
 *
öfo
);

277 
	`is_¸ashkî√l_mem_ª£rved
();

278 
	`gë_max_¸ash_kî√l_limô
(
uöt64_t
 *
°¨t
, uöt64_à*
íd
);

279 *
	`gë_comm™d_löe
();

281 
	`kexec_iomem_f‹_óch_löe
(*
m©ch
,

282 (*
ˇŒback
)(*
d©a
,

283 
ƒ
,

284 *
°r
,

285 
ba£
,

286 
Àngth
),

287 *
d©a
);

288 
	`∑r£_iomem_sögÀ
(*
°r
, 
uöt64_t
 *
°¨t
, uöt64_à*
íd
);

289 c⁄° * 
	`¥oc_iomem
();

291 
	#MAX_LINE
 160

	)

293 *
	`c⁄ˇt_cmdlöe
(c⁄° *
ba£
, c⁄° *
≠≥nd
);

295 
	`xí_¥e£¡
();

296 
	`xí_kexec_lﬂd
(
kexec_öfo
 *
öfo
);

297 
	`xí_kexec_u∆ﬂd
(
uöt64_t
 
kexec_Êags
);

298 
	`xí_kexec_exec
();

	@kexec/libfdt/fdt.c

51 
	~"libfdt_ív.h
"

53 
	~<fdt.h
>

54 
	~<libfdt.h
>

56 
	~"libfdt_öã∫Æ.h
"

58 
	$fdt_check_hódî
(c⁄° *
fdt
)

60 i‡(
	`fdt_magic
(
fdt
Ë=
FDT_MAGIC
) {

62 i‡(
	`fdt_vîsi⁄
(
fdt
Ë< 
FDT_FIRST_SUPPORTED_VERSION
)

63  -
FDT_ERR_BADVERSION
;

64 i‡(
	`fdt_œ°_comp_vîsi⁄
(
fdt
Ë> 
FDT_LAST_SUPPORTED_VERSION
)

65  -
FDT_ERR_BADVERSION
;

66 } i‡(
	`fdt_magic
(
fdt
Ë=
FDT_SW_MAGIC
) {

68 i‡(
	`fdt_size_dt_°ru˘
(
fdt
) == 0)

69  -
FDT_ERR_BADSTATE
;

71  -
FDT_ERR_BADMAGIC
;

75 
	}
}

77 c⁄° *
	$fdt_off£t_±r
(c⁄° *
fdt
, 
off£t
, 
Àn
)

79 c⁄° *
p
;

81 i‡(
	`fdt_vîsi⁄
(
fdt
) >= 0x11)

82 i‡(((
off£t
 + 
Àn
) < offset)

83 || ((
off£t
 + 
Àn
Ë> 
	`fdt_size_dt_°ru˘
(
fdt
)))

84  
NULL
;

86 
p
 = 
	`_fdt_off£t_±r
(
fdt
, 
off£t
);

88 i‡(
p
 + 
Àn
 <Ö)

89  
NULL
;

90  
p
;

91 
	}
}

93 
uöt32_t
 
	$fdt_√xt_èg
(c⁄° *
fdt
, 
off£t
, *
√xtoff£t
)

95 c⁄° 
uöt32_t
 *
ègp
, *
À≈
;

96 
uöt32_t
 
èg
;

97 c⁄° *
p
;

99 i‡(
off£t
 % 
FDT_TAGSIZE
)

102 
ègp
 = 
	`fdt_off£t_±r
(
fdt
, 
off£t
, 
FDT_TAGSIZE
);

103 i‡(! 
ègp
)

104  
FDT_END
;

105 
èg
 = 
	`fdt32_to_˝u
(*
ègp
);

106 
off£t
 +
FDT_TAGSIZE
;

108 
èg
) {

109 
FDT_BEGIN_NODE
:

112 
p
 = 
	`fdt_off£t_±r
(
fdt
, 
off£t
++, 1);

113 } 
p
 && (*p != '\0'));

114 i‡(! 
p
)

115  
FDT_END
;

117 
FDT_PROP
:

118 
À≈
 = 
	`fdt_off£t_±r
(
fdt
, 
off£t
, (*lenp));

119 i‡(! 
À≈
)

120  
FDT_END
;

122 
off£t
 +2*
FDT_TAGSIZE
 + 
	`fdt32_to_˝u
(*
À≈
);

126 i‡(
√xtoff£t
)

127 *
√xtoff£t
 = 
	`FDT_TAGALIGN
(
off£t
);

129  
èg
;

130 
	}
}

132 
	$_fdt_check_node_off£t
(c⁄° *
fdt
, 
off£t
)

134 i‡((
off£t
 < 0Ë|| (off£à% 
FDT_TAGSIZE
)

135 || (
	`fdt_√xt_èg
(
fdt
, 
off£t
, &off£tË!
FDT_BEGIN_NODE
))

136  -
FDT_ERR_BADOFFSET
;

138  
off£t
;

139 
	}
}

141 
	$fdt_√xt_node
(c⁄° *
fdt
, 
off£t
, *
dïth
)

143 
√xtoff£t
 = 0;

144 
uöt32_t
 
èg
;

146 i‡(
off£t
 >= 0)

147 i‡((
√xtoff£t
 = 
	`_fdt_check_node_off£t
(
fdt
, 
off£t
)) < 0)

148  
√xtoff£t
;

151 
off£t
 = 
√xtoff£t
;

152 
èg
 = 
	`fdt_√xt_èg
(
fdt
, 
off£t
, &
√xtoff£t
);

154 
èg
) {

155 
FDT_PROP
:

156 
FDT_NOP
:

159 
FDT_BEGIN_NODE
:

160 i‡(
dïth
)

161 (*
dïth
)++;

164 
FDT_END_NODE
:

165 i‡(
dïth
)

166 (*
dïth
)--;

169 
FDT_END
:

170  -
FDT_ERR_NOTFOUND
;

173  -
FDT_ERR_BADSTRUCTURE
;

175 } 
èg
 !
FDT_BEGIN_NODE
);

177  
off£t
;

178 
	}
}

180 c⁄° *
	$_fdt_föd_°rög
(c⁄° *
°πab
, 
èbsize
, c⁄° *
s
)

182 
Àn
 = 
	`°æí
(
s
) + 1;

183 c⁄° *
œ°
 = 
°πab
 + 
èbsize
 - 
Àn
;

184 c⁄° *
p
;

186 
p
 = 
°πab
;Ö <
œ°
;Ö++)

187 i‡(
	`memcmp
(
p
, 
s
, 
Àn
) == 0)

188  
p
;

189  
NULL
;

190 
	}
}

192 
	$fdt_move
(c⁄° *
fdt
, *
buf
, 
bufsize
)

194 
	`FDT_CHECK_HEADER
(
fdt
);

196 i‡(
	`fdt_tŸÆsize
(
fdt
Ë> 
bufsize
)

197  -
FDT_ERR_NOSPACE
;

199 
	`memmove
(
buf
, 
fdt
, 
	`fdt_tŸÆsize
(fdt));

201 
	}
}

	@kexec/libfdt/fdt.h

1 #i‚de‡
_FDT_H


2 
	#_FDT_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	sfdt_hódî
 {

7 
uöt32_t
 
	mmagic
;

8 
uöt32_t
 
	mtŸÆsize
;

9 
uöt32_t
 
	moff_dt_°ru˘
;

10 
uöt32_t
 
	moff_dt_°rögs
;

11 
uöt32_t
 
	moff_mem_rsvm≠
;

12 
uöt32_t
 
	mvîsi⁄
;

13 
uöt32_t
 
	mœ°_comp_vîsi⁄
;

16 
uöt32_t
 
	mboŸ_˝uid_phys
;

19 
uöt32_t
 
	msize_dt_°rögs
;

22 
uöt32_t
 
	msize_dt_°ru˘
;

25 
	sfdt_ª£rve_íåy
 {

26 
uöt64_t
 
	maddªss
;

27 
uöt64_t
 
	msize
;

30 
	sfdt_node_hódî
 {

31 
uöt32_t
 
	mèg
;

32 
	m«me
[0];

35 
	sfdt_¥›îty
 {

36 
uöt32_t
 
	mèg
;

37 
uöt32_t
 
	mÀn
;

38 
uöt32_t
 
	m«meoff
;

39 
	md©a
[0];

44 
	#FDT_MAGIC
 0xd00d„ed

	)

45 
	#FDT_TAGSIZE
 (
uöt32_t
)

	)

47 
	#FDT_BEGIN_NODE
 0x1

	)

48 
	#FDT_END_NODE
 0x2

	)

49 
	#FDT_PROP
 0x3

	)

51 
	#FDT_NOP
 0x4

	)

52 
	#FDT_END
 0x9

	)

54 
	#FDT_V1_SIZE
 (7*(
uöt32_t
))

	)

55 
	#FDT_V2_SIZE
 (
FDT_V1_SIZE
 + (
uöt32_t
))

	)

56 
	#FDT_V3_SIZE
 (
FDT_V2_SIZE
 + (
uöt32_t
))

	)

57 
	#FDT_V16_SIZE
 
FDT_V3_SIZE


	)

58 
	#FDT_V17_SIZE
 (
FDT_V16_SIZE
 + (
uöt32_t
))

	)

	@kexec/libfdt/fdt_ro.c

51 
	~"libfdt_ív.h
"

53 
	~<fdt.h
>

54 
	~<libfdt.h
>

56 
	~"libfdt_öã∫Æ.h
"

58 
	$_fdt_nodíame_eq
(c⁄° *
fdt
, 
off£t
,

59 c⁄° *
s
, 
Àn
)

61 c⁄° *
p
 = 
	`fdt_off£t_±r
(
fdt
, 
off£t
 + 
FDT_TAGSIZE
, 
Àn
+1);

63 i‡(! 
p
)

67 i‡(
	`memcmp
(
p
, 
s
, 
Àn
) != 0)

70 i‡(
p
[
Àn
] == '\0')

72 i‡(!
	`memchr
(
s
, '@', 
Àn
Ë&& (
p
[len] == '@'))

76 
	}
}

78 c⁄° *
	$fdt_°rög
(c⁄° *
fdt
, 
°roff£t
)

80  (c⁄° *)
fdt
 + 
	`fdt_off_dt_°rögs
(fdtË+ 
°roff£t
;

81 
	}
}

83 
	$fdt_gë_mem_rsv
(c⁄° *
fdt
, 
n
, 
uöt64_t
 *
addªss
, uöt64_à*
size
)

85 
	`FDT_CHECK_HEADER
(
fdt
);

86 *
addªss
 = 
	`fdt64_to_˝u
(
	`_fdt_mem_rsv
(
fdt
, 
n
)->address);

87 *
size
 = 
	`fdt64_to_˝u
(
	`_fdt_mem_rsv
(
fdt
, 
n
)->size);

89 
	}
}

91 
	$fdt_num_mem_rsv
(c⁄° *
fdt
)

93 
i
 = 0;

95 
	`fdt64_to_˝u
(
	`_fdt_mem_rsv
(
fdt
, 
i
)->
size
) != 0)

96 
i
++;

97  
i
;

98 
	}
}

100 
	$fdt_subnode_off£t_«mñí
(c⁄° *
fdt
, 
off£t
,

101 c⁄° *
«me
, 
«mñí
)

103 
dïth
;

105 
	`FDT_CHECK_HEADER
(
fdt
);

107 
dïth
 = 0;

108 
off£t
 >= 0;

109 
off£t
 = 
	`fdt_√xt_node
(
fdt
, off£t, &
dïth
)) {

110 i‡(
dïth
 < 0)

111  -
FDT_ERR_NOTFOUND
;

112 i‡((
dïth
 == 1)

113 && 
	`_fdt_nodíame_eq
(
fdt
, 
off£t
, 
«me
, 
«mñí
))

114  
off£t
;

117  
off£t
;

118 
	}
}

120 
	$fdt_subnode_off£t
(c⁄° *
fdt
, 
∑ª¡off£t
,

121 c⁄° *
«me
)

123  
	`fdt_subnode_off£t_«mñí
(
fdt
, 
∑ª¡off£t
, 
«me
, 
	`°æí
(name));

124 
	}
}

126 
	$fdt_∑th_off£t
(c⁄° *
fdt
, c⁄° *
∑th
)

128 c⁄° *
íd
 = 
∑th
 + 
	`°æí
(path);

129 c⁄° *
p
 = 
∑th
;

130 
off£t
 = 0;

132 
	`FDT_CHECK_HEADER
(
fdt
);

134 i‡(*
∑th
 != '/')

135  -
FDT_ERR_BADPATH
;

137 *
p
) {

138 c⁄° *
q
;

140 *
p
 == '/')

141 
p
++;

142 i‡(! *
p
)

143  
off£t
;

144 
q
 = 
	`°rchr
(
p
, '/');

145 i‡(! 
q
)

146 
q
 = 
íd
;

148 
off£t
 = 
	`fdt_subnode_off£t_«mñí
(
fdt
, off£t, 
p
, 
q
-p);

149 i‡(
off£t
 < 0)

150  
off£t
;

152 
p
 = 
q
;

155  
off£t
;

156 
	}
}

158 c⁄° *
	$fdt_gë_«me
(c⁄° *
fdt
, 
nodeoff£t
, *
Àn
)

160 c⁄° 
fdt_node_hódî
 *
nh
 = 
	`_fdt_off£t_±r
(
fdt
, 
nodeoff£t
);

161 
îr
;

163 i‡(((
îr
 = 
	`fdt_check_hódî
(
fdt
)) != 0)

164 || ((
îr
 = 
	`_fdt_check_node_off£t
(
fdt
, 
nodeoff£t
)) < 0))

165 
Áû
;

167 i‡(
Àn
)

168 *
Àn
 = 
	`°æí
(
nh
->
«me
);

170  
nh
->
«me
;

172 
Áû
:

173 i‡(
Àn
)

174 *
Àn
 = 
îr
;

175  
NULL
;

176 
	}
}

178 c⁄° 
fdt_¥›îty
 *
	$fdt_gë_¥›îty
(c⁄° *
fdt
,

179 
nodeoff£t
,

180 c⁄° *
«me
, *
À≈
)

182 
uöt32_t
 
èg
;

183 c⁄° 
fdt_¥›îty
 *
¥›
;

184 
«me°roff
;

185 
off£t
, 
√xtoff£t
;

186 
îr
;

188 i‡(((
îr
 = 
	`fdt_check_hódî
(
fdt
)) != 0)

189 || ((
îr
 = 
	`_fdt_check_node_off£t
(
fdt
, 
nodeoff£t
)) < 0))

190 
Áû
;

192 
√xtoff£t
 = 
îr
;

194 
off£t
 = 
√xtoff£t
;

196 
èg
 = 
	`fdt_√xt_èg
(
fdt
, 
off£t
, &
√xtoff£t
);

197 
èg
) {

198 
FDT_END
:

199 
îr
 = -
FDT_ERR_TRUNCATED
;

200 
Áû
;

202 
FDT_BEGIN_NODE
:

203 
FDT_END_NODE
:

204 
FDT_NOP
:

207 
FDT_PROP
:

208 
îr
 = -
FDT_ERR_BADSTRUCTURE
;

209 
¥›
 = 
	`fdt_off£t_±r
(
fdt
, 
off£t
, (*prop));

210 i‡(! 
¥›
)

211 
Áû
;

212 
«me°roff
 = 
	`fdt32_to_˝u
(
¥›
->
«meoff
);

213 i‡(
	`°rcmp
(
	`fdt_°rög
(
fdt
, 
«me°roff
), 
«me
) == 0) {

215 
Àn
 = 
	`fdt32_to_˝u
(
¥›
->len);

216 
¥›
 = 
	`fdt_off£t_±r
(
fdt
, 
off£t
,

217 (*
¥›
)+
Àn
);

218 i‡(! 
¥›
)

219 
Áû
;

221 i‡(
À≈
)

222 *
À≈
 = 
Àn
;

224  
¥›
;

229 
îr
 = -
FDT_ERR_BADSTRUCTURE
;

230 
Áû
;

232 } (
èg
 !
FDT_BEGIN_NODE
Ë&& (èg !
FDT_END_NODE
));

234 
îr
 = -
FDT_ERR_NOTFOUND
;

235 
Áû
:

236 i‡(
À≈
)

237 *
À≈
 = 
îr
;

238  
NULL
;

239 
	}
}

241 c⁄° *
	$fdt_gë¥›
(c⁄° *
fdt
, 
nodeoff£t
,

242 c⁄° *
«me
, *
À≈
)

244 c⁄° 
fdt_¥›îty
 *
¥›
;

246 
¥›
 = 
	`fdt_gë_¥›îty
(
fdt
, 
nodeoff£t
, 
«me
, 
À≈
);

247 i‡(! 
¥›
)

248  
NULL
;

250  
¥›
->
d©a
;

251 
	}
}

253 
uöt32_t
 
	$fdt_gë_ph™dÀ
(c⁄° *
fdt
, 
nodeoff£t
)

255 c⁄° 
uöt32_t
 *
php
;

256 
Àn
;

258 
php
 = 
	`fdt_gë¥›
(
fdt
, 
nodeoff£t
, "löux,ph™dÀ", &
Àn
);

259 i‡(!
php
 || (
Àn
 != (*php)))

262  
	`fdt32_to_˝u
(*
php
);

263 
	}
}

265 
	$fdt_gë_∑th
(c⁄° *
fdt
, 
nodeoff£t
, *
buf
, 
buÊí
)

267 
pdïth
 = 0, 
p
 = 0;

268 
off£t
, 
dïth
, 
«mñí
;

269 c⁄° *
«me
;

271 
	`FDT_CHECK_HEADER
(
fdt
);

273 i‡(
buÊí
 < 2)

274  -
FDT_ERR_NOSPACE
;

276 
off£t
 = 0, 
dïth
 = 0;

277 (
off£t
 >0Ë&& (off£à<
nodeoff£t
);

278 
off£t
 = 
	`fdt_√xt_node
(
fdt
, off£t, &
dïth
)) {

279 i‡(
pdïth
 < 
dïth
)

282 
pdïth
 > 
dïth
) {

284 
p
--;

285 } 
buf
[
p
-1] != '/');

286 
pdïth
--;

289 
«me
 = 
	`fdt_gë_«me
(
fdt
, 
off£t
, &
«mñí
);

290 i‡(!
«me
)

291  
«mñí
;

292 i‡((
p
 + 
«mñí
 + 1Ë<
buÊí
) {

293 
	`mem˝y
(
buf
 + 
p
, 
«me
, 
«mñí
);

294 
p
 +
«mñí
;

295 
buf
[
p
++] = '/';

296 
pdïth
++;

299 i‡(
off£t
 =
nodeoff£t
) {

300 i‡(
pdïth
 < (
dïth
 + 1))

301  -
FDT_ERR_NOSPACE
;

303 i‡(
p
 > 1)

304 
p
--;

305 
buf
[
p
] = '\0';

306  
p
;

310 i‡((
off£t
 =-
FDT_ERR_NOTFOUND
) || (offset >= 0))

311  -
FDT_ERR_BADOFFSET
;

312 i‡(
off£t
 =-
FDT_ERR_BADOFFSET
)

313  -
FDT_ERR_BADSTRUCTURE
;

315  
off£t
;

316 
	}
}

318 
	$fdt_su≥∫ode_©dïth_off£t
(c⁄° *
fdt
, 
nodeoff£t
,

319 
su≥∫odedïth
, *
nodedïth
)

321 
off£t
, 
dïth
;

322 
su≥∫odeoff£t
 = -
FDT_ERR_INTERNAL
;

324 
	`FDT_CHECK_HEADER
(
fdt
);

326 i‡(
su≥∫odedïth
 < 0)

327  -
FDT_ERR_NOTFOUND
;

329 
off£t
 = 0, 
dïth
 = 0;

330 (
off£t
 >0Ë&& (off£à<
nodeoff£t
);

331 
off£t
 = 
	`fdt_√xt_node
(
fdt
, off£t, &
dïth
)) {

332 i‡(
dïth
 =
su≥∫odedïth
)

333 
su≥∫odeoff£t
 = 
off£t
;

335 i‡(
off£t
 =
nodeoff£t
) {

336 i‡(
nodedïth
)

337 *
nodedïth
 = 
dïth
;

339 i‡(
su≥∫odedïth
 > 
dïth
)

340  -
FDT_ERR_NOTFOUND
;

342  
su≥∫odeoff£t
;

346 i‡((
off£t
 =-
FDT_ERR_NOTFOUND
) || (offset >= 0))

347  -
FDT_ERR_BADOFFSET
;

348 i‡(
off£t
 =-
FDT_ERR_BADOFFSET
)

349  -
FDT_ERR_BADSTRUCTURE
;

351  
off£t
;

352 
	}
}

354 
	$fdt_node_dïth
(c⁄° *
fdt
, 
nodeoff£t
)

356 
nodedïth
;

357 
îr
;

359 
îr
 = 
	`fdt_su≥∫ode_©dïth_off£t
(
fdt
, 
nodeoff£t
, 0, &
nodedïth
);

360 i‡(
îr
)

361  (
îr
 < 0Ë?Éº : -
FDT_ERR_INTERNAL
;

362  
nodedïth
;

363 
	}
}

365 
	$fdt_∑ª¡_off£t
(c⁄° *
fdt
, 
nodeoff£t
)

367 
nodedïth
 = 
	`fdt_node_dïth
(
fdt
, 
nodeoff£t
);

369 i‡(
nodedïth
 < 0)

370  
nodedïth
;

371  
	`fdt_su≥∫ode_©dïth_off£t
(
fdt
, 
nodeoff£t
,

372 
nodedïth
 - 1, 
NULL
);

373 
	}
}

375 
	$fdt_node_off£t_by_¥›_vÆue
(c⁄° *
fdt
, 
°¨toff£t
,

376 c⁄° *
¥›«me
,

377 c⁄° *
¥›vÆ
, 
¥›Àn
)

379 
off£t
;

380 c⁄° *
vÆ
;

381 
Àn
;

383 
	`FDT_CHECK_HEADER
(
fdt
);

390 
off£t
 = 
	`fdt_√xt_node
(
fdt
, 
°¨toff£t
, 
NULL
);

391 
off£t
 >= 0;

392 
off£t
 = 
	`fdt_√xt_node
(
fdt
, off£t, 
NULL
)) {

393 
vÆ
 = 
	`fdt_gë¥›
(
fdt
, 
off£t
, 
¥›«me
, &
Àn
);

394 i‡(
vÆ
 && (
Àn
 =
¥›Àn
)

395 && (
	`memcmp
(
vÆ
, 
¥›vÆ
, 
Àn
) == 0))

396  
off£t
;

399  
off£t
;

400 
	}
}

402 
	$fdt_node_off£t_by_ph™dÀ
(c⁄° *
fdt
, 
uöt32_t
 
ph™dÀ
)

404 i‡((
ph™dÀ
 == 0) || (phandle == -1))

405  -
FDT_ERR_BADPHANDLE
;

406 
ph™dÀ
 = 
	`˝u_to_fdt32
(phandle);

407  
	`fdt_node_off£t_by_¥›_vÆue
(
fdt
, -1, "linux,phandle",

408 &
ph™dÀ
, (phandle));

409 
	}
}

411 
	$_°rögli°_c⁄èös
(c⁄° *
°æi°
, 
li°Àn
, c⁄° *
°r
)

413 
Àn
 = 
	`°æí
(
°r
);

414 c⁄° *
p
;

416 
li°Àn
 >
Àn
) {

417 i‡(
	`memcmp
(
°r
, 
°æi°
, 
Àn
+1) == 0)

419 
p
 = 
	`memchr
(
°æi°
, '\0', 
li°Àn
);

420 i‡(!
p
)

422 
li°Àn
 -(
p
-
°æi°
) + 1;

423 
°æi°
 = 
p
 + 1;

426 
	}
}

428 
	$fdt_node_check_com∑tibÀ
(c⁄° *
fdt
, 
nodeoff£t
,

429 c⁄° *
com∑tibÀ
)

431 c⁄° *
¥›
;

432 
Àn
;

434 
¥›
 = 
	`fdt_gë¥›
(
fdt
, 
nodeoff£t
, "com∑tibÀ", &
Àn
);

435 i‡(!
¥›
)

436  
Àn
;

437 i‡(
	`_°rögli°_c⁄èös
(
¥›
, 
Àn
, 
com∑tibÀ
))

441 
	}
}

443 
	$fdt_node_off£t_by_com∑tibÀ
(c⁄° *
fdt
, 
°¨toff£t
,

444 c⁄° *
com∑tibÀ
)

446 
off£t
, 
îr
;

448 
	`FDT_CHECK_HEADER
(
fdt
);

455 
off£t
 = 
	`fdt_√xt_node
(
fdt
, 
°¨toff£t
, 
NULL
);

456 
off£t
 >= 0;

457 
off£t
 = 
	`fdt_√xt_node
(
fdt
, off£t, 
NULL
)) {

458 
îr
 = 
	`fdt_node_check_com∑tibÀ
(
fdt
, 
off£t
, 
com∑tibÀ
);

459 i‡((
îr
 < 0Ë&& (î∏!-
FDT_ERR_NOTFOUND
))

460  
îr
;

461 i‡(
îr
 == 0)

462  
off£t
;

465  
off£t
;

466 
	}
}

	@kexec/libfdt/fdt_rw.c

51 
	~"libfdt_ív.h
"

53 
	~<fdt.h
>

54 
	~<libfdt.h
>

56 
	~"libfdt_öã∫Æ.h
"

58 
	$_fdt_blocks_mis‹dîed
(c⁄° *
fdt
,

59 
mem_rsv_size
, 
°ru˘_size
)

61  (
	`fdt_off_mem_rsvm≠
(
fdt
Ë< 
	`FDT_ALIGN
((
fdt_hódî
), 8))

62 || (
	`fdt_off_dt_°ru˘
(
fdt
) <

63 (
	`fdt_off_mem_rsvm≠
(
fdt
Ë+ 
mem_rsv_size
))

64 || (
	`fdt_off_dt_°rögs
(
fdt
) <

65 (
	`fdt_off_dt_°ru˘
(
fdt
Ë+ 
°ru˘_size
))

66 || (
	`fdt_tŸÆsize
(
fdt
) <

67 (
	`fdt_off_dt_°rögs
(
fdt
Ë+ 
	`fdt_size_dt_°rögs
(fdt)));

68 
	}
}

70 
	$_fdt_rw_check_hódî
(*
fdt
)

72 
	`FDT_CHECK_HEADER
(
fdt
);

74 i‡(
	`fdt_vîsi⁄
(
fdt
) < 17)

75  -
FDT_ERR_BADVERSION
;

76 i‡(
	`_fdt_blocks_mis‹dîed
(
fdt
, (
fdt_ª£rve_íåy
),

77 
	`fdt_size_dt_°ru˘
(
fdt
)))

78  -
FDT_ERR_BADLAYOUT
;

79 i‡(
	`fdt_vîsi⁄
(
fdt
) > 17)

80 
	`fdt_£t_vîsi⁄
(
fdt
, 17);

83 
	}
}

85 
	#FDT_RW_CHECK_HEADER
(
fdt
) \

87 
îr
; \

88 i‡((
îr
 = 
	`_fdt_rw_check_hódî
(
fdt
)) != 0) \

89  
îr
; \

90 }

	)

92 
ölöe
 
	$_fdt_d©a_size
(*
fdt
)

94  
	`fdt_off_dt_°rögs
(
fdt
Ë+ 
	`fdt_size_dt_°rögs
(fdt);

95 
	}
}

97 
	$_fdt_•li˚
(*
fdt
, *
•li˚poöt
, 
ﬁdÀn
, 
√wÀn
)

99 *
p
 = 
•li˚poöt
;

100 *
íd
 = (*)
fdt
 + 
	`_fdt_d©a_size
(fdt);

102 i‡(((
p
 + 
ﬁdÀn
Ë<ÖË|| (’ + oldÀnË> 
íd
))

103  -
FDT_ERR_BADOFFSET
;

104 i‡((
íd
 - 
ﬁdÀn
 + 
√wÀn
Ë> ((*)
fdt
 + 
	`fdt_tŸÆsize
(fdt)))

105  -
FDT_ERR_NOSPACE
;

106 
	`memmove
(
p
 + 
√wÀn
,Ö + 
ﬁdÀn
, 
íd
 -Ö - oldlen);

108 
	}
}

110 
	$_fdt_•li˚_mem_rsv
(*
fdt
, 
fdt_ª£rve_íåy
 *
p
,

111 
ﬁdn
, 
√wn
)

113 
dñè
 = (
√wn
 - 
ﬁdn
Ë* (*
p
);

114 
îr
;

115 
îr
 = 
	`_fdt_•li˚
(
fdt
, 
p
, 
ﬁdn
 * (*p), 
√wn
 * (*p));

116 i‡(
îr
)

117  
îr
;

118 
	`fdt_£t_off_dt_°ru˘
(
fdt
, 
	`fdt_off_dt_°ru˘
(fdtË+ 
dñè
);

119 
	`fdt_£t_off_dt_°rögs
(
fdt
, 
	`fdt_off_dt_°rögs
(fdtË+ 
dñè
);

121 
	}
}

123 
	$_fdt_•li˚_°ru˘
(*
fdt
, *
p
,

124 
ﬁdÀn
, 
√wÀn
)

126 
dñè
 = 
√wÀn
 - 
ﬁdÀn
;

127 
îr
;

129 i‡((
îr
 = 
	`_fdt_•li˚
(
fdt
, 
p
, 
ﬁdÀn
, 
√wÀn
)))

130  
îr
;

132 
	`fdt_£t_size_dt_°ru˘
(
fdt
, 
	`fdt_size_dt_°ru˘
(fdtË+ 
dñè
);

133 
	`fdt_£t_off_dt_°rögs
(
fdt
, 
	`fdt_off_dt_°rögs
(fdtË+ 
dñè
);

135 
	}
}

137 
	$_fdt_•li˚_°rög
(*
fdt
, 
√wÀn
)

139 *
p
 = (*)
fdt


140 + 
	`fdt_off_dt_°rögs
(
fdt
Ë+ 
	`fdt_size_dt_°rögs
(fdt);

141 
îr
;

143 i‡((
îr
 = 
	`_fdt_•li˚
(
fdt
, 
p
, 0, 
√wÀn
)))

144  
îr
;

146 
	`fdt_£t_size_dt_°rögs
(
fdt
, 
	`fdt_size_dt_°rögs
(fdtË+ 
√wÀn
);

148 
	}
}

150 
	$_fdt_föd_add_°rög
(*
fdt
, c⁄° *
s
)

152 *
°πab
 = (*)
fdt
 + 
	`fdt_off_dt_°rögs
(fdt);

153 c⁄° *
p
;

154 *
√w
;

155 
Àn
 = 
	`°æí
(
s
) + 1;

156 
îr
;

158 
p
 = 
	`_fdt_föd_°rög
(
°πab
, 
	`fdt_size_dt_°rögs
(
fdt
), 
s
);

159 i‡(
p
)

161  (
p
 - 
°πab
);

163 
√w
 = 
°πab
 + 
	`fdt_size_dt_°rögs
(
fdt
);

164 
îr
 = 
	`_fdt_•li˚_°rög
(
fdt
, 
Àn
);

165 i‡(
îr
)

166  
îr
;

168 
	`mem˝y
(
√w
, 
s
, 
Àn
);

169  (
√w
 - 
°πab
);

170 
	}
}

172 
	$fdt_add_mem_rsv
(*
fdt
, 
uöt64_t
 
addªss
, uöt64_à
size
)

174 
fdt_ª£rve_íåy
 *
ª
;

175 
îr
;

177 
	`FDT_RW_CHECK_HEADER
(
fdt
);

179 
ª
 = 
	`_fdt_mem_rsv_w
(
fdt
, 
	`fdt_num_mem_rsv
(fdt));

180 
îr
 = 
	`_fdt_•li˚_mem_rsv
(
fdt
, 
ª
, 0, 1);

181 i‡(
îr
)

182  
îr
;

184 
ª
->
addªss
 = 
	`˝u_to_fdt64
(address);

185 
ª
->
size
 = 
	`˝u_to_fdt64
(size);

187 
	}
}

189 
	$fdt_dñ_mem_rsv
(*
fdt
, 
n
)

191 
fdt_ª£rve_íåy
 *
ª
 = 
	`_fdt_mem_rsv_w
(
fdt
, 
n
);

192 
îr
;

194 
	`FDT_RW_CHECK_HEADER
(
fdt
);

196 i‡(
n
 >
	`fdt_num_mem_rsv
(
fdt
))

197  -
FDT_ERR_NOTFOUND
;

199 
îr
 = 
	`_fdt_•li˚_mem_rsv
(
fdt
, 
ª
, 1, 0);

200 i‡(
îr
)

201  
îr
;

203 
	}
}

205 
	$_fdt_ªsize_¥›îty
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

206 
Àn
, 
fdt_¥›îty
 **
¥›
)

208 
ﬁdÀn
;

209 
îr
;

211 *
¥›
 = 
	`fdt_gë_¥›îty_w
(
fdt
, 
nodeoff£t
, 
«me
, &
ﬁdÀn
);

212 i‡(! (*
¥›
))

213  
ﬁdÀn
;

215 i‡((
îr
 = 
	`_fdt_•li˚_°ru˘
(
fdt
, (*
¥›
)->
d©a
, 
	`FDT_TAGALIGN
(
ﬁdÀn
),

216 
	`FDT_TAGALIGN
(
Àn
))))

217  
îr
;

219 (*
¥›
)->
Àn
 = 
	`˝u_to_fdt32
(len);

221 
	}
}

223 
	$_fdt_add_¥›îty
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

224 
Àn
, 
fdt_¥›îty
 **
¥›
)

226 
¥›Àn
;

227 
√xtoff£t
;

228 
«me°roff
;

229 
îr
;

231 i‡((
√xtoff£t
 = 
	`_fdt_check_node_off£t
(
fdt
, 
nodeoff£t
)) < 0)

232  
√xtoff£t
;

234 
«me°roff
 = 
	`_fdt_föd_add_°rög
(
fdt
, 
«me
);

235 i‡(
«me°roff
 < 0)

236  
«me°roff
;

238 *
¥›
 = 
	`_fdt_off£t_±r_w
(
fdt
, 
√xtoff£t
);

239 
¥›Àn
 = (**
¥›
Ë+ 
	`FDT_TAGALIGN
(
Àn
);

241 
îr
 = 
	`_fdt_•li˚_°ru˘
(
fdt
, *
¥›
, 0, 
¥›Àn
);

242 i‡(
îr
)

243  
îr
;

245 (*
¥›
)->
èg
 = 
	`˝u_to_fdt32
(
FDT_PROP
);

246 (*
¥›
)->
«meoff
 = 
	`˝u_to_fdt32
(
«me°roff
);

247 (*
¥›
)->
Àn
 = 
	`˝u_to_fdt32
(len);

249 
	}
}

251 
	$fdt_£t_«me
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
)

253 *
«mï
;

254 
ﬁdÀn
, 
√wÀn
;

255 
îr
;

257 
	`FDT_RW_CHECK_HEADER
(
fdt
);

259 
«mï
 = (*)(
uöçå_t
)
	`fdt_gë_«me
(
fdt
, 
nodeoff£t
, &
ﬁdÀn
);

260 i‡(!
«mï
)

261  
ﬁdÀn
;

263 
√wÀn
 = 
	`°æí
(
«me
);

265 
îr
 = 
	`_fdt_•li˚_°ru˘
(
fdt
, 
«mï
, 
	`FDT_TAGALIGN
(
ﬁdÀn
+1),

266 
	`FDT_TAGALIGN
(
√wÀn
+1));

267 i‡(
îr
)

268  
îr
;

270 
	`mem˝y
(
«mï
, 
«me
, 
√wÀn
+1);

272 
	}
}

274 
	$fdt_£çr›
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

275 c⁄° *
vÆ
, 
Àn
)

277 
fdt_¥›îty
 *
¥›
;

278 
îr
;

280 
	`FDT_RW_CHECK_HEADER
(
fdt
);

282 
îr
 = 
	`_fdt_ªsize_¥›îty
(
fdt
, 
nodeoff£t
, 
«me
, 
Àn
, &
¥›
);

283 i‡(
îr
 =-
FDT_ERR_NOTFOUND
)

284 
îr
 = 
	`_fdt_add_¥›îty
(
fdt
, 
nodeoff£t
, 
«me
, 
Àn
, &
¥›
);

285 i‡(
îr
)

286  
îr
;

288 
	`mem˝y
(
¥›
->
d©a
, 
vÆ
, 
Àn
);

290 
	}
}

292 
	$fdt_dñ¥›
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
)

294 
fdt_¥›îty
 *
¥›
;

295 
Àn
, 
¥›Àn
;

297 
	`FDT_RW_CHECK_HEADER
(
fdt
);

299 
¥›
 = 
	`fdt_gë_¥›îty_w
(
fdt
, 
nodeoff£t
, 
«me
, &
Àn
);

300 i‡(! 
¥›
)

301  
Àn
;

303 
¥›Àn
 = (*
¥›
Ë+ 
	`FDT_TAGALIGN
(
Àn
);

304  
	`_fdt_•li˚_°ru˘
(
fdt
, 
¥›
, 
¥›Àn
, 0);

305 
	}
}

307 
	$fdt_add_subnode_«mñí
(*
fdt
, 
∑ª¡off£t
,

308 c⁄° *
«me
, 
«mñí
)

310 
fdt_node_hódî
 *
nh
;

311 
off£t
, 
√xtoff£t
;

312 
nodñí
;

313 
îr
;

314 
uöt32_t
 
èg
;

315 
uöt32_t
 *
ídèg
;

317 
	`FDT_RW_CHECK_HEADER
(
fdt
);

319 
off£t
 = 
	`fdt_subnode_off£t_«mñí
(
fdt
, 
∑ª¡off£t
, 
«me
, 
«mñí
);

320 i‡(
off£t
 >= 0)

321  -
FDT_ERR_EXISTS
;

322 i‡(
off£t
 !-
FDT_ERR_NOTFOUND
)

323  
off£t
;

326 
	`fdt_√xt_èg
(
fdt
, 
∑ª¡off£t
, &
√xtoff£t
);

328 
off£t
 = 
√xtoff£t
;

329 
èg
 = 
	`fdt_√xt_èg
(
fdt
, 
off£t
, &
√xtoff£t
);

330 } (
èg
 =
FDT_PROP
Ë|| (èg =
FDT_NOP
));

332 
nh
 = 
	`_fdt_off£t_±r_w
(
fdt
, 
off£t
);

333 
nodñí
 = (*
nh
Ë+ 
	`FDT_TAGALIGN
(
«mñí
+1Ë+ 
FDT_TAGSIZE
;

335 
îr
 = 
	`_fdt_•li˚_°ru˘
(
fdt
, 
nh
, 0, 
nodñí
);

336 i‡(
îr
)

337  
îr
;

339 
nh
->
èg
 = 
	`˝u_to_fdt32
(
FDT_BEGIN_NODE
);

340 
	`mem£t
(
nh
->
«me
, 0, 
	`FDT_TAGALIGN
(
«mñí
+1));

341 
	`mem˝y
(
nh
->
«me
,Çame, 
«mñí
);

342 
ídèg
 = (
uöt32_t
 *)((*)
nh
 + 
nodñí
 - 
FDT_TAGSIZE
);

343 *
ídèg
 = 
	`˝u_to_fdt32
(
FDT_END_NODE
);

345  
off£t
;

346 
	}
}

348 
	$fdt_add_subnode
(*
fdt
, 
∑ª¡off£t
, c⁄° *
«me
)

350  
	`fdt_add_subnode_«mñí
(
fdt
, 
∑ª¡off£t
, 
«me
, 
	`°æí
(name));

351 
	}
}

353 
	$fdt_dñ_node
(*
fdt
, 
nodeoff£t
)

355 
ídoff£t
;

357 
	`FDT_RW_CHECK_HEADER
(
fdt
);

359 
ídoff£t
 = 
	`_fdt_node_íd_off£t
(
fdt
, 
nodeoff£t
);

360 i‡(
ídoff£t
 < 0)

361  
ídoff£t
;

363  
	`_fdt_•li˚_°ru˘
(
fdt
, 
	`_fdt_off£t_±r_w
(fdt, 
nodeoff£t
),

364 
ídoff£t
 - 
nodeoff£t
, 0);

365 
	}
}

367 
	$_fdt_∑ckblocks
(c⁄° *
ﬁd
, *
√w
,

368 
mem_rsv_size
, 
°ru˘_size
)

370 
mem_rsv_off
, 
°ru˘_off
, 
°rögs_off
;

372 
mem_rsv_off
 = 
	`FDT_ALIGN
((
fdt_hódî
), 8);

373 
°ru˘_off
 = 
mem_rsv_off
 + 
mem_rsv_size
;

374 
°rögs_off
 = 
°ru˘_off
 + 
°ru˘_size
;

376 
	`memmove
(
√w
 + 
mem_rsv_off
, 
ﬁd
 + 
	`fdt_off_mem_rsvm≠
(ﬁd), 
mem_rsv_size
);

377 
	`fdt_£t_off_mem_rsvm≠
(
√w
, 
mem_rsv_off
);

379 
	`memmove
(
√w
 + 
°ru˘_off
, 
ﬁd
 + 
	`fdt_off_dt_°ru˘
(ﬁd), 
°ru˘_size
);

380 
	`fdt_£t_off_dt_°ru˘
(
√w
, 
°ru˘_off
);

381 
	`fdt_£t_size_dt_°ru˘
(
√w
, 
°ru˘_size
);

383 
	`memmove
(
√w
 + 
°rögs_off
, 
ﬁd
 + 
	`fdt_off_dt_°rögs
(old),

384 
	`fdt_size_dt_°rögs
(
ﬁd
));

385 
	`fdt_£t_off_dt_°rögs
(
√w
, 
°rögs_off
);

386 
	`fdt_£t_size_dt_°rögs
(
√w
, 
	`fdt_size_dt_°rögs
(
ﬁd
));

387 
	}
}

389 
	$fdt_›í_öto
(c⁄° *
fdt
, *
buf
, 
bufsize
)

391 
îr
;

392 
mem_rsv_size
, 
°ru˘_size
;

393 
√wsize
;

394 c⁄° *
fdt°¨t
 = 
fdt
;

395 c⁄° *
fdãnd
 = 
fdt°¨t
 + 
	`fdt_tŸÆsize
(
fdt
);

396 *
tmp
;

398 
	`FDT_CHECK_HEADER
(
fdt
);

400 
mem_rsv_size
 = (
	`fdt_num_mem_rsv
(
fdt
)+1)

401 * (
fdt_ª£rve_íåy
);

403 i‡(
	`fdt_vîsi⁄
(
fdt
) >= 17) {

404 
°ru˘_size
 = 
	`fdt_size_dt_°ru˘
(
fdt
);

406 
°ru˘_size
 = 0;

407 
	`fdt_√xt_èg
(
fdt
, 
°ru˘_size
, &°ru˘_sizeË!
FDT_END
)

411 i‡(!
	`_fdt_blocks_mis‹dîed
(
fdt
, 
mem_rsv_size
, 
°ru˘_size
)) {

413 
îr
 = 
	`fdt_move
(
fdt
, 
buf
, 
bufsize
);

414 i‡(
îr
)

415  
îr
;

416 
	`fdt_£t_vîsi⁄
(
buf
, 17);

417 
	`fdt_£t_size_dt_°ru˘
(
buf
, 
°ru˘_size
);

418 
	`fdt_£t_tŸÆsize
(
buf
, 
bufsize
);

423 
√wsize
 = 
	`FDT_ALIGN
((
fdt_hódî
), 8Ë+ 
mem_rsv_size


424 + 
°ru˘_size
 + 
	`fdt_size_dt_°rögs
(
fdt
);

426 i‡(
bufsize
 < 
√wsize
)

427  -
FDT_ERR_NOSPACE
;

430 
tmp
 = 
buf
;

432 i‡(((
tmp
 + 
√wsize
Ë> 
fdt°¨t
Ë&& (tm∞< 
fdãnd
)) {

434 
tmp
 = (*)(
uöçå_t
)
fdãnd
;

435 i‡((
tmp
 + 
√wsize
Ë> ((*)
buf
 + 
bufsize
))

436  -
FDT_ERR_NOSPACE
;

439 
	`_fdt_∑ckblocks
(
fdt
, 
tmp
, 
mem_rsv_size
, 
°ru˘_size
);

440 
	`memmove
(
buf
, 
tmp
, 
√wsize
);

442 
	`fdt_£t_magic
(
buf
, 
FDT_MAGIC
);

443 
	`fdt_£t_tŸÆsize
(
buf
, 
bufsize
);

444 
	`fdt_£t_vîsi⁄
(
buf
, 17);

445 
	`fdt_£t_œ°_comp_vîsi⁄
(
buf
, 16);

446 
	`fdt_£t_boŸ_˝uid_phys
(
buf
, 
	`fdt_boŸ_˝uid_phys
(
fdt
));

449 
	}
}

451 
	$fdt_∑ck
(*
fdt
)

453 
mem_rsv_size
;

455 
	`FDT_RW_CHECK_HEADER
(
fdt
);

457 
mem_rsv_size
 = (
	`fdt_num_mem_rsv
(
fdt
)+1)

458 * (
fdt_ª£rve_íåy
);

459 
	`_fdt_∑ckblocks
(
fdt
, fdt, 
mem_rsv_size
, 
	`fdt_size_dt_°ru˘
(fdt));

460 
	`fdt_£t_tŸÆsize
(
fdt
, 
	`_fdt_d©a_size
(fdt));

463 
	}
}

	@kexec/libfdt/fdt_strerror.c

51 
	~"libfdt_ív.h
"

53 
	~<fdt.h
>

54 
	~<libfdt.h
>

56 
	~"libfdt_öã∫Æ.h
"

58 
	sfdt_îπabít
 {

59 c⁄° *
	m°r
;

62 
	#FDT_ERRTABENT
(
vÆ
) \

63 [(
vÆ
)] = { .
°r
 = #vÆ, }

	)

65 
fdt_îπabít
 
	gfdt_îπabÀ
[] = {

66 
FDT_ERRTABENT
(
FDT_ERR_NOTFOUND
),

67 
FDT_ERRTABENT
(
FDT_ERR_EXISTS
),

68 
FDT_ERRTABENT
(
FDT_ERR_NOSPACE
),

70 
FDT_ERRTABENT
(
FDT_ERR_BADOFFSET
),

71 
FDT_ERRTABENT
(
FDT_ERR_BADPATH
),

72 
FDT_ERRTABENT
(
FDT_ERR_BADSTATE
),

74 
FDT_ERRTABENT
(
FDT_ERR_TRUNCATED
),

75 
FDT_ERRTABENT
(
FDT_ERR_BADMAGIC
),

76 
FDT_ERRTABENT
(
FDT_ERR_BADVERSION
),

77 
FDT_ERRTABENT
(
FDT_ERR_BADSTRUCTURE
),

78 
FDT_ERRTABENT
(
FDT_ERR_BADLAYOUT
),

80 
	#FDT_ERRTABSIZE
 ((
fdt_îπabÀ
Ë/ (fdt_îπabÀ[0]))

	)

82 c⁄° *
	$fdt_°ªº‹
(
îrvÆ
)

84 i‡(
îrvÆ
 > 0)

86 i‡(
îrvÆ
 == 0)

88 i‡(
îrvÆ
 > -
FDT_ERRTABSIZE
) {

89 c⁄° *
s
 = 
fdt_îπabÀ
[-
îrvÆ
].
°r
;

91 i‡(
s
)

92  
s
;

96 
	}
}

	@kexec/libfdt/fdt_sw.c

51 
	~"libfdt_ív.h
"

53 
	~<fdt.h
>

54 
	~<libfdt.h
>

56 
	~"libfdt_öã∫Æ.h
"

58 
	$_fdt_sw_check_hódî
(*
fdt
)

60 i‡(
	`fdt_magic
(
fdt
Ë!
FDT_SW_MAGIC
)

61  -
FDT_ERR_BADMAGIC
;

64 
	}
}

66 
	#FDT_SW_CHECK_HEADER
(
fdt
) \

68 
îr
; \

69 i‡((
îr
 = 
	`_fdt_sw_check_hódî
(
fdt
)) != 0) \

70  
îr
; \

71 }

	)

73 *
	$_fdt_gøb_•a˚
(*
fdt
, 
Àn
)

75 
off£t
 = 
	`fdt_size_dt_°ru˘
(
fdt
);

76 
•a˚À·
;

78 
•a˚À·
 = 
	`fdt_tŸÆsize
(
fdt
Ë- 
	`fdt_off_dt_°ru˘
(fdt)

79 - 
	`fdt_size_dt_°rögs
(
fdt
);

81 i‡((
off£t
 + 
Àn
 < off£tË|| (off£à+Üí > 
•a˚À·
))

82  
NULL
;

84 
	`fdt_£t_size_dt_°ru˘
(
fdt
, 
off£t
 + 
Àn
);

85  
	`fdt_off£t_±r_w
(
fdt
, 
off£t
, 
Àn
);

86 
	}
}

88 
	$fdt_¸óã
(*
buf
, 
bufsize
)

90 *
fdt
 = 
buf
;

92 i‡(
bufsize
 < (
fdt_hódî
))

93  -
FDT_ERR_NOSPACE
;

95 
	`mem£t
(
buf
, 0, 
bufsize
);

97 
	`fdt_£t_magic
(
fdt
, 
FDT_SW_MAGIC
);

98 
	`fdt_£t_vîsi⁄
(
fdt
, 
FDT_LAST_SUPPORTED_VERSION
);

99 
	`fdt_£t_œ°_comp_vîsi⁄
(
fdt
, 
FDT_FIRST_SUPPORTED_VERSION
);

100 
	`fdt_£t_tŸÆsize
(
fdt
, 
bufsize
);

102 
	`fdt_£t_off_mem_rsvm≠
(
fdt
, 
	`FDT_ALIGN
((
fdt_hódî
),

103 (
fdt_ª£rve_íåy
)));

104 
	`fdt_£t_off_dt_°ru˘
(
fdt
, 
	`fdt_off_mem_rsvm≠
(fdt));

105 
	`fdt_£t_off_dt_°rögs
(
fdt
, 
bufsize
);

108 
	}
}

110 
	$fdt_add_ª£rvem≠_íåy
(*
fdt
, 
uöt64_t
 
addr
, uöt64_à
size
)

112 
fdt_ª£rve_íåy
 *
ª
;

113 
off£t
;

115 
	`FDT_SW_CHECK_HEADER
(
fdt
);

117 i‡(
	`fdt_size_dt_°ru˘
(
fdt
))

118  -
FDT_ERR_BADSTATE
;

120 
off£t
 = 
	`fdt_off_dt_°ru˘
(
fdt
);

121 i‡((
off£t
 + (*
ª
)Ë> 
	`fdt_tŸÆsize
(
fdt
))

122  -
FDT_ERR_NOSPACE
;

124 
ª
 = (
fdt_ª£rve_íåy
 *)((*)
fdt
 + 
off£t
);

125 
ª
->
addªss
 = 
	`˝u_to_fdt64
(
addr
);

126 
ª
->
size
 = 
	`˝u_to_fdt64
(size);

128 
	`fdt_£t_off_dt_°ru˘
(
fdt
, 
off£t
 + (*
ª
));

131 
	}
}

133 
	$fdt_föish_ª£rvem≠
(*
fdt
)

135  
	`fdt_add_ª£rvem≠_íåy
(
fdt
, 0, 0);

136 
	}
}

138 
	$fdt_begö_node
(*
fdt
, c⁄° *
«me
)

140 
fdt_node_hódî
 *
nh
;

141 
«mñí
 = 
	`°æí
(
«me
) + 1;

143 
	`FDT_SW_CHECK_HEADER
(
fdt
);

145 
nh
 = 
	`_fdt_gøb_•a˚
(
fdt
, (*nhË+ 
	`FDT_TAGALIGN
(
«mñí
));

146 i‡(! 
nh
)

147  -
FDT_ERR_NOSPACE
;

149 
nh
->
èg
 = 
	`˝u_to_fdt32
(
FDT_BEGIN_NODE
);

150 
	`mem˝y
(
nh
->
«me
,Çame, 
«mñí
);

152 
	}
}

154 
	$fdt_íd_node
(*
fdt
)

156 
uöt32_t
 *
í
;

158 
	`FDT_SW_CHECK_HEADER
(
fdt
);

160 
í
 = 
	`_fdt_gøb_•a˚
(
fdt
, 
FDT_TAGSIZE
);

161 i‡(! 
í
)

162  -
FDT_ERR_NOSPACE
;

164 *
í
 = 
	`˝u_to_fdt32
(
FDT_END_NODE
);

166 
	}
}

168 
	$_fdt_föd_add_°rög
(*
fdt
, c⁄° *
s
)

170 *
°πab
 = (*)
fdt
 + 
	`fdt_tŸÆsize
(fdt);

171 c⁄° *
p
;

172 
°πabsize
 = 
	`fdt_size_dt_°rögs
(
fdt
);

173 
Àn
 = 
	`°æí
(
s
) + 1;

174 
°ru˘_t›
, 
off£t
;

176 
p
 = 
	`_fdt_föd_°rög
(
°πab
 - 
°πabsize
, såèbsize, 
s
);

177 i‡(
p
)

178  
p
 - 
°πab
;

181 
off£t
 = -
°πabsize
 - 
Àn
;

182 
°ru˘_t›
 = 
	`fdt_off_dt_°ru˘
(
fdt
Ë+ 
	`fdt_size_dt_°ru˘
(fdt);

183 i‡(
	`fdt_tŸÆsize
(
fdt
Ë+ 
off£t
 < 
°ru˘_t›
)

186 
	`mem˝y
(
°πab
 + 
off£t
, 
s
, 
Àn
);

187 
	`fdt_£t_size_dt_°rögs
(
fdt
, 
°πabsize
 + 
Àn
);

188  
off£t
;

189 
	}
}

191 
	$fdt_¥›îty
(*
fdt
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
)

193 
fdt_¥›îty
 *
¥›
;

194 
«meoff
;

196 
	`FDT_SW_CHECK_HEADER
(
fdt
);

198 
«meoff
 = 
	`_fdt_föd_add_°rög
(
fdt
, 
«me
);

199 i‡(
«meoff
 == 0)

200  -
FDT_ERR_NOSPACE
;

202 
¥›
 = 
	`_fdt_gøb_•a˚
(
fdt
, (*¥›Ë+ 
	`FDT_TAGALIGN
(
Àn
));

203 i‡(! 
¥›
)

204  -
FDT_ERR_NOSPACE
;

206 
¥›
->
èg
 = 
	`˝u_to_fdt32
(
FDT_PROP
);

207 
¥›
->
«meoff
 = 
	`˝u_to_fdt32
(nameoff);

208 
¥›
->
Àn
 = 
	`˝u_to_fdt32
(len);

209 
	`mem˝y
(
¥›
->
d©a
, 
vÆ
, 
Àn
);

211 
	}
}

213 
	$fdt_föish
(*
fdt
)

215 *
p
 = (*)
fdt
;

216 
uöt32_t
 *
íd
;

217 
ﬁd°roff£t
, 
√w°roff£t
;

218 
uöt32_t
 
èg
;

219 
off£t
, 
√xtoff£t
;

221 
	`FDT_SW_CHECK_HEADER
(
fdt
);

224 
íd
 = 
	`_fdt_gøb_•a˚
(
fdt
, (*end));

225 i‡(! 
íd
)

226  -
FDT_ERR_NOSPACE
;

227 *
íd
 = 
	`˝u_to_fdt32
(
FDT_END
);

230 
ﬁd°roff£t
 = 
	`fdt_tŸÆsize
(
fdt
Ë- 
	`fdt_size_dt_°rögs
(fdt);

231 
√w°roff£t
 = 
	`fdt_off_dt_°ru˘
(
fdt
Ë+ 
	`fdt_size_dt_°ru˘
(fdt);

232 
	`memmove
(
p
 + 
√w°roff£t
,Ö + 
ﬁd°roff£t
, 
	`fdt_size_dt_°rögs
(
fdt
));

233 
	`fdt_£t_off_dt_°rögs
(
fdt
, 
√w°roff£t
);

236 
off£t
 = 0;

237 (
èg
 = 
	`fdt_√xt_èg
(
fdt
, 
off£t
, &
√xtoff£t
)Ë!
FDT_END
) {

238 i‡(
èg
 =
FDT_PROP
) {

239 
fdt_¥›îty
 *
¥›
 =

240 
	`fdt_off£t_±r_w
(
fdt
, 
off£t
, (*
¥›
));

241 
«meoff
;

243 i‡(! 
¥›
)

244  -
FDT_ERR_BADSTRUCTURE
;

246 
«meoff
 = 
	`fdt32_to_˝u
(
¥›
->nameoff);

247 
«meoff
 +
	`fdt_size_dt_°rögs
(
fdt
);

248 
¥›
->
«meoff
 = 
	`˝u_to_fdt32
(nameoff);

250 
off£t
 = 
√xtoff£t
;

254 
	`fdt_£t_tŸÆsize
(
fdt
, 
√w°roff£t
 + 
	`fdt_size_dt_°rögs
(fdt));

255 
	`fdt_£t_magic
(
fdt
, 
FDT_MAGIC
);

257 
	}
}

	@kexec/libfdt/fdt_wip.c

51 
	~"libfdt_ív.h
"

53 
	~<fdt.h
>

54 
	~<libfdt.h
>

56 
	~"libfdt_öã∫Æ.h
"

58 
	$fdt_£çr›_ö∂a˚
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

59 c⁄° *
vÆ
, 
Àn
)

61 *
¥›vÆ
;

62 
¥›Àn
;

64 
¥›vÆ
 = 
	`fdt_gë¥›_w
(
fdt
, 
nodeoff£t
, 
«me
, &
¥›Àn
);

65 i‡(! 
¥›vÆ
)

66  
¥›Àn
;

68 i‡(
¥›Àn
 !
Àn
)

69  -
FDT_ERR_NOSPACE
;

71 
	`mem˝y
(
¥›vÆ
, 
vÆ
, 
Àn
);

73 
	}
}

75 
	$_fdt_n›_ªgi⁄
(*
°¨t
, 
Àn
)

77 
uöt32_t
 *
p
;

79 
p
 = 
°¨t
; (*Ì < ((*)°¨à+ 
Àn
);Ö++)

80 *
p
 = 
	`˝u_to_fdt32
(
FDT_NOP
);

81 
	}
}

83 
	$fdt_n›_¥›îty
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
)

85 
fdt_¥›îty
 *
¥›
;

86 
Àn
;

88 
¥›
 = 
	`fdt_gë_¥›îty_w
(
fdt
, 
nodeoff£t
, 
«me
, &
Àn
);

89 i‡(! 
¥›
)

90  
Àn
;

92 
	`_fdt_n›_ªgi⁄
(
¥›
, 
Àn
 + (*prop));

95 
	}
}

97 
	$_fdt_node_íd_off£t
(*
fdt
, 
nodeoff£t
)

99 
Àvñ
 = 0;

100 
uöt32_t
 
èg
;

101 
off£t
, 
√xtoff£t
;

103 
èg
 = 
	`fdt_√xt_èg
(
fdt
, 
nodeoff£t
, &
√xtoff£t
);

104 i‡(
èg
 !
FDT_BEGIN_NODE
)

105  -
FDT_ERR_BADOFFSET
;

107 
off£t
 = 
√xtoff£t
;

108 
èg
 = 
	`fdt_√xt_èg
(
fdt
, 
off£t
, &
√xtoff£t
);

110 
èg
) {

111 
FDT_END
:

112  
off£t
;

114 
FDT_BEGIN_NODE
:

115 
Àvñ
++;

118 
FDT_END_NODE
:

119 
Àvñ
--;

122 
FDT_PROP
:

123 
FDT_NOP
:

127  -
FDT_ERR_BADSTRUCTURE
;

129 } 
Àvñ
 >= 0);

131  
√xtoff£t
;

132 
	}
}

134 
	$fdt_n›_node
(*
fdt
, 
nodeoff£t
)

136 
ídoff£t
;

138 
ídoff£t
 = 
	`_fdt_node_íd_off£t
(
fdt
, 
nodeoff£t
);

139 i‡(
ídoff£t
 < 0)

140  
ídoff£t
;

142 
	`_fdt_n›_ªgi⁄
(
	`fdt_off£t_±r_w
(
fdt
, 
nodeoff£t
, 0),

143 
ídoff£t
 - 
nodeoff£t
);

145 
	}
}

	@kexec/libfdt/libfdt.h

1 #i‚de‡
_LIBFDT_H


2 
	#_LIBFDT_H


	)

54 
	~<libfdt_ív.h
>

55 
	~<fdt.h
>

57 
	#FDT_FIRST_SUPPORTED_VERSION
 0x10

	)

58 
	#FDT_LAST_SUPPORTED_VERSION
 0x11

	)

61 
	#FDT_ERR_NOTFOUND
 1

	)

63 
	#FDT_ERR_EXISTS
 2

	)

66 
	#FDT_ERR_NOSPACE
 3

	)

73 
	#FDT_ERR_BADOFFSET
 4

	)

77 
	#FDT_ERR_BADPATH
 5

	)

81 
	#FDT_ERR_BADPHANDLE
 6

	)

84 
	#FDT_ERR_BADSTATE
 7

	)

90 
	#FDT_ERR_TRUNCATED
 8

	)

93 
	#FDT_ERR_BADMAGIC
 9

	)

97 
	#FDT_ERR_BADVERSION
 10

	)

102 
	#FDT_ERR_BADSTRUCTURE
 11

	)

106 
	#FDT_ERR_BADLAYOUT
 12

	)

114 
	#FDT_ERR_INTERNAL
 13

	)

119 
	#FDT_ERR_MAX
 13

	)

125 c⁄° *
fdt_off£t_±r
(c⁄° *
fdt
, 
off£t
, 
checkÀn
);

126 
ölöe
 *
	$fdt_off£t_±r_w
(*
fdt
, 
off£t
, 
checkÀn
)

128  (*)(
uöçå_t
)
	`fdt_off£t_±r
(
fdt
, 
off£t
, 
checkÀn
);

129 
	}
}

131 
uöt32_t
 
fdt_√xt_èg
(c⁄° *
fdt
, 
off£t
, *
√xtoff£t
);

137 
fdt_√xt_node
(c⁄° *
fdt
, 
off£t
, *
dïth
);

143 
	#fdt_gë_hódî
(
fdt
, 
fõld
) \

144 (
	`fdt32_to_˝u
(((c⁄° 
fdt_hódî
 *)(
fdt
))->
fõld
))

	)

145 
	#fdt_magic
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
magic
))

	)

146 
	#fdt_tŸÆsize
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
tŸÆsize
))

	)

147 
	#fdt_off_dt_°ru˘
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
off_dt_°ru˘
))

	)

148 
	#fdt_off_dt_°rögs
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
off_dt_°rögs
))

	)

149 
	#fdt_off_mem_rsvm≠
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
off_mem_rsvm≠
))

	)

150 
	#fdt_vîsi⁄
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
vîsi⁄
))

	)

151 
	#fdt_œ°_comp_vîsi⁄
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
œ°_comp_vîsi⁄
))

	)

152 
	#fdt_boŸ_˝uid_phys
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
boŸ_˝uid_phys
))

	)

153 
	#fdt_size_dt_°rögs
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
size_dt_°rögs
))

	)

154 
	#fdt_size_dt_°ru˘
(
fdt
Ë(
	`fdt_gë_hódî
(fdt, 
size_dt_°ru˘
))

	)

156 
	#__fdt_£t_hdr
(
«me
) \

157 
ölöe
 
fdt_£t_
##
	`«me
(*
fdt
, 
uöt32_t
 
vÆ
) \

159 
fdt_hódî
 *
fdth
 = 
fdt
; \

160 
fdth
->
«me
 = 
	`˝u_to_fdt32
(
vÆ
); \

161 }

	)

162 
__fdt_£t_hdr
(
magic
);

163 
__fdt_£t_hdr
(
tŸÆsize
);

164 
__fdt_£t_hdr
(
off_dt_°ru˘
);

165 
__fdt_£t_hdr
(
off_dt_°rögs
);

166 
__fdt_£t_hdr
(
off_mem_rsvm≠
);

167 
__fdt_£t_hdr
(
vîsi⁄
);

168 
__fdt_£t_hdr
(
œ°_comp_vîsi⁄
);

169 
__fdt_£t_hdr
(
boŸ_˝uid_phys
);

170 
__fdt_£t_hdr
(
size_dt_°rögs
);

171 
__fdt_£t_hdr
(
size_dt_°ru˘
);

172 #unde‡
__fdt_£t_hdr


188 
fdt_check_hódî
(c⁄° *
fdt
);

209 
fdt_move
(c⁄° *
fdt
, *
buf
, 
bufsize
);

227 c⁄° *
fdt_°rög
(c⁄° *
fdt
, 
°roff£t
);

240 
fdt_num_mem_rsv
(c⁄° *
fdt
);

257 
fdt_gë_mem_rsv
(c⁄° *
fdt
, 
n
, 
uöt64_t
 *
addªss
, uöt64_à*
size
);

271 
fdt_subnode_off£t_«mñí
(c⁄° *
fdt
, 
∑ª¡off£t
,

272 c⁄° *
«me
, 
«mñí
);

296 
fdt_subnode_off£t
(c⁄° *
fdt
, 
∑ª¡off£t
, c⁄° *
«me
);

320 
fdt_∑th_off£t
(c⁄° *
fdt
, c⁄° *
∑th
);

343 c⁄° *
fdt_gë_«me
(c⁄° *
fdt
, 
nodeoff£t
, *
À≈
);

372 c⁄° 
fdt_¥›îty
 *
fdt_gë_¥›îty
(c⁄° *
fdt
, 
nodeoff£t
,

373 c⁄° *
«me
, *
À≈
);

374 
ölöe
 
fdt_¥›îty
 *
	$fdt_gë_¥›îty_w
(*
fdt
, 
nodeoff£t
,

375 c⁄° *
«me
,

376 *
À≈
)

378  (
fdt_¥›îty
 *)(
uöçå_t
)

379 
	`fdt_gë_¥›îty
(
fdt
, 
nodeoff£t
, 
«me
, 
À≈
);

380 
	}
}

409 c⁄° *
fdt_gë¥›
(c⁄° *
fdt
, 
nodeoff£t
,

410 c⁄° *
«me
, *
À≈
);

411 
ölöe
 *
	$fdt_gë¥›_w
(*
fdt
, 
nodeoff£t
,

412 c⁄° *
«me
, *
À≈
)

414  (*)(
uöçå_t
)
	`fdt_gë¥›
(
fdt
, 
nodeoff£t
, 
«me
, 
À≈
);

415 
	}
}

429 
uöt32_t
 
fdt_gë_ph™dÀ
(c⁄° *
fdt
, 
nodeoff£t
);

456 
fdt_gë_∑th
(c⁄° *
fdt
, 
nodeoff£t
, *
buf
, 
buÊí
);

488 
fdt_su≥∫ode_©dïth_off£t
(c⁄° *
fdt
, 
nodeoff£t
,

489 
su≥∫odedïth
, *
nodedïth
);

510 
fdt_node_dïth
(c⁄° *
fdt
, 
nodeoff£t
);

533 
fdt_∑ª¡_off£t
(c⁄° *
fdt
, 
nodeoff£t
);

573 
fdt_node_off£t_by_¥›_vÆue
(c⁄° *
fdt
, 
°¨toff£t
,

574 c⁄° *
¥›«me
,

575 c⁄° *
¥›vÆ
, 
¥›Àn
);

596 
fdt_node_off£t_by_ph™dÀ
(c⁄° *
fdt
, 
uöt32_t
 
ph™dÀ
);

620 
fdt_node_check_com∑tibÀ
(c⁄° *
fdt
, 
nodeoff£t
,

621 c⁄° *
com∑tibÀ
);

657 
fdt_node_off£t_by_com∑tibÀ
(c⁄° *
fdt
, 
°¨toff£t
,

658 c⁄° *
com∑tibÀ
);

692 
fdt_£çr›_ö∂a˚
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

693 c⁄° *
vÆ
, 
Àn
);

723 
ölöe
 
	$fdt_£çr›_ö∂a˚_˚Œ
(*
fdt
, 
nodeoff£t
,

724 c⁄° *
«me
, 
uöt32_t
 
vÆ
)

726 
vÆ
 = 
	`˝u_to_fdt32
(val);

727  
	`fdt_£çr›_ö∂a˚
(
fdt
, 
nodeoff£t
, 
«me
, &
vÆ
, (val));

728 
	}
}

754 
fdt_n›_¥›îty
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
);

778 
fdt_n›_node
(*
fdt
, 
nodeoff£t
);

784 
fdt_¸óã
(*
buf
, 
bufsize
);

785 
fdt_add_ª£rvem≠_íåy
(*
fdt
, 
uöt64_t
 
addr
, uöt64_à
size
);

786 
fdt_föish_ª£rvem≠
(*
fdt
);

787 
fdt_begö_node
(*
fdt
, c⁄° *
«me
);

788 
fdt_¥›îty
(*
fdt
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

789 
ölöe
 
	$fdt_¥›îty_˚Œ
(*
fdt
, c⁄° *
«me
, 
uöt32_t
 
vÆ
)

791 
vÆ
 = 
	`˝u_to_fdt32
(val);

792  
	`fdt_¥›îty
(
fdt
, 
«me
, &
vÆ
, (val));

793 
	}
}

794 
	#fdt_¥›îty_°rög
(
fdt
, 
«me
, 
°r
) \

795 
	`fdt_¥›îty
(
fdt
, 
«me
, 
°r
, 
	`°æí
(°r)+1)

	)

796 
fdt_íd_node
(*
fdt
);

797 
fdt_föish
(*
fdt
);

803 
fdt_›í_öto
(c⁄° *
fdt
, *
buf
, 
bufsize
);

804 
fdt_∑ck
(*
fdt
);

828 
fdt_add_mem_rsv
(*
fdt
, 
uöt64_t
 
addªss
, uöt64_à
size
);

852 
fdt_dñ_mem_rsv
(*
fdt
, 
n
);

878 
fdt_£t_«me
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
);

908 
fdt_£çr›
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

909 c⁄° *
vÆ
, 
Àn
);

939 
ölöe
 
	$fdt_£çr›_˚Œ
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
,

940 
uöt32_t
 
vÆ
)

942 
vÆ
 = 
	`˝u_to_fdt32
(val);

943  
	`fdt_£çr›
(
fdt
, 
nodeoff£t
, 
«me
, &
vÆ
, (val));

944 
	}
}

974 
	#fdt_£çr›_°rög
(
fdt
, 
nodeoff£t
, 
«me
, 
°r
) \

975 
	`fdt_£çr›
((
fdt
), (
nodeoff£t
), (
«me
), (
°r
), 
	`°æí
(°r)+1)

	)

999 
fdt_dñ¥›
(*
fdt
, 
nodeoff£t
, c⁄° *
«me
);

1013 
fdt_add_subnode_«mñí
(*
fdt
, 
∑ª¡off£t
,

1014 c⁄° *
«me
, 
«mñí
);

1045 
fdt_add_subnode
(*
fdt
, 
∑ª¡off£t
, c⁄° *
«me
);

1068 
fdt_dñ_node
(*
fdt
, 
nodeoff£t
);

1074 c⁄° *
fdt_°ªº‹
(
îrvÆ
);

1076 
	#FDT_ALIGN
(
x
, 
a
Ë(((xË+ (aË- 1Ë& ~(◊Ë- 1))

	)

1077 
	#FDT_TAGALIGN
(
x
Ë(
	`FDT_ALIGN
((x), 
FDT_TAGSIZE
))

	)

1083 
ölöe
 
	$fdt_node_Àn
(c⁄° * 
node_«me
)

1085  (
fdt_node_hódî
) +

1086 
	`FDT_TAGALIGN
(
	`°æí
(
node_«me
Ë+ 1Ë+ 
FDT_TAGSIZE
;

1087 
	}
}

1093 
ölöe
 
	$fdt_¥›_Àn
(c⁄° * 
¥›_«me
, 
Àn
)

1095  (
	`°æí
(
¥›_«me
) + 1) +

1096 (
fdt_¥›îty
) +

1097 
	`FDT_TAGALIGN
(
Àn
);

1098 
	}
}

	@kexec/libfdt/libfdt_env.h

1 #i‚de‡
_LIBFDT_ENV_H


2 
	#_LIBFDT_ENV_H


	)

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

6 
	~<°rög.h
>

8 
	#_B
(
n
Ë(()((
uöt8_t
 *)&
x
)[n])

	)

9 
ölöe
 
uöt32_t
 
	$fdt32_to_˝u
(
uöt32_t
 
x
)

11  (
	`_B
(0) << 24) | (_B(1) << 16) | (_B(2) << 8) | _B(3);

12 
	}
}

13 
	#˝u_to_fdt32
(
x
Ë
	`fdt32_to_˝u
(x)

	)

15 
ölöe
 
uöt64_t
 
	$fdt64_to_˝u
(
uöt64_t
 
x
)

17  (
	`_B
(0) << 56) | (_B(1) << 48) | (_B(2) << 40) | (_B(3) << 32)

18 | (
	`_B
(4) << 24) | (_B(5) << 16) | (_B(6) << 8) | _B(7);

19 
	}
}

20 
	#˝u_to_fdt64
(
x
Ë
	`fdt64_to_˝u
(x)

	)

21 #unde‡
_B


	@kexec/libfdt/libfdt_internal.h

1 #i‚de‡
_LIBFDT_INTERNAL_H


2 
	#_LIBFDT_INTERNAL_H


	)

53 
	~<fdt.h
>

55 
	#FDT_CHECK_HEADER
(
fdt
) \

57 
îr
; \

58 i‡((
îr
 = 
	`fdt_check_hódî
(
fdt
)) != 0) \

59  
îr
; \

60 }

	)

62 
uöt32_t
 
_fdt_√xt_èg
(c⁄° *
fdt
, 
°¨toff£t
, *
√xtoff£t
);

63 
_fdt_check_node_off£t
(c⁄° *
fdt
, 
off£t
);

64 c⁄° *
_fdt_föd_°rög
(c⁄° *
°πab
, 
èbsize
, c⁄° *
s
);

65 
_fdt_node_íd_off£t
(*
fdt
, 
nodeoff£t
);

67 
ölöe
 c⁄° *
	$_fdt_off£t_±r
(c⁄° *
fdt
, 
off£t
)

69  (c⁄° *)
fdt
 + 
	`fdt_off_dt_°ru˘
(fdtË+ 
off£t
;

70 
	}
}

72 
ölöe
 *
	$_fdt_off£t_±r_w
(*
fdt
, 
off£t
)

74  (*)(
uöçå_t
)
	`_fdt_off£t_±r
(
fdt
, 
off£t
);

75 
	}
}

77 
ölöe
 c⁄° 
fdt_ª£rve_íåy
 *
	$_fdt_mem_rsv
(c⁄° *
fdt
, 
n
)

79 c⁄° 
fdt_ª£rve_íåy
 *
rsv_èbÀ
 =

80 (c⁄° 
fdt_ª£rve_íåy
 *)

81 ((c⁄° *)
fdt
 + 
	`fdt_off_mem_rsvm≠
(fdt));

83  
rsv_èbÀ
 + 
n
;

84 
	}
}

85 
ölöe
 
fdt_ª£rve_íåy
 *
	$_fdt_mem_rsv_w
(*
fdt
, 
n
)

87  (*)(
uöçå_t
)
	`_fdt_mem_rsv
(
fdt
, 
n
);

88 
	}
}

90 
	#FDT_SW_MAGIC
 (~
FDT_MAGIC
)

	)

	@kexec/lzma.c

1 
	~<uni°d.h
>

2 
	~<sys/ty≥s.h
>

4 
	~"kexec-lzma.h
"

5 
	~"c⁄fig.h
"

6 
	~"kexec.h
"

8 #ifde‡
HAVE_LIBLZMA


9 
	#_GNU_SOURCE


	)

10 
	~<°dio.h
>

11 
	~<°d¨g.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

15 
	~<limôs.h
>

16 
	~<sys/°©.h
>

17 
	~<˘y≥.h
>

18 
	~<lzma.h
>

20 
	#kBuf„rSize
 (1 << 15)

	)

22 
	slzfûe
 {

23 
uöt8_t
 
	mbuf
[
kBuf„rSize
];

24 
lzma_°ªam
 
	m°rm
;

25 
FILE
 *
	mfûe
;

26 
	mícodög
;

27 
	meof
;

28 } 
	tLZFILE
;

30 
LZFILE
 *
lz›í
(c⁄° *
∑th
, c⁄° *
mode
);

31 
lz˛o£
(
LZFILE
 *
lzfûe
);

32 
ssize_t
 
lzªad
(
LZFILE
 *
lzfûe
, *
buf
, 
size_t
 
Àn
);

34 
LZFILE
 *
	$lz›í_öã∫Æ
(c⁄° *
∑th
, c⁄° *
mode
, 
fd
)

36 
Àvñ
 = 5;

37 
ícodög
 = 0;

38 
FILE
 *
Â
;

39 
LZFILE
 *
lzfûe
;

40 
lzma_ªt
 
ªt
;

41 
lzma_°ªam
 
lzma_°rm_tmp
 = 
LZMA_STREAM_INIT
;

43 ; *
mode
; mode++) {

44 i‡(*
mode
 == 'w')

45 
ícodög
 = 1;

46 i‡(*
mode
 == 'r')

47 
ícodög
 = 0;

48 i‡(*
mode
 >= '1' && *mode <= '9')

49 
Àvñ
 = *
mode
 - '0';

51 i‡(
fd
 != -1)

52 
Â
 = 
	`fd›í
(
fd
, 
ícodög
 ? "w" : "r");

54 
Â
 = 
	`f›í
(
∑th
, 
ícodög
 ? "w" : "r");

55 i‡(!
Â
)

56  
NULL
;

58 
lzfûe
 = 
	`ˇŒoc
(1, (*lzfile));

60 i‡(!
lzfûe
) {

61 
	`f˛o£
(
Â
);

62  
NULL
;

65 
lzfûe
->
fûe
 = 
Â
;

66 
lzfûe
->
ícodög
 =Éncoding;

67 
lzfûe
->
eof
 = 0;

68 
lzfûe
->
°rm
 = 
lzma_°rm_tmp
;

69 i‡(
ícodög
) {

70 
lzma_›ti⁄s_lzma
 
›t_lzma
;

71 i‡(
	`lzma_lzma_¥e£t
(&
›t_lzma
, 
Àvñ
 - 1))

72  
NULL
;

73 
ªt
 = 
	`lzma_Æ⁄e_ícodî
(&
lzfûe
->
°rm
, &
›t_lzma
);

75 
ªt
 = 
	`lzma_auto_decodî
(&
lzfûe
->
°rm
,

76 
	`UINT64_C
(64) * 1024 * 1024, 0);

78 i‡(
ªt
 !
LZMA_OK
) {

79 
	`f˛o£
(
Â
);

80 
	`‰ì
(
lzfûe
);

81  
NULL
;

83  
lzfûe
;

84 
	}
}

86 
LZFILE
 *
	$lz›í
(c⁄° *
∑th
, c⁄° *
mode
)

88  
	`lz›í_öã∫Æ
(
∑th
, 
mode
, -1);

89 
	}
}

91 
	$lz˛o£
(
LZFILE
 *
lzfûe
)

93 
lzma_ªt
 
ªt
;

94 
size_t
 
n
;

96 i‡(!
lzfûe
)

99 i‡(
lzfûe
->
ícodög
) {

101 
lzfûe
->
°rm
.
avaû_out
 = 
kBuf„rSize
;

102 
lzfûe
->
°rm
.
√xt_out
 =Üzfûe->
buf
;

103 
ªt
 = 
	`lzma_code
(&
lzfûe
->
°rm
, 
LZMA_FINISH
);

104 i‡(
ªt
 !
LZMA_OK
 &&Ñë !
LZMA_STREAM_END
)

106 
n
 = 
kBuf„rSize
 - 
lzfûe
->
°rm
.
avaû_out
;

107 i‡(
n
 && 
	`fwrôe
(
lzfûe
->
buf
, 1,Ç,Üzfûe->
fûe
) !=Ç)

109 i‡(
ªt
 =
LZMA_STREAM_END
)

113 
	`lzma_íd
(&
lzfûe
->
°rm
);

115  
	`f˛o£
(
lzfûe
->
fûe
);

116 
	`‰ì
(
lzfûe
);

117 
	}
}

119 
ssize_t
 
	$lzªad
(
LZFILE
 *
lzfûe
, *
buf
, 
size_t
 
Àn
)

121 
lzma_ªt
 
ªt
;

122 
eof
 = 0;

124 i‡(!
lzfûe
 ||Üzfûe->
ícodög
)

127 i‡(
lzfûe
->
eof
)

130 
lzfûe
->
°rm
.
√xt_out
 = 
buf
;

131 
lzfûe
->
°rm
.
avaû_out
 = 
Àn
;

134 i‡(!
lzfûe
->
°rm
.
avaû_ö
) {

135 
lzfûe
->
°rm
.
√xt_ö
 =Üzfûe->
buf
;

136 
lzfûe
->
°rm
.
avaû_ö
 = 
	`‰ód
÷zfûe->
buf
, 1, 
kBuf„rSize
,Üzfûe->
fûe
);

137 i‡(!
lzfûe
->
°rm
.
avaû_ö
)

138 
eof
 = 1;

141 
ªt
 = 
	`lzma_code
(&
lzfûe
->
°rm
, 
LZMA_RUN
);

142 i‡(
ªt
 =
LZMA_STREAM_END
) {

143 
lzfûe
->
eof
 = 1;

144  
Àn
 - 
lzfûe
->
°rm
.
avaû_out
;

147 i‡(
ªt
 !
LZMA_OK
)

150 i‡(!
lzfûe
->
°rm
.
avaû_out
)

151  
Àn
;

153 i‡(
eof
)

156 
	}
}

158 *
	$lzma_decom¥ess_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
)

160 
LZFILE
 *
Â
;

161 *
buf
;

162 
off_t
 
size
, 
Æloˇãd
;

163 
ssize_t
 
ªsu…
;

165 i‡(!
fûíame
) {

166 *
r_size
 = 0;

169 
Â
 = 
	`lz›í
(
fûíame
, "rb");

170 i‡(
Â
 == 0) {

171 
	`dõ
("C™nŸ o≥¿`%s'\n", 
fûíame
);

173 
size
 = 0;

174 
Æloˇãd
 = 65536;

175 
buf
 = 
	`xmÆloc
(
Æloˇãd
);

177 i‡(
size
 =
Æloˇãd
) {

178 
Æloˇãd
 <<= 1;

179 
buf
 = 
	`xªÆloc
(buf, 
Æloˇãd
);

181 
ªsu…
 = 
	`lzªad
(
Â
, 
buf
 + 
size
, 
Æloˇãd
 - size);

182 i‡(
ªsu…
 < 0) {

183 i‡((
î∫o
 =
EINTR
Ë|| (î∫ÿ=
EAGAIN
))

186 
	`dõ
 ("read on %s of %ld bytes failed\n",

187 
fûíame
, (
Æloˇãd
 - 
size
) + 0UL);

189 
size
 +
ªsu…
;

190 } 
ªsu…
 > 0);

191 
ªsu…
 = 
	`lz˛o£
(
Â
);

192 i‡(
ªsu…
 !
LZMA_OK
) {

193 
	`dõ
 ("Clo£ o‡%†Áûed\n", 
fûíame
);

195 *
r_size
 = 
size
;

196  
buf
;

197 
	}
}

199 *
lzma_decom¥ess_fûe
(c⁄° *
UNUSED
(
fûíame
), 
off_t
 *
	$UNUSED
(
r_size
))

201  
NULL
;

202 
	}
}

	@kexec/phys_arch.c

1 
	~"kexec.h
"

2 
	~<î∫o.h
>

3 
	~<°rög.h
>

4 
	~<sys/ut¢ame.h
>

6 
	$physiˇl_¨ch
()

8 
ut¢ame
 utsname;

9 
i
, 
ªsu…
 = 
	`u«me
(&
ut¢ame
);

10 i‡(
ªsu…
 < 0) {

11 
	`Ârötf
(
°dîr
, "uname failed: %s\n",

12 
	`°ªº‹
(
î∫o
));

16 
i
 = 0; 
¨ches
[i].
machöe
; ++i) {

17 i‡(
	`°rcmp
(
ut¢ame
.
machöe
, 
¨ches
[
i
].machine) == 0)

18  
¨ches
[
i
].
¨ch
;

19 i‡((
	`°rcmp
(
¨ches
[
i
].
machöe
, "arm") == 0) &&

20 (
	`°∫cmp
(
ut¢ame
.
machöe
, 
¨ches
[
i
].machine,

21 
	`°æí
(
¨ches
[
i
].
machöe
)) == 0))

22  
¨ches
[
i
].
¨ch
;

25 
	`Ârötf
(
°dîr
, "Unsupported machineÅype: %s\n",

26 
ut¢ame
.
machöe
);

28 
	}
}

	@kexec/phys_to_virt.c

1 
	~"kexec.h
"

2 
	~"¸ashdump.h
"

13 
	$phys_to_vút
(
¸ash_ñf_öfo
 *
ñf_öfo
, 
∑ddr
)

15  
∑ddr
 + 
ñf_öfo
->
∑ge_off£t
;

16 
	}
}

	@kexec/proc_iomem.c

1 
	~"kexec.h
"

3 c⁄° 
	g¥oc_iomem_°r
[] = "/proc/iomem";

10 c⁄° *
	$¥oc_iomem
()

12  
¥oc_iomem_°r
;

13 
	}
}

	@kexec/virt_to_phys.c

1 
	~"kexec.h
"

2 
	~<°dlib.h
>

4 
vút_to_phys
(
	$UNUSED
(
addr
))

6 
	`ab‹t
();

7 
	}
}

	@kexec/zlib.c

1 
	~"kexec-zlib.h
"

2 
	~"kexec.h
"

4 #ifde‡
HAVE_LIBZ


5 
	#_GNU_SOURCE


	)

6 
	~<°dio.h
>

7 
	~<°d¨g.h
>

8 
	~<°rög.h
>

9 
	~<°dlib.h
>

10 
	~<î∫o.h
>

11 
	~<limôs.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<uni°d.h
>

15 
	~<˘y≥.h
>

16 
	~<zlib.h
>

18 *
	$zlib_decom¥ess_fûe
(c⁄° *
fûíame
, 
off_t
 *
r_size
)

20 
gzFûe
 
Â
;

21 
î∫um
;

22 c⁄° *
msg
;

23 *
buf
;

24 
off_t
 
size
, 
Æloˇãd
;

25 
ssize_t
 
ªsu…
;

27 i‡(!
fûíame
) {

28 *
r_size
 = 0;

31 
Â
 = 
	`gz›í
(
fûíame
, "rb");

32 i‡(
Â
 == 0) {

33 
msg
 = 
	`gzîr‹
(
Â
, &
î∫um
);

34 i‡(
î∫um
 =
Z_ERRNO
) {

35 
msg
 = 
	`°ªº‹
(
î∫o
);

37 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿`%s': %s\n", 
fûíame
, 
msg
);

38  
NULL
;

40 
size
 = 0;

41 
Æloˇãd
 = 65536;

42 
buf
 = 
	`xmÆloc
(
Æloˇãd
);

44 i‡(
size
 =
Æloˇãd
) {

45 
Æloˇãd
 <<= 1;

46 
buf
 = 
	`xªÆloc
(buf, 
Æloˇãd
);

48 
ªsu…
 = 
	`gzªad
(
Â
, 
buf
 + 
size
, 
Æloˇãd
 - size);

49 i‡(
ªsu…
 < 0) {

50 i‡((
î∫o
 =
EINTR
Ë|| (î∫ÿ=
EAGAIN
))

53 
msg
 = 
	`gzîr‹
(
Â
, &
î∫um
);

54 i‡(
î∫um
 =
Z_ERRNO
) {

55 
msg
 = 
	`°ªº‹
(
î∫o
);

57 
	`dõ
 ("read on %s of %ld bytes failed: %s\n",

58 
fûíame
, (
Æloˇãd
 - 
size
Ë+ 0UL, 
msg
);

60 
size
 +
ªsu…
;

61 } 
ªsu…
 > 0);

62 
ªsu…
 = 
	`gz˛o£
(
Â
);

63 i‡(
ªsu…
 !
Z_OK
) {

64 
msg
 = 
	`gzîr‹
(
Â
, &
î∫um
);

65 i‡(
î∫um
 =
Z_ERRNO
) {

66 
msg
 = 
	`°ªº‹
(
î∫o
);

68 
	`dõ
 ("Clo£ o‡%†Áûed: %s\n", 
fûíame
, 
msg
);

70 *
r_size
 = 
size
;

71  
buf
;

72 
	}
}

74 *
zlib_decom¥ess_fûe
(c⁄° *
UNUSED
(
fûíame
), 
off_t
 *
	$UNUSED
(
r_size
))

76  
NULL
;

77 
	}
}

	@purgatory/arch/i386/console-x86.c

1 
	~<°döt.h
>

2 
	~<¨ch/io.h
>

3 
	~<purg©‹y.h
>

12 
	#VGABASE
 ((*)0xb8000)

	)

14 
	#MAX_YPOS
 25

	)

15 
	#MAX_XPOS
 80

	)

17 
	gcuºít_ypos
 = 1, 
	gcuºít_xpos
 = 0;

18 
uöt8_t
 
	gc⁄sﬁe_vga
 = 0;

20 
	$putch¨_vga
(
ch
)

22 
i
, 
k
, 
j
;

23 i‡(!
c⁄sﬁe_vga
)

26 i‡(
cuºít_ypos
 >
MAX_YPOS
) {

28 
k
 = 1, 
j
 = 0; k < 
MAX_YPOS
; k++, j++) {

29 
i
 = 0; i < 
MAX_XPOS
; i++) {

30 
	`wrôew
(
	`ªadw
(
VGABASE
 + 2*(
MAX_XPOS
*
k
 + 
i
)),

31 
VGABASE
 + 2*(
MAX_XPOS
*
j
 + 
i
));

34 
i
 = 0; i < 
MAX_XPOS
; i++)

35 
	`wrôew
(0x720, 
VGABASE
 + 2*(
MAX_XPOS
*
j
 + 
i
));

36 
cuºít_ypos
 = 
MAX_YPOS
-1;

38 i‡(
ch
 == '\n') {

39 
cuºít_xpos
 = 0;

40 
cuºít_ypos
++;

41 } i‡(
ch
 != '\r') {

42 
	`wrôew
(((0x7 << 8Ë| (Ë
ch
),

43 
VGABASE
 + 2*(
MAX_XPOS
*
cuºít_ypos
 +

44 
cuºít_xpos
++));

45 i‡(
cuºít_xpos
 >
MAX_XPOS
) {

46 
cuºít_xpos
 = 0;

47 
cuºít_ypos
++;

50 
	}
}

58 
uöt8_t
 
	gc⁄sﬁe_£rül
 = 0;

59 
uöt16_t
 
	g£rül_ba£
 = 0x3f8;

60 
uöt32_t
 
	g£rül_baud
 = 0;

62 
	#XMTRDY
 0x20

	)

64 
	#DLAB
 0x80

	)

66 
	#TXR
 0

	)

67 
	#TBR
 0

	)

68 
	#RXR
 0

	)

69 
	#IER
 1

	)

70 
	#IIR
 2

	)

71 
	#FCR
 2

	)

72 
	#LCR
 3

	)

73 
	#MCR
 4

	)

74 
	#LSR
 5

	)

75 
	#MSR
 6

	)

76 
	#DLL
 0

	)

77 
	#DLH
 1

	)

79 
	$£rül_öô
()

81 
öôülized
 = 0;

82 i‡(!
öôülized
) {

83 
l¸
;

84 
	`outb
(0x3, 
£rül_ba£
 + 
LCR
);

85 
	`outb
(0, 
£rül_ba£
 + 
IER
);

86 
	`outb
(0, 
£rül_ba£
 + 
FCR
);

87 
	`outb
(0x3, 
£rül_ba£
 + 
MCR
);

89 
l¸
 = 
	`öb
(
£rül_ba£
 + 
LCR
);

90 
	`outb
(
l¸
 | 
DLAB
, 
£rül_ba£
 + 
LCR
);

92 i‡(
£rül_baud
) {

93 
divis‹
 = 115200 / 
£rül_baud
;

94 
	`outb
(
divis‹
 & 0xff, 
£rül_ba£
 + 
DLL
);

95 
	`outb
((
divis‹
 >> 8Ë& 0xff, 
£rül_ba£
 + 
DLH
);

97 
	`outb
(
l¸
 & ~
DLAB
, 
£rül_ba£
 + 
LCR
);

98 
öôülized
 = 1;

100 
	}
}

102 
	$£rül_tx_byã
(
byã
)

105 
	`£rül_öô
();

108 (
	`öb
(
£rül_ba£
 + 
LSR
) & 0x20) == 0)

110 
	`outb
(
byã
, 
£rül_ba£
 + 
TBR
);

112 !(
	`öb
(
£rül_ba£
 + 
LSR
) & 0x40))

114 
	}
}

116 
	$putch¨_£rül
(
ch
)

118 i‡(!
c⁄sﬁe_£rül
) {

121 i‡(
ch
 == '\n') {

122 
	`£rül_tx_byã
('\r');

124 
	`£rül_tx_byã
(
ch
);

125 
	}
}

129 
	$putch¨
(
ch
)

131 
	`putch¨_vga
(
ch
);

132 
	`putch¨_£rül
(
ch
);

133 
	}
}

	@purgatory/arch/i386/crashdump_backup.c

21 
	~<°döt.h
>

22 
	~<°rög.h
>

27 
	gbackup_°¨t
 = 0;

29 
	gbackup_§c_°¨t
 = 0;

30 
	gbackup_§c_size
 = 0;

36 
	$¸ashdump_backup_mem‹y
()

38 *
de°
, *
§c
;

39 
size_t
 
size
;

41 
§c
 = (*Ë
backup_§c_°¨t
;

42 
size
 = (
size_t
Ë
backup_§c_size
;

44 i‡(!
size
)

47 i‡(
backup_°¨t
) {

48 
de°
 = (*)(
backup_°¨t
);

49 
	`mem˝y
(
de°
, 
§c
, 
size
);

51 
	}
}

	@purgatory/arch/i386/include/arch/debug.h

2 
	#TTYS0_BASE
 0x3f8

	)

4 
	#TTYS0_RBR
 (
TTYS0_BASE
+0x00)

	)

5 
	#TTYS0_TBR
 (
TTYS0_BASE
+0x00)

	)

7 
	#TTYS0_IER
 (
TTYS0_BASE
+0x01)

	)

8 
	#TTYS0_IIR
 (
TTYS0_BASE
+0x02)

	)

9 
	#TTYS0_FCR
 (
TTYS0_BASE
+0x02)

	)

10 
	#TTYS0_LCR
 (
TTYS0_BASE
+0x03)

	)

11 
	#TTYS0_MCR
 (
TTYS0_BASE
+0x04)

	)

13 
	#TTYS0_DLL
 (
TTYS0_BASE
+0x00)

	)

14 
	#TTYS0_DLM
 (
TTYS0_BASE
+0x01)

	)

16 
	#TTYS0_LSR
 (
TTYS0_BASE
+0x05)

	)

17 
	#TTYS0_MSR
 (
TTYS0_BASE
+0x06)

	)

18 
	#TTYS0_SCR
 (
TTYS0_BASE
+0x07)

	)

20 
	#TTYS0_BAUD
 9600

	)

21 
	#TTYS0_DIV
 (115200/
TTYS0_BAUD
)

	)

22 
	#TTYS0_DIV_LO
 (
TTYS0_DIV
&0xFF)

	)

23 
	#TTYS0_DIV_HI
 ((
TTYS0_DIV
 >> 8)&0xFF)

	)

25 #i‡((115200%
TTYS0_BAUD
) != 0)

26 #îr‹ 
Bad
 
âyS0
 
baud
 
øã


29 
	#TTYS0_INIT
 \

31 
movb
 
$0x00
, %
Æ
 ; \

32 
movw
 
$TTYS0_IER
, %
dx
 ; \

33 
outb
 %
Æ
, %
dx
 ; \

36 
movb
 
$0x01
, %
Æ
 ; \

37 
movw
 
$TTYS0_FCR
, %
dx
 ; \

38 
outb
 %
Æ
, %
dx
 ; \

41 
movw
 
$TTYS0_LCR
, %
dx
 ; \

42 
movb
 
$0x83
, %
Æ
 ; \

43 
outb
 %
Æ
, %
dx
 ; \

45 
movw
 
$TTYS0_DLL
, %
dx
 ; \

46 
movb
 
$TTYS0_DIV_LO
, %
Æ
 ; \

47 
outb
 %
Æ
, %
dx
 ; \

49 
movw
 
$TTYS0_DLM
, %
dx
 ; \

50 
movb
 
$TTYS0_DIV_HI
, %
Æ
 ; \

51 
outb
 %
Æ
, %
dx
 ; \

53 
movw
 
$TTYS0_LCR
, %
dx
 ; \

54 
movb
 
$0x03
, %
Æ
 ; \

55 
outb
 %
Æ
, %
dx


	)

59 
	#TTYS0_TX_AL
 \

60 
mov
 %
Æ
, %
ah
 ; \

61 9: 
mov
 
$TTYS0_LSR
, %
dx
 ; \

62 
öb
 %
dx
, %
Æ
 ; \

63 
ã°
 
$0x20
, %
Æ
 ; \

64 
je
 9b ; \

65 
mov
 
$TTYS0_TBR
, %
dx
 ; \

66 
mov
 %
ah
, %
Æ
 ; \

67 
outb
 %
Æ
, %
dx


	)

70 
	#TTYS0_TX_CHAR
(
byã
) \

71 
mov
 
byã
, %
Æ
 ; \

72 
TTYS0_TX_AL


	)

75 
	#TTYS0_TX_HEX32
(
lw‹d
) \

76 
mov
 
lw‹d
, %
óx
 ; \

77 
shr
 
$28
, %
óx
 ; \

78 
add
 
$
'0', %
Æ
 ; \

79 
cmp
 
$
'9', %
Æ
 ; \

80 
jÀ
 9f ; \

81 
add
 
$39
, %
Æ
 ; \

83 
TTYS0_TX_AL
 ; \

85 
mov
 
lw‹d
, %
óx
 ; \

86 
shr
 
$24
, %
óx
 ; \

87 
™d
 
$0x0f
, %
Æ
 ; \

88 
add
 
$
'0', %
Æ
 ; \

89 
cmp
 
$
'9', %
Æ
 ; \

90 
jÀ
 9f ; \

91 
add
 
$39
, %
Æ
 ; \

93 
TTYS0_TX_AL
 ; \

95 
mov
 
lw‹d
, %
óx
 ; \

96 
shr
 
$20
, %
óx
 ; \

97 
™d
 
$0x0f
, %
Æ
 ; \

98 
add
 
$
'0', %
Æ
 ; \

99 
cmp
 
$
'9', %
Æ
 ; \

100 
jÀ
 9f ; \

101 
add
 
$39
, %
Æ
 ; \

103 
TTYS0_TX_AL
 ; \

105 
mov
 
lw‹d
, %
óx
 ; \

106 
shr
 
$16
, %
óx
 ; \

107 
™d
 
$0x0f
, %
Æ
 ; \

108 
add
 
$
'0', %
Æ
 ; \

109 
cmp
 
$
'9', %
Æ
 ; \

110 
jÀ
 9f ; \

111 
add
 
$39
, %
Æ
 ; \

113 
TTYS0_TX_AL
 ; \

115 
mov
 
lw‹d
, %
óx
 ; \

116 
shr
 
$12
, %
óx
 ; \

117 
™d
 
$0x0f
, %
Æ
 ; \

118 
add
 
$
'0', %
Æ
 ; \

119 
cmp
 
$
'9', %
Æ
 ; \

120 
jÀ
 9f ; \

121 
add
 
$39
, %
Æ
 ; \

123 
TTYS0_TX_AL
 ; \

125 
mov
 
lw‹d
, %
óx
 ; \

126 
shr
 
$8
, %
óx
 ; \

127 
™d
 
$0x0f
, %
Æ
 ; \

128 
add
 
$
'0', %
Æ
 ; \

129 
cmp
 
$
'9', %
Æ
 ; \

130 
jÀ
 9f ; \

131 
add
 
$39
, %
Æ
 ; \

133 
TTYS0_TX_AL
 ; \

135 
mov
 
lw‹d
, %
óx
 ; \

136 
shr
 
$4
, %
óx
 ; \

137 
™d
 
$0x0f
, %
Æ
 ; \

138 
add
 
$
'0', %
Æ
 ; \

139 
cmp
 
$
'9', %
Æ
 ; \

140 
jÀ
 9f ; \

141 
add
 
$39
, %
Æ
 ; \

143 
TTYS0_TX_AL
 ; \

145 
mov
 
lw‹d
, %
óx
 ; \

146 
™d
 
$0x0f
, %
Æ
 ; \

147 
add
 
$
'0', %
Æ
 ; \

148 
cmp
 
$
'9', %
Æ
 ; \

149 
jÀ
 9f ; \

150 
add
 
$39
, %
Æ
 ; \

152 
TTYS0_TX_AL


	)

155 
	#TTYS0_TX_HEX64
(
lw‹d
) \

156 
mov
 
lw‹d
, %
øx
 ; \

157 
shr
 
$60
, %
øx
 ; \

158 
add
 
$
'0', %
Æ
 ; \

159 
cmp
 
$
'9', %
Æ
 ; \

160 
jÀ
 9f ; \

161 
add
 
$39
, %
Æ
 ; \

163 
TTYS0_TX_AL
 ; \

165 
mov
 
lw‹d
, %
øx
 ; \

166 
shr
 
$56
, %
øx
 ; \

167 
™d
 
$0x0f
, %
Æ
 ; \

168 
add
 
$
'0', %
Æ
 ; \

169 
cmp
 
$
'9', %
Æ
 ; \

170 
jÀ
 9f ; \

171 
add
 
$39
, %
Æ
 ; \

173 
TTYS0_TX_AL
 ; \

175 
mov
 
lw‹d
, %
øx
 ; \

176 
shr
 
$52
, %
øx
 ; \

177 
™d
 
$0x0f
, %
Æ
 ; \

178 
add
 
$
'0', %
Æ
 ; \

179 
cmp
 
$
'9', %
Æ
 ; \

180 
jÀ
 9f ; \

181 
add
 
$39
, %
Æ
 ; \

183 
TTYS0_TX_AL
 ; \

185 
mov
 
lw‹d
, %
øx
 ; \

186 
shr
 
$48
, %
øx
 ; \

187 
™d
 
$0x0f
, %
Æ
 ; \

188 
add
 
$
'0', %
Æ
 ; \

189 
cmp
 
$
'9', %
Æ
 ; \

190 
jÀ
 9f ; \

191 
add
 
$39
, %
Æ
 ; \

193 
TTYS0_TX_AL
 ; \

195 
mov
 
lw‹d
, %
øx
 ; \

196 
shr
 
$44
, %
øx
 ; \

197 
™d
 
$0x0f
, %
Æ
 ; \

198 
add
 
$
'0', %
Æ
 ; \

199 
cmp
 
$
'9', %
Æ
 ; \

200 
jÀ
 9f ; \

201 
add
 
$39
, %
Æ
 ; \

203 
TTYS0_TX_AL
 ; \

205 
mov
 
lw‹d
, %
øx
 ; \

206 
shr
 
$40
, %
øx
 ; \

207 
™d
 
$0x0f
, %
Æ
 ; \

208 
add
 
$
'0', %
Æ
 ; \

209 
cmp
 
$
'9', %
Æ
 ; \

210 
jÀ
 9f ; \

211 
add
 
$39
, %
Æ
 ; \

213 
TTYS0_TX_AL
 ; \

215 
mov
 
lw‹d
, %
øx
 ; \

216 
shr
 
$36
, %
øx
 ; \

217 
™d
 
$0x0f
, %
Æ
 ; \

218 
add
 
$
'0', %
Æ
 ; \

219 
cmp
 
$
'9', %
Æ
 ; \

220 
jÀ
 9f ; \

221 
add
 
$39
, %
Æ
 ; \

223 
TTYS0_TX_AL
 ; \

225 
mov
 
lw‹d
, %
øx
 ; \

226 
shr
 
$32
, %
øx
 ; \

227 
™d
 
$0x0f
, %
Æ
 ; \

228 
add
 
$
'0', %
Æ
 ; \

229 
cmp
 
$
'9', %
Æ
 ; \

230 
jÀ
 9f ; \

231 
add
 
$39
, %
Æ
 ; \

233 
TTYS0_TX_AL
 ; \

235 
mov
 
lw‹d
, %
øx
 ; \

236 
shr
 
$28
, %
øx
 ; \

237 
add
 
$
'0', %
Æ
 ; \

238 
cmp
 
$
'9', %
Æ
 ; \

239 
jÀ
 9f ; \

240 
add
 
$39
, %
Æ
 ; \

242 
TTYS0_TX_AL
 ; \

244 
mov
 
lw‹d
, %
øx
 ; \

245 
shr
 
$24
, %
øx
 ; \

246 
™d
 
$0x0f
, %
Æ
 ; \

247 
add
 
$
'0', %
Æ
 ; \

248 
cmp
 
$
'9', %
Æ
 ; \

249 
jÀ
 9f ; \

250 
add
 
$39
, %
Æ
 ; \

252 
TTYS0_TX_AL
 ; \

254 
mov
 
lw‹d
, %
øx
 ; \

255 
shr
 
$20
, %
øx
 ; \

256 
™d
 
$0x0f
, %
Æ
 ; \

257 
add
 
$
'0', %
Æ
 ; \

258 
cmp
 
$
'9', %
Æ
 ; \

259 
jÀ
 9f ; \

260 
add
 
$39
, %
Æ
 ; \

262 
TTYS0_TX_AL
 ; \

264 
mov
 
lw‹d
, %
øx
 ; \

265 
shr
 
$16
, %
øx
 ; \

266 
™d
 
$0x0f
, %
Æ
 ; \

267 
add
 
$
'0', %
Æ
 ; \

268 
cmp
 
$
'9', %
Æ
 ; \

269 
jÀ
 9f ; \

270 
add
 
$39
, %
Æ
 ; \

272 
TTYS0_TX_AL
 ; \

274 
mov
 
lw‹d
, %
øx
 ; \

275 
shr
 
$12
, %
øx
 ; \

276 
™d
 
$0x0f
, %
Æ
 ; \

277 
add
 
$
'0', %
Æ
 ; \

278 
cmp
 
$
'9', %
Æ
 ; \

279 
jÀ
 9f ; \

280 
add
 
$39
, %
Æ
 ; \

282 
TTYS0_TX_AL
 ; \

284 
mov
 
lw‹d
, %
øx
 ; \

285 
shr
 
$8
, %
øx
 ; \

286 
™d
 
$0x0f
, %
Æ
 ; \

287 
add
 
$
'0', %
Æ
 ; \

288 
cmp
 
$
'9', %
Æ
 ; \

289 
jÀ
 9f ; \

290 
add
 
$39
, %
Æ
 ; \

292 
TTYS0_TX_AL
 ; \

294 
mov
 
lw‹d
, %
øx
 ; \

295 
shr
 
$4
, %
øx
 ; \

296 
™d
 
$0x0f
, %
Æ
 ; \

297 
add
 
$
'0', %
Æ
 ; \

298 
cmp
 
$
'9', %
Æ
 ; \

299 
jÀ
 9f ; \

300 
add
 
$39
, %
Æ
 ; \

302 
TTYS0_TX_AL
 ; \

304 
mov
 
lw‹d
, %
øx
 ; \

305 
™d
 
$0x0f
, %
Æ
 ; \

306 
add
 
$
'0', %
Æ
 ; \

307 
cmp
 
$
'9', %
Æ
 ; \

308 
jÀ
 9f ; \

309 
add
 
$39
, %
Æ
 ; \

311 
TTYS0_TX_AL


	)

314 
	#DEBUG_CHAR
(
x
Ë
	`TTYS0_TX_CHAR
(
$x
Ë; TTYS0_TX_CHAR(
$
'\r'Ë; TTYS0_TX_CHAR($'\n')

	)

315 
	#DEBUG_TX_HEX32
(
x
Ë
	`TTYS0_TX_HEX32
(x); 
	`TTYS0_TX_CHAR
(
$
'\r'Ë; TTYS0_TX_CHAR($'\n')

	)

316 
	#DEBUG_TX_HEX64
(
x
Ë
	`TTYS0_TX_HEX64
(x); 
	`TTYS0_TX_CHAR
(
$
'\r'Ë; TTYS0_TX_CHAR($'\n')

	)

	@purgatory/arch/i386/include/arch/io.h

1 #i‚de‡
ARCH_I386_IO_H


2 
	#ARCH_I386_IO_H


	)

4 
	~<°döt.h
>

7 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

8 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
)

10 
uöt8_t
 
ªsu…
;

12 
__asm__
 
	`__vﬁ©ûe__
 (

14 :"˜" (
ªsu…
)

15 :"Nd" (
p‹t
));

16  
ªsu…
;

17 
	}
}

19 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

20 
uöt16_t
 
	$öw
(
uöt16_t
 
p‹t
)

22 
uöt16_t
 
ªsu…
;

24 
__asm__
 
	`__vﬁ©ûe__
 (

26 :"˜" (
ªsu…
)

27 :"Nd" (
p‹t
));

28  
ªsu…
;

29 
	}
}

31 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

32 
uöt32_t
 
	$öl
(
uöt32_t
 
p‹t
)

34 
uöt32_t
 
ªsu…
;

36 
__asm__
 
	`__vﬁ©ûe__
 (

38 :"˜" (
ªsu…
)

39 :"Nd" (
p‹t
));

40  
ªsu…
;

41 
	}
}

43 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

44 
	$outb
 (
uöt8_t
 
vÆue
, 
uöt16_t
 
p‹t
)

46 
__asm__
 
	`__vﬁ©ûe__
 (

49 :"a" (
vÆue
), "Nd" (
p‹t
));

50 
	}
}

52 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

53 
	$outw
 (
uöt16_t
 
vÆue
, uöt16_à
p‹t
)

55 
__asm__
 
	`__vﬁ©ûe__
 (

58 :"a" (
vÆue
), "Nd" (
p‹t
));

59 
	}
}

61 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

62 
	$oué
 (
uöt32_t
 
vÆue
, 
uöt16_t
 
p‹t
)

64 
__asm__
 
	`__vﬁ©ûe__
 (

67 :"a" (
vÆue
), "Nd" (
p‹t
));

68 
	}
}

78 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

79 
	$ªadb
(c⁄° vﬁ©ûê*
addr
)

81  *(vﬁ©ûê*Ë
addr
;

82 
	}
}

83 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

84 
	$ªadw
(c⁄° vﬁ©ûê*
addr
)

86  *(vﬁ©ûê*Ë
addr
;

87 
	}
}

88 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

89 
	$ªadl
(c⁄° vﬁ©ûê*
addr
)

91  *(vﬁ©ûê*Ë
addr
;

92 
	}
}

94 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

95 
	$wrôeb
(
b
, vﬁ©ûê*
addr
)

97 *(vﬁ©ûê*Ë
addr
 = 
b
;

98 
	}
}

99 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

100 
	$wrôew
(
b
, vﬁ©ûê*
addr
)

102 *(vﬁ©ûê*Ë
addr
 = 
b
;

103 
	}
}

104 
ölöe
 
__©åibuã__
((
__Æways_ölöe__
))

105 
	$wrôñ
(
b
, vﬁ©ûê*
addr
)

107 *(vﬁ©ûê*Ë
addr
 = 
b
;

108 
	}
}

	@purgatory/arch/i386/pic.c

19 
	~<sys/io.h
>

20 
	~<purg©‹y.h
>

21 
	~"purg©‹y-x86.h
"

24 
	$x86_£tup_Àgacy_pic
()

27 
	`outb
(0xff, 0x21);

28 
	`outb
(0xff, 0xa1);

30 
	`outb
(0x11, 0x20);

31 
	`outb
(0x11, 0x80);

33 
	`outb
(0x08, 0x21);

34 
	`outb
(0x08, 0x80);

36 
	`outb
(0x01, 0x21);

37 
	`outb
(0x01, 0x80);

39 
	`outb
(0x11, 0xa0);

40 
	`outb
(0x11, 0x80);

42 
	`outb
(0x70, 0xa1);

43 
	`outb
(0x70, 0x80);

45 
	`outb
(0x01, 0xa1);

46 
	`outb
(0x01, 0x80);

48 
	`outb
(0x00, 0x21);

49 
	`outb
(0x00, 0xa1);

50 
	}
}

	@purgatory/arch/i386/purgatory-x86.c

1 
	~<°döt.h
>

2 
	~<purg©‹y.h
>

3 
	~"purg©‹y-x86.h
"

10 
	$x86_£tup_˝u
()

21 
asm
 volatile(

28 
	}
}

30 
uöt8_t
 
	gª£t_vga
 = 0;

31 
uöt8_t
 
	gÀgacy_timî
 = 0;

32 
uöt8_t
 
	gÀgacy_pic
 = 0;

33 
uöt8_t
 
	g∑nic_kî√l
 = 0;

34 
	gjump_back_íåy
 = 0;

35 *
	gcmdlöe_íd
 = 0;

37 
	$£tup_¨ch
()

39 
	`x86_£tup_˝u
();

40 i‡(
ª£t_vga
Ë
	`x86_ª£t_vga
();

41 i‡(
Àgacy_pic
Ë
	`x86_£tup_Àgacy_pic
();

43 
	}
}

45 
	$x86_£tup_jump_back_íåy
()

47 i‡(
cmdlöe_íd
)

48 
	`•rötf
(
cmdlöe_íd
, " kexec_jump_back_entry=0x%x",

49 
jump_back_íåy
);

50 
	}
}

53 
	$po°_vîifiˇti⁄_£tup_¨ch
()

55 i‡(
∑nic_kî√l
Ë
	`¸ashdump_backup_mem‹y
();

56 i‡(
jump_back_íåy
Ë
	`x86_£tup_jump_back_íåy
();

57 
	}
}

	@purgatory/arch/i386/purgatory-x86.h

1 #i‚de‡
PURGATORY_X86_H


2 
	#PURGATORY_X86_H


	)

4 
x86_ª£t_vga
();

5 
x86_£tup_Àgacy_pic
();

6 
x86_£tup_Àgacy_timî
();

7 
¸ashdump_backup_mem‹y
();

	@purgatory/arch/i386/vga.c

1 
	~<sys/io.h
>

2 
	~<purg©‹y.h
>

3 
	~"purg©‹y-x86.h
"

11 
	$x86_ª£t_vga
()

14 
	`öb
(0x3da);

15 
	`outb
(0, 0x3c0);

18 
	`outw
(0x0300, 0x3c4);

19 
	`outw
(0x0001, 0x3c4);

20 
	`outw
(0x0302, 0x3c4);

21 
	`outw
(0x0003, 0x3c4);

22 
	`outw
(0x0204, 0x3c4);

25 
	`outw
(0x0e11, 0x3d4);

27 
	`outw
(0x5f00, 0x3d4);

28 
	`outw
(0x4f01, 0x3d4);

29 
	`outw
(0x5002, 0x3d4);

30 
	`outw
(0x8203, 0x3d4);

31 
	`outw
(0x5504, 0x3d4);

32 
	`outw
(0x8105, 0x3d4);

33 
	`outw
(0xbf06, 0x3d4);

34 
	`outw
(0x1f07, 0x3d4);

35 
	`outw
(0x0008, 0x3d4);

36 
	`outw
(0x4f09, 0x3d4);

37 
	`outw
(0x200a, 0x3d4);

38 
	`outw
(0x0e0b, 0x3d4);

39 
	`outw
(0x000c, 0x3d4);

40 
	`outw
(0x000d, 0x3d4);

41 
	`outw
(0x010e, 0x3d4);

42 
	`outw
(0xe00f, 0x3d4);

43 
	`outw
(0x9c10, 0x3d4);

44 
	`outw
(0x8e11, 0x3d4);

45 
	`outw
(0x8f12, 0x3d4);

46 
	`outw
(0x2813, 0x3d4);

47 
	`outw
(0x1f14, 0x3d4);

48 
	`outw
(0x9615, 0x3d4);

49 
	`outw
(0xb916, 0x3d4);

50 
	`outw
(0xa317, 0x3d4);

51 
	`outw
(0xff18, 0x3d4);

54 
	`outw
(0x0000, 0x3ce);

55 
	`outw
(0x0001, 0x3ce);

56 
	`outw
(0x0002, 0x3ce);

57 
	`outw
(0x0003, 0x3ce);

58 
	`outw
(0x0004, 0x3ce);

59 
	`outw
(0x1005, 0x3ce);

60 
	`outw
(0x0e06, 0x3ce);

61 
	`outw
(0x0007, 0x3ce);

62 
	`outw
(0xff08, 0x3ce);

65 
	`öb
(0x3da);

66 
	`outb
(0x00, 0x3c0);

67 
	`outb
(0x00, 0x3c0);

69 
	`öb
(0x3da);

70 
	`outb
(0x01, 0x3c0);

71 
	`outb
(0x01, 0x3c0);

73 
	`öb
(0x3da);

74 
	`outb
(0x02, 0x3c0);

75 
	`outb
(0x02, 0x3c0);

77 
	`öb
(0x3da);

78 
	`outb
(0x03, 0x3c0);

79 
	`outb
(0x03, 0x3c0);

81 
	`öb
(0x3da);

82 
	`outb
(0x04, 0x3c0);

83 
	`outb
(0x04, 0x3c0);

85 
	`öb
(0x3da);

86 
	`outb
(0x05, 0x3c0);

87 
	`outb
(0x05, 0x3c0);

89 
	`öb
(0x3da);

90 
	`outb
(0x06, 0x3c0);

91 
	`outb
(0x14, 0x3c0);

93 
	`öb
(0x3da);

94 
	`outb
(0x07, 0x3c0);

95 
	`outb
(0x07, 0x3c0);

97 
	`öb
(0x3da);

98 
	`outb
(0x08, 0x3c0);

99 
	`outb
(0x38, 0x3c0);

101 
	`öb
(0x3da);

102 
	`outb
(0x09, 0x3c0);

103 
	`outb
(0x39, 0x3c0);

105 
	`öb
(0x3da);

106 
	`outb
(0x0a, 0x3c0);

107 
	`outb
(0x3a, 0x3c0);

109 
	`öb
(0x3da);

110 
	`outb
(0x0b, 0x3c0);

111 
	`outb
(0x3b, 0x3c0);

113 
	`öb
(0x3da);

114 
	`outb
(0x0c, 0x3c0);

115 
	`outb
(0x3c, 0x3c0);

117 
	`öb
(0x3da);

118 
	`outb
(0x0d, 0x3c0);

119 
	`outb
(0x3d, 0x3c0);

121 
	`öb
(0x3da);

122 
	`outb
(0x0e, 0x3c0);

123 
	`outb
(0x3e, 0x3c0);

125 
	`öb
(0x3da);

126 
	`outb
(0x0f, 0x3c0);

127 
	`outb
(0x3f, 0x3c0);

129 
	`öb
(0x3da);

130 
	`outb
(0x10, 0x3c0);

131 
	`outb
(0x0c, 0x3c0);

133 
	`öb
(0x3da);

134 
	`outb
(0x11, 0x3c0);

135 
	`outb
(0x00, 0x3c0);

137 
	`öb
(0x3da);

138 
	`outb
(0x12, 0x3c0);

139 
	`outb
(0x0f, 0x3c0);

141 
	`öb
(0x3da);

142 
	`outb
(0x13, 0x3c0);

143 
	`outb
(0x08, 0x3c0);

145 
	`öb
(0x3da);

146 
	`outb
(0x14, 0x3c0);

147 
	`outb
(0x00, 0x3c0);

150 
	`öb
(0x3da);

151 
	`outb
(0x20, 0x3c0);

152 
	}
}

	@purgatory/arch/ia64/console-ia64.c

1 
	~<purg©‹y.h
>

2 
	~"io.h
"

4 
	#VGABASE
 
	`UNCACHED
(0xb8000)

	)

9 
	#MAX_YPOS
 25

	)

10 
	#MAX_XPOS
 80

	)

12 
	gcuºít_ypos
 = 1, 
	gcuºít_xpos
 = 0;

14 
	$putch¨_vga
(
ch
)

16 
i
, 
k
, 
j
;

18 i‡(
cuºít_ypos
 >
MAX_YPOS
) {

20 
k
 = 1, 
j
 = 0; k < 
MAX_YPOS
; k++, j++) {

21 
i
 = 0; i < 
MAX_XPOS
; i++) {

22 
	`wrôew
(
	`ªadw
(
VGABASE
 + 2*(
MAX_XPOS
*
k
 + 
i
)),

23 
VGABASE
 + 2*(
MAX_XPOS
*
j
 + 
i
));

26 
i
 = 0; i < 
MAX_XPOS
; i++)

27 
	`wrôew
(0x720, 
VGABASE
 + 2*(
MAX_XPOS
*
j
 + 
i
));

28 
cuºít_ypos
 = 
MAX_YPOS
-1;

30 i‡(
ch
 == '\n') {

31 
cuºít_xpos
 = 0;

32 
cuºít_ypos
++;

33 } i‡(
ch
 != '\r') {

34 
	`wrôew
(((0x7 << 8Ë| (Ë
ch
),

35 
VGABASE
 + 2*(
MAX_XPOS
*
cuºít_ypos
 +

36 
cuºít_xpos
++));

37 i‡(
cuºít_xpos
 >
MAX_XPOS
) {

38 
cuºít_xpos
 = 0;

39 
cuºít_ypos
++;

42 
	}
}

44 
	$putch¨
(
ch
)

46 
	`putch¨_vga
(
ch
);

47 
	}
}

	@purgatory/arch/ia64/io.h

1 #i‚de‡
IO_H


2 
	#IO_H


	)

3 
	#UNCACHED
(
x
Ë(*)((x)|(1UL<<63))

	)

4 
	#MF
(Ë
asm
 vﬁ©ûê("mf.a" ::: "mem‹y")

	)

5 
	#IO_SPACE_ENCODING
(
p
Ë(((’Ë>> 2Ë<< 12Ë| (∞& 0xfff))

	)

6 
__noio
;

7 
ölöe
 *
	$io_addr
 (
p‹t
)

9 
off£t
;

10 
io_ba£
;

11 
asm
 vﬁ©ûê("mov %0˜r.k0":"Ù"(
io_ba£
));

12 
off£t
 = 
	`IO_SPACE_ENCODING
(
p‹t
);

13  
	`UNCACHED
(
io_ba£
 | 
off£t
);

14 
	}
}

16 
ölöe
 
	$öb
 (
p‹t
)

18 vﬁ©ûê*
addr
 = 
	`io_addr
(
p‹t
);

19 
ªt
 = 0;

20 i‡(!
__noio
) {

21 
ªt
 = *
addr
;

22 
	`MF
();

24  
ªt
;

25 
	}
}

27 
ölöe
 
	$öw
 (
p‹t
)

29 vﬁ©ûê*
addr
 = 
	`io_addr
(
p‹t
);

30 
ªt
 = 0;

32 i‡(!
__noio
) {

33 
ªt
 = *
addr
;

34 
	`MF
();

36  
ªt
;

37 
	}
}

39 
ölöe
 
	$öl
 (
p‹t
)

41 vﬁ©ûê*
addr
 = 
	`io_addr
(
p‹t
);

42 
ªt
 ;

43 i‡(!
__noio
) {

44 
ªt
 = *
addr
;

45 
	`MF
();

47  
ªt
;

48 
	}
}

50 
ölöe
 
	$outb
 (
vÆ
, 
p‹t
)

52 vﬁ©ûê*
addr
 = 
	`io_addr
(
p‹t
);

54 i‡(!
__noio
) {

55 *
addr
 = 
vÆ
;

56 
	`MF
();

58 
	}
}

60 
ölöe
 
	$outw
 (
vÆ
, 
p‹t
)

62 vﬁ©ûê*
addr
 = 
	`io_addr
(
p‹t
);

64 i‡(!
__noio
) {

65 *
addr
 = 
vÆ
;

66 
	`MF
();

68 
	}
}

70 
ölöe
 
	$oué
 (
vÆ
, 
p‹t
)

72 vﬁ©ûê*
addr
 = 
	`io_addr
(
p‹t
);

74 i‡(!
__noio
) {

75 *
addr
 = 
vÆ
;

76 
	`MF
();

78 
	}
}

80 
ölöe
 
	$ªadb
(c⁄° vﬁ©ûê*
addr
)

82  
__noio
 ? 0 :*(vﬁ©ûê*Ë
addr
;

83 
	}
}

84 
ölöe
 
	$ªadw
(c⁄° vﬁ©ûê*
addr
)

86  
__noio
 ? 0 :*(vﬁ©ûê*Ë
addr
;

87 
	}
}

88 
ölöe
 
	$ªadl
(c⁄° vﬁ©ûê*
addr
)

90  
__noio
 ? 0 :*(vﬁ©ûê*Ë
addr
;

91 
	}
}

93 
ölöe
 
	$wrôeb
(
b
, vﬁ©ûê*
addr
)

95 i‡(!
__noio
)

96 *(vﬁ©ûê*Ë
addr
 = 
b
;

97 
	}
}

98 
ölöe
 
	$wrôew
(
b
, vﬁ©ûê*
addr
)

100 i‡(!
__noio
)

101 *(vﬁ©ûê*Ë
addr
 = 
b
;

102 
	}
}

103 
ölöe
 
	$wrôñ
(
b
, vﬁ©ûê*
addr
)

105 i‡(!
__noio
)

106 *(vﬁ©ûê*Ë
addr
 = 
b
;

107 
	}
}

	@purgatory/arch/ia64/purgatory-ia64.c

19 
	~<purg©‹y.h
>

20 
	~<°döt.h
>

21 
	~<°rög.h
>

22 
	~"purg©‹y-ü64.h
"

24 
	#PAGE_OFFSET
 0xe000000000000000UL

	)

26 
	#EFI_PAGE_SHIFT
 12

	)

27 
	#EFI_PAGE_SIZE
 (1UL<<
EFI_PAGE_SHIFT
)

	)

28 
	#EFI_PAGE_ALIGN
(
x
Ë((x + 
EFI_PAGE_SIZE
 - 1)&~(EFI_PAGE_SIZE-1))

	)

30 
	#EFI_RESERVED_TYPE
 0

	)

31 
	#EFI_LOADER_CODE
 1

	)

32 
	#EFI_LOADER_DATA
 2

	)

33 
	#EFI_BOOT_SERVICES_CODE
 3

	)

34 
	#EFI_BOOT_SERVICES_DATA
 4

	)

35 
	#EFI_RUNTIME_SERVICES_CODE
 5

	)

36 
	#EFI_RUNTIME_SERVICES_DATA
 6

	)

37 
	#EFI_CONVENTIONAL_MEMORY
 7

	)

38 
	#EFI_UNUSABLE_MEMORY
 8

	)

39 
	#EFI_ACPI_RECLAIM_MEMORY
 9

	)

40 
	#EFI_ACPI_MEMORY_NVS
 10

	)

41 
	#EFI_MEMORY_MAPPED_IO
 11

	)

42 
	#EFI_MEMORY_MAPPED_IO_PORT_SPACE
 12

	)

43 
	#EFI_PAL_CODE
 13

	)

44 
	#EFI_MAX_MEMORY_TYPE
 14

	)

47 
uöt64_t
 
	msig«tuª
;

48 
uöt32_t
 
	mªvisi⁄
;

49 
uöt32_t
 
	mhódîsize
;

50 
uöt32_t
 
	m¸c32
;

51 
uöt32_t
 
	mª£rved
;

52 } 
	tefi_èbÀ_hdr_t
;

55 
efi_èbÀ_hdr_t
 
	mhdr
;

56 
	mgë_time
;

57 
	m£t_time
;

58 
	mgë_wakeup_time
;

59 
	m£t_wakeup_time
;

60 
	m£t_vútuÆ_addªss_m≠
;

61 
	mc⁄vît_poöãr
;

62 
	mgë_v¨übÀ
;

63 
	mgë_√xt_v¨übÀ
;

64 
	m£t_v¨übÀ
;

65 
	mgë_√xt_high_m⁄o_cou¡
;

66 
	mª£t_sy°em
;

67 } 
	tefi_ru¡ime_£rvi˚s_t
;

70 
efi_èbÀ_hdr_t
 
	mhdr
;

71 
	mfw_víd‹
;

73 
uöt32_t
 
	mfw_ªvisi⁄
;

74 
	mc⁄_ö_h™dÀ
;

75 
	mc⁄_ö
;

76 
	mc⁄_out_h™dÀ
;

77 
	mc⁄_out
;

78 
	m°dîr_h™dÀ
;

79 
	m°dîr
;

80 
	mru¡ime
;

81 
	mboŸtime
;

82 
	mƒ_èbÀs
;

83 
	mèbÀs
;

84 } 
	tefi_sy°em_èbÀ_t
;

86 
	sü64_boŸ_∑øm
 {

87 
uöt64_t
 
	mcomm™d_löe
;

89 
uöt64_t
 
	mefi_sy°ab
;

91 
uöt64_t
 
	mefi_memm≠
;

93 
uöt64_t
 
	mefi_memm≠_size
;

94 
uöt64_t
 
	mefi_memdesc_size
;

96 
uöt32_t
 
	mefi_memdesc_vîsi⁄
;

98 
uöt16_t
 
	mnum_cﬁs
;

100 
uöt16_t
 
	mnum_rows
;

102 
uöt16_t
 
	m‹ig_x
;

103 
uöt16_t
 
	m‹ig_y
;

104 } 
	mc⁄sﬁe_öfo
;

105 
uöt64_t
 
	mÂswa
;

107 
uöt64_t
 
	möôrd_°¨t
;

108 
uöt64_t
 
	möôrd_size
;

110 
uöt64_t
 
	mvmcode_°¨t
;

111 
uöt64_t
 
	mvmcode_size
;

115 
uöt32_t
 
	mty≥
;

116 
uöt32_t
 
	m∑d
;

117 
uöt64_t
 
	mphys_addr
;

118 
uöt64_t
 
	mvút_addr
;

119 
uöt64_t
 
	mnum_∑ges
;

120 
uöt64_t
 
	m©åibuã
;

121 } 
	tefi_mem‹y_desc_t
;

123 
	slﬂded_£gmít
 {

124 
	m°¨t
;

125 
	míd
;

128 
	skexec_boŸ_∑øms
 {

129 
uöt64_t
 
	mvmcode_ba£
;

130 
uöt64_t
 
	mvmcode_size
;

131 
uöt64_t
 
	mømdisk_ba£
;

132 
uöt64_t
 
	mømdisk_size
;

133 
uöt64_t
 
	mcomm™d_löe
;

134 
uöt64_t
 
	mcomm™d_löe_Àn
;

135 
uöt64_t
 
	mefi_memm≠_ba£
;

136 
uöt64_t
 
	mefi_memm≠_size
;

137 
uöt64_t
 
	mboŸ_∑øm_ba£
;

138 
lﬂded_£gmít
 *
	mlﬂded_£gmíts
;

139 
	mlﬂded_£gmíts_num
;

143 
	$£tup_¨ch
()

145 
	`ª£t_vga
();

146 
	}
}

148 
ölöe
 
	$PA
(
addr
)

150  
addr
 & 0x0fffffffffffffffLL;

151 
	}
}

154 
	$∑tch_efi_memm≠
(
kexec_boŸ_∑øms
 *
∑øms
,

155 
ü64_boŸ_∑øm
 *
boŸ_∑øm
)

157 *
de°
 = (*)
∑øms
->
efi_memm≠_ba£
;

158 *
§c
 = (*)
boŸ_∑øm
->
efi_memm≠
;

159 
uöt64_t
 
‹ig_ty≥
;

160 
efi_mem‹y_desc_t
 *
§c_md
, *
d°_md
;

161 *
§c_íd
 = 
§c
 + 
boŸ_∑øm
->
efi_memm≠_size
;

162 
i
;

163 ; 
§c
 < 
§c_íd
; sr¯+
boŸ_∑øm
->
efi_memdesc_size
,

164 
de°
 +
boŸ_∑øm
->
efi_memdesc_size
) {

165 
m°¨t
, 
míd
;

166 
§c_md
 = 
§c
;

167 
d°_md
 = 
de°
;

168 i‡(
§c_md
->
num_∑ges
 == 0)

170 
m°¨t
 = 
§c_md
->
phys_addr
;

171 
míd
 = 
§c_md
->
phys_addr
 +

172 (
§c_md
->
num_∑ges
 << 
EFI_PAGE_SHIFT
);

173 *
d°_md
 = *
§c_md
;

174 i‡(
§c_md
->
ty≥
 =
EFI_LOADER_DATA
)

175 
d°_md
->
ty≥
 = 
EFI_CONVENTIONAL_MEMORY
;

177 
‹ig_ty≥
 = 
d°_md
->
ty≥
;

178 
i
 = 0; i < 
∑øms
->
lﬂded_£gmíts_num
; i++) {

179 
lﬂded_£gmít
 *
£g
;

180 
°¨t_∑ges
, 
mid_∑ges
, 
íd_∑ges
;

182 
£g
 = &
∑øms
->
lﬂded_£gmíts
[
i
];

183 i‡(
£g
->
°¨t
 < 
m°¨t
 || seg->°¨à>
míd
)

186 
£g
->
íd
 > 
míd
 && 
§c
 < 
§c_íd
) {

187 
§c
 +
boŸ_∑øm
->
efi_memdesc_size
;

188 
§c_md
 = 
§c
;

190 
míd
 = 
§c_md
->
phys_addr
 +

191 (
§c_md
->
num_∑ges
 << 
EFI_PAGE_SHIFT
);

193 i‡(
£g
->
íd
 < 
míd
 && 
§c
 < 
§c_íd
) {

194 *
§c_√xt
;

195 
efi_mem‹y_desc_t
 *
§c_√xt_md
;

196 
§c_√xt
 = 
§c
 + 
boŸ_∑øm
->
efi_memdesc_size
;

197 
§c_√xt_md
 = 
§c_√xt
;

198 i‡(
§c_√xt_md
->
ty≥
 ==

199 
EFI_CONVENTIONAL_MEMORY
) {

201 
§c
 +
boŸ_∑øm
->
efi_memdesc_size
;

202 
§c_md
 = 
§c
;

203 
míd
 = 
§c_md
->
phys_addr
 +

204 (
§c_md
->
num_∑ges
 <<

205 
EFI_PAGE_SHIFT
);

209 
°¨t_∑ges
 = (
£g
->
°¨t
 - 
m°¨t
Ë>> 
EFI_PAGE_SHIFT
;

210 
mid_∑ges
 = (
£g
->
íd
 - seg->
°¨t
Ë>> 
EFI_PAGE_SHIFT
;

211 
íd_∑ges
 = (
míd
 - 
£g
->
íd
Ë>> 
EFI_PAGE_SHIFT
;

212 i‡(
°¨t_∑ges
) {

213 
d°_md
->
num_∑ges
 = 
°¨t_∑ges
;

214 
de°
 +
boŸ_∑øm
->
efi_memdesc_size
;

215 
d°_md
 = 
de°
;

216 *
d°_md
 = *
§c_md
;

218 
d°_md
->
phys_addr
 = 
£g
->
°¨t
;

219 
d°_md
->
num_∑ges
 = 
mid_∑ges
;

220 
d°_md
->
ty≥
 = 
EFI_LOADER_DATA
;

221 i‡(!
íd_∑ges
)

223 
de°
 +
boŸ_∑øm
->
efi_memdesc_size
;

224 
d°_md
 = 
de°
;

225 *
d°_md
 = *
§c_md
;

226 
d°_md
->
phys_addr
 = 
£g
->
íd
;

227 
d°_md
->
num_∑ges
 = 
íd_∑ges
;

228 
d°_md
->
ty≥
 = 
‹ig_ty≥
;

229 
m°¨t
 = 
£g
->
íd
;

233 
boŸ_∑øm
->
efi_memm≠_size
 = 
de°
 - (*)
∑øms
->
efi_memm≠_ba£
;

234 
	}
}

237 
	$Êush_iˇche_ønge
(*
°¨t
, 
Àn
)

239 
i
, 
addr
;

240 
addr
 = ()
°¨t
 & ~31UL;

241 
Àn
 +()
°¨t
 - 
addr
;

242 
i
 = 0;ò< 
Àn
; i += 32)

243 
asm
 vﬁ©ûe("fc.ò%0"::"r"(
°¨t
 + 
i
):"memory");

244 
asm
 volatile (";;sync.i;;":::"memory");

245 
asm
 volatile ("srlz.i":::"memory");

246 
	}
}

248 
__dummy_efi_fun˘i⁄
[], 
__dummy_efi_fun˘i⁄_íd
[];

252 
	$ü64_ív_£tup
(
ü64_boŸ_∑øm
 *
boŸ_∑øm
,

253 
kexec_boŸ_∑øms
 *
∑øms
)

255 
Àn
;

256 
efi_sy°em_èbÀ_t
 *
sy°ab
;

257 
efi_ru¡ime_£rvi˚s_t
 *
ru¡ime
;

258 *
£t_vútuÆ_addªss_m≠
;

259 *
comm™d_löe
 = (*)
∑øms
->command_line;

260 
uöt64_t
 
comm™d_löe_Àn
 = 
∑øms
->command_line_len;

261 
ü64_boŸ_∑øm
 *
√w_boŸ_∑øm
 =

262 (
ü64_boŸ_∑øm
 *Ë
∑øms
->
boŸ_∑øm_ba£
;

263 
	`mem˝y
(
√w_boŸ_∑øm
, 
boŸ_∑øm
, 4096);

280 
Àn
 = 
__dummy_efi_fun˘i⁄_íd
 - 
__dummy_efi_fun˘i⁄
;

281 
	`mem˝y
(
comm™d_löe
 + 
comm™d_löe_Àn
,

282 
__dummy_efi_fun˘i⁄
, 
Àn
);

283 
sy°ab
 = (
efi_sy°em_èbÀ_t
 *)
√w_boŸ_∑øm
->
efi_sy°ab
;

284 
ru¡ime
 = (
efi_ru¡ime_£rvi˚s_t
 *)
	`PA
(
sy°ab
->runtime);

285 
£t_vútuÆ_addªss_m≠
 =

286 (*)
	`PA
(
ru¡ime
->
£t_vútuÆ_addªss_m≠
);

287 *(
£t_vútuÆ_addªss_m≠
) =

288 ()(
comm™d_löe
 + 
comm™d_löe_Àn
);

289 
	`Êush_iˇche_ønge
(
comm™d_löe
 + 
comm™d_löe_Àn
, 
Àn
);

291 
	`∑tch_efi_memm≠
(
∑øms
, 
√w_boŸ_∑øm
);

293 
√w_boŸ_∑øm
->
efi_memm≠
 = 
∑øms
->
efi_memm≠_ba£
;

294 
√w_boŸ_∑øm
->
comm™d_löe
 = 
∑øms
->command_line;

295 
√w_boŸ_∑øm
->
c⁄sﬁe_öfo
.
‹ig_x
 = 0;

296 
√w_boŸ_∑øm
->
c⁄sﬁe_öfo
.
‹ig_y
 = 0;

297 
√w_boŸ_∑øm
->
öôrd_°¨t
 = 
∑øms
->
ømdisk_ba£
;

298 
√w_boŸ_∑øm
->
öôrd_size
 = 
∑øms
->
ømdisk_size
;

299 
√w_boŸ_∑øm
->
vmcode_°¨t
 = 
∑øms
->
vmcode_ba£
;

300 
√w_boŸ_∑øm
->
vmcode_size
 = 
∑øms
->vmcode_size;

301 
	}
}

304 
	$po°_vîifiˇti⁄_£tup_¨ch
()

307 
	}
}

	@purgatory/arch/ia64/purgatory-ia64.h

1 #i‚de‡
PURGATORY_IA64_H


2 
	#PURGATORY_IA64_H


	)

4 
ª£t_vga
();

	@purgatory/arch/ia64/vga.c

1 
	~"io.h
"

2 
	$ª£t_vga
()

5 
	`öb
(0x3da);

6 
	`outb
(0, 0x3c0);

9 
	`outw
(0x0300, 0x3c4);

10 
	`outw
(0x0001, 0x3c4);

11 
	`outw
(0x0302, 0x3c4);

12 
	`outw
(0x0003, 0x3c4);

13 
	`outw
(0x0204, 0x3c4);

16 
	`outw
(0x0e11, 0x3d4);

18 
	`outw
(0x5f00, 0x3d4);

19 
	`outw
(0x4f01, 0x3d4);

20 
	`outw
(0x5002, 0x3d4);

21 
	`outw
(0x8203, 0x3d4);

22 
	`outw
(0x5504, 0x3d4);

23 
	`outw
(0x8105, 0x3d4);

24 
	`outw
(0xbf06, 0x3d4);

25 
	`outw
(0x1f07, 0x3d4);

26 
	`outw
(0x0008, 0x3d4);

27 
	`outw
(0x4f09, 0x3d4);

28 
	`outw
(0x200a, 0x3d4);

29 
	`outw
(0x0e0b, 0x3d4);

30 
	`outw
(0x000c, 0x3d4);

31 
	`outw
(0x000d, 0x3d4);

32 
	`outw
(0x010e, 0x3d4);

33 
	`outw
(0xe00f, 0x3d4);

34 
	`outw
(0x9c10, 0x3d4);

35 
	`outw
(0x8e11, 0x3d4);

36 
	`outw
(0x8f12, 0x3d4);

37 
	`outw
(0x2813, 0x3d4);

38 
	`outw
(0x1f14, 0x3d4);

39 
	`outw
(0x9615, 0x3d4);

40 
	`outw
(0xb916, 0x3d4);

41 
	`outw
(0xa317, 0x3d4);

42 
	`outw
(0xff18, 0x3d4);

45 
	`outw
(0x0000, 0x3ce);

46 
	`outw
(0x0001, 0x3ce);

47 
	`outw
(0x0002, 0x3ce);

48 
	`outw
(0x0003, 0x3ce);

49 
	`outw
(0x0004, 0x3ce);

50 
	`outw
(0x1005, 0x3ce);

51 
	`outw
(0x0e06, 0x3ce);

52 
	`outw
(0x0007, 0x3ce);

53 
	`outw
(0xff08, 0x3ce);

56 
	`öb
(0x3da);

57 
	`outb
(0x00, 0x3c0);

58 
	`outb
(0x00, 0x3c0);

60 
	`öb
(0x3da);

61 
	`outb
(0x01, 0x3c0);

62 
	`outb
(0x01, 0x3c0);

64 
	`öb
(0x3da);

65 
	`outb
(0x02, 0x3c0);

66 
	`outb
(0x02, 0x3c0);

68 
	`öb
(0x3da);

69 
	`outb
(0x03, 0x3c0);

70 
	`outb
(0x03, 0x3c0);

72 
	`öb
(0x3da);

73 
	`outb
(0x04, 0x3c0);

74 
	`outb
(0x04, 0x3c0);

76 
	`öb
(0x3da);

77 
	`outb
(0x05, 0x3c0);

78 
	`outb
(0x05, 0x3c0);

80 
	`öb
(0x3da);

81 
	`outb
(0x06, 0x3c0);

82 
	`outb
(0x14, 0x3c0);

84 
	`öb
(0x3da);

85 
	`outb
(0x07, 0x3c0);

86 
	`outb
(0x07, 0x3c0);

88 
	`öb
(0x3da);

89 
	`outb
(0x08, 0x3c0);

90 
	`outb
(0x38, 0x3c0);

92 
	`öb
(0x3da);

93 
	`outb
(0x09, 0x3c0);

94 
	`outb
(0x39, 0x3c0);

96 
	`öb
(0x3da);

97 
	`outb
(0x0a, 0x3c0);

98 
	`outb
(0x3a, 0x3c0);

100 
	`öb
(0x3da);

101 
	`outb
(0x0b, 0x3c0);

102 
	`outb
(0x3b, 0x3c0);

104 
	`öb
(0x3da);

105 
	`outb
(0x0c, 0x3c0);

106 
	`outb
(0x3c, 0x3c0);

108 
	`öb
(0x3da);

109 
	`outb
(0x0d, 0x3c0);

110 
	`outb
(0x3d, 0x3c0);

112 
	`öb
(0x3da);

113 
	`outb
(0x0e, 0x3c0);

114 
	`outb
(0x3e, 0x3c0);

116 
	`öb
(0x3da);

117 
	`outb
(0x0f, 0x3c0);

118 
	`outb
(0x3f, 0x3c0);

120 
	`öb
(0x3da);

121 
	`outb
(0x10, 0x3c0);

122 
	`outb
(0x0c, 0x3c0);

124 
	`öb
(0x3da);

125 
	`outb
(0x11, 0x3c0);

126 
	`outb
(0x00, 0x3c0);

128 
	`öb
(0x3da);

129 
	`outb
(0x12, 0x3c0);

130 
	`outb
(0x0f, 0x3c0);

132 
	`öb
(0x3da);

133 
	`outb
(0x13, 0x3c0);

134 
	`outb
(0x08, 0x3c0);

136 
	`öb
(0x3da);

137 
	`outb
(0x14, 0x3c0);

138 
	`outb
(0x00, 0x3c0);

141 
	`öb
(0x3da);

142 
	`outb
(0x20, 0x3c0);

143 
	}
}

	@purgatory/arch/mips/console-mips.c

1 
	~<purg©‹y.h
>

2 
	~"unu£d.h
"

4 
putch¨
(
	$UNUSED
(
ch
))

7 
	}
}

	@purgatory/arch/mips/purgatory-mips.c

1 
	~<purg©‹y.h
>

2 
	~"purg©‹y-mùs.h
"

4 
	$£tup_¨ch
()

7 
	}
}

	@purgatory/arch/mips/purgatory-mips.h

1 #i‚de‡
PURGATORY_MIPSEL_H


2 
	#PURGATORY_MIPSEL_H


	)

	@purgatory/arch/ppc/console-ppc.c

1 
	~<purg©‹y.h
>

2 
	~"unu£d.h
"

4 
putch¨
(
	$UNUSED
(
ch
))

7 
	}
}

	@purgatory/arch/ppc/ppc_asm.h

10 
	#¸0
 0

	)

11 
	#¸1
 1

	)

12 
	#¸2
 2

	)

13 
	#¸3
 3

	)

14 
	#¸4
 4

	)

15 
	#¸5
 5

	)

16 
	#¸6
 6

	)

17 
	#¸7
 7

	)

22 
	#r0
 0

	)

23 
	#r1
 1

	)

24 
	#r2
 2

	)

25 
	#r3
 3

	)

26 
	#r4
 4

	)

27 
	#r5
 5

	)

28 
	#r6
 6

	)

29 
	#r7
 7

	)

30 
	#r8
 8

	)

31 
	#r9
 9

	)

32 
	#r10
 10

	)

33 
	#r11
 11

	)

34 
	#r12
 12

	)

35 
	#r13
 13

	)

36 
	#r14
 14

	)

37 
	#r15
 15

	)

38 
	#r16
 16

	)

39 
	#r17
 17

	)

40 
	#r18
 18

	)

41 
	#r19
 19

	)

42 
	#r20
 20

	)

43 
	#r21
 21

	)

44 
	#r22
 22

	)

45 
	#r23
 23

	)

46 
	#r24
 24

	)

47 
	#r25
 25

	)

48 
	#r26
 26

	)

49 
	#r27
 27

	)

50 
	#r28
 28

	)

51 
	#r29
 29

	)

52 
	#r30
 30

	)

53 
	#r31
 31

	)

56 
	#MSR_SF
 (1<<63)

	)

57 
	#MSR_ISF
 (1<<61)

	)

58 
	#MSR_VEC
 (1<<25Ë

	)

59 
	#MSR_POW
 (1<<18Ë

	)

60 
	#MSR_WE
 (1<<18Ë

	)

61 
	#MSR_TGPR
 (1<<17Ë

	)

62 
	#MSR_CE
 (1<<17Ë

	)

63 
	#MSR_ILE
 (1<<16Ë

	)

64 
	#MSR_EE
 (1<<15Ë

	)

65 
	#MSR_PR
 (1<<14Ë

	)

66 
	#MSR_FP
 (1<<13Ë

	)

67 
	#MSR_ME
 (1<<12Ë

	)

68 
	#MSR_FE0
 (1<<11Ë

	)

69 
	#MSR_SE
 (1<<10Ë

	)

70 
	#MSR_BE
 (1<<9Ë

	)

71 
	#MSR_DE
 (1<<9Ë

	)

72 
	#MSR_FE1
 (1<<8Ë

	)

73 
	#MSR_IP
 (1<<6Ë

	)

74 
	#MSR_IR
 (1<<5Ë

	)

75 
	#MSR_DR
 (1<<4Ë

	)

76 
	#MSR_PE
 (1<<3Ë

	)

77 
	#MSR_PX
 (1<<2Ë

	)

78 
	#MSR_RI
 (1<<1Ë

	)

79 
	#MSR_LE
 (1<<0Ë

	)

82 
	#SPRN_CTR
 0x009

	)

83 
	#SPRN_DABR
 0x3F5

	)

84 
	#SPRN_DAR
 0x013

	)

85 
	#SPRN_TBRL
 0x10C

	)

86 
	#SPRN_TBRU
 0x10D

	)

87 
	#SPRN_TBWL
 0x11C

	)

88 
	#SPRN_TBWU
 0x11D

	)

89 
	#SPRN_HIOR
 0x137

	)

90 
	#SPRN_DBAT0L
 0x219

	)

91 
	#SPRN_DBAT0U
 0x218

	)

92 
	#SPRN_DBAT1L
 0x21B

	)

93 
	#SPRN_DBAT1U
 0x21A

	)

94 
	#SPRN_DBAT2L
 0x21D

	)

95 
	#SPRN_DBAT2U
 0x21C

	)

96 
	#SPRN_DBAT3L
 0x21F

	)

97 
	#SPRN_DBAT3U
 0x21E

	)

98 
	#SPRN_DBAT4L
 0x239

	)

99 
	#SPRN_DBAT4U
 0x238

	)

100 
	#SPRN_DBAT5L
 0x23B

	)

101 
	#SPRN_DBAT5U
 0x23A

	)

102 
	#SPRN_DBAT6L
 0x23D

	)

103 
	#SPRN_DBAT6U
 0x23C

	)

104 
	#SPRN_DBAT7L
 0x23F

	)

105 
	#SPRN_DBAT7U
 0x23E

	)

107 
	#SPRN_DEC
 0x016

	)

108 
	#SPRN_DER
 0x095

	)

109 
	#DER_RSTE
 0x40000000

	)

110 
	#DER_CHSTPE
 0x20000000

	)

111 
	#DER_MCIE
 0x10000000

	)

112 
	#DER_EXTIE
 0x02000000

	)

113 
	#DER_ALIE
 0x01000000

	)

114 
	#DER_PRIE
 0x00800000

	)

115 
	#DER_FPUVIE
 0x00400000

	)

116 
	#DER_DECIE
 0x00200000

	)

117 
	#DER_SYSIE
 0x00040000

	)

118 
	#DER_TRE
 0x00020000

	)

119 
	#DER_SEIE
 0x00004000

	)

120 
	#DER_ITLBMSE
 0x00002000

	)

121 
	#DER_ITLBERE
 0x00001000

	)

122 
	#DER_DTLBMSE
 0x00000800

	)

123 
	#DER_DTLBERE
 0x00000400

	)

124 
	#DER_LBRKE
 0x00000008

	)

125 
	#DER_IBRKE
 0x00000004

	)

126 
	#DER_EBRKE
 0x00000002

	)

127 
	#DER_DPIE
 0x00000001

	)

128 
	#SPRN_DMISS
 0x3D0

	)

129 
	#SPRN_DSISR
 0x012

	)

130 
	#SPRN_EAR
 0x11A

	)

131 
	#SPRN_HASH1
 0x3D2

	)

132 
	#SPRN_HASH2
 0x3D3

	)

133 
	#SPRN_HID0
 0x3F0

	)

134 
	#HID0_EMCP
 (1<<31Ë

	)

135 
	#HID0_EBA
 (1<<29Ë

	)

136 
	#HID0_EBD
 (1<<28Ë

	)

137 
	#HID0_SBCLK
 (1<<27)

	)

138 
	#HID0_EICE
 (1<<26)

	)

139 
	#HID0_TBEN
 (1<<26Ë

	)

140 
	#HID0_ECLK
 (1<<25)

	)

141 
	#HID0_PAR
 (1<<24)

	)

142 
	#HID0_STEN
 (1<<24Ë

	)

143 
	#HID0_HIGH_BAT
 (1<<23Ë

	)

144 
	#HID0_DOZE
 (1<<23)

	)

145 
	#HID0_NAP
 (1<<22)

	)

146 
	#HID0_SLEEP
 (1<<21)

	)

147 
	#HID0_DPM
 (1<<20)

	)

148 
	#HID0_BHTCLR
 (1<<18Ë

	)

149 
	#HID0_XAEN
 (1<<17Ë

	)

150 
	#HID0_NHR
 (1<<16Ë

	)

151 
	#HID0_ICE
 (1<<15Ë

	)

152 
	#HID0_DCE
 (1<<14Ë

	)

153 
	#HID0_ILOCK
 (1<<13Ë

	)

154 
	#HID0_DLOCK
 (1<<12Ë

	)

155 
	#HID0_ICFI
 (1<<11Ë

	)

156 
	#HID0_DCI
 (1<<10Ë

	)

157 
	#HID0_SPD
 (1<<9Ë

	)

158 
	#HID0_SGE
 (1<<7Ë

	)

159 
	#HID0_SIED
 (1<<7Ë

	)

160 
	#HID0_DFCA
 (1<<6Ë

	)

161 
	#HID0_LRSTK
 (1<<4Ë

	)

162 
	#HID0_BTIC
 (1<<5Ë

	)

163 
	#HID0_ABE
 (1<<3Ë

	)

164 
	#HID0_FOLD
 (1<<3Ë

	)

165 
	#HID0_BHTE
 (1<<2Ë

	)

166 
	#HID0_BTCD
 (1<<1Ë

	)

167 
	#HID0_NOPDST
 (1<<1Ë

	)

168 
	#HID0_NOPTI
 (1<<0Ë

	)

170 
	#SPRN_HID1
 0x3F1

	)

171 
	#HID1_EMCP
 (1<<31Ë

	)

172 
	#HID1_PC0
 (1<<16Ë

	)

173 
	#HID1_PC1
 (1<<15Ë

	)

174 
	#HID1_PC2
 (1<<14Ë

	)

175 
	#HID1_PC3
 (1<<13Ë

	)

176 
	#HID1_SYNCBE
 (1<<11Ë

	)

177 
	#HID1_ABE
 (1<<10Ë

	)

178 
	#SPRN_HID2
 0x3F8

	)

179 
	#SPRN_IABR
 0x3F2

	)

180 
	#SPRN_HID4
 0x3F4

	)

181 
	#SPRN_HID5
 0x3F6

	)

182 #i‡!
deföed
(
SPRN_IAC1
Ë&& !deföed(
SPRN_IAC2
)

183 
	#SPRN_IAC1
 0x3F4

	)

184 
	#SPRN_IAC2
 0x3F5

	)

186 
	#SPRN_IBAT0L
 0x211

	)

187 
	#SPRN_IBAT0U
 0x210

	)

188 
	#SPRN_IBAT1L
 0x213

	)

189 
	#SPRN_IBAT1U
 0x212

	)

190 
	#SPRN_IBAT2L
 0x215

	)

191 
	#SPRN_IBAT2U
 0x214

	)

192 
	#SPRN_IBAT3L
 0x217

	)

193 
	#SPRN_IBAT3U
 0x216

	)

194 
	#SPRN_IBAT4L
 0x231

	)

195 
	#SPRN_IBAT4U
 0x230

	)

196 
	#SPRN_IBAT5L
 0x233

	)

197 
	#SPRN_IBAT5U
 0x232

	)

198 
	#SPRN_IBAT6L
 0x235

	)

199 
	#SPRN_IBAT6U
 0x234

	)

200 
	#SPRN_IBAT7L
 0x237

	)

201 
	#SPRN_IBAT7U
 0x236

	)

202 
	#SPRN_ICMP
 0x3D5

	)

203 
	#SPRN_ICTC
 0x3FB

	)

204 
	#SPRN_ICTRL
 0x3F3

	)

205 
	#ICTRL_EICE
 0x08000000

	)

206 
	#ICTRL_EDC
 0x04000000

	)

207 
	#ICTRL_EICP
 0x00000100

	)

208 
	#SPRN_IMISS
 0x3D4

	)

209 
	#SPRN_IMMR
 0x27E

	)

210 
	#SPRN_L2CR
 0x3F9

	)

211 
	#SPRN_L2CR2
 0x3f8

	)

212 
	#L2CR_L2E
 0x80000000

	)

213 
	#L2CR_L2PE
 0x40000000

	)

214 
	#L2CR_L2SIZ_MASK
 0x30000000

	)

215 
	#L2CR_L2SIZ_256KB
 0x10000000

	)

216 
	#L2CR_L2SIZ_512KB
 0x20000000

	)

217 
	#L2CR_L2SIZ_1MB
 0x30000000

	)

218 
	#L2CR_L2CLK_MASK
 0x0e000000

	)

219 
	#L2CR_L2CLK_DISABLED
 0x00000000

	)

220 
	#L2CR_L2CLK_DIV1
 0x02000000

	)

221 
	#L2CR_L2CLK_DIV1_5
 0x04000000

	)

222 
	#L2CR_L2CLK_DIV2
 0x08000000

	)

223 
	#L2CR_L2CLK_DIV2_5
 0x0a000000

	)

224 
	#L2CR_L2CLK_DIV3
 0x0c000000

	)

225 
	#L2CR_L2RAM_MASK
 0x01800000

	)

226 
	#L2CR_L2RAM_FLOW
 0x00000000

	)

227 
	#L2CR_L2RAM_PIPE
 0x01000000

	)

228 
	#L2CR_L2RAM_PIPE_LW
 0x01800000

	)

229 
	#L2CR_L2DO
 0x00400000

	)

230 
	#L2CR_L2I
 0x00200000

	)

231 
	#L2CR_L2CTL
 0x00100000

	)

232 
	#L2CR_L2WT
 0x00080000

	)

233 
	#L2CR_L2TS
 0x00040000

	)

234 
	#L2CR_L2OH_MASK
 0x00030000

	)

235 
	#L2CR_L2OH_0_5
 0x00000000

	)

236 
	#L2CR_L2OH_1_0
 0x00010000

	)

237 
	#L2CR_L2SL
 0x00008000

	)

238 
	#L2CR_L2DF
 0x00004000

	)

239 
	#L2CR_L2BYP
 0x00002000

	)

240 
	#L2CR_L2IP
 0x00000001

	)

241 
	#SPRN_L3CR
 0x3FA

	)

242 
	#L3CR_L3E
 0x80000000

	)

243 
	#L3CR_L3PE
 0x40000000

	)

244 
	#L3CR_L3APE
 0x20000000

	)

245 
	#L3CR_L3SIZ
 0x10000000

	)

246 
	#L3CR_L3CLKEN
 0x08000000

	)

247 
	#L3CR_L3RES
 0x04000000

	)

248 
	#L3CR_L3CLKDIV
 0x03800000

	)

249 
	#L3CR_L3IO
 0x00400000

	)

250 
	#L3CR_L3SPO
 0x00040000

	)

251 
	#L3CR_L3CKSP
 0x00030000

	)

252 
	#L3CR_L3PSP
 0x0000e000

	)

253 
	#L3CR_L3REP
 0x00001000

	)

254 
	#L3CR_L3HWF
 0x00000800

	)

255 
	#L3CR_L3I
 0x00000400

	)

256 
	#L3CR_L3RT
 0x00000300

	)

257 
	#L3CR_L3NIRCA
 0x00000080

	)

258 
	#L3CR_L3DO
 0x00000040

	)

259 
	#L3CR_PMEN
 0x00000004

	)

260 
	#L3CR_PMSIZ
 0x00000001

	)

261 
	#SPRN_MSSCR0
 0x3f6

	)

262 
	#SPRN_MSSSR0
 0x3f7

	)

263 
	#SPRN_LDSTCR
 0x3f8

	)

264 
	#SPRN_LDSTDB
 0x3f4

	)

265 
	#SPRN_LR
 0x008

	)

266 
	#SPRN_MMCR0
 0x3B8

	)

267 
	#SPRN_MMCR1
 0x3BC

	)

268 #i‚de‡
SPRN_PIR


269 
	#SPRN_PIR
 0x3FF

	)

271 
	#SPRN_PMC1
 0x3B9

	)

272 
	#SPRN_PMC2
 0x3BA

	)

273 
	#SPRN_PMC3
 0x3BD

	)

274 
	#SPRN_PMC4
 0x3BE

	)

275 
	#SPRN_PTEHI
 0x3D5

	)

276 
	#SPRN_PTELO
 0x3D6

	)

277 
	#SPRN_PVR
 0x11F

	)

278 
	#SPRN_RPA
 0x3D6

	)

279 
	#SPRN_SDA
 0x3BF

	)

280 
	#SPRN_SDR1
 0x019

	)

281 
	#SPRN_SIA
 0x3BB

	)

282 
	#SPRN_SPRG0
 0x110

	)

283 
	#SPRN_SPRG1
 0x111

	)

284 
	#SPRN_SPRG2
 0x112

	)

285 
	#SPRN_SPRG3
 0x113

	)

286 
	#SPRN_SPRG4
 0x114

	)

287 
	#SPRN_SPRG5
 0x115

	)

288 
	#SPRN_SPRG6
 0x116

	)

289 
	#SPRN_SPRG7
 0x117

	)

290 
	#SPRN_SRR0
 0x01A

	)

291 
	#SPRN_SRR1
 0x01B

	)

292 
	#SPRN_THRM1
 0x3FC

	)

294 
	#THRM1_TIN
 (1 << 31)

	)

295 
	#THRM1_TIV
 (1 << 30)

	)

296 
	#THRM1_THRES
(
x
Ë((x&0x7f)<<23)

	)

297 
	#THRM3_SITV
(
x
Ë((x&0x3fff)<<1)

	)

298 
	#THRM1_TID
 (1<<2)

	)

299 
	#THRM1_TIE
 (1<<1)

	)

300 
	#THRM1_V
 (1<<0)

	)

301 
	#SPRN_THRM2
 0x3FD

	)

302 
	#SPRN_THRM3
 0x3FE

	)

303 
	#THRM3_E
 (1<<0)

	)

304 
	#SPRN_TLBMISS
 0x3D4

	)

305 
	#SPRN_UMMCR0
 0x3A8

	)

306 
	#SPRN_UMMCR1
 0x3AC

	)

307 
	#SPRN_UPMC1
 0x3A9

	)

308 
	#SPRN_UPMC2
 0x3AA

	)

309 
	#SPRN_UPMC3
 0x3AD

	)

310 
	#SPRN_UPMC4
 0x3AE

	)

311 
	#SPRN_USIA
 0x3AB

	)

312 
	#SPRN_VRSAVE
 0x100

	)

313 
	#SPRN_XER
 0x001

	)

316 
	#MMCR0_PMC1_CYCLES
 (1 << 7)

	)

317 
	#MMCR0_PMC1_ICACHEMISS
 (5 << 7)

	)

318 
	#MMCR0_PMC1_DTLB
 (6 << 7)

	)

319 
	#MMCR0_PMC2_DCACHEMISS
 0x6

	)

320 
	#MMCR0_PMC2_CYCLES
 0x1

	)

321 
	#MMCR0_PMC2_ITLB
 0x7

	)

322 
	#MMCR0_PMC2_LOADMISSTIME
 0x5

	)

325 
	#CTR
 
SPRN_CTR


	)

326 
	#DAR
 
SPRN_DAR


	)

327 
	#DABR
 
SPRN_DABR


	)

328 
	#DBAT0L
 
SPRN_DBAT0L


	)

329 
	#DBAT0U
 
SPRN_DBAT0U


	)

330 
	#DBAT1L
 
SPRN_DBAT1L


	)

331 
	#DBAT1U
 
SPRN_DBAT1U


	)

332 
	#DBAT2L
 
SPRN_DBAT2L


	)

333 
	#DBAT2U
 
SPRN_DBAT2U


	)

334 
	#DBAT3L
 
SPRN_DBAT3L


	)

335 
	#DBAT3U
 
SPRN_DBAT3U


	)

336 
	#DBAT4L
 
SPRN_DBAT4L


	)

337 
	#DBAT4U
 
SPRN_DBAT4U


	)

338 
	#DBAT5L
 
SPRN_DBAT5L


	)

339 
	#DBAT5U
 
SPRN_DBAT5U


	)

340 
	#DBAT6L
 
SPRN_DBAT6L


	)

341 
	#DBAT6U
 
SPRN_DBAT6U


	)

342 
	#DBAT7L
 
SPRN_DBAT7L


	)

343 
	#DBAT7U
 
SPRN_DBAT7U


	)

344 
	#DEC
 
SPRN_DEC


	)

345 
	#DMISS
 
SPRN_DMISS


	)

346 
	#DSISR
 
SPRN_DSISR


	)

347 
	#EAR
 
SPRN_EAR


	)

348 
	#HASH1
 
SPRN_HASH1


	)

349 
	#HASH2
 
SPRN_HASH2


	)

350 
	#HID0
 
SPRN_HID0


	)

351 
	#HID1
 
SPRN_HID1


	)

352 
	#IABR
 
SPRN_IABR


	)

353 
	#IBAT0L
 
SPRN_IBAT0L


	)

354 
	#IBAT0U
 
SPRN_IBAT0U


	)

355 
	#IBAT1L
 
SPRN_IBAT1L


	)

356 
	#IBAT1U
 
SPRN_IBAT1U


	)

357 
	#IBAT2L
 
SPRN_IBAT2L


	)

358 
	#IBAT2U
 
SPRN_IBAT2U


	)

359 
	#IBAT3L
 
SPRN_IBAT3L


	)

360 
	#IBAT3U
 
SPRN_IBAT3U


	)

361 
	#IBAT4L
 
SPRN_IBAT4L


	)

362 
	#IBAT4U
 
SPRN_IBAT4U


	)

363 
	#IBAT5L
 
SPRN_IBAT5L


	)

364 
	#IBAT5U
 
SPRN_IBAT5U


	)

365 
	#IBAT6L
 
SPRN_IBAT6L


	)

366 
	#IBAT6U
 
SPRN_IBAT6U


	)

367 
	#IBAT7L
 
SPRN_IBAT7L


	)

368 
	#IBAT7U
 
SPRN_IBAT7U


	)

369 
	#ICMP
 
SPRN_ICMP


	)

370 
	#IMISS
 
SPRN_IMISS


	)

371 
	#IMMR
 
SPRN_IMMR


	)

372 
	#L2CR
 
SPRN_L2CR


	)

373 
	#L3CR
 
SPRN_L3CR


	)

374 
	#LR
 
SPRN_LR


	)

375 
	#PVR
 
SPRN_PVR


	)

376 
	#RPA
 
SPRN_RPA


	)

377 
	#SDR1
 
SPRN_SDR1


	)

378 
	#SPR0
 
SPRN_SPRG0


	)

379 
	#SPR1
 
SPRN_SPRG1


	)

380 
	#SPR2
 
SPRN_SPRG2


	)

381 
	#SPR3
 
SPRN_SPRG3


	)

382 
	#SPR4
 
SPRN_SPRG4


	)

383 
	#SPR5
 
SPRN_SPRG5


	)

384 
	#SPR6
 
SPRN_SPRG6


	)

385 
	#SPR7
 
SPRN_SPRG7


	)

386 
	#SPRG0
 
SPRN_SPRG0


	)

387 
	#SPRG1
 
SPRN_SPRG1


	)

388 
	#SPRG2
 
SPRN_SPRG2


	)

389 
	#SPRG3
 
SPRN_SPRG3


	)

390 
	#SPRG4
 
SPRN_SPRG4


	)

391 
	#SPRG5
 
SPRN_SPRG5


	)

392 
	#SPRG6
 
SPRN_SPRG6


	)

393 
	#SPRG7
 
SPRN_SPRG7


	)

394 
	#SRR0
 
SPRN_SRR0


	)

395 
	#SRR1
 
SPRN_SRR1


	)

396 
	#SRR2
 
SPRN_SRR2


	)

397 
	#SRR3
 
SPRN_SRR3


	)

398 
	#ICTC
 
SPRN_ICTC


	)

399 
	#THRM1
 
SPRN_THRM1


	)

400 
	#THRM2
 
SPRN_THRM2


	)

401 
	#THRM3
 
SPRN_THRM3


	)

402 
	#XER
 
SPRN_XER


	)

403 
	#TBRL
 
SPRN_TBRL


	)

404 
	#TBRU
 
SPRN_TBRU


	)

405 
	#TBWL
 
SPRN_TBWL


	)

406 
	#TBWU
 
SPRN_TBWU


	)

412 
	#PVR_VER
(
pvr
Ë((’vrË>> 16Ë& 0xFFFFË

	)

413 
	#PVR_REV
(
pvr
Ë((’vrË>> 0Ë& 0xFFFFË

	)

420 
	#PVR_FAM
(
pvr
Ë((’vrË>> 20Ë& 0xFFFË

	)

421 
	#PVR_MEM
(
pvr
Ë((’vrË>> 16Ë& 0xFË

	)

422 
	#PVR_CORE
(
pvr
Ë((’vrË>> 12Ë& 0xFË

	)

423 
	#PVR_CFG
(
pvr
Ë((’vrË>> 8Ë& 0xFË

	)

424 
	#PVR_MAJ
(
pvr
Ë((’vrË>> 4Ë& 0xFË

	)

425 
	#PVR_MIN
(
pvr
Ë((’vrË>> 0Ë& 0xFË

	)

429 
	#PVR_403GA
 0x00200000

	)

430 
	#PVR_403GB
 0x00200100

	)

431 
	#PVR_403GC
 0x00200200

	)

432 
	#PVR_403GCX
 0x00201400

	)

433 
	#PVR_405GP
 0x40110000

	)

434 
	#PVR_STB03XXX
 0x40310000

	)

435 
	#PVR_NP405H
 0x41410000

	)

436 
	#PVR_NP405L
 0x41610000

	)

437 
	#PVR_440GP_RB
 0x40120440

	)

438 
	#PVR_440GP_RC1
 0x40120481

	)

439 
	#PVR_440GP_RC2
 0x40200481

	)

440 
	#PVR_440GX_RA
 0x51b21850

	)

441 
	#PVR_440GX_RB
 0x51b21851

	)

442 
	#PVR_440GX_RB1
 0x51b21852

	)

443 
	#PVR_601
 0x00010000

	)

444 
	#PVR_602
 0x00050000

	)

445 
	#PVR_603
 0x00030000

	)

446 
	#PVR_603e
 0x00060000

	)

447 
	#PVR_603ev
 0x00070000

	)

448 
	#PVR_603r
 0x00071000

	)

449 
	#PVR_604
 0x00040000

	)

450 
	#PVR_604e
 0x00090000

	)

451 
	#PVR_604r
 0x000A0000

	)

452 
	#PVR_620
 0x00140000

	)

453 
	#PVR_740
 0x00080000

	)

454 
	#PVR_750
 
PVR_740


	)

455 
	#PVR_740P
 0x10080000

	)

456 
	#PVR_750P
 
PVR_740P


	)

457 
	#PVR_7400
 0x000C0000

	)

458 
	#PVR_7410
 0x800C0000

	)

459 
	#PVR_7450
 0x80000000

	)

466 
	#PVR_821
 0x00500000

	)

467 
	#PVR_823
 
PVR_821


	)

468 
	#PVR_850
 
PVR_821


	)

469 
	#PVR_860
 
PVR_821


	)

470 
	#PVR_8240
 0x00810100

	)

471 
	#PVR_8245
 0x80811014

	)

472 
	#PVR_8260
 
PVR_8240


	)

475 
	#SR0
 0

	)

476 
	#SR1
 1

	)

477 
	#SR2
 2

	)

478 
	#SR3
 3

	)

479 
	#SR4
 4

	)

480 
	#SR5
 5

	)

481 
	#SR6
 6

	)

482 
	#SR7
 7

	)

483 
	#SR8
 8

	)

484 
	#SR9
 9

	)

485 
	#SR10
 10

	)

486 
	#SR11
 11

	)

487 
	#SR12
 12

	)

488 
	#SR13
 13

	)

489 
	#SR14
 14

	)

490 
	#SR15
 15

	)

495 
	#RELOC_SYM
(
sym
) \

496 
mÊr
 
r3
; \

497 
bl
 1f; \

498 1: 
mÊr
 
r0
; \

499 
mér
 
r3
; \

500 
lis
 
r3
, 1b@
ha
; \

501 
‹i
 
r3
,Ñ3, 1b@
l
; \

502 
subf
 
r0
, 
r3
,Ñ0; \

503 
lis
 
r3
, 
sym
@
ha
; \

504 
‹i
 
r3
,Ñ3, 
sym
@
l
; \

505 
add
 
r3
,Ñ3, 
r0


	)

	@purgatory/arch/ppc/purgatory-ppc.c

22 
	~<purg©‹y.h
>

23 
	~"purg©‹y-µc.h
"

25 
	g∑nic_kî√l
 = 0;

26 
	gbackup_°¨t
 = 0;

27 
	g°ack
 = 0;

28 
	gdt_off£t
 = 0;

29 
	gmy_thªad_±r
 = 0;

30 
	gkî√l
 = 0;

32 
	$£tup_¨ch
()

35 
	}
}

37 
	$po°_vîifiˇti⁄_£tup_¨ch
()

39 #i‚de‡
CONFIG_BOOKE


40 i‡(
∑nic_kî√l
)

41 
	`¸ashdump_backup_mem‹y
();

43 
	}
}

45 
	$¸ashdump_backup_mem‹y
()

48 
	}
}

	@purgatory/arch/ppc/purgatory-ppc.h

1 #i‚de‡
PURGATORY_PPC_H


2 
	#PURGATORY_PPC_H


	)

4 
¸ashdump_backup_mem‹y
();

5 
po°_vîifiˇti⁄_£tup_¨ch
();

	@purgatory/arch/ppc64/console-ppc64.c

22 
	~<purg©‹y.h
>

23 
	~"hvCÆl.h
"

24 
	~<byãsw≠.h
>

25 
	~<ídün.h
>

26 
	~<asm/byã‹dî.h
>

28 
debug
;

30 
	$putch¨
(
c
)

32 
buff
[16];

33 *
lbuf
 = (*)
buff
;

35 i‡(!
debug
)

38 i‡(
c
 == '\n')

39 
	`putch¨
('\r');

41 
buff
[0] = 
c
;

42 
	`∂∑r_hˇŒ_n‹ës
(
H_PUT_TERM_CHAR
, 0, 1,

43 
	`__˝u_to_be64
(
lbuf
[0]), __cpu_to_be64(lbuf[1]));

45 
	}
}

	@purgatory/arch/ppc64/crashdump_backup.c

22 
	~<°döt.h
>

23 
	~<°rög.h
>

24 
	~"../../../kexec/¨ch/µc64/¸ashdump-µc64.h
"

26 
backup_°¨t
;

29 
	$¸ashdump_backup_mem‹y
()

31 *
de°
, *
§c
;

33 
§c
 = (*)
BACKUP_SRC_START
;

35 i‡(
backup_°¨t
) {

36 
de°
 = (*)(
backup_°¨t
);

37 
	`mem˝y
(
de°
, 
§c
, 
BACKUP_SRC_SIZE
);

39 
	}
}

	@purgatory/arch/ppc64/hvCall.h

1 #i‚de‡
HVCALL_H


2 
	#HVCALL_H


	)

4 
	#H_PUT_TERM_CHAR
 0x58

	)

6 
∂∑r_hˇŒ_n‹ës
(
›code
, ...);

	@purgatory/arch/ppc64/ppc64_asm.h

11 #i‡
deföed
(
_CALL_ELF
) && _CALL_ELF == 2

12 
	#DOTSYM
(
a
Ë
	)
a

14 
	#GLUE
(
a
,
b
Ëa##
	)
b

15 
	#DOTSYM
(
a
Ë
	`GLUE
(.,a)

	)

	@purgatory/arch/ppc64/purgatory-ppc64.c

22 
	~<purg©‹y.h
>

23 
	~"purg©‹y-µc64.h
"

25 
	g∑nic_kî√l
 = 0;

26 
	gbackup_°¨t
 = 0;

27 
	g°ack
 = 0;

28 
	gdt_off£t
 = 0;

29 
	gmy_toc
 = 0;

30 
	gkî√l
 = 0;

31 
	gdebug
 = 0;

32 
	g›Æ_ba£
 = 0;

33 
	g›Æ_íåy
 = 0;

35 
	$£tup_¨ch
()

38 
	}
}

40 
	$po°_vîifiˇti⁄_£tup_¨ch
()

42 i‡(
∑nic_kî√l
)

43 
	`¸ashdump_backup_mem‹y
();

44 
	}
}

	@purgatory/arch/ppc64/purgatory-ppc64.h

1 #i‚de‡
PURGATORY_PPC64_H


2 
	#PURGATORY_PPC64_H


	)

4 
¸ashdump_backup_mem‹y
();

	@purgatory/arch/s390/console-s390.c

9 
	~<purg©‹y.h
>

10 
	~"unu£d.h
"

12 
putch¨
(
	$UNUSED
(
ch
))

14 
	}
}

	@purgatory/arch/s390/purgatory-s390.c

9 
	~<°döt.h
>

10 
	~<°ddef.h
>

11 
	~<°rög.h
>

12 
	~"../../../kexec/kexec-sha256.h
"

14 
	#MIN
(
x
, 
y
Ë((xË< (yË? (xË: (y))

	)

15 
	#MAX
(
x
, 
y
Ë((xË> (yË? (xË: (y))

	)

17 
sha256_ªgi⁄
 
sha256_ªgi⁄s
[
SHA256_REGIONS
];

19 
	g¸ash_ba£
 = () -1;

20 
	g¸ash_size
 = () -1;

25 
	$mem˝y_Á°
(*
èrgë
, *
§c
, 
size
)

27 
__èrgë
 
	`asm
("2"Ë(Ë
èrgë
;

28 
__size1
 
	`asm
("3"Ë
size
;

29 
__§c
 
	`asm
("4"Ë(Ë
§c
;

30 
__size2
 
	`asm
("5"Ë
size
;

32 
asm
 volatile (

35 : "+d" (
__èrgë
), "+d" (
__size1
), "+d" (
__§c
), "+d" (
__size2
)

39 
	}
}

44 
	$memsw≠
(*
addr1
, *
addr2
, 
size
)

46 
off
, 
c›y_Àn
;

47 
buf
[1024];

49 
off
 = 0; of‡< 
size
; of‡+(
buf
)) {

50 
c›y_Àn
 = 
	`MIN
(
size
 - 
off
, (
buf
));

51 
	`mem˝y_Á°
(
buf
, (*Ë
addr2
 + 
off
, 
c›y_Àn
);

52 
	`mem˝y_Á°
(
addr2
 + 
off
, 
addr1
 + off, 
c›y_Àn
);

53 
	`mem˝y_Á°
(
addr1
 + 
off
, 
buf
, 
c›y_Àn
);

55 
	}
}

60 
	$£tup_¨ch
()

62 
	}
}

74 
	$po°_vîifiˇti⁄_£tup_¨ch
()

76 
°¨t
, 
Àn
, 
œ°
 = 
¸ash_ba£
 + 0x10000;

77 
sha256_ªgi⁄
 *
±r
, *
íd
;

79 
íd
 = &
sha256_ªgi⁄s
[(sha256_regions)/(sha256_regions[0])];

80 
±r
 = 
sha256_ªgi⁄s
;Öå < 
íd
;Ötr++) {

81 i‡(!
±r
->
°¨t
)

83 
°¨t
 = 
	`MAX
(
±r
->°¨t, 
¸ash_ba£
 + 0x10000);

84 
Àn
 = 
±r
->À¿- (
°¨t
 -Ötr->start);

85 
	`mem˝y_Á°
((*Ë
œ°
, (*Ëœ° - 
¸ash_ba£
,

86 
°¨t
 - 
œ°
);

87 
	`memsw≠
((*Ë
°¨t
 - 
¸ash_ba£
, (*Ë°¨t, 
Àn
);

88 
œ°
 = 
°¨t
 + 
Àn
;

90 
	`mem˝y_Á°
((*Ë
œ°
, (*Ëœ° - 
¸ash_ba£
,

91 
¸ash_ba£
 + 
¸ash_size
 - 
œ°
);

92 
	`mem˝y_Á°
((*Ë
¸ash_ba£
, (*) 0, 0x2000);

93 
	}
}

	@purgatory/arch/x86_64/include/arch/debug.h

2 
	#TTYS0_BASE
 0x3f8

	)

4 
	#TTYS0_RBR
 (
TTYS0_BASE
+0x00)

	)

5 
	#TTYS0_TBR
 (
TTYS0_BASE
+0x00)

	)

7 
	#TTYS0_IER
 (
TTYS0_BASE
+0x01)

	)

8 
	#TTYS0_IIR
 (
TTYS0_BASE
+0x02)

	)

9 
	#TTYS0_FCR
 (
TTYS0_BASE
+0x02)

	)

10 
	#TTYS0_LCR
 (
TTYS0_BASE
+0x03)

	)

11 
	#TTYS0_MCR
 (
TTYS0_BASE
+0x04)

	)

13 
	#TTYS0_DLL
 (
TTYS0_BASE
+0x00)

	)

14 
	#TTYS0_DLM
 (
TTYS0_BASE
+0x01)

	)

16 
	#TTYS0_LSR
 (
TTYS0_BASE
+0x05)

	)

17 
	#TTYS0_MSR
 (
TTYS0_BASE
+0x06)

	)

18 
	#TTYS0_SCR
 (
TTYS0_BASE
+0x07)

	)

20 
	#TTYS0_BAUD
 9600

	)

21 
	#TTYS0_DIV
 (115200/
TTYS0_BAUD
)

	)

22 
	#TTYS0_DIV_LO
 (
TTYS0_DIV
&0xFF)

	)

23 
	#TTYS0_DIV_HI
 ((
TTYS0_DIV
 >> 8)&0xFF)

	)

25 #i‡((115200%
TTYS0_BAUD
) != 0)

26 #îr‹ 
Bad
 
âyS0
 
baud
 
øã


29 
	#TTYS0_INIT
 \

31 
movb
 
$0x00
, %
Æ
 ; \

32 
movw
 
$TTYS0_IER
, %
dx
 ; \

33 
outb
 %
Æ
, %
dx
 ; \

36 
movb
 
$0x01
, %
Æ
 ; \

37 
movw
 
$TTYS0_FCR
, %
dx
 ; \

38 
outb
 %
Æ
, %
dx
 ; \

41 
movw
 
$TTYS0_LCR
, %
dx
 ; \

42 
movb
 
$0x83
, %
Æ
 ; \

43 
outb
 %
Æ
, %
dx
 ; \

45 
movw
 
$TTYS0_DLL
, %
dx
 ; \

46 
movb
 
$TTYS0_DIV_LO
, %
Æ
 ; \

47 
outb
 %
Æ
, %
dx
 ; \

49 
movw
 
$TTYS0_DLM
, %
dx
 ; \

50 
movb
 
$TTYS0_DIV_HI
, %
Æ
 ; \

51 
outb
 %
Æ
, %
dx
 ; \

53 
movw
 
$TTYS0_LCR
, %
dx
 ; \

54 
movb
 
$0x03
, %
Æ
 ; \

55 
outb
 %
Æ
, %
dx


	)

59 
	#TTYS0_TX_AL
 \

60 
mov
 %
Æ
, %
ah
 ; \

61 9: 
mov
 
$TTYS0_LSR
, %
dx
 ; \

62 
öb
 %
dx
, %
Æ
 ; \

63 
ã°
 
$0x20
, %
Æ
 ; \

64 
je
 9b ; \

65 
mov
 
$TTYS0_TBR
, %
dx
 ; \

66 
mov
 %
ah
, %
Æ
 ; \

67 
outb
 %
Æ
, %
dx


	)

70 
	#TTYS0_TX_CHAR
(
byã
) \

71 
mov
 
byã
, %
Æ
 ; \

72 
TTYS0_TX_AL


	)

75 
	#TTYS0_TX_HEX32
(
lw‹d
) \

76 
mov
 
lw‹d
, %
óx
 ; \

77 
shr
 
$28
, %
óx
 ; \

78 
add
 
$
'0', %
Æ
 ; \

79 
cmp
 
$
'9', %
Æ
 ; \

80 
jÀ
 9f ; \

81 
add
 
$39
, %
Æ
 ; \

83 
TTYS0_TX_AL
 ; \

85 
mov
 
lw‹d
, %
óx
 ; \

86 
shr
 
$24
, %
óx
 ; \

87 
™d
 
$0x0f
, %
Æ
 ; \

88 
add
 
$
'0', %
Æ
 ; \

89 
cmp
 
$
'9', %
Æ
 ; \

90 
jÀ
 9f ; \

91 
add
 
$39
, %
Æ
 ; \

93 
TTYS0_TX_AL
 ; \

95 
mov
 
lw‹d
, %
óx
 ; \

96 
shr
 
$20
, %
óx
 ; \

97 
™d
 
$0x0f
, %
Æ
 ; \

98 
add
 
$
'0', %
Æ
 ; \

99 
cmp
 
$
'9', %
Æ
 ; \

100 
jÀ
 9f ; \

101 
add
 
$39
, %
Æ
 ; \

103 
TTYS0_TX_AL
 ; \

105 
mov
 
lw‹d
, %
óx
 ; \

106 
shr
 
$16
, %
óx
 ; \

107 
™d
 
$0x0f
, %
Æ
 ; \

108 
add
 
$
'0', %
Æ
 ; \

109 
cmp
 
$
'9', %
Æ
 ; \

110 
jÀ
 9f ; \

111 
add
 
$39
, %
Æ
 ; \

113 
TTYS0_TX_AL
 ; \

115 
mov
 
lw‹d
, %
óx
 ; \

116 
shr
 
$12
, %
óx
 ; \

117 
™d
 
$0x0f
, %
Æ
 ; \

118 
add
 
$
'0', %
Æ
 ; \

119 
cmp
 
$
'9', %
Æ
 ; \

120 
jÀ
 9f ; \

121 
add
 
$39
, %
Æ
 ; \

123 
TTYS0_TX_AL
 ; \

125 
mov
 
lw‹d
, %
óx
 ; \

126 
shr
 
$8
, %
óx
 ; \

127 
™d
 
$0x0f
, %
Æ
 ; \

128 
add
 
$
'0', %
Æ
 ; \

129 
cmp
 
$
'9', %
Æ
 ; \

130 
jÀ
 9f ; \

131 
add
 
$39
, %
Æ
 ; \

133 
TTYS0_TX_AL
 ; \

135 
mov
 
lw‹d
, %
óx
 ; \

136 
shr
 
$4
, %
óx
 ; \

137 
™d
 
$0x0f
, %
Æ
 ; \

138 
add
 
$
'0', %
Æ
 ; \

139 
cmp
 
$
'9', %
Æ
 ; \

140 
jÀ
 9f ; \

141 
add
 
$39
, %
Æ
 ; \

143 
TTYS0_TX_AL
 ; \

145 
mov
 
lw‹d
, %
óx
 ; \

146 
™d
 
$0x0f
, %
Æ
 ; \

147 
add
 
$
'0', %
Æ
 ; \

148 
cmp
 
$
'9', %
Æ
 ; \

149 
jÀ
 9f ; \

150 
add
 
$39
, %
Æ
 ; \

152 
TTYS0_TX_AL


	)

155 
	#TTYS0_TX_HEX64
(
lw‹d
) \

156 
mov
 
lw‹d
, %
øx
 ; \

157 
shr
 
$60
, %
øx
 ; \

158 
add
 
$
'0', %
Æ
 ; \

159 
cmp
 
$
'9', %
Æ
 ; \

160 
jÀ
 9f ; \

161 
add
 
$39
, %
Æ
 ; \

163 
TTYS0_TX_AL
 ; \

165 
mov
 
lw‹d
, %
øx
 ; \

166 
shr
 
$56
, %
øx
 ; \

167 
™d
 
$0x0f
, %
Æ
 ; \

168 
add
 
$
'0', %
Æ
 ; \

169 
cmp
 
$
'9', %
Æ
 ; \

170 
jÀ
 9f ; \

171 
add
 
$39
, %
Æ
 ; \

173 
TTYS0_TX_AL
 ; \

175 
mov
 
lw‹d
, %
øx
 ; \

176 
shr
 
$52
, %
øx
 ; \

177 
™d
 
$0x0f
, %
Æ
 ; \

178 
add
 
$
'0', %
Æ
 ; \

179 
cmp
 
$
'9', %
Æ
 ; \

180 
jÀ
 9f ; \

181 
add
 
$39
, %
Æ
 ; \

183 
TTYS0_TX_AL
 ; \

185 
mov
 
lw‹d
, %
øx
 ; \

186 
shr
 
$48
, %
øx
 ; \

187 
™d
 
$0x0f
, %
Æ
 ; \

188 
add
 
$
'0', %
Æ
 ; \

189 
cmp
 
$
'9', %
Æ
 ; \

190 
jÀ
 9f ; \

191 
add
 
$39
, %
Æ
 ; \

193 
TTYS0_TX_AL
 ; \

195 
mov
 
lw‹d
, %
øx
 ; \

196 
shr
 
$44
, %
øx
 ; \

197 
™d
 
$0x0f
, %
Æ
 ; \

198 
add
 
$
'0', %
Æ
 ; \

199 
cmp
 
$
'9', %
Æ
 ; \

200 
jÀ
 9f ; \

201 
add
 
$39
, %
Æ
 ; \

203 
TTYS0_TX_AL
 ; \

205 
mov
 
lw‹d
, %
øx
 ; \

206 
shr
 
$40
, %
øx
 ; \

207 
™d
 
$0x0f
, %
Æ
 ; \

208 
add
 
$
'0', %
Æ
 ; \

209 
cmp
 
$
'9', %
Æ
 ; \

210 
jÀ
 9f ; \

211 
add
 
$39
, %
Æ
 ; \

213 
TTYS0_TX_AL
 ; \

215 
mov
 
lw‹d
, %
øx
 ; \

216 
shr
 
$36
, %
øx
 ; \

217 
™d
 
$0x0f
, %
Æ
 ; \

218 
add
 
$
'0', %
Æ
 ; \

219 
cmp
 
$
'9', %
Æ
 ; \

220 
jÀ
 9f ; \

221 
add
 
$39
, %
Æ
 ; \

223 
TTYS0_TX_AL
 ; \

225 
mov
 
lw‹d
, %
øx
 ; \

226 
shr
 
$32
, %
øx
 ; \

227 
™d
 
$0x0f
, %
Æ
 ; \

228 
add
 
$
'0', %
Æ
 ; \

229 
cmp
 
$
'9', %
Æ
 ; \

230 
jÀ
 9f ; \

231 
add
 
$39
, %
Æ
 ; \

233 
TTYS0_TX_AL
 ; \

235 
mov
 
lw‹d
, %
øx
 ; \

236 
shr
 
$28
, %
øx
 ; \

237 
add
 
$
'0', %
Æ
 ; \

238 
cmp
 
$
'9', %
Æ
 ; \

239 
jÀ
 9f ; \

240 
add
 
$39
, %
Æ
 ; \

242 
TTYS0_TX_AL
 ; \

244 
mov
 
lw‹d
, %
øx
 ; \

245 
shr
 
$24
, %
øx
 ; \

246 
™d
 
$0x0f
, %
Æ
 ; \

247 
add
 
$
'0', %
Æ
 ; \

248 
cmp
 
$
'9', %
Æ
 ; \

249 
jÀ
 9f ; \

250 
add
 
$39
, %
Æ
 ; \

252 
TTYS0_TX_AL
 ; \

254 
mov
 
lw‹d
, %
øx
 ; \

255 
shr
 
$20
, %
øx
 ; \

256 
™d
 
$0x0f
, %
Æ
 ; \

257 
add
 
$
'0', %
Æ
 ; \

258 
cmp
 
$
'9', %
Æ
 ; \

259 
jÀ
 9f ; \

260 
add
 
$39
, %
Æ
 ; \

262 
TTYS0_TX_AL
 ; \

264 
mov
 
lw‹d
, %
øx
 ; \

265 
shr
 
$16
, %
øx
 ; \

266 
™d
 
$0x0f
, %
Æ
 ; \

267 
add
 
$
'0', %
Æ
 ; \

268 
cmp
 
$
'9', %
Æ
 ; \

269 
jÀ
 9f ; \

270 
add
 
$39
, %
Æ
 ; \

272 
TTYS0_TX_AL
 ; \

274 
mov
 
lw‹d
, %
øx
 ; \

275 
shr
 
$12
, %
øx
 ; \

276 
™d
 
$0x0f
, %
Æ
 ; \

277 
add
 
$
'0', %
Æ
 ; \

278 
cmp
 
$
'9', %
Æ
 ; \

279 
jÀ
 9f ; \

280 
add
 
$39
, %
Æ
 ; \

282 
TTYS0_TX_AL
 ; \

284 
mov
 
lw‹d
, %
øx
 ; \

285 
shr
 
$8
, %
øx
 ; \

286 
™d
 
$0x0f
, %
Æ
 ; \

287 
add
 
$
'0', %
Æ
 ; \

288 
cmp
 
$
'9', %
Æ
 ; \

289 
jÀ
 9f ; \

290 
add
 
$39
, %
Æ
 ; \

292 
TTYS0_TX_AL
 ; \

294 
mov
 
lw‹d
, %
øx
 ; \

295 
shr
 
$4
, %
øx
 ; \

296 
™d
 
$0x0f
, %
Æ
 ; \

297 
add
 
$
'0', %
Æ
 ; \

298 
cmp
 
$
'9', %
Æ
 ; \

299 
jÀ
 9f ; \

300 
add
 
$39
, %
Æ
 ; \

302 
TTYS0_TX_AL
 ; \

304 
mov
 
lw‹d
, %
øx
 ; \

305 
™d
 
$0x0f
, %
Æ
 ; \

306 
add
 
$
'0', %
Æ
 ; \

307 
cmp
 
$
'9', %
Æ
 ; \

308 
jÀ
 9f ; \

309 
add
 
$39
, %
Æ
 ; \

311 
TTYS0_TX_AL


	)

314 
	#DEBUG_CHAR
(
x
Ë
	`TTYS0_TX_CHAR
(
$x
Ë; TTYS0_TX_CHAR(
$
'\r'Ë; TTYS0_TX_CHAR($'\n')

	)

315 
	#DEBUG_TX_HEX32
(
x
Ë
	`TTYS0_TX_HEX32
(x); 
	`TTYS0_TX_CHAR
(
$
'\r'Ë; TTYS0_TX_CHAR($'\n')

	)

316 
	#DEBUG_TX_HEX64
(
x
Ë
	`TTYS0_TX_HEX64
(x); 
	`TTYS0_TX_CHAR
(
$
'\r'Ë; TTYS0_TX_CHAR($'\n')

	)

	@purgatory/arch/x86_64/include/arch/io.h

1 #i‚de‡
ARCH_X86_64_IO_H


2 
	#ARCH_X86_64_IO_H


	)

4 
	~<°döt.h
>

5 
	~"../../../i386/ö˛ude/¨ch/io.h
"

	@purgatory/arch/x86_64/purgatory-x86_64.c

1 
	~<°döt.h
>

2 
	~<°ddef.h
>

3 
	~<purg©‹y.h
>

4 
	~"purg©‹y-x86_64.h
"

6 
uöt8_t
 
	gª£t_vga
 = 0;

7 
uöt8_t
 
	gÀgacy_pic
 = 0;

8 
uöt8_t
 
	g∑nic_kî√l
 = 0;

9 
	gjump_back_íåy
 = 0;

10 *
	gcmdlöe_íd
 = 
NULL
;

12 
	$£tup_¨ch
()

14 i‡(
ª£t_vga
Ë
	`x86_ª£t_vga
();

15 i‡(
Àgacy_pic
Ë
	`x86_£tup_Àgacy_pic
();

16 
	}
}

18 
	$x86_£tup_jump_back_íåy
()

20 i‡(
cmdlöe_íd
)

21 
	`•rötf
(
cmdlöe_íd
, " kexec_jump_back_entry=0x%lx",

22 
jump_back_íåy
);

23 
	}
}

26 
	$po°_vîifiˇti⁄_£tup_¨ch
()

28 i‡(
∑nic_kî√l
Ë
	`¸ashdump_backup_mem‹y
();

29 i‡(
jump_back_íåy
Ë
	`x86_£tup_jump_back_íåy
();

30 
	}
}

	@purgatory/arch/x86_64/purgatory-x86_64.h

1 #i‚de‡
PURGATORY_X86_64_H


2 
	#PURGATORY_X86_64_H


	)

3 
	~"../i386/purg©‹y-x86.h
"

	@purgatory/include/purgatory.h

1 #i‚de‡
PURGATORY_H


2 
	#PURGATORY_H


	)

4 
putch¨
(
ch
);

5 
•rötf
(*
buf„r
, c⁄° *
fmt
, ...);

6 
¥ötf
(c⁄° *
fmt
, ...);

7 
£tup_¨ch
();

8 
po°_vîifiˇti⁄_£tup_¨ch
();

	@purgatory/include/string.h

1 #i‚de‡
STRING_H


2 
	#STRING_H


	)

4 
	~<°ddef.h
>

6 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
max
);

7 * 
mem£t
(* 
s
, 
c
, 
size_t
 
n
);

8 * 
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

9 
memcmp
(*
§c1
, *
§c2
, 
size_t
 
Àn
);

	@purgatory/printf.c

1 
	~<°d¨g.h
>

2 
	~<limôs.h
>

3 
	~<°döt.h
>

4 
	~<purg©‹y.h
>

5 
	~<°rög.h
>

12 
	#LONG_LONG_SHIFT
 (()((()*
CHAR_BIT
Ë- 4))

	)

13 
	#LONG_SHIFT
 (()((()*
CHAR_BIT
Ë- 4))

	)

14 
	#INT_SHIFT
 (()((()*
CHAR_BIT
Ë- 4))

	)

15 
	#SHRT_SHIFT
 (()((()*
CHAR_BIT
Ë- 4))

	)

16 
	#CHAR_SHIFT
 (()((()*
CHAR_BIT
Ë- 4))

	)

36 
	$v•rötf
(*
buf„r
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

38 *
p
;

39  ; *
fmt
 != '\0'; ++fmt) {

40 i‡(*
fmt
 != '%') {

41 i‡(
buf„r
)

42 *
buf„r
++ = *
fmt
;

44 
	`putch¨
(*
fmt
);

47 i‡(*++
fmt
 == 's') {

48 
p
 = 
	`va_¨g
(
¨gs
, *); *p != '\0';Ö++)

49 i‡(
buf„r
)

50 *
buf„r
++ = *
p
;

52 
	`putch¨
(*
p
);

55 
tmp
[40], *
q
 =Åmp;

56 
shi·
 = 
INT_SHIFT
;

57 i‡(*
fmt
 == 'L') {

58 
shi·
 = 
LONG_LONG_SHIFT
;

59 
fmt
++;

61 i‡(*
fmt
 == 'l') {

62 
shi·
 = 
LONG_SHIFT
;

63 
fmt
++;

65 i‡(*
fmt
 == 'h') {

66 
shi·
 = 
SHRT_SHIFT
;

67 
fmt
++;

68 i‡(*
fmt
 == 'h') {

69 
shi·
 = 
CHAR_SHIFT
;

70 
fmt
++;

78 i‡((*
fmt
 | 0x20) == 'x') {

80 
h
;

81 
nˇ£
;

82 i‡(
shi·
 > 
LONG_SHIFT
) {

83 
h
 = 
	`va_¨g
(
¨gs
, );

85 i‡(
shi·
 > 
INT_SHIFT
) {

86 
h
 = 
	`va_¨g
(
¨gs
, );

88 
h
 = 
	`va_¨g
(
¨gs
, );

90 
nˇ£
 = (*
fmt
 & 0x20);

91  ; 
shi·
 >= 0; shift -= 4)

92 *
q
++ = "0123456789ABCDEF"[(
h
 >> 
shi·
Ë& 0xF] | 
nˇ£
;

94 i‡(*
fmt
 == 'd') {

95 *
r
;

96 
i
;

97 i‡(
shi·
 > 
LONG_SHIFT
) {

98 
i
 = 
	`va_¨g
(
¨gs
, );

100 i‡(
shi·
 > 
INT_SHIFT
) {

101 
i
 = 
	`va_¨g
(
¨gs
, );

103 
i
 = 
	`va_¨g
(
¨gs
, );

105 i‡(
i
 < 0) {

106 *
q
++ = '-';

107 
i
 = -i;

109 
p
 = 
q
;

111 *
q
++ = '0' + (
i
 % 10);

112 
i
 /= 10;

113 } 
i
);

115 
r
 = 
q
;

116 --
r
 > 
p
) {

117 
i
 = *
r
;

118 *
r
 = *
p
;

119 *
p
++ = 
i
;

122 i‡(*
fmt
 == 'c')

123 *
q
++ = 
	`va_¨g
(
¨gs
, );

125 *
q
++ = *
fmt
;

127 
p
 = 
tmp
;Ö < 
q
; ++p)

128 i‡(
buf„r
)

129 *
buf„r
++ = *
p
;

131 
	`putch¨
(*
p
);

134 i‡(
buf„r
)

135 *
buf„r
 = '\0';

136 
	}
}

138 
	$•rötf
(*
buf„r
, c⁄° *
fmt
, ...)

140 
va_li°
 
¨gs
;

142 
	`va_°¨t
(
¨gs
, 
fmt
);

143 
	`v•rötf
(
buf„r
, 
fmt
, 
¨gs
);

144 
	`va_íd
(
¨gs
);

145 
	}
}

147 
	$¥ötf
(c⁄° *
fmt
, ...)

149 
va_li°
 
¨gs
;

151 
	`va_°¨t
(
¨gs
, 
fmt
);

152 
	`v•rötf
(0, 
fmt
, 
¨gs
);

153 
	`va_íd
(
¨gs
);

154 
	}
}

	@purgatory/purgatory.c

2 
	~<limôs.h
>

3 
	~<°döt.h
>

4 
	~<purg©‹y.h
>

5 
	~<sha256.h
>

6 
	~<°rög.h
>

7 
	~"../kexec/kexec-sha256.h
"

9 
sha256_ªgi⁄
 
	gsha256_ªgi⁄s
[
SHA256_REGIONS
] = {};

10 
sha256_dige°_t
 
	gsha256_dige°
 = { };

12 
	$vîify_sha256_dige°
()

14 
sha256_ªgi⁄
 *
±r
, *
íd
;

15 
sha256_dige°_t
 
dige°
;

16 
size_t
 
i
;

17 
sha256_c⁄ãxt
 
˘x
;

18 
	`sha256_°¨ts
(&
˘x
);

19 
íd
 = &
sha256_ªgi⁄s
[(sha256_regions)/(sha256_regions[0])];

20 
±r
 = 
sha256_ªgi⁄s
;Öå < 
íd
;Ötr++) {

21 
	`sha256_upd©e
(&
˘x
, (
uöt8_t
 *)((
uöçå_t
)
±r
->
°¨t
),

22 
±r
->
Àn
);

24 
	`sha256_föish
(&
˘x
, 
dige°
);

25 i‡(
	`memcmp
(
dige°
, 
sha256_dige°
, (digest)) != 0) {

26 
	`¥ötf
("sha256 digests doÇot match :(\n");

27 
	`¥ötf
(" digest: ");

28 
i
 = 0; i < (
dige°
); i++) {

29 
	`¥ötf
("%hhx ", 
dige°
[
i
]);

31 
	`¥ötf
("\n");

32 
	`¥ötf
("sha256_digest: ");

33 
i
 = 0; i < (
sha256_dige°
); i++) {

34 
	`¥ötf
("%hhx ", 
sha256_dige°
[
i
]);

36 
	`¥ötf
("\n");

40 
	}
}

42 
	$purg©‹y
()

44 
	`¥ötf
("I'm inÖurgatory\n");

45 
	`£tup_¨ch
();

46 i‡(
	`vîify_sha256_dige°
()) {

51 
	`po°_vîifiˇti⁄_£tup_¨ch
();

52 
	}
}

	@purgatory/string.c

1 
	~<°ddef.h
>

2 
	~<°rög.h
>

4 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
max
)

6 
size_t
 
Àn
 = 0;

7 
Àn
 < 
max
 && *
s
) {

8 
Àn
++;

9 
s
++;

11  
Àn
;

12 
	}
}

14 * 
	$mem£t
(* 
s
, 
c
, 
size_t
 
n
)

16 
size_t
 
i
;

17 *
ss
 = (*)
s
;

19 
i
=0;i<
n
;i++Ë
ss
[i] = 
c
;

20  
s
;

21 
	}
}

24 * 
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
)

26 
size_t
 
i
;

27 *
d
;

28 c⁄° *
s
;

29 
d
 = 
de°
;

30 
s
 = 
§c
;

32 
i
=0; i < 
Àn
; i++)

33 
d
[
i
] = 
s
[i];

35  
de°
;

36 
	}
}

39 
	$memcmp
(*
§c1
, *
§c2
, 
size_t
 
Àn
)

41 *
s1
, *
s2
;

42 
size_t
 
i
;

43 
s1
 = 
§c1
;

44 
s2
 = 
§c2
;

45 
i
 = 0; i < 
Àn
; i++) {

46 i‡(*
s1
 !*
s2
) {

47  *
s2
 - *
s1
;

52 
	}
}

	@util/bin-to-hex.c

1 
	~<°dio.h
>

3 
	$maö
(
¨gc
, **
¨gv
)

5 
c
;

6 
i
;

7 c⁄° *
«me
 = 
¨gv
[1];

8 
	`¥ötf
("#include <stddef.h>\n");

9 
	`¥ötf
("c⁄° ch¨ %s[] = {\n", 
«me
);

10 
i
 = 0;

11 (
c
 = 
	`gëch¨
()Ë!
EOF
) {

12 i‡((
i
 % 16) != 0) {

13 
	`putch¨
(' ');

15 
	`¥ötf
("0x%02x,", 
c
);

16 
i
++;

17 i‡((
i
 %16) == 0) {

18 
	`putch¨
('\n');

21 
	`putch¨
('\n');

22 
	`¥ötf
("};\n");

23 
	`¥ötf
("size_à%s_sizêsizeof(%s);\n", 
«me
,Çame);

25 
	}
}

	@util_lib/compute_ip_checksum.c

20 
	~<°döt.h
>

21 
	~<ù_checksum.h
>

22 
	~<°rög.h
>

24 
	$compuã_ù_checksum
(*
addr
, 
Àngth
)

26 
uöt16_t
 *
±r
;

27 
sum
;

28 
Àn
;

29 
œddr
;

31 
œddr
 = ()
addr
;

32 
sum
 = 0;

33 i‡(
œddr
 & 1) {

34 
uöt16_t
 
buf„r
;

35 *
±r
;

40 
buf„r
 = 0;

41 
±r
 = 
addr
;

42 
	`mem˝y
(&
buf„r
, 
±r
, 1);

43 
sum
 +
buf„r
;

44 i‡(
sum
 > 0xFFFF)

45 
sum
 -= 0xFFFF;

46 
Àngth
 -= 1;

47 
addr
 = 
±r
 +1;

50 
Àn
 = 
Àngth
 >> 1;

51 
±r
 = 
addr
;

52 
Àn
--) {

53 
sum
 +*(
±r
++);

54 i‡(
sum
 > 0xFFFF)

55 
sum
 -= 0xFFFF;

57 
addr
 = 
±r
;

58 i‡(
Àngth
 & 1) {

59 
uöt16_t
 
buf„r
;

60 *
±r
;

65 
buf„r
 = 0;

66 
±r
 = 
addr
;

67 
	`mem˝y
(&
buf„r
, 
±r
, 1);

68 
sum
 +
buf„r
;

69 i‡(
sum
 > 0xFFFF)

70 
sum
 -= 0xFFFF;

72  (~
sum
) & 0xFFFF;

74 
	}
}

76 
	$add_ù_checksums
(
off£t
, 
sum
, 
√w
)

78 
checksum
;

79 
sum
 = ~sum & 0xFFFF;

80 
√w
 = ~new & 0xFFFF;

81 i‡(
off£t
 & 1) {

86 
√w
 = ((new >> 8) & 0xff) | ((new << 8) & 0xff00);

88 
checksum
 = 
sum
 + 
√w
;

89 i‡(
checksum
 > 0xFFFF) {

90 
checksum
 -= 0xFFFF;

92  (~
checksum
) & 0xFFFF;

93 
	}
}

95 
	$√g©e_ù_checksum
(
sum
)

97 
sum
 = ~sum & 0xFFFF;

99 
sum
 = 0xFFFF - sum;

101  ~
sum
 & 0xFFFF;

102 
	}
}

	@util_lib/include/ip_checksum.h

1 #i‚de‡
IP_CHECKSUM_H


2 
	#IP_CHECKSUM_H


	)

4 
compuã_ù_checksum
(*
addr
, 
Àngth
);

5 
add_ù_checksums
(
off£t
, 
sum
, 
√w
);

6 
√g©e_ù_checksum
(
sum
);

	@util_lib/include/sha256.h

1 #i‚de‡
SHA256_H


2 
	#SHA256_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<°döt.h
>

9 
size_t
 
	mtŸÆ
[2];

10 
uöt32_t
 
	m°©e
[8];

11 
uöt8_t
 
	mbuf„r
[64];

13 
	tsha256_c⁄ãxt
;

15 
uöt8_t
 
	tsha256_dige°_t
[32];

17 
sha256_°¨ts
–
sha256_c⁄ãxt
 *
˘x
 );

18 
sha256_upd©e
–
sha256_c⁄ãxt
 *
˘x
, c⁄° 
uöt8_t
 *
öput
, 
size_t
 
Àngth
 );

19 
sha256_föish
–
sha256_c⁄ãxt
 *
˘x
, 
sha256_dige°_t
 
dige°
 );

	@util_lib/sha256.c

21 
	~<°rög.h
>

23 
	~"sha256.h
"

25 
	#GET_UINT32
(
n
,
b
,
i
) \

27 (
n
Ë–(
uöt32_t
Ë(
b
)[(
i
) ] << 24 ) | \

28 –(
uöt32_t
Ë(
b
)[(
i
) + 1] << 16 ) | \

29 –(
uöt32_t
Ë(
b
)[(
i
) + 2] << 8 ) | \

30 –(
uöt32_t
Ë(
b
)[(
i
) + 3] ); \

31 }

	)

33 
	#PUT_UINT32
(
n
,
b
,
i
) \

35 (
b
)[(
i
Ë] = (
uöt8_t
Ë–(
n
) >> 24 ); \

36 (
b
)[(
i
Ë+ 1] = (
uöt8_t
Ë–(
n
) >> 16 ); \

37 (
b
)[(
i
Ë+ 2] = (
uöt8_t
Ë–(
n
) >> 8 ); \

38 (
b
)[(
i
Ë+ 3] = (
uöt8_t
Ë–(
n
) ); \

39 }

	)

41 
	$sha256_°¨ts
–
sha256_c⁄ãxt
 *
˘x
 )

43 
˘x
->
tŸÆ
[0] = 0;

44 
˘x
->
tŸÆ
[1] = 0;

46 
˘x
->
°©e
[0] = 0x6A09E667;

47 
˘x
->
°©e
[1] = 0xBB67AE85;

48 
˘x
->
°©e
[2] = 0x3C6EF372;

49 
˘x
->
°©e
[3] = 0xA54FF53A;

50 
˘x
->
°©e
[4] = 0x510E527F;

51 
˘x
->
°©e
[5] = 0x9B05688C;

52 
˘x
->
°©e
[6] = 0x1F83D9AB;

53 
˘x
->
°©e
[7] = 0x5BE0CD19;

54 
	}
}

56 
	$sha256_¥o˚ss
–
sha256_c⁄ãxt
 *
˘x
, c⁄° 
uöt8_t
 
d©a
[64] )

58 
uöt32_t
 
ãmp1
, 
ãmp2
, 
W
[64];

59 
uöt32_t
 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
;

61 
	`GET_UINT32
–
W
[0], 
d©a
, 0 );

62 
	`GET_UINT32
–
W
[1], 
d©a
, 4 );

63 
	`GET_UINT32
–
W
[2], 
d©a
, 8 );

64 
	`GET_UINT32
–
W
[3], 
d©a
, 12 );

65 
	`GET_UINT32
–
W
[4], 
d©a
, 16 );

66 
	`GET_UINT32
–
W
[5], 
d©a
, 20 );

67 
	`GET_UINT32
–
W
[6], 
d©a
, 24 );

68 
	`GET_UINT32
–
W
[7], 
d©a
, 28 );

69 
	`GET_UINT32
–
W
[8], 
d©a
, 32 );

70 
	`GET_UINT32
–
W
[9], 
d©a
, 36 );

71 
	`GET_UINT32
–
W
[10], 
d©a
, 40 );

72 
	`GET_UINT32
–
W
[11], 
d©a
, 44 );

73 
	`GET_UINT32
–
W
[12], 
d©a
, 48 );

74 
	`GET_UINT32
–
W
[13], 
d©a
, 52 );

75 
	`GET_UINT32
–
W
[14], 
d©a
, 56 );

76 
	`GET_UINT32
–
W
[15], 
d©a
, 60 );

78 
	#SHR
(
x
,
n
Ë((x & 0xFFFFFFFFË>>Ç)

	)

79 
	#ROTR
(
x
,
n
Ë(
	`SHR
(x,nË| (x << (32 -Ç)))

	)

81 
	#S0
(
x
Ë(
	`ROTR
(x, 7Ë^ ROTR(x,18Ë^ 
	`SHR
(x, 3))

	)

82 
	#S1
(
x
Ë(
	`ROTR
(x,17Ë^ ROTR(x,19Ë^ 
	`SHR
(x,10))

	)

84 
	#S2
(
x
Ë(
	`ROTR
(x, 2Ë^ ROTR(x,13Ë^ ROTR(x,22))

	)

85 
	#S3
(
x
Ë(
	`ROTR
(x, 6Ë^ ROTR(x,11Ë^ ROTR(x,25))

	)

87 
	#F0
(
x
,
y
,
z
Ë((x & yË| (z & (x | y)))

	)

88 
	#F1
(
x
,
y
,
z
Ë(z ^ (x & (y ^ z)))

	)

90 
	#R
(
t
) \

92 
W
[
t
] = 
	`S1
(W[t - 2]) + W[t - 7] + \

93 
	`S0
(
W
[
t
 - 15]) + W[t - 16] \

94 )

	)

96 
	#P
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
x
,
K
) \

98 
ãmp1
 = 
h
 + 
	`S3
(
e
Ë+ 
	`F1
”,
f
,
g
Ë+ 
K
 + 
x
; \

99 
ãmp2
 = 
	`S2
(
a
Ë+ 
	`F0
◊,
b
,
c
); \

100 
d
 +
ãmp1
; 
h
 =Åemp1 + 
ãmp2
; \

101 }

	)

103 
A
 = 
˘x
->
°©e
[0];

104 
B
 = 
˘x
->
°©e
[1];

105 
C
 = 
˘x
->
°©e
[2];

106 
D
 = 
˘x
->
°©e
[3];

107 
E
 = 
˘x
->
°©e
[4];

108 
F
 = 
˘x
->
°©e
[5];

109 
G
 = 
˘x
->
°©e
[6];

110 
H
 = 
˘x
->
°©e
[7];

112 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
W
[ 0], 0x428A2F98 );

113 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
W
[ 1], 0x71374491 );

114 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
W
[ 2], 0xB5C0FBCF );

115 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
W
[ 3], 0xE9B5DBA5 );

116 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
W
[ 4], 0x3956C25B );

117 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
W
[ 5], 0x59F111F1 );

118 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
W
[ 6], 0x923F82A4 );

119 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
W
[ 7], 0xAB1C5ED5 );

120 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
W
[ 8], 0xD807AA98 );

121 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
W
[ 9], 0x12835B01 );

122 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
W
[10], 0x243185BE );

123 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
W
[11], 0x550C7DC3 );

124 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
W
[12], 0x72BE5D74 );

125 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
W
[13], 0x80DEB1FE );

126 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
W
[14], 0x9BDC06A7 );

127 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
W
[15], 0xC19BF174 );

128 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(16), 0xE49B69C1 );

129 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(17), 0xEFBE4786 );

130 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(18), 0x0FC19DC6 );

131 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(19), 0x240CA1CC );

132 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(20), 0x2DE92C6F );

133 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(21), 0x4A7484AA );

134 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(22), 0x5CB0A9DC );

135 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(23), 0x76F988DA );

136 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(24), 0x983E5152 );

137 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(25), 0xA831C66D );

138 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(26), 0xB00327C8 );

139 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(27), 0xBF597FC7 );

140 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(28), 0xC6E00BF3 );

141 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(29), 0xD5A79147 );

142 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(30), 0x06CA6351 );

143 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(31), 0x14292967 );

144 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(32), 0x27B70A85 );

145 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(33), 0x2E1B2138 );

146 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(34), 0x4D2C6DFC );

147 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(35), 0x53380D13 );

148 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(36), 0x650A7354 );

149 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(37), 0x766A0ABB );

150 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(38), 0x81C2C92E );

151 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(39), 0x92722C85 );

152 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(40), 0xA2BFE8A1 );

153 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(41), 0xA81A664B );

154 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(42), 0xC24B8B70 );

155 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(43), 0xC76C51A3 );

156 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(44), 0xD192E819 );

157 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(45), 0xD6990624 );

158 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(46), 0xF40E3585 );

159 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(47), 0x106AA070 );

160 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(48), 0x19A4C116 );

161 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(49), 0x1E376C08 );

162 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(50), 0x2748774C );

163 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(51), 0x34B0BCB5 );

164 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(52), 0x391C0CB3 );

165 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(53), 0x4ED8AA4A );

166 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(54), 0x5B9CCA4F );

167 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(55), 0x682E6FF3 );

168 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(56), 0x748F82EE );

169 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(57), 0x78A5636F );

170 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(58), 0x84C87814 );

171 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(59), 0x8CC70208 );

172 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(60), 0x90BEFFFA );

173 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(61), 0xA4506CEB );

174 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(62), 0xBEF9A3F7 );

175 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(63), 0xC67178F2 );

177 
˘x
->
°©e
[0] +
A
;

178 
˘x
->
°©e
[1] +
B
;

179 
˘x
->
°©e
[2] +
C
;

180 
˘x
->
°©e
[3] +
D
;

181 
˘x
->
°©e
[4] +
E
;

182 
˘x
->
°©e
[5] +
F
;

183 
˘x
->
°©e
[6] +
G
;

184 
˘x
->
°©e
[7] +
H
;

185 
	}
}

187 
	$sha256_upd©e
–
sha256_c⁄ãxt
 *
˘x
, c⁄° 
uöt8_t
 *
öput
, 
size_t
 
Àngth
 )

189 
size_t
 
À·
, 
fûl
;

191 if–! 
Àngth
 ) ;

193 
À·
 = 
˘x
->
tŸÆ
[0] & 0x3F;

194 
fûl
 = 64 - 
À·
;

196 
˘x
->
tŸÆ
[0] +
Àngth
;

197 
˘x
->
tŸÆ
[0] &= 0xFFFFFFFF;

199 if–
˘x
->
tŸÆ
[0] < 
Àngth
 )

200 
˘x
->
tŸÆ
[1]++;

202 if–
À·
 && 
Àngth
 >
fûl
 )

204 
	`mem˝y
–
˘x
->
buf„r
 + 
À·
, 
öput
, 
fûl
 );

205 
	`sha256_¥o˚ss
–
˘x
, ctx->
buf„r
 );

206 
Àngth
 -
fûl
;

207 
öput
 +
fûl
;

208 
À·
 = 0;

211  
Àngth
 >= 64 )

213 
	`sha256_¥o˚ss
–
˘x
, 
öput
 );

214 
Àngth
 -= 64;

215 
öput
 += 64;

218 if–
Àngth
 )

220 
	`mem˝y
(
˘x
->
buf„r
 + 
À·
, 
öput
, 
Àngth
);

222 
	}
}

224 
uöt8_t
 
	gsha256_∑ddög
[64] =

232 
	$sha256_föish
–
sha256_c⁄ãxt
 *
˘x
, 
sha256_dige°_t
 
dige°
 )

234 
uöt32_t
 
œ°
, 
∑dn
;

235 
uöt32_t
 
high
, 
low
;

236 
uöt8_t
 
msgÀn
[8];

238 
high
 = ( 
˘x
->
tŸÆ
[0] >> 29 )

239 | ( 
˘x
->
tŸÆ
[1] << 3 );

240 
low
 = ( 
˘x
->
tŸÆ
[0] << 3 );

242 
	`PUT_UINT32
–
high
, 
msgÀn
, 0 );

243 
	`PUT_UINT32
–
low
, 
msgÀn
, 4 );

245 
œ°
 = 
˘x
->
tŸÆ
[0] & 0x3F;

246 
∑dn
 = ( 
œ°
 < 56 ) ? ( 56 -Üast ) : ( 120 -Üast );

248 
	`sha256_upd©e
–
˘x
, 
sha256_∑ddög
, 
∑dn
 );

249 
	`sha256_upd©e
–
˘x
, 
msgÀn
, 8 );

251 
	`PUT_UINT32
–
˘x
->
°©e
[0], 
dige°
, 0 );

252 
	`PUT_UINT32
–
˘x
->
°©e
[1], 
dige°
, 4 );

253 
	`PUT_UINT32
–
˘x
->
°©e
[2], 
dige°
, 8 );

254 
	`PUT_UINT32
–
˘x
->
°©e
[3], 
dige°
, 12 );

255 
	`PUT_UINT32
–
˘x
->
°©e
[4], 
dige°
, 16 );

256 
	`PUT_UINT32
–
˘x
->
°©e
[5], 
dige°
, 20 );

257 
	`PUT_UINT32
–
˘x
->
°©e
[6], 
dige°
, 24 );

258 
	`PUT_UINT32
–
˘x
->
°©e
[7], 
dige°
, 28 );

259 
	}
}

261 #ifde‡
TEST


263 
	~<°dlib.h
>

264 
	~<°dio.h
>

270 *
	gmsg
[] =

274 
NULL


277 *
	gvÆ
[] =

287 
	$maö
–
¨gc
, *
¨gv
[] )

289 
FILE
 *
f
;

290 
i
, 
j
;

291 
ouçut
[65];

292 
sha256_c⁄ãxt
 
˘x
;

293 
buf
[1000];

294 
sha256sum
[32];

296 if–
¨gc
 < 2 )

298 
	`¥ötf
( "\n SHA-256 Validation Tests:\n\n" );

300  
i
 = 0; i < 3; i++ )

302 
	`¥ötf
–" Te° %d ", 
i
 + 1 );

304 
	`sha256_°¨ts
–&
˘x
 );

306 if–
i
 < 2 )

308 
	`sha256_upd©e
–&
˘x
, (
uöt8_t
 *Ë
msg
[
i
],

309 
	`°æí
–
msg
[
i
] ) );

313 
	`mem£t
–
buf
, 'a', 1000 );

315  
j
 = 0; j < 1000; j++ )

317 
	`sha256_upd©e
–&
˘x
, (
uöt8_t
 *Ë
buf
, 1000 );

321 
	`sha256_föish
–&
˘x
, 
sha256sum
 );

323  
j
 = 0; j < 32; j++ )

325 
	`•rötf
–
ouçut
 + 
j
 * 2, "%02x", 
sha256sum
[j] );

328 if–
	`memcmp
–
ouçut
, 
vÆ
[
i
], 64 ) )

330 
	`¥ötf
( "failed!\n" );

334 
	`¥ötf
( "passed.\n" );

337 
	`¥ötf
( "\n" );

341 if–! ( 
f
 = 
	`f›í
–
¨gv
[1], "rb" ) ) )

343 
	`≥º‹
( "fopen" );

347 
	`sha256_°¨ts
–&
˘x
 );

349  ( 
i
 = 
	`‰ód
–
buf
, 1, –bu‡), 
f
 ) ) > 0 )

351 
	`sha256_upd©e
–&
˘x
, 
buf
, 
i
 );

354 
	`sha256_föish
–&
˘x
, 
sha256sum
 );

356  
j
 = 0; j < 32; j++ )

358 
	`¥ötf
–"%02x", 
sha256sum
[
j
] );

361 
	`¥ötf
–" %s\n", 
¨gv
[1] );

365 
	}
}

	@vmcore-dmesg/vmcore-dmesg.c

1 
	#_XOPEN_SOURCE
 600

	)

2 
	#_LARGEFILE_SOURCE
 1

	)

3 
	#_FILE_OFFSET_BITS
 64

	)

4 
	~<ídün.h
>

5 
	~<byãsw≠.h
>

6 
	~<°dio.h
>

7 
	~<°döt.h
>

8 
	~<î∫o.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<limôs.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 
	~<f˙é.h
>

16 
	~<ñf.h
>

17 
	~<°dboﬁ.h
>

18 
	~<öây≥s.h
>

19 
	~<˘y≥.h
>

22 
Elf32_Nhdr
 
	tElf_Nhdr
;

24 c⁄° *
	g‚ame
;

25 
Elf64_Ehdr
 
	gehdr
;

26 
Elf64_Phdr
 *
	gphdr
;

28 
	go§ñó£
[4096];

29 
loff_t
 
	glog_buf_vaddr
;

30 
loff_t
 
	glog_íd_vaddr
;

31 
loff_t
 
	glog_buf_Àn_vaddr
;

32 
loff_t
 
	glogged_ch¨s_vaddr
;

35 
loff_t
 
	glog_fú°_idx_vaddr
;

36 
loff_t
 
	glog_√xt_idx_vaddr
;

39 
uöt64_t
 
	glog_sz
;

42 
uöt64_t
 
	glog_off£t_ts_n£c
 = 
UINT64_MAX
;

43 
uöt16_t
 
	glog_off£t_Àn
 = 
UINT16_MAX
;

44 
uöt16_t
 
	glog_off£t_ãxt_Àn
 = 
UINT16_MAX
;

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#ELFDATANATIVE
 
ELFDATA2LSB


	)

48 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


49 
	#ELFDATANATIVE
 
ELFDATA2MSB


	)

54 
uöt16_t
 
	$fûe16_to_˝u
(
uöt16_t
 
vÆ
)

56 i‡(
ehdr
.
e_idít
[
EI_DATA
] !
ELFDATANATIVE
)

57 
vÆ
 = 
	`bsw≠_16
(val);

58  
vÆ
;

59 
	}
}

61 
uöt32_t
 
	$fûe32_to_˝u
(
uöt32_t
 
vÆ
)

63 i‡(
ehdr
.
e_idít
[
EI_DATA
] !
ELFDATANATIVE
)

64 
vÆ
 = 
	`bsw≠_32
(val);

65  
vÆ
;

66 
	}
}

68 
uöt64_t
 
	$fûe64_to_˝u
(
uöt64_t
 
vÆ
)

70 i‡(
ehdr
.
e_idít
[
EI_DATA
] !
ELFDATANATIVE
)

71 
vÆ
 = 
	`bsw≠_64
(val);

72  
vÆ
;

73 
	}
}

75 
uöt64_t
 
	$vaddr_to_off£t
(
uöt64_t
 
vaddr
)

80 
ssize_t
 
i
;

81 
i
 = 0; i < 
ehdr
.
e_phnum
; i++) {

82 i‡(
phdr
[
i
].
p_vaddr
 > 
vaddr
)

84 i‡((
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
Ë<
vaddr
)

86  (
vaddr
 - 
phdr
[
i
].
p_vaddr
Ë+Öhdr[i].
p_off£t
;

88 
	`Ârötf
(
°dîr
, "NoÖrogram header covering vaddr 0x%llxfound kexec bug?\n",

89 ()
vaddr
);

90 
	`exô
(30);

91 
	}
}

93 
	$machöe_poöãr_bôs
()

95 
uöt8_t
 
bôs
 = 0;

98 
ehdr
.
e_idít
[
EI_CLASS
]) {

99 
ELFCLASS32
: 
bôs
 = 32; ;

100 
ELFCLASS64
: 
bôs
 = 64; ;

104 
ehdr
.
e_machöe
) {

105 
EM_386
: 
bôs
 = 32; ;

108  
bôs
;

109 
	}
}

111 
	$ªad_ñf32
(
fd
)

113 
Elf32_Ehdr
 
ehdr32
;

114 
Elf32_Phdr
 *
phdr32
;

115 
size_t
 
phdrs32_size
;

116 
ssize_t
 
ªt
, 
i
;

118 
ªt
 = 
	`¥ód
(
fd
, &
ehdr32
, (ehdr32), 0);

119 i‡(
ªt
 !(
ehdr32
)) {

120 
	`Ârötf
(
°dîr
, "Read of Elf header from %s failed: %s\n",

121 
‚ame
, 
	`°ªº‹
(
î∫o
));

122 
	`exô
(10);

125 
ehdr
.
e_ty≥
 = 
	`fûe16_to_˝u
(
ehdr32
.e_type);

126 
ehdr
.
e_machöe
 = 
	`fûe16_to_˝u
(
ehdr32
.e_machine);

127 
ehdr
.
e_vîsi⁄
 = 
	`fûe32_to_˝u
(
ehdr32
.e_version);

128 
ehdr
.
e_íåy
 = 
	`fûe32_to_˝u
(
ehdr32
.e_entry);

129 
ehdr
.
e_phoff
 = 
	`fûe32_to_˝u
(
ehdr32
.e_phoff);

130 
ehdr
.
e_shoff
 = 
	`fûe32_to_˝u
(
ehdr32
.e_shoff);

131 
ehdr
.
e_Êags
 = 
	`fûe32_to_˝u
(
ehdr32
.e_flags);

132 
ehdr
.
e_ehsize
 = 
	`fûe16_to_˝u
(
ehdr32
.e_ehsize);

133 
ehdr
.
e_phítsize
 = 
	`fûe16_to_˝u
(
ehdr32
.e_phentsize);

134 
ehdr
.
e_phnum
 = 
	`fûe16_to_˝u
(
ehdr32
.e_phnum);

135 
ehdr
.
e_shítsize
 = 
	`fûe16_to_˝u
(
ehdr32
.e_shentsize);

136 
ehdr
.
e_shnum
 = 
	`fûe16_to_˝u
(
ehdr32
.e_shnum);

137 
ehdr
.
e_sh°∫dx
 = 
	`fûe16_to_˝u
(
ehdr32
.e_shstrndx);

139 i‡(
ehdr
.
e_vîsi⁄
 !
EV_CURRENT
) {

140 
	`Ârötf
(
°dîr
, "Bad Elf header version %u\n",

141 
ehdr
.
e_vîsi⁄
);

142 
	`exô
(11);

144 i‡(
ehdr
.
e_phítsize
 !(
Elf32_Phdr
)) {

145 
	`Ârötf
(
°dîr
, "Bad ElfÖrogra header size %uÉxpected %zu\n",

146 
ehdr
.
e_phítsize
, (
Elf32_Phdr
));

147 
	`exô
(12);

149 
phdrs32_size
 = 
ehdr
.
e_phnum
 * (
Elf32_Phdr
);

150 
phdr32
 = 
	`ˇŒoc
(
ehdr
.
e_phnum
, (
Elf32_Phdr
));

151 i‡(!
phdr32
) {

152 
	`Ârötf
(
°dîr
, "Calloc of %uÖhdrs32 failed: %s\n",

153 
ehdr
.
e_phnum
, 
	`°ªº‹
(
î∫o
));

154 
	`exô
(14);

156 
phdr
 = 
	`ˇŒoc
(
ehdr
.
e_phnum
, (
Elf64_Phdr
));

157 i‡(!
phdr
) {

158 
	`Ârötf
(
°dîr
, "Calloc of %uÖhdrs failed: %s\n",

159 
ehdr
.
e_phnum
, 
	`°ªº‹
(
î∫o
));

160 
	`exô
(15);

162 
ªt
 = 
	`¥ód
(
fd
, 
phdr32
, 
phdrs32_size
, 
ehdr
.
e_phoff
);

163 i‡(
ªt
 < 0 || (
size_t
Ïë !
phdrs32_size
) {

164 
	`Ârötf
(
°dîr
, "Read ofÖrogram header @ 0x%llu for %zu bytes failed: %s\n",

165 ()
ehdr
.
e_phoff
, 
phdrs32_size
, 
	`°ªº‹
(
î∫o
));

166 
	`exô
(16);

168 
i
 = 0; i < 
ehdr
.
e_phnum
; i++) {

169 
phdr
[
i
].
p_ty≥
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_type);

170 
phdr
[
i
].
p_off£t
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_offset);

171 
phdr
[
i
].
p_vaddr
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_vaddr);

172 
phdr
[
i
].
p_∑ddr
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_paddr);

173 
phdr
[
i
].
p_fûesz
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_filesz);

174 
phdr
[
i
].
p_memsz
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_memsz);

175 
phdr
[
i
].
p_Êags
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_flags);

176 
phdr
[
i
].
p_Æign
 = 
	`fûe32_to_˝u
(
phdr32
[i].p_align);

178 
	`‰ì
(
phdr32
);

179 
	}
}

182 
	$ªad_ñf64
(
fd
)

184 
Elf64_Ehdr
 
ehdr64
;

185 
Elf64_Phdr
 *
phdr64
;

186 
size_t
 
phdrs_size
;

187 
ssize_t
 
ªt
, 
i
;

189 
ªt
 = 
	`¥ód
(
fd
, &
ehdr64
, (ehdr64), 0);

190 i‡(
ªt
 < 0 || (
size_t
Ïë !(
ehdr
)) {

191 
	`Ârötf
(
°dîr
, "Read of Elf header from %s failed: %s\n",

192 
‚ame
, 
	`°ªº‹
(
î∫o
));

193 
	`exô
(10);

196 
ehdr
.
e_ty≥
 = 
	`fûe16_to_˝u
(
ehdr64
.e_type);

197 
ehdr
.
e_machöe
 = 
	`fûe16_to_˝u
(
ehdr64
.e_machine);

198 
ehdr
.
e_vîsi⁄
 = 
	`fûe32_to_˝u
(
ehdr64
.e_version);

199 
ehdr
.
e_íåy
 = 
	`fûe64_to_˝u
(
ehdr64
.e_entry);

200 
ehdr
.
e_phoff
 = 
	`fûe64_to_˝u
(
ehdr64
.e_phoff);

201 
ehdr
.
e_shoff
 = 
	`fûe64_to_˝u
(
ehdr64
.e_shoff);

202 
ehdr
.
e_Êags
 = 
	`fûe32_to_˝u
(
ehdr64
.e_flags);

203 
ehdr
.
e_ehsize
 = 
	`fûe16_to_˝u
(
ehdr64
.e_ehsize);

204 
ehdr
.
e_phítsize
 = 
	`fûe16_to_˝u
(
ehdr64
.e_phentsize);

205 
ehdr
.
e_phnum
 = 
	`fûe16_to_˝u
(
ehdr64
.e_phnum);

206 
ehdr
.
e_shítsize
 = 
	`fûe16_to_˝u
(
ehdr64
.e_shentsize);

207 
ehdr
.
e_shnum
 = 
	`fûe16_to_˝u
(
ehdr64
.e_shnum);

208 
ehdr
.
e_sh°∫dx
 = 
	`fûe16_to_˝u
(
ehdr64
.e_shstrndx);

210 i‡(
ehdr
.
e_vîsi⁄
 !
EV_CURRENT
) {

211 
	`Ârötf
(
°dîr
, "Bad Elf header version %u\n",

212 
ehdr
.
e_vîsi⁄
);

213 
	`exô
(11);

215 i‡(
ehdr
.
e_phítsize
 !(
Elf64_Phdr
)) {

216 
	`Ârötf
(
°dîr
, "Bad ElfÖrogra header size %uÉxpected %zu\n",

217 
ehdr
.
e_phítsize
, (
Elf64_Phdr
));

218 
	`exô
(12);

220 
phdrs_size
 = 
ehdr
.
e_phnum
 * (
Elf64_Phdr
);

221 
phdr64
 = 
	`ˇŒoc
(
ehdr
.
e_phnum
, (
Elf64_Phdr
));

222 i‡(!
phdr64
) {

223 
	`Ârötf
(
°dîr
, "Calloc of %uÖhdrs64 failed: %s\n",

224 
ehdr
.
e_phnum
, 
	`°ªº‹
(
î∫o
));

225 
	`exô
(14);

227 
phdr
 = 
	`ˇŒoc
(
ehdr
.
e_phnum
, (
Elf64_Phdr
));

228 i‡(!
phdr
) {

229 
	`Ârötf
(
°dîr
, "Calloc of %uÖhdrs failed: %s\n",

230 
ehdr
.
e_phnum
, 
	`°ªº‹
(
î∫o
));

231 
	`exô
(15);

233 
ªt
 = 
	`¥ód
(
fd
, 
phdr64
, 
phdrs_size
, 
ehdr
.
e_phoff
);

234 i‡(
ªt
 < 0 || (
size_t
Ïë !
phdrs_size
) {

235 
	`Ârötf
(
°dîr
, "Read ofÖrogram header @ %llu for %zu bytes failed: %s\n",

236 ()(
ehdr
.
e_phoff
), 
phdrs_size
, 
	`°ªº‹
(
î∫o
));

237 
	`exô
(16);

239 
i
 = 0; i < 
ehdr
.
e_phnum
; i++) {

240 
phdr
[
i
].
p_ty≥
 = 
	`fûe32_to_˝u
(
phdr64
[i].p_type);

241 
phdr
[
i
].
p_Êags
 = 
	`fûe32_to_˝u
(
phdr64
[i].p_flags);

242 
phdr
[
i
].
p_off£t
 = 
	`fûe64_to_˝u
(
phdr64
[i].p_offset);

243 
phdr
[
i
].
p_vaddr
 = 
	`fûe64_to_˝u
(
phdr64
[i].p_vaddr);

244 
phdr
[
i
].
p_∑ddr
 = 
	`fûe64_to_˝u
(
phdr64
[i].p_paddr);

245 
phdr
[
i
].
p_fûesz
 = 
	`fûe64_to_˝u
(
phdr64
[i].p_filesz);

246 
phdr
[
i
].
p_memsz
 = 
	`fûe64_to_˝u
(
phdr64
[i].p_memsz);

247 
phdr
[
i
].
p_Æign
 = 
	`fûe64_to_˝u
(
phdr64
[i].p_align);

249 
	`‰ì
(
phdr64
);

250 
	}
}

252 
	$sˇn_vmc‹eöfo
(*
°¨t
, 
size_t
 
size
)

254 *
œ°
 = 
°¨t
 + 
size
 - 1;

255 *
pos
, *
eﬁ
;

256 
ãmp_buf
[1024];

257 
boﬁ
 
œ°_löe
 = 
Ál£
;

258 *
°r
;

260 
	#SYMBOL
(
sym
) { \

261 .
°r
 = "SYMBOL(" #sym ")=", \

262 .
«me
 = #sym, \

263 .
Àn
 = ("SYMBOL(" #sym ")=") - 1, \

264 .
vaddr
 = & 
sym
 ## 
_vaddr
, \

265 }

	)

266 
	ssymbﬁ
 {

267 c⁄° *
°r
;

268 c⁄° *
«me
;

269 
size_t
 
Àn
;

270 
loff_t
 *
vaddr
;

271 } 
symbﬁ
[] = {

272 
	`SYMBOL
(
log_buf
),

273 
	`SYMBOL
(
log_íd
),

274 
	`SYMBOL
(
log_buf_Àn
),

275 
	`SYMBOL
(
logged_ch¨s
),

276 
	`SYMBOL
(
log_fú°_idx
),

277 
	`SYMBOL
(
log_√xt_idx
),

280 
pos
 = 
°¨t
;Öo†<
œ°
;Öo†
eﬁ
 + 1) {

281 
size_t
 
Àn
, 
i
;

283 
eﬁ
 = 
pos
; (eﬁ <
œ°
) && (*eol != '\n') ;Éol++)

285 i‡(
eﬁ
 > 
œ°
) {

291 
eﬁ
 = 
œ°
;

292 
Àn
 = 
eﬁ
 - 
pos
 + 1;

293 i‡(
Àn
 >(
ãmp_buf
))

294 
Àn
 = (
ãmp_buf
) - 1;

295 
	`°∫˝y
(
ãmp_buf
, 
pos
, 
Àn
);

296 
ãmp_buf
[
Àn
 + 1] = '\0';

298 
pos
 = 
ãmp_buf
;

299 
Àn
 =Üen + 1;

300 
eﬁ
 = 
pos
 + 
Àn
 -1;

301 
œ°_löe
 = 
åue
;

303 
Àn
 = 
eﬁ
 - 
pos
 + 1;

307 *
eﬁ
 = '\0';

309 i‡((
Àn
 >10Ë&& (
	`memcmp
("OSRELEASE=", 
pos
, 10) == 0)) {

310 
size_t
 
to_c›y
 = 
Àn
 - 10;

311 i‡(
to_c›y
 >(
o§ñó£
))

312 
to_c›y
 = (
o§ñó£
) - 1;

313 
	`mem˝y
(
o§ñó£
, 
pos
 + 10, 
to_c›y
);

314 
o§ñó£
[
to_c›y
] = '\0';

317 
i
 = 0; i < (
symbﬁ
)/(symbol[0]); i++ ) {

318 
vaddr
;

319 i‡(
symbﬁ
[
i
].
Àn
 >=Üen)

321 i‡(
	`memcmp
(
symbﬁ
[
i
].
°r
, 
pos
, symbﬁ[i].
Àn
) != 0)

324 
vaddr
 = 
	`°πouŒ
(
pos
 + 
symbﬁ
[
i
].
Àn
, 
NULL
, 16);

326 *
symbﬁ
[
i
].
vaddr
 = vaddr;

330 
°r
 = "SIZE(log)=";

331 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

332 
log_sz
 = 
	`°πouŒ
(
pos
 + 
	`°æí
(
°r
), 
NULL
, 10);

334 
°r
 = "SIZE(printk_log)=";

335 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

336 
log_sz
 = 
	`°πouŒ
(
pos
 + 
	`°æí
(
°r
), 
NULL
, 10);

339 
°r
 = "OFFSET(log.ts_nsec)=";

340 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

341 
log_off£t_ts_n£c
 = 
	`°πouŒ
(
pos
 + 
	`°æí
(
°r
), 
NULL
,

343 
°r
 = "OFFSET(printk_log.ts_nsec)=";

344 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

345 
log_off£t_ts_n£c
 = 
	`°πouŒ
(
pos
 + 
	`°æí
(
°r
), 
NULL
,

348 
°r
 = "OFFSET(log.len)=";

349 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

350 
log_off£t_Àn
 = 
	`°πoul
(
pos
 + 
	`°æí
(
°r
), 
NULL
, 10);

352 
°r
 = "OFFSET(printk_log.len)=";

353 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

354 
log_off£t_Àn
 = 
	`°πoul
(
pos
 + 
	`°æí
(
°r
), 
NULL
, 10);

356 
°r
 = "OFFSET(log.text_len)=";

357 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

358 
log_off£t_ãxt_Àn
 = 
	`°πoul
(
pos
 + 
	`°æí
(
°r
), 
NULL
,

360 
°r
 = "OFFSET(printk_log.text_len)=";

361 i‡(
	`memcmp
(
°r
, 
pos
, 
	`°æí
(str)) == 0)

362 
log_off£t_ãxt_Àn
 = 
	`°πoul
(
pos
 + 
	`°æí
(
°r
), 
NULL
,

365 i‡(
œ°_löe
)

368 
	}
}

370 
	$sˇn_nŸes
(
fd
, 
loff_t
 
°¨t
,Üoff_à
lsize
)

372 *
buf
, *
œ°
, *
nŸe
, *
√xt
;

373 
size_t
 
size
;

374 
ssize_t
 
ªt
;

376 i‡(
lsize
 > 
SSIZE_MAX
) {

377 
	`Ârötf
(
°dîr
, "UnableÅo handleÇote section of %llu bytes\n",

378 ()
lsize
);

379 
	`exô
(20);

381 
size
 = 
lsize
;

382 
buf
 = 
	`mÆloc
(
size
);

383 i‡(!
buf
) {

384 
	`Ârötf
(
°dîr
, "C™nŸ mÆlo¯%zu byãs\n", 
size
);

385 
	`exô
(21);

387 
œ°
 = 
buf
 + 
size
 - 1;

388 
ªt
 = 
	`¥ód
(
fd
, 
buf
, 
size
, 
°¨t
);

389 i‡(
ªt
 !(
ssize_t
)
size
) {

390 
	`Ârötf
(
°dîr
, "CannotÑeadÇote section @ 0x%llx of %zu bytes: %s\n",

391 ()
°¨t
, 
size
, 
	`°ªº‹
(
î∫o
));

392 
	`exô
(22);

395 
nŸe
 = 
buf
; (nŸê+ (
Elf_Nhdr
)Ë< 
œ°
;ÇŸê
√xt
)

397 
Elf_Nhdr
 *
hdr
;

398 *
n_«me
, *
n_desc
;

399 
size_t
 
n_«mesz
, 
n_descsz
, 
n_ty≥
;

401 
hdr
 = (
Elf_Nhdr
 *)
nŸe
;

402 
n_«mesz
 = 
	`fûe32_to_˝u
(
hdr
->n_namesz);

403 
n_descsz
 = 
	`fûe32_to_˝u
(
hdr
->n_descsz);

404 
n_ty≥
 = 
	`fûe32_to_˝u
(
hdr
->n_type);

406 
n_«me
 = 
nŸe
 + (*
hdr
);

407 
n_desc
 = 
n_«me
 + ((
n_«mesz
 + 3) & ~3);

408 
√xt
 = 
n_desc
 + ((
n_descsz
 + 3) & ~3);

410 i‡(
√xt
 > (
œ°
 + 1))

413 i‡((
	`memcmp
(
n_«me
, "VMCOREINFO", 11Ë!0Ë|| (
n_ty≥
 != 0))

415 
	`sˇn_vmc‹eöfo
(
n_desc
, 
n_descsz
);

417 
	`‰ì
(
buf
);

418 
	}
}

420 
	$sˇn_nŸe_hódîs
(
fd
)

422 
i
;

423 
i
 = 0; i < 
ehdr
.
e_phnum
; i++) {

424 i‡(
phdr
[
i
].
p_ty≥
 !
PT_NOTE
)

426 
	`sˇn_nŸes
(
fd
, 
phdr
[
i
].
p_off£t
,Öhdr[i].
p_fûesz
);

428 
	}
}

430 
uöt64_t
 
	$ªad_fûe_poöãr
(
fd
, 
uöt64_t
 
addr
)

432 
uöt64_t
 
ªsu…
;

433 
ssize_t
 
ªt
;

435 i‡(
	`machöe_poöãr_bôs
() == 64) {

436 
uöt64_t
 
s¸©ch
;

437 
ªt
 = 
	`¥ód
(
fd
, &
s¸©ch
, (s¸©ch), 
addr
);

438 i‡(
ªt
 !(
s¸©ch
)) {

439 
	`Ârötf
(
°dîr
, "FailedÅoÑeadÖointer @ 0x%llx: %s\n",

440 ()
addr
, 
	`°ªº‹
(
î∫o
));

441 
	`exô
(40);

443 
ªsu…
 = 
	`fûe64_to_˝u
(
s¸©ch
);

445 
uöt32_t
 
s¸©ch
;

446 
ªt
 = 
	`¥ód
(
fd
, &
s¸©ch
, (s¸©ch), 
addr
);

447 i‡(
ªt
 !(
s¸©ch
)) {

448 
	`Ârötf
(
°dîr
, "FailedÅoÑeadÖointer @ 0x%llx: %s\n",

449 ()
addr
, 
	`°ªº‹
(
î∫o
));

450 
	`exô
(40);

452 
ªsu…
 = 
	`fûe32_to_˝u
(
s¸©ch
);

454  
ªsu…
;

455 
	}
}

457 
uöt32_t
 
	$ªad_fûe_u32
(
fd
, 
uöt64_t
 
addr
)

459 
uöt32_t
 
s¸©ch
;

460 
ssize_t
 
ªt
;

461 
ªt
 = 
	`¥ód
(
fd
, &
s¸©ch
, (s¸©ch), 
addr
);

462 i‡(
ªt
 !(
s¸©ch
)) {

463 
	`Ârötf
(
°dîr
, "FailedÅoÑead value @ 0x%llx: %s\n",

464 ()
addr
, 
	`°ªº‹
(
î∫o
));

465 
	`exô
(41);

467  
	`fûe32_to_˝u
(
s¸©ch
);

468 
	}
}

470 
öt32_t
 
	$ªad_fûe_s32
(
fd
, 
uöt64_t
 
addr
)

472  
	`ªad_fûe_u32
(
fd
, 
addr
);

473 
	}
}

475 
	$wrôe_to_°dout
(*
buf
, 
ƒ
)

477 
ssize_t
 
ªt
;

479 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
ƒ
);

480 i‡(
ªt
 !
ƒ
) {

481 
	`Ârötf
(
°dîr
, "FailedÅo write outÅhe dmesgÜog buffer!:"

482 " %s\n", 
	`°ªº‹
(
î∫o
));

483 
	`exô
(54);

485 
	}
}

487 
	$dump_dmesg_Àgacy
(
fd
)

489 
uöt64_t
 
log_buf
, 
log_buf_off£t
;

490 
log_íd
, 
logged_ch¨s
, 
log_íd_wøµed
;

491 
log_buf_Àn
, 
to_wøp
;

492 *
buf
;

493 
ssize_t
 
ªt
;

495 i‡(!
log_buf_vaddr
) {

496 
	`Ârötf
(
°dîr
, "MissingÅheÜog_buf symbol\n");

497 
	`exô
(50);

499 i‡(!
log_íd_vaddr
) {

500 
	`Ârötf
(
°dîr
, "MissingÅheÜog_end symbol\n");

501 
	`exô
(51);

503 i‡(!
log_buf_Àn_vaddr
) {

504 
	`Ârötf
(
°dîr
, "MissingÅheÜog_bug_len symbol\n");

505 
	`exô
(52);

507 i‡(!
logged_ch¨s_vaddr
) {

508 
	`Ârötf
(
°dîr
, "MissingÅheÜogged_chars symbol\n");

509 
	`exô
(53);

513 
log_buf
 = 
	`ªad_fûe_poöãr
(
fd
, 
	`vaddr_to_off£t
(
log_buf_vaddr
));

514 
log_íd
 = 
	`ªad_fûe_u32
(
fd
, 
	`vaddr_to_off£t
(
log_íd_vaddr
));

515 
log_buf_Àn
 = 
	`ªad_fûe_s32
(
fd
, 
	`vaddr_to_off£t
(
log_buf_Àn_vaddr
));

516 
logged_ch¨s
 = 
	`ªad_fûe_u32
(
fd
, 
	`vaddr_to_off£t
(
logged_ch¨s_vaddr
));

518 
log_buf_off£t
 = 
	`vaddr_to_off£t
(
log_buf
);

520 
buf
 = 
	`ˇŒoc
(1, 
log_buf_Àn
);

521 i‡(!
buf
) {

522 
	`Ârötf
(
°dîr
, "FailedÅo malloc %d bytes forÅheÜogbuf: %s\n",

523 
log_buf_Àn
, 
	`°ªº‹
(
î∫o
));

524 
	`exô
(51);

527 
log_íd_wøµed
 = 
log_íd
 % 
log_buf_Àn
;

528 
to_wøp
 = 
log_buf_Àn
 - 
log_íd_wøµed
;

530 
ªt
 = 
	`¥ód
(
fd
, 
buf
, 
to_wøp
, 
log_buf_off£t
 + 
log_íd_wøµed
);

531 i‡(
ªt
 !
to_wøp
) {

532 
	`Ârötf
(
°dîr
, "FailedÅoÑeadÅhe first half ofÅheÜog buffer: %s\n",

533 
	`°ªº‹
(
î∫o
));

534 
	`exô
(52);

536 
ªt
 = 
	`¥ód
(
fd
, 
buf
 + 
to_wøp
, 
log_íd_wøµed
, 
log_buf_off£t
);

537 i‡(
ªt
 !
log_íd_wøµed
) {

538 
	`Ârötf
(
°dîr
, "FaieldÅoÑeadÅhe second half ofÅheÜog buffer: %s\n",

539 
	`°ªº‹
(
î∫o
));

540 
	`exô
(53);

543 
	`wrôe_to_°dout
(
buf
 + (
log_buf_Àn
 - 
logged_ch¨s
),Üogged_chars);

544 
	}
}

546 
ölöe
 
uöt16_t
 
	$°ru˘_vÆ_u16
(*
±r
, 
off£t
)

548 (
	`fûe16_to_˝u
(*(
uöt16_t
 *)(
±r
 + 
off£t
)));

549 
	}
}

551 
ölöe
 
uöt32_t
 
	$°ru˘_vÆ_u32
(*
±r
, 
off£t
)

553 (
	`fûe32_to_˝u
(*(
uöt32_t
 *)(
±r
 + 
off£t
)));

554 
	}
}

556 
ölöe
 
uöt64_t
 
	$°ru˘_vÆ_u64
(*
±r
, 
off£t
)

558 (
	`fûe64_to_˝u
(*(
uöt64_t
 *)(
±r
 + 
off£t
)));

559 
	}
}

562 *
	$log_ãxt
(*
msg
)

564  
msg
 + 
log_sz
;

565 
	}
}

568 *
	$log_‰om_idx
(*
log_buf
, 
uöt32_t
 
idx
)

570 *
msg
 = 
log_buf
 + 
idx
;

576 i‡(!
	`°ru˘_vÆ_u16
(
msg
, 
log_off£t_Àn
))

577  
log_buf
;

578  
msg
;

579 
	}
}

582 
uöt32_t
 
	$log_√xt
(*
log_buf
, 
uöt32_t
 
idx
)

584 *
msg
 = 
log_buf
 + 
idx
;

585 
uöt16_t
 
Àn
;

593 
Àn
 = 
	`°ru˘_vÆ_u16
(
msg
, 
log_off£t_Àn
);

594 i‡(!
Àn
) {

595 
msg
 = 
log_buf
;

596  
	`°ru˘_vÆ_u16
(
msg
, 
log_off£t_Àn
);

598  
idx
 + 
Àn
;

599 
	}
}

602 
	$dump_dmesg_°ru˘uªd
(
fd
)

604 
	#OUT_BUF_SIZE
 4096

	)

605 
uöt64_t
 
log_buf
, 
log_buf_off£t
, 
ts_n£c
;

606 
uöt32_t
 
log_fú°_idx
, 
log_√xt_idx
, 
cuºít_idx
, 
Àn
 = 0, 
i
;

607 
log_buf_Àn
;

608 *
buf
, 
out_buf
[
OUT_BUF_SIZE
];

609 
ssize_t
 
ªt
;

610 *
msg
;

611 
uöt16_t
 
ãxt_Àn
;

612 
imaxdiv_t
 
imaxdiv_£c
, 
imaxdiv_u£c
;

614 i‡(!
log_buf_vaddr
) {

615 
	`Ârötf
(
°dîr
, "MissingÅheÜog_buf symbol\n");

616 
	`exô
(60);

619 i‡(!
log_buf_Àn_vaddr
) {

620 
	`Ârötf
(
°dîr
, "MissingÅheÜog_bug_len symbol\n");

621 
	`exô
(61);

624 i‡(!
log_fú°_idx_vaddr
) {

625 
	`Ârötf
(
°dîr
, "MissingÅheÜog_first_idx symbol\n");

626 
	`exô
(62);

629 i‡(!
log_√xt_idx_vaddr
) {

630 
	`Ârötf
(
°dîr
, "MissingÅheÜog_next_idx symbol\n");

631 
	`exô
(63);

634 i‡(!
log_sz
) {

635 
	`Ârötf
(
°dîr
, "MissingÅhe structÜog sizeÉxport\n");

636 
	`exô
(64);

639 i‡(
log_off£t_ts_n£c
 =
UINT64_MAX
) {

640 
	`Ârötf
(
°dîr
, "MissingÅheÜog.ts_nsec offsetÉxport\n");

641 
	`exô
(65);

644 i‡(
log_off£t_Àn
 =
UINT16_MAX
) {

645 
	`Ârötf
(
°dîr
, "MissingÅheÜog.len offsetÉxport\n");

646 
	`exô
(66);

649 i‡(
log_off£t_ãxt_Àn
 =
UINT16_MAX
) {

650 
	`Ârötf
(
°dîr
, "MissingÅheÜog.text_len offsetÉxport\n");

651 
	`exô
(67);

654 
log_buf
 = 
	`ªad_fûe_poöãr
(
fd
, 
	`vaddr_to_off£t
(
log_buf_vaddr
));

655 
log_buf_Àn
 = 
	`ªad_fûe_s32
(
fd
, 
	`vaddr_to_off£t
(
log_buf_Àn_vaddr
));

657 
log_fú°_idx
 = 
	`ªad_fûe_u32
(
fd
, 
	`vaddr_to_off£t
(
log_fú°_idx_vaddr
));

658 
log_√xt_idx
 = 
	`ªad_fûe_u32
(
fd
, 
	`vaddr_to_off£t
(
log_√xt_idx_vaddr
));

660 
log_buf_off£t
 = 
	`vaddr_to_off£t
(
log_buf
);

662 
buf
 = 
	`ˇŒoc
(1, 
log_buf_Àn
);

663 i‡(!
buf
) {

664 
	`Ârötf
(
°dîr
, "FailedÅo malloc %d bytes forÅheÜogbuf:"

665 " %s\n", 
log_buf_Àn
, 
	`°ªº‹
(
î∫o
));

666 
	`exô
(64);

669 
ªt
 = 
	`¥ód
(
fd
, 
buf
, 
log_buf_Àn
, 
log_buf_off£t
);

670 i‡(
ªt
 !
log_buf_Àn
) {

671 
	`Ârötf
(
°dîr
, "FailedÅoÑeadÜog buffer of size %d bytes:"

672 " %s\n", 
log_buf_Àn
, 
	`°ªº‹
(
î∫o
));

673 
	`exô
(65);

678 
cuºít_idx
 = 
log_fú°_idx
;

679 
Àn
 = 0;

680 
cuºít_idx
 !
log_√xt_idx
) {

681 
msg
 = 
	`log_‰om_idx
(
buf
, 
cuºít_idx
);

682 
ts_n£c
 = 
	`°ru˘_vÆ_u64
(
msg
, 
log_off£t_ts_n£c
);

683 
imaxdiv_£c
 = 
	`imaxdiv
(
ts_n£c
, 1000000000);

684 
imaxdiv_u£c
 = 
	`imaxdiv
(
imaxdiv_£c
.
ªm
, 1000);

686 
Àn
 +
	`•rötf
(
out_buf
 +Üen, "[%5llu.%06llu] ",

687 ()
imaxdiv_£c
.
quŸ
,

688 ()
imaxdiv_u£c
.
quŸ
);

691 
ãxt_Àn
 = 
	`°ru˘_vÆ_u16
(
msg
, 
log_off£t_ãxt_Àn
);

692 
i
 = 0; i < 
ãxt_Àn
; i++) {

693 
c
 = 
	`log_ãxt
(
msg
)[
i
];

695 i‡(!
	`i•röt
(
c
Ë&& !
	`is•a˚
(c))

696 
Àn
 +
	`•rötf
(
out_buf
 +Üí, "\\x%02x", 
c
);

698 
out_buf
[
Àn
++] = 
c
;

700 i‡(
Àn
 >
OUT_BUF_SIZE
 - 64) {

701 
	`wrôe_to_°dout
(
out_buf
, 
Àn
);

702 
Àn
 = 0;

706 
out_buf
[
Àn
++] = '\n';

709 
cuºít_idx
 = 
	`log_√xt
(
buf
, current_idx);

712 i‡(
Àn
)

713 
	`wrôe_to_°dout
(
out_buf
, 
Àn
);

714 
	}
}

716 
	$dump_dmesg
(
fd
)

718 i‡(
log_fú°_idx_vaddr
)

719 
	`dump_dmesg_°ru˘uªd
(
fd
);

721 
	`dump_dmesg_Àgacy
(
fd
);

722 
	}
}

724 
	$maö
(
¨gc
, **
¨gv
)

726 
ssize_t
 
ªt
;

727 
fd
;

729 i‡(
¨gc
 != 2) {

730 
	`Ârötf
(
°dîr
, "ußge: %†<kî√»c‹êfûe>\n", 
¨gv
[0]);

733 
‚ame
 = 
¨gv
[1];

735 
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

736 i‡(
fd
 < 0) {

737 
	`Ârötf
(
°dîr
, "Cannot open %s: %s\n",

738 
‚ame
, 
	`°ªº‹
(
î∫o
));

741 
ªt
 = 
	`¥ód
(
fd
, 
ehdr
.
e_idít
, 
EI_NIDENT
, 0);

742 i‡(
ªt
 !
EI_NIDENT
) {

743 
	`Ârötf
(
°dîr
, "Read ofÉ_ident from %s failed: %s\n",

744 
‚ame
, 
	`°ªº‹
(
î∫o
));

747 i‡(
	`memcmp
(
ehdr
.
e_idít
, 
ELFMAG
, 
SELFMAG
) != 0) {

748 
	`Ârötf
(
°dîr
, "MissingÉlf signature\n");

751 i‡(
ehdr
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
) {

752 
	`Ârötf
(
°dîr
, "BadÉlf version\n");

755 i‡((
ehdr
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
) &&

756 (
ehdr
.
e_idít
[
EI_CLASS
] !
ELFCLASS64
))

758 
	`Ârötf
(
°dîr
, "UnknownÉlf class %u\n",

759 
ehdr
.
e_idít
[
EI_CLASS
]);

762 i‡((
ehdr
.
e_idít
[
EI_DATA
] !
ELFDATA2LSB
) &&

763 (
ehdr
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
))

765 
	`Ârötf
(
°dîr
, "UnkownÉlf data order %u\n",

766 
ehdr
.
e_idít
[
EI_DATA
]);

769 i‡(
ehdr
.
e_idít
[
EI_CLASS
] =
ELFCLASS32
)

770 
	`ªad_ñf32
(
fd
);

772 
	`ªad_ñf64
(
fd
);

774 
	`sˇn_nŸe_hódîs
(
fd
);

775 
	`dump_dmesg
(
fd
);

776 
	`˛o£
(
fd
);

779 
	}
}

	@
1
.
0
196
5688
include/boot/beoboot.h
include/boot/elf_boot.h
include/boot/linuxbios_tables.h
include/config.h
include/elf.h
include/image.h
include/kexec-uImage.h
include/unused.h
include/x86/mb_header.h
include/x86/mb_info.h
include/x86/x86-linux.h
kdump/kdump.c
kexec/add_buffer.c
kexec/add_segment.c
kexec/arch/alpha/include/arch/options.h
kexec/arch/arm/crashdump-arm.c
kexec/arch/arm/crashdump-arm.h
kexec/arch/arm/include/arch/options.h
kexec/arch/arm/kexec-arm.c
kexec/arch/arm/kexec-arm.h
kexec/arch/arm/kexec-elf-rel-arm.c
kexec/arch/arm/kexec-uImage-arm.c
kexec/arch/arm/kexec-zImage-arm.c
kexec/arch/arm/phys_to_virt.c
kexec/arch/cris/include/arch/options.h
kexec/arch/cris/kexec-cris.c
kexec/arch/cris/kexec-cris.h
kexec/arch/cris/kexec-elf-cris.c
kexec/arch/cris/kexec-elf-rel-cris.c
kexec/arch/i386/crashdump-x86.c
kexec/arch/i386/crashdump-x86.h
kexec/arch/i386/include/arch/options.h
kexec/arch/i386/kexec-beoboot-x86.c
kexec/arch/i386/kexec-bzImage.c
kexec/arch/i386/kexec-elf-rel-x86.c
kexec/arch/i386/kexec-elf-x86.c
kexec/arch/i386/kexec-multiboot-x86.c
kexec/arch/i386/kexec-nbi.c
kexec/arch/i386/kexec-x86-common.c
kexec/arch/i386/kexec-x86.c
kexec/arch/i386/kexec-x86.h
kexec/arch/i386/x86-linux-setup.c
kexec/arch/i386/x86-linux-setup.h
kexec/arch/ia64/crashdump-ia64.c
kexec/arch/ia64/crashdump-ia64.h
kexec/arch/ia64/include/arch/options.h
kexec/arch/ia64/kexec-elf-ia64.c
kexec/arch/ia64/kexec-elf-rel-ia64.c
kexec/arch/ia64/kexec-ia64.c
kexec/arch/ia64/kexec-ia64.h
kexec/arch/ia64/kexec-iomem.c
kexec/arch/m68k/bootinfo.c
kexec/arch/m68k/include/arch/options.h
kexec/arch/m68k/kexec-elf-m68k.c
kexec/arch/m68k/kexec-elf-rel-m68k.c
kexec/arch/m68k/kexec-m68k.c
kexec/arch/m68k/kexec-m68k.h
kexec/arch/mips/crashdump-mips.c
kexec/arch/mips/crashdump-mips.h
kexec/arch/mips/include/arch/options.h
kexec/arch/mips/kexec-elf-mips.c
kexec/arch/mips/kexec-elf-rel-mips.c
kexec/arch/mips/kexec-mips.c
kexec/arch/mips/kexec-mips.h
kexec/arch/ppc/crashdump-powerpc.c
kexec/arch/ppc/crashdump-powerpc.h
kexec/arch/ppc/fixup_dtb.c
kexec/arch/ppc/fixup_dtb.h
kexec/arch/ppc/fs2dt.c
kexec/arch/ppc/include/arch/options.h
kexec/arch/ppc/include/page.h
kexec/arch/ppc/include/types.h
kexec/arch/ppc/kexec-dol-ppc.c
kexec/arch/ppc/kexec-elf-ppc.c
kexec/arch/ppc/kexec-elf-rel-ppc.c
kexec/arch/ppc/kexec-ppc.c
kexec/arch/ppc/kexec-ppc.h
kexec/arch/ppc/kexec-uImage-ppc.c
kexec/arch/ppc/libfdt-wrapper.c
kexec/arch/ppc/ops.h
kexec/arch/ppc/ppc_asm.h
kexec/arch/ppc64/crashdump-ppc64.c
kexec/arch/ppc64/crashdump-ppc64.h
kexec/arch/ppc64/include/arch/options.h
kexec/arch/ppc64/kexec-elf-ppc64.c
kexec/arch/ppc64/kexec-elf-rel-ppc64.c
kexec/arch/ppc64/kexec-ppc64.c
kexec/arch/ppc64/kexec-ppc64.h
kexec/arch/ppc64/kexec-zImage-ppc64.c
kexec/arch/s390/crashdump-s390.c
kexec/arch/s390/include/arch/options.h
kexec/arch/s390/kexec-elf-rel-s390.c
kexec/arch/s390/kexec-image.c
kexec/arch/s390/kexec-s390.c
kexec/arch/s390/kexec-s390.h
kexec/arch/sh/crashdump-sh.c
kexec/arch/sh/crashdump-sh.h
kexec/arch/sh/include/arch/options.h
kexec/arch/sh/kexec-elf-rel-sh.c
kexec/arch/sh/kexec-elf-sh.c
kexec/arch/sh/kexec-netbsd-sh.c
kexec/arch/sh/kexec-sh.c
kexec/arch/sh/kexec-sh.h
kexec/arch/sh/kexec-uImage-sh.c
kexec/arch/sh/kexec-zImage-sh.c
kexec/arch/x86_64/kexec-bzImage64.c
kexec/arch/x86_64/kexec-elf-rel-x86_64.c
kexec/arch/x86_64/kexec-elf-x86_64.c
kexec/arch/x86_64/kexec-x86_64.c
kexec/arch/x86_64/kexec-x86_64.h
kexec/arch_reuse_initrd.c
kexec/crashdump-elf.c
kexec/crashdump-xen.c
kexec/crashdump.c
kexec/crashdump.h
kexec/firmware_memmap.c
kexec/firmware_memmap.h
kexec/fs2dt.c
kexec/fs2dt.h
kexec/ifdown.c
kexec/kernel_version.c
kexec/kexec-elf-boot.c
kexec/kexec-elf-boot.h
kexec/kexec-elf-core.c
kexec/kexec-elf-exec.c
kexec/kexec-elf-rel.c
kexec/kexec-elf.c
kexec/kexec-elf.h
kexec/kexec-iomem.c
kexec/kexec-lzma.h
kexec/kexec-sha256.h
kexec/kexec-syscall.h
kexec/kexec-uImage.c
kexec/kexec-xen.c
kexec/kexec-zlib.h
kexec/kexec.c
kexec/kexec.h
kexec/libfdt/fdt.c
kexec/libfdt/fdt.h
kexec/libfdt/fdt_ro.c
kexec/libfdt/fdt_rw.c
kexec/libfdt/fdt_strerror.c
kexec/libfdt/fdt_sw.c
kexec/libfdt/fdt_wip.c
kexec/libfdt/libfdt.h
kexec/libfdt/libfdt_env.h
kexec/libfdt/libfdt_internal.h
kexec/lzma.c
kexec/phys_arch.c
kexec/phys_to_virt.c
kexec/proc_iomem.c
kexec/virt_to_phys.c
kexec/zlib.c
purgatory/arch/i386/console-x86.c
purgatory/arch/i386/crashdump_backup.c
purgatory/arch/i386/include/arch/debug.h
purgatory/arch/i386/include/arch/io.h
purgatory/arch/i386/pic.c
purgatory/arch/i386/purgatory-x86.c
purgatory/arch/i386/purgatory-x86.h
purgatory/arch/i386/vga.c
purgatory/arch/ia64/console-ia64.c
purgatory/arch/ia64/io.h
purgatory/arch/ia64/purgatory-ia64.c
purgatory/arch/ia64/purgatory-ia64.h
purgatory/arch/ia64/vga.c
purgatory/arch/mips/console-mips.c
purgatory/arch/mips/purgatory-mips.c
purgatory/arch/mips/purgatory-mips.h
purgatory/arch/ppc/console-ppc.c
purgatory/arch/ppc/ppc_asm.h
purgatory/arch/ppc/purgatory-ppc.c
purgatory/arch/ppc/purgatory-ppc.h
purgatory/arch/ppc64/console-ppc64.c
purgatory/arch/ppc64/crashdump_backup.c
purgatory/arch/ppc64/hvCall.h
purgatory/arch/ppc64/ppc64_asm.h
purgatory/arch/ppc64/purgatory-ppc64.c
purgatory/arch/ppc64/purgatory-ppc64.h
purgatory/arch/s390/console-s390.c
purgatory/arch/s390/purgatory-s390.c
purgatory/arch/x86_64/include/arch/debug.h
purgatory/arch/x86_64/include/arch/io.h
purgatory/arch/x86_64/purgatory-x86_64.c
purgatory/arch/x86_64/purgatory-x86_64.h
purgatory/include/purgatory.h
purgatory/include/string.h
purgatory/printf.c
purgatory/purgatory.c
purgatory/string.c
util/bin-to-hex.c
util_lib/compute_ip_checksum.c
util_lib/include/ip_checksum.h
util_lib/include/sha256.h
util_lib/sha256.c
vmcore-dmesg/vmcore-dmesg.c
